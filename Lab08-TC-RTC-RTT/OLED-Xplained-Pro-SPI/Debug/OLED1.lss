
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000078a4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004078a4  004078a4  000178a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  004078ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000388  204009d0  0040827c  000209d0  2**2
                  ALLOC
  4 .stack        00002000  20400d58  00408604  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20402d58  0040a604  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001f5a2  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000047be  00000000  00000000  0003fff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000821b  00000000  00000000  000447b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c88  00000000  00000000  0004c9d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d98  00000000  00000000  0004d65a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c84f  00000000  00000000  0004e3f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00013055  00000000  00000000  0005ac41  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000958b6  00000000  00000000  0006dc96  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000028d8  00000000  00000000  0010354c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	58 2d 40 20 09 1a 40 00 05 1a 40 00 05 1a 40 00     X-@ ..@...@...@.
  400010:	05 1a 40 00 05 1a 40 00 05 1a 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	d5 07 40 00 05 1a 40 00 00 00 00 00 09 08 40 00     ..@...@.......@.
  40003c:	59 08 40 00 05 1a 40 00 05 1a 40 00 45 21 40 00     Y.@...@...@.E!@.
  40004c:	49 1e 40 00 05 1a 40 00 05 1a 40 00 05 1a 40 00     I.@...@...@...@.
  40005c:	05 1a 40 00 05 1a 40 00 00 00 00 00 69 15 40 00     ..@...@.....i.@.
  40006c:	7d 15 40 00 91 15 40 00 05 1a 40 00 05 1a 40 00     }.@...@...@...@.
  40007c:	05 1a 40 00 a5 15 40 00 b9 15 40 00 05 1a 40 00     ..@...@...@...@.
  40008c:	05 1a 40 00 05 1a 40 00 05 1a 40 00 05 1a 40 00     ..@...@...@...@.
  40009c:	05 1a 40 00 ed 1d 40 00 19 1e 40 00 05 1a 40 00     ..@...@...@...@.
  4000ac:	05 1a 40 00 05 1a 40 00 05 1a 40 00 05 1a 40 00     ..@...@...@...@.
  4000bc:	05 1a 40 00 05 1a 40 00 05 1a 40 00 05 1a 40 00     ..@...@...@...@.
  4000cc:	05 1a 40 00 00 00 00 00 05 1a 40 00 00 00 00 00     ..@.......@.....
  4000dc:	05 1a 40 00 05 1a 40 00 05 1a 40 00 05 1a 40 00     ..@...@...@...@.
  4000ec:	05 1a 40 00 05 1a 40 00 05 1a 40 00 05 1a 40 00     ..@...@...@...@.
  4000fc:	05 1a 40 00 05 1a 40 00 05 1a 40 00 05 1a 40 00     ..@...@...@...@.
  40010c:	05 1a 40 00 05 1a 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 05 1a 40 00 05 1a 40 00 05 1a 40 00     ......@...@...@.
  40012c:	05 1a 40 00 05 1a 40 00 00 00 00 00 05 1a 40 00     ..@...@.......@.
  40013c:	05 1a 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	004078ac 	.word	0x004078ac

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004078ac 	.word	0x004078ac
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	004078ac 	.word	0x004078ac
  4001a8:	00000000 	.word	0x00000000

004001ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4001ac:	b921      	cbnz	r1, 4001b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001ae:	6843      	ldr	r3, [r0, #4]
  4001b0:	f023 0301 	bic.w	r3, r3, #1
  4001b4:	6043      	str	r3, [r0, #4]
  4001b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001b8:	6843      	ldr	r3, [r0, #4]
  4001ba:	f043 0301 	orr.w	r3, r3, #1
  4001be:	6043      	str	r3, [r0, #4]
  4001c0:	4770      	bx	lr

004001c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001c2:	6201      	str	r1, [r0, #32]
  4001c4:	4770      	bx	lr

004001c6 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4001c6:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4001c8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001ca:	6884      	ldr	r4, [r0, #8]
  4001cc:	42a5      	cmp	r5, r4
  4001ce:	d003      	beq.n	4001d8 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4001d0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001d2:	6884      	ldr	r4, [r0, #8]
  4001d4:	42ac      	cmp	r4, r5
  4001d6:	d1fb      	bne.n	4001d0 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4001d8:	b161      	cbz	r1, 4001f4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4001da:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4001de:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4001e2:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4001e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4001ea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4001ee:	bf18      	it	ne
  4001f0:	300c      	addne	r0, #12
  4001f2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4001f4:	b142      	cbz	r2, 400208 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4001f6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4001fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4001fe:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400202:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400206:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400208:	b143      	cbz	r3, 40021c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40020a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40020e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400212:	f004 040f 	and.w	r4, r4, #15
  400216:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40021a:	601c      	str	r4, [r3, #0]
	}
}
  40021c:	bc30      	pop	{r4, r5}
  40021e:	4770      	bx	lr

00400220 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400220:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400222:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400224:	f014 0f01 	tst.w	r4, #1
  400228:	d005      	beq.n	400236 <rtc_set_time+0x16>
  40022a:	290c      	cmp	r1, #12
  40022c:	d903      	bls.n	400236 <rtc_set_time+0x16>
			ul_hour -= 12;
  40022e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400230:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400234:	e000      	b.n	400238 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400236:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400238:	4c1c      	ldr	r4, [pc, #112]	; (4002ac <rtc_set_time+0x8c>)
  40023a:	fba4 5603 	umull	r5, r6, r4, r3
  40023e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400240:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400244:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400248:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40024c:	fba4 6502 	umull	r6, r5, r4, r2
  400250:	08ed      	lsrs	r5, r5, #3
  400252:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400256:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40025a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40025e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400262:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400264:	fba4 4201 	umull	r4, r2, r4, r1
  400268:	08d2      	lsrs	r2, r2, #3
  40026a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40026e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400272:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400276:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40027a:	6983      	ldr	r3, [r0, #24]
  40027c:	f013 0f04 	tst.w	r3, #4
  400280:	d0fb      	beq.n	40027a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400282:	6803      	ldr	r3, [r0, #0]
  400284:	f043 0301 	orr.w	r3, r3, #1
  400288:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40028a:	6983      	ldr	r3, [r0, #24]
  40028c:	f013 0f01 	tst.w	r3, #1
  400290:	d0fb      	beq.n	40028a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400292:	2301      	movs	r3, #1
  400294:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400296:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400298:	6803      	ldr	r3, [r0, #0]
  40029a:	f023 0301 	bic.w	r3, r3, #1
  40029e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4002a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4002a2:	f000 0001 	and.w	r0, r0, #1
  4002a6:	bcf0      	pop	{r4, r5, r6, r7}
  4002a8:	4770      	bx	lr
  4002aa:	bf00      	nop
  4002ac:	cccccccd 	.word	0xcccccccd

004002b0 <rtc_set_time_alarm>:
 */
uint32_t rtc_set_time_alarm(Rtc *p_rtc,
		uint32_t ul_hour_flag, uint32_t ul_hour,
		uint32_t ul_minute_flag, uint32_t ul_minute,
		uint32_t ul_second_flag, uint32_t ul_second)
{
  4002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4002b2:	9c05      	ldr	r4, [sp, #20]
  4002b4:	9d06      	ldr	r5, [sp, #24]
  4002b6:	9f07      	ldr	r7, [sp, #28]
	uint32_t ul_alarm = 0;

	/* Hour alarm setting */
	if (ul_hour_flag) {
  4002b8:	460e      	mov	r6, r1
  4002ba:	b1b1      	cbz	r1, 4002ea <rtc_set_time_alarm+0x3a>
		/* If 12-hour mode, set AMPM bit */
		if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4002bc:	6841      	ldr	r1, [r0, #4]
			if (ul_hour > 12) {
  4002be:	f011 0f01 	tst.w	r1, #1
  4002c2:	d005      	beq.n	4002d0 <rtc_set_time_alarm+0x20>
  4002c4:	2a0c      	cmp	r2, #12
  4002c6:	d903      	bls.n	4002d0 <rtc_set_time_alarm+0x20>
				ul_hour -= 12;
  4002c8:	3a0c      	subs	r2, #12
				ul_alarm |= RTC_TIMR_AMPM;
  4002ca:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  4002ce:	e000      	b.n	4002d2 <rtc_set_time_alarm+0x22>
	uint32_t ul_alarm = 0;
  4002d0:	2600      	movs	r6, #0
			}
		}

		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4002d2:	4919      	ldr	r1, [pc, #100]	; (400338 <rtc_set_time_alarm+0x88>)
  4002d4:	fba1 e102 	umull	lr, r1, r1, r2
  4002d8:	08c9      	lsrs	r1, r1, #3
				((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4002da:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
  4002de:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
  4002e2:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4002e4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  4002e8:	4316      	orrs	r6, r2
	}

	/* Minute alarm setting */
	if (ul_minute_flag) {
  4002ea:	b15b      	cbz	r3, 400304 <rtc_set_time_alarm+0x54>
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002ec:	4b12      	ldr	r3, [pc, #72]	; (400338 <rtc_set_time_alarm+0x88>)
  4002ee:	fba3 2304 	umull	r2, r3, r3, r4
  4002f2:	08db      	lsrs	r3, r3, #3
				((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4002f4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4002f8:	eba4 0442 	sub.w	r4, r4, r2, lsl #1
  4002fc:	0224      	lsls	r4, r4, #8
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002fe:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
  400302:	4326      	orrs	r6, r4
	}

	/* Second alarm setting */
	if (ul_second_flag) {
  400304:	b155      	cbz	r5, 40031c <rtc_set_time_alarm+0x6c>
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400306:	4b0c      	ldr	r3, [pc, #48]	; (400338 <rtc_set_time_alarm+0x88>)
  400308:	fba3 2307 	umull	r2, r3, r3, r7
  40030c:	08db      	lsrs	r3, r3, #3
				((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  40030e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  400312:	eba7 0742 	sub.w	r7, r7, r2, lsl #1
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400316:	ea47 1303 	orr.w	r3, r7, r3, lsl #4
  40031a:	431e      	orrs	r6, r3
	}

	p_rtc->RTC_TIMALR &= ~(RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  40031c:	6902      	ldr	r2, [r0, #16]
  40031e:	4b07      	ldr	r3, [pc, #28]	; (40033c <rtc_set_time_alarm+0x8c>)
  400320:	4013      	ands	r3, r2
  400322:	6103      	str	r3, [r0, #16]
	p_rtc->RTC_TIMALR = ul_alarm;
  400324:	6106      	str	r6, [r0, #16]
	p_rtc->RTC_TIMALR |= (RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  400326:	6902      	ldr	r2, [r0, #16]
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <rtc_set_time_alarm+0x90>)
  40032a:	4313      	orrs	r3, r2
  40032c:	6103      	str	r3, [r0, #16]

	return (p_rtc->RTC_VER & RTC_VER_NVTIMALR);
  40032e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400330:	f000 0004 	and.w	r0, r0, #4
  400334:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400336:	bf00      	nop
  400338:	cccccccd 	.word	0xcccccccd
  40033c:	ff7f7f7f 	.word	0xff7f7f7f
  400340:	00808080 	.word	0x00808080

00400344 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  400344:	b4f0      	push	{r4, r5, r6, r7}
  400346:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  400348:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  40034a:	68c4      	ldr	r4, [r0, #12]
  40034c:	42a5      	cmp	r5, r4
  40034e:	d003      	beq.n	400358 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  400350:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  400352:	68c4      	ldr	r4, [r0, #12]
  400354:	42ac      	cmp	r4, r5
  400356:	d1fb      	bne.n	400350 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  400358:	b199      	cbz	r1, 400382 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40035a:	f3c4 3003 	ubfx	r0, r4, #12, #4
  40035e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400362:	f3c4 2703 	ubfx	r7, r4, #8, #4
  400366:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40036a:	f3c4 1002 	ubfx	r0, r4, #4, #3
  40036e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  400372:	f004 000f 	and.w	r0, r4, #15
  400376:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40037a:	2564      	movs	r5, #100	; 0x64
  40037c:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  400380:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  400382:	b142      	cbz	r2, 400396 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400384:	f3c4 5000 	ubfx	r0, r4, #20, #1
  400388:	0081      	lsls	r1, r0, #2
  40038a:	4408      	add	r0, r1
  40038c:	f3c4 4103 	ubfx	r1, r4, #16, #4
  400390:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  400394:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  400396:	b143      	cbz	r3, 4003aa <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400398:	f3c4 7201 	ubfx	r2, r4, #28, #2
  40039c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4003a0:	f3c4 6103 	ubfx	r1, r4, #24, #4
  4003a4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  4003a8:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  4003aa:	b116      	cbz	r6, 4003b2 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  4003ac:	f3c4 5442 	ubfx	r4, r4, #21, #3
  4003b0:	6034      	str	r4, [r6, #0]
	}
}
  4003b2:	bcf0      	pop	{r4, r5, r6, r7}
  4003b4:	4770      	bx	lr
	...

004003b8 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4003b8:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003ba:	4d2a      	ldr	r5, [pc, #168]	; (400464 <rtc_set_date+0xac>)
  4003bc:	fba5 4603 	umull	r4, r6, r5, r3
  4003c0:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4003c2:	9c03      	ldr	r4, [sp, #12]
  4003c4:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003c6:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4003ca:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4003ce:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003d2:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4003d6:	fba5 6402 	umull	r6, r4, r5, r2
  4003da:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003dc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4003e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4003e4:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003e8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4003ec:	4b1e      	ldr	r3, [pc, #120]	; (400468 <rtc_set_date+0xb0>)
  4003ee:	fba3 4301 	umull	r4, r3, r3, r1
  4003f2:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003f4:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4003f8:	4b1c      	ldr	r3, [pc, #112]	; (40046c <rtc_set_date+0xb4>)
  4003fa:	fba3 4301 	umull	r4, r3, r3, r1
  4003fe:	095b      	lsrs	r3, r3, #5
  400400:	fba5 6403 	umull	r6, r4, r5, r3
  400404:	08e4      	lsrs	r4, r4, #3
  400406:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40040a:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40040e:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400410:	fba5 4301 	umull	r4, r3, r5, r1
  400414:	08db      	lsrs	r3, r3, #3
  400416:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  40041a:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40041e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400422:	fba5 1503 	umull	r1, r5, r5, r3
  400426:	08ed      	lsrs	r5, r5, #3
  400428:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40042c:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400430:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  400434:	6983      	ldr	r3, [r0, #24]
  400436:	f013 0f04 	tst.w	r3, #4
  40043a:	d0fb      	beq.n	400434 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  40043c:	6803      	ldr	r3, [r0, #0]
  40043e:	f043 0302 	orr.w	r3, r3, #2
  400442:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400444:	6983      	ldr	r3, [r0, #24]
  400446:	f013 0f01 	tst.w	r3, #1
  40044a:	d0fb      	beq.n	400444 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40044c:	2301      	movs	r3, #1
  40044e:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400450:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  400452:	6803      	ldr	r3, [r0, #0]
  400454:	f023 0302 	bic.w	r3, r3, #2
  400458:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  40045a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40045c:	f000 0002 	and.w	r0, r0, #2
  400460:	bc70      	pop	{r4, r5, r6}
  400462:	4770      	bx	lr
  400464:	cccccccd 	.word	0xcccccccd
  400468:	10624dd3 	.word	0x10624dd3
  40046c:	51eb851f 	.word	0x51eb851f

00400470 <rtc_set_date_alarm>:
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date_alarm(Rtc *p_rtc,
		uint32_t ul_month_flag, uint32_t ul_month,
		uint32_t ul_day_flag, uint32_t ul_day)
{
  400470:	b430      	push	{r4, r5}
  400472:	9d02      	ldr	r5, [sp, #8]
	uint32_t ul_alarm = 0;

	/* Month alarm setting */
	if (ul_month_flag) {
  400474:	460c      	mov	r4, r1
  400476:	b151      	cbz	r1, 40048e <rtc_set_date_alarm+0x1e>
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400478:	4c12      	ldr	r4, [pc, #72]	; (4004c4 <rtc_set_date_alarm+0x54>)
  40047a:	fba4 1402 	umull	r1, r4, r4, r2
  40047e:	08e4      	lsrs	r4, r4, #3
				((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  400480:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  400484:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
  400488:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40048a:	ea42 5404 	orr.w	r4, r2, r4, lsl #20
	}

	/* Day alarm setting */
	if (ul_day_flag) {
  40048e:	b15b      	cbz	r3, 4004a8 <rtc_set_date_alarm+0x38>
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400490:	4a0c      	ldr	r2, [pc, #48]	; (4004c4 <rtc_set_date_alarm+0x54>)
  400492:	fba2 3205 	umull	r3, r2, r2, r5
  400496:	08d2      	lsrs	r2, r2, #3
				((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  400498:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  40049c:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
  4004a0:	061b      	lsls	r3, r3, #24
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4004a2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
  4004a6:	431c      	orrs	r4, r3
	}

	/* Set alarm */
	p_rtc->RTC_CALALR &= ~(RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  4004a8:	6942      	ldr	r2, [r0, #20]
  4004aa:	4b07      	ldr	r3, [pc, #28]	; (4004c8 <rtc_set_date_alarm+0x58>)
  4004ac:	4013      	ands	r3, r2
  4004ae:	6143      	str	r3, [r0, #20]
	p_rtc->RTC_CALALR = ul_alarm;
  4004b0:	6144      	str	r4, [r0, #20]
	p_rtc->RTC_CALALR |= (RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  4004b2:	6942      	ldr	r2, [r0, #20]
  4004b4:	4b05      	ldr	r3, [pc, #20]	; (4004cc <rtc_set_date_alarm+0x5c>)
  4004b6:	4313      	orrs	r3, r2
  4004b8:	6143      	str	r3, [r0, #20]

	return (p_rtc->RTC_VER & RTC_VER_NVCALALR);
  4004ba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4004bc:	f000 0008 	and.w	r0, r0, #8
  4004c0:	bc30      	pop	{r4, r5}
  4004c2:	4770      	bx	lr
  4004c4:	cccccccd 	.word	0xcccccccd
  4004c8:	7f7fffff 	.word	0x7f7fffff
  4004cc:	80800000 	.word	0x80800000

004004d0 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  4004d0:	6980      	ldr	r0, [r0, #24]
}
  4004d2:	4770      	bx	lr

004004d4 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  4004d4:	61c1      	str	r1, [r0, #28]
  4004d6:	4770      	bx	lr

004004d8 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4004d8:	4b03      	ldr	r3, [pc, #12]	; (4004e8 <rtt_init+0x10>)
  4004da:	681b      	ldr	r3, [r3, #0]
  4004dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4004e0:	4319      	orrs	r1, r3
  4004e2:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4004e4:	2000      	movs	r0, #0
  4004e6:	4770      	bx	lr
  4004e8:	204009ec 	.word	0x204009ec

004004ec <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  4004ec:	b941      	cbnz	r1, 400500 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  4004ee:	4a09      	ldr	r2, [pc, #36]	; (400514 <rtt_sel_source+0x28>)
  4004f0:	6813      	ldr	r3, [r2, #0]
  4004f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  4004f6:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4004f8:	6802      	ldr	r2, [r0, #0]
  4004fa:	4313      	orrs	r3, r2
  4004fc:	6003      	str	r3, [r0, #0]
  4004fe:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400500:	4a04      	ldr	r2, [pc, #16]	; (400514 <rtt_sel_source+0x28>)
  400502:	6813      	ldr	r3, [r2, #0]
  400504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400508:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40050a:	6802      	ldr	r2, [r0, #0]
  40050c:	4313      	orrs	r3, r2
  40050e:	6003      	str	r3, [r0, #0]
  400510:	4770      	bx	lr
  400512:	bf00      	nop
  400514:	204009ec 	.word	0x204009ec

00400518 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  400518:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40051a:	4b03      	ldr	r3, [pc, #12]	; (400528 <rtt_enable_interrupt+0x10>)
  40051c:	681b      	ldr	r3, [r3, #0]
  40051e:	4319      	orrs	r1, r3
  400520:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  400522:	6001      	str	r1, [r0, #0]
  400524:	4770      	bx	lr
  400526:	bf00      	nop
  400528:	204009ec 	.word	0x204009ec

0040052c <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  40052c:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  40052e:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400532:	4b02      	ldr	r3, [pc, #8]	; (40053c <rtt_disable_interrupt+0x10>)
  400534:	681b      	ldr	r3, [r3, #0]
  400536:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  400538:	6001      	str	r1, [r0, #0]
  40053a:	4770      	bx	lr
  40053c:	204009ec 	.word	0x204009ec

00400540 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400540:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400542:	6883      	ldr	r3, [r0, #8]
  400544:	429a      	cmp	r2, r3
  400546:	d003      	beq.n	400550 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  400548:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40054a:	6883      	ldr	r3, [r0, #8]
  40054c:	4293      	cmp	r3, r2
  40054e:	d1fb      	bne.n	400548 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  400550:	4618      	mov	r0, r3
  400552:	4770      	bx	lr

00400554 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400554:	68c0      	ldr	r0, [r0, #12]
}
  400556:	4770      	bx	lr

00400558 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  400558:	b570      	push	{r4, r5, r6, lr}
  40055a:	4606      	mov	r6, r0
  40055c:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  40055e:	6804      	ldr	r4, [r0, #0]
  400560:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400564:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400568:	4809      	ldr	r0, [pc, #36]	; (400590 <rtt_write_alarm_time+0x38>)
  40056a:	4b0a      	ldr	r3, [pc, #40]	; (400594 <rtt_write_alarm_time+0x3c>)
  40056c:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  40056e:	b92d      	cbnz	r5, 40057c <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400570:	f04f 33ff 	mov.w	r3, #4294967295
  400574:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  400576:	b924      	cbnz	r4, 400582 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400578:	2000      	movs	r0, #0
  40057a:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  40057c:	3d01      	subs	r5, #1
  40057e:	6075      	str	r5, [r6, #4]
  400580:	e7f9      	b.n	400576 <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400582:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400586:	4802      	ldr	r0, [pc, #8]	; (400590 <rtt_write_alarm_time+0x38>)
  400588:	4b03      	ldr	r3, [pc, #12]	; (400598 <rtt_write_alarm_time+0x40>)
  40058a:	4798      	blx	r3
  40058c:	e7f4      	b.n	400578 <rtt_write_alarm_time+0x20>
  40058e:	bf00      	nop
  400590:	400e1830 	.word	0x400e1830
  400594:	0040052d 	.word	0x0040052d
  400598:	00400519 	.word	0x00400519

0040059c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  40059c:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40059e:	4b07      	ldr	r3, [pc, #28]	; (4005bc <spi_enable_clock+0x20>)
  4005a0:	4298      	cmp	r0, r3
  4005a2:	d003      	beq.n	4005ac <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4005a4:	4b06      	ldr	r3, [pc, #24]	; (4005c0 <spi_enable_clock+0x24>)
  4005a6:	4298      	cmp	r0, r3
  4005a8:	d004      	beq.n	4005b4 <spi_enable_clock+0x18>
  4005aa:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4005ac:	2015      	movs	r0, #21
  4005ae:	4b05      	ldr	r3, [pc, #20]	; (4005c4 <spi_enable_clock+0x28>)
  4005b0:	4798      	blx	r3
  4005b2:	bd08      	pop	{r3, pc}
  4005b4:	202a      	movs	r0, #42	; 0x2a
  4005b6:	4b03      	ldr	r3, [pc, #12]	; (4005c4 <spi_enable_clock+0x28>)
  4005b8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4005ba:	e7f6      	b.n	4005aa <spi_enable_clock+0xe>
  4005bc:	40008000 	.word	0x40008000
  4005c0:	40058000 	.word	0x40058000
  4005c4:	004016ed 	.word	0x004016ed

004005c8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4005c8:	6843      	ldr	r3, [r0, #4]
  4005ca:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4005ce:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4005d0:	6843      	ldr	r3, [r0, #4]
  4005d2:	0409      	lsls	r1, r1, #16
  4005d4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4005d8:	4319      	orrs	r1, r3
  4005da:	6041      	str	r1, [r0, #4]
  4005dc:	4770      	bx	lr

004005de <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4005de:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4005e0:	f643 2499 	movw	r4, #15001	; 0x3a99
  4005e4:	6905      	ldr	r5, [r0, #16]
  4005e6:	f015 0f02 	tst.w	r5, #2
  4005ea:	d103      	bne.n	4005f4 <spi_write+0x16>
		if (!timeout--) {
  4005ec:	3c01      	subs	r4, #1
  4005ee:	d1f9      	bne.n	4005e4 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4005f0:	2001      	movs	r0, #1
  4005f2:	e00c      	b.n	40060e <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4005f4:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4005f6:	f014 0f02 	tst.w	r4, #2
  4005fa:	d006      	beq.n	40060a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4005fc:	0412      	lsls	r2, r2, #16
  4005fe:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400602:	4311      	orrs	r1, r2
		if (uc_last) {
  400604:	b10b      	cbz	r3, 40060a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400606:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40060a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40060c:	2000      	movs	r0, #0
}
  40060e:	bc30      	pop	{r4, r5}
  400610:	4770      	bx	lr

00400612 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400612:	b932      	cbnz	r2, 400622 <spi_set_clock_polarity+0x10>
  400614:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400618:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40061a:	f023 0301 	bic.w	r3, r3, #1
  40061e:	6303      	str	r3, [r0, #48]	; 0x30
  400620:	4770      	bx	lr
  400622:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400626:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400628:	f043 0301 	orr.w	r3, r3, #1
  40062c:	6303      	str	r3, [r0, #48]	; 0x30
  40062e:	4770      	bx	lr

00400630 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400630:	b932      	cbnz	r2, 400640 <spi_set_clock_phase+0x10>
  400632:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400636:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400638:	f023 0302 	bic.w	r3, r3, #2
  40063c:	6303      	str	r3, [r0, #48]	; 0x30
  40063e:	4770      	bx	lr
  400640:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400644:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400646:	f043 0302 	orr.w	r3, r3, #2
  40064a:	6303      	str	r3, [r0, #48]	; 0x30
  40064c:	4770      	bx	lr

0040064e <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40064e:	2a04      	cmp	r2, #4
  400650:	d003      	beq.n	40065a <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400652:	b16a      	cbz	r2, 400670 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400654:	2a08      	cmp	r2, #8
  400656:	d016      	beq.n	400686 <spi_configure_cs_behavior+0x38>
  400658:	4770      	bx	lr
  40065a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40065e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400660:	f023 0308 	bic.w	r3, r3, #8
  400664:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400666:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400668:	f043 0304 	orr.w	r3, r3, #4
  40066c:	6303      	str	r3, [r0, #48]	; 0x30
  40066e:	4770      	bx	lr
  400670:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400674:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400676:	f023 0308 	bic.w	r3, r3, #8
  40067a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40067c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40067e:	f023 0304 	bic.w	r3, r3, #4
  400682:	6303      	str	r3, [r0, #48]	; 0x30
  400684:	4770      	bx	lr
  400686:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40068a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40068c:	f043 0308 	orr.w	r3, r3, #8
  400690:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  400692:	e7e1      	b.n	400658 <spi_configure_cs_behavior+0xa>

00400694 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400694:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400698:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40069a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40069e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4006a0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4006a2:	431a      	orrs	r2, r3
  4006a4:	630a      	str	r2, [r1, #48]	; 0x30
  4006a6:	4770      	bx	lr

004006a8 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4006a8:	1e43      	subs	r3, r0, #1
  4006aa:	4419      	add	r1, r3
  4006ac:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4006b0:	1e43      	subs	r3, r0, #1
  4006b2:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4006b4:	bf94      	ite	ls
  4006b6:	b200      	sxthls	r0, r0
		return -1;
  4006b8:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4006bc:	4770      	bx	lr

004006be <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4006be:	b17a      	cbz	r2, 4006e0 <spi_set_baudrate_div+0x22>
{
  4006c0:	b410      	push	{r4}
  4006c2:	4614      	mov	r4, r2
  4006c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4006c8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4006ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4006ce:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4006d0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4006d2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4006d6:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4006d8:	2000      	movs	r0, #0
}
  4006da:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006de:	4770      	bx	lr
        return -1;
  4006e0:	f04f 30ff 	mov.w	r0, #4294967295
  4006e4:	4770      	bx	lr

004006e6 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4006e6:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4006e8:	0189      	lsls	r1, r1, #6
  4006ea:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4006ec:	2402      	movs	r4, #2
  4006ee:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4006f0:	f04f 31ff 	mov.w	r1, #4294967295
  4006f4:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4006f6:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4006f8:	605a      	str	r2, [r3, #4]
}
  4006fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006fe:	4770      	bx	lr

00400700 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400700:	0189      	lsls	r1, r1, #6
  400702:	2305      	movs	r3, #5
  400704:	5043      	str	r3, [r0, r1]
  400706:	4770      	bx	lr

00400708 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400708:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40070c:	61ca      	str	r2, [r1, #28]
  40070e:	4770      	bx	lr

00400710 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400710:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400714:	624a      	str	r2, [r1, #36]	; 0x24
  400716:	4770      	bx	lr

00400718 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400718:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  40071c:	6a08      	ldr	r0, [r1, #32]
}
  40071e:	4770      	bx	lr

00400720 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400720:	b4f0      	push	{r4, r5, r6, r7}
  400722:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400724:	2402      	movs	r4, #2
  400726:	9401      	str	r4, [sp, #4]
  400728:	2408      	movs	r4, #8
  40072a:	9402      	str	r4, [sp, #8]
  40072c:	2420      	movs	r4, #32
  40072e:	9403      	str	r4, [sp, #12]
  400730:	2480      	movs	r4, #128	; 0x80
  400732:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400734:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400736:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400738:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40073a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40073e:	d814      	bhi.n	40076a <tc_find_mck_divisor+0x4a>
  400740:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400742:	42a0      	cmp	r0, r4
  400744:	d217      	bcs.n	400776 <tc_find_mck_divisor+0x56>
  400746:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400748:	af01      	add	r7, sp, #4
  40074a:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40074e:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400752:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400754:	4284      	cmp	r4, r0
  400756:	d30a      	bcc.n	40076e <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400758:	4286      	cmp	r6, r0
  40075a:	d90d      	bls.n	400778 <tc_find_mck_divisor+0x58>
			ul_index++) {
  40075c:	3501      	adds	r5, #1
	for (ul_index = 0;
  40075e:	2d05      	cmp	r5, #5
  400760:	d1f3      	bne.n	40074a <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400762:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400764:	b006      	add	sp, #24
  400766:	bcf0      	pop	{r4, r5, r6, r7}
  400768:	4770      	bx	lr
			return 0;
  40076a:	2000      	movs	r0, #0
  40076c:	e7fa      	b.n	400764 <tc_find_mck_divisor+0x44>
  40076e:	2000      	movs	r0, #0
  400770:	e7f8      	b.n	400764 <tc_find_mck_divisor+0x44>
	return 1;
  400772:	2001      	movs	r0, #1
  400774:	e7f6      	b.n	400764 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400776:	2500      	movs	r5, #0
	if (p_uldiv) {
  400778:	b12a      	cbz	r2, 400786 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  40077a:	a906      	add	r1, sp, #24
  40077c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400780:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400784:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400786:	2b00      	cmp	r3, #0
  400788:	d0f3      	beq.n	400772 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  40078a:	601d      	str	r5, [r3, #0]
	return 1;
  40078c:	2001      	movs	r0, #1
  40078e:	e7e9      	b.n	400764 <tc_find_mck_divisor+0x44>

00400790 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  400790:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
  400792:	685a      	ldr	r2, [r3, #4]
  400794:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  400796:	6842      	ldr	r2, [r0, #4]
  400798:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  40079a:	685a      	ldr	r2, [r3, #4]
  40079c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  40079e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  4007a0:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4007a2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4007a4:	6803      	ldr	r3, [r0, #0]
  4007a6:	3301      	adds	r3, #1
  4007a8:	6003      	str	r3, [r0, #0]
  4007aa:	4770      	bx	lr

004007ac <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4007ac:	6843      	ldr	r3, [r0, #4]
  4007ae:	6882      	ldr	r2, [r0, #8]
  4007b0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4007b2:	6883      	ldr	r3, [r0, #8]
  4007b4:	6842      	ldr	r2, [r0, #4]
  4007b6:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  4007b8:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4007ba:	685a      	ldr	r2, [r3, #4]
  4007bc:	4290      	cmp	r0, r2
  4007be:	d006      	beq.n	4007ce <uxListRemove+0x22>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
	}

	pxItemToRemove->pvContainer = NULL;
  4007c0:	2200      	movs	r2, #0
  4007c2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4007c4:	681a      	ldr	r2, [r3, #0]
  4007c6:	3a01      	subs	r2, #1
  4007c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  4007ca:	6818      	ldr	r0, [r3, #0]
}
  4007cc:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4007ce:	6882      	ldr	r2, [r0, #8]
  4007d0:	605a      	str	r2, [r3, #4]
  4007d2:	e7f5      	b.n	4007c0 <uxListRemove+0x14>

004007d4 <SVC_Handler>:
/*-----------------------------------------------------------*/

/*void vPortSVCHandler( void )*/ /* ATMEL */
__attribute__ ((naked)) void SVC_Handler( void )
{
	__asm volatile (
  4007d4:	4b05      	ldr	r3, [pc, #20]	; (4007ec <pxCurrentTCBConst2>)
  4007d6:	6819      	ldr	r1, [r3, #0]
  4007d8:	6808      	ldr	r0, [r1, #0]
  4007da:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4007de:	f380 8809 	msr	PSP, r0
  4007e2:	f04f 0000 	mov.w	r0, #0
  4007e6:	f380 8811 	msr	BASEPRI, r0
  4007ea:	4770      	bx	lr

004007ec <pxCurrentTCBConst2>:
  4007ec:	204009f0 	.word	0x204009f0

004007f0 <ulPortSetInterruptMask>:

/*-----------------------------------------------------------*/

__attribute__((naked)) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile \
  4007f0:	f3ef 8011 	mrs	r0, BASEPRI
  4007f4:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  4007f8:	f381 8811 	msr	BASEPRI, r1
  4007fc:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	 * warnings. */
	return 0;
}
  4007fe:	2000      	movs	r0, #0

00400800 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__((naked)) void vPortClearInterruptMask(
		unsigned long ulNewMaskValue )
{
	__asm volatile \
  400800:	f380 8811 	msr	BASEPRI, r0
  400804:	4770      	bx	lr
	...

00400808 <PendSV_Handler>:
/*void xPortPendSVHandler( void )*/
__attribute__((naked)) void PendSV_Handler( void )   /* ATMEL */
{
	/* This is a naked function. */

	__asm volatile
  400808:	f3ef 8009 	mrs	r0, PSP
  40080c:	4b11      	ldr	r3, [pc, #68]	; (400854 <pxCurrentTCBConst>)
  40080e:	681a      	ldr	r2, [r3, #0]
  400810:	f01e 0f10 	tst.w	lr, #16
  400814:	bf08      	it	eq
  400816:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40081a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40081e:	6010      	str	r0, [r2, #0]
  400820:	e92d 4008 	stmdb	sp!, {r3, lr}
  400824:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  400828:	f380 8811 	msr	BASEPRI, r0
  40082c:	f000 f8bc 	bl	4009a8 <vTaskSwitchContext>
  400830:	f04f 0000 	mov.w	r0, #0
  400834:	f380 8811 	msr	BASEPRI, r0
  400838:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  40083c:	6819      	ldr	r1, [r3, #0]
  40083e:	6808      	ldr	r0, [r1, #0]
  400840:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400844:	f01e 0f10 	tst.w	lr, #16
  400848:	bf08      	it	eq
  40084a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40084e:	f380 8809 	msr	PSP, r0
  400852:	4770      	bx	lr

00400854 <pxCurrentTCBConst>:
  400854:	204009f0 	.word	0x204009f0

00400858 <SysTick_Handler>:
	);
}

/*-----------------------------------------------------------*/
void SysTick_Handler( void ) /* ATMEL */
{
  400858:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40085a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40085e:	4b05      	ldr	r3, [pc, #20]	; (400874 <SysTick_Handler+0x1c>)
  400860:	601a      	str	r2, [r3, #0]
	#endif

	(void)portSET_INTERRUPT_MASK_FROM_ISR();
  400862:	4b05      	ldr	r3, [pc, #20]	; (400878 <SysTick_Handler+0x20>)
  400864:	4798      	blx	r3
	{
		vTaskIncrementTick();
  400866:	4b05      	ldr	r3, [pc, #20]	; (40087c <SysTick_Handler+0x24>)
  400868:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  40086a:	2000      	movs	r0, #0
  40086c:	4b04      	ldr	r3, [pc, #16]	; (400880 <SysTick_Handler+0x28>)
  40086e:	4798      	blx	r3
  400870:	bd08      	pop	{r3, pc}
  400872:	bf00      	nop
  400874:	e000ed04 	.word	0xe000ed04
  400878:	004007f1 	.word	0x004007f1
  40087c:	00400885 	.word	0x00400885
  400880:	00400801 	.word	0x00400801

00400884 <vTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  400884:	4b3c      	ldr	r3, [pc, #240]	; (400978 <vTaskIncrementTick+0xf4>)
  400886:	681b      	ldr	r3, [r3, #0]
  400888:	2b00      	cmp	r3, #0
  40088a:	d16e      	bne.n	40096a <vTaskIncrementTick+0xe6>
{
  40088c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		++xTickCount;
  400890:	4b3a      	ldr	r3, [pc, #232]	; (40097c <vTaskIncrementTick+0xf8>)
  400892:	681a      	ldr	r2, [r3, #0]
  400894:	3201      	adds	r2, #1
  400896:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
  400898:	681b      	ldr	r3, [r3, #0]
  40089a:	b9ab      	cbnz	r3, 4008c8 <vTaskIncrementTick+0x44>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  40089c:	4b38      	ldr	r3, [pc, #224]	; (400980 <vTaskIncrementTick+0xfc>)
  40089e:	681b      	ldr	r3, [r3, #0]
  4008a0:	681b      	ldr	r3, [r3, #0]
  4008a2:	2b00      	cmp	r3, #0
  4008a4:	d128      	bne.n	4008f8 <vTaskIncrementTick+0x74>

			pxTemp = pxDelayedTaskList;
  4008a6:	4b36      	ldr	r3, [pc, #216]	; (400980 <vTaskIncrementTick+0xfc>)
  4008a8:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  4008aa:	4a36      	ldr	r2, [pc, #216]	; (400984 <vTaskIncrementTick+0x100>)
  4008ac:	6810      	ldr	r0, [r2, #0]
  4008ae:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
  4008b0:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
  4008b2:	4935      	ldr	r1, [pc, #212]	; (400988 <vTaskIncrementTick+0x104>)
  4008b4:	680a      	ldr	r2, [r1, #0]
  4008b6:	3201      	adds	r2, #1
  4008b8:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4008ba:	681b      	ldr	r3, [r3, #0]
  4008bc:	681b      	ldr	r3, [r3, #0]
  4008be:	b9fb      	cbnz	r3, 400900 <vTaskIncrementTick+0x7c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  4008c0:	f04f 32ff 	mov.w	r2, #4294967295
  4008c4:	4b31      	ldr	r3, [pc, #196]	; (40098c <vTaskIncrementTick+0x108>)
  4008c6:	601a      	str	r2, [r3, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  4008c8:	4b2c      	ldr	r3, [pc, #176]	; (40097c <vTaskIncrementTick+0xf8>)
  4008ca:	681a      	ldr	r2, [r3, #0]
  4008cc:	4b2f      	ldr	r3, [pc, #188]	; (40098c <vTaskIncrementTick+0x108>)
  4008ce:	681b      	ldr	r3, [r3, #0]
  4008d0:	429a      	cmp	r2, r3
  4008d2:	d34f      	bcc.n	400974 <vTaskIncrementTick+0xf0>
  4008d4:	4b2a      	ldr	r3, [pc, #168]	; (400980 <vTaskIncrementTick+0xfc>)
  4008d6:	681b      	ldr	r3, [r3, #0]
  4008d8:	681b      	ldr	r3, [r3, #0]
  4008da:	b1cb      	cbz	r3, 400910 <vTaskIncrementTick+0x8c>
  4008dc:	4b28      	ldr	r3, [pc, #160]	; (400980 <vTaskIncrementTick+0xfc>)
  4008de:	681b      	ldr	r3, [r3, #0]
  4008e0:	68db      	ldr	r3, [r3, #12]
  4008e2:	68dc      	ldr	r4, [r3, #12]
  4008e4:	6863      	ldr	r3, [r4, #4]
  4008e6:	4a25      	ldr	r2, [pc, #148]	; (40097c <vTaskIncrementTick+0xf8>)
  4008e8:	6812      	ldr	r2, [r2, #0]
  4008ea:	4293      	cmp	r3, r2
  4008ec:	d816      	bhi.n	40091c <vTaskIncrementTick+0x98>
  4008ee:	4e28      	ldr	r6, [pc, #160]	; (400990 <vTaskIncrementTick+0x10c>)
  4008f0:	4f28      	ldr	r7, [pc, #160]	; (400994 <vTaskIncrementTick+0x110>)
  4008f2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4009a4 <vTaskIncrementTick+0x120>
  4008f6:	e02a      	b.n	40094e <vTaskIncrementTick+0xca>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  4008f8:	4b27      	ldr	r3, [pc, #156]	; (400998 <vTaskIncrementTick+0x114>)
  4008fa:	4798      	blx	r3
  4008fc:	bf00      	nop
  4008fe:	e7fd      	b.n	4008fc <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  400900:	4b1f      	ldr	r3, [pc, #124]	; (400980 <vTaskIncrementTick+0xfc>)
  400902:	681b      	ldr	r3, [r3, #0]
  400904:	68db      	ldr	r3, [r3, #12]
  400906:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  400908:	685a      	ldr	r2, [r3, #4]
  40090a:	4b20      	ldr	r3, [pc, #128]	; (40098c <vTaskIncrementTick+0x108>)
  40090c:	601a      	str	r2, [r3, #0]
  40090e:	e7db      	b.n	4008c8 <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
  400910:	f04f 32ff 	mov.w	r2, #4294967295
  400914:	4b1d      	ldr	r3, [pc, #116]	; (40098c <vTaskIncrementTick+0x108>)
  400916:	601a      	str	r2, [r3, #0]
  400918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40091c:	4a1b      	ldr	r2, [pc, #108]	; (40098c <vTaskIncrementTick+0x108>)
  40091e:	6013      	str	r3, [r2, #0]
  400920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400924:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400928:	4629      	mov	r1, r5
  40092a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  40092e:	4b1b      	ldr	r3, [pc, #108]	; (40099c <vTaskIncrementTick+0x118>)
  400930:	4798      	blx	r3
  400932:	4b13      	ldr	r3, [pc, #76]	; (400980 <vTaskIncrementTick+0xfc>)
  400934:	681b      	ldr	r3, [r3, #0]
  400936:	681b      	ldr	r3, [r3, #0]
  400938:	2b00      	cmp	r3, #0
  40093a:	d0e9      	beq.n	400910 <vTaskIncrementTick+0x8c>
  40093c:	4b10      	ldr	r3, [pc, #64]	; (400980 <vTaskIncrementTick+0xfc>)
  40093e:	681b      	ldr	r3, [r3, #0]
  400940:	68db      	ldr	r3, [r3, #12]
  400942:	68dc      	ldr	r4, [r3, #12]
  400944:	6863      	ldr	r3, [r4, #4]
  400946:	4a0d      	ldr	r2, [pc, #52]	; (40097c <vTaskIncrementTick+0xf8>)
  400948:	6812      	ldr	r2, [r2, #0]
  40094a:	4293      	cmp	r3, r2
  40094c:	d8e6      	bhi.n	40091c <vTaskIncrementTick+0x98>
  40094e:	1d25      	adds	r5, r4, #4
  400950:	4628      	mov	r0, r5
  400952:	47b0      	blx	r6
  400954:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  400956:	b113      	cbz	r3, 40095e <vTaskIncrementTick+0xda>
  400958:	f104 0018 	add.w	r0, r4, #24
  40095c:	47b0      	blx	r6
  40095e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  400960:	683b      	ldr	r3, [r7, #0]
  400962:	4298      	cmp	r0, r3
  400964:	d9de      	bls.n	400924 <vTaskIncrementTick+0xa0>
  400966:	6038      	str	r0, [r7, #0]
  400968:	e7dc      	b.n	400924 <vTaskIncrementTick+0xa0>
	}
	else
	{
		++uxMissedTicks;
  40096a:	4a0d      	ldr	r2, [pc, #52]	; (4009a0 <vTaskIncrementTick+0x11c>)
  40096c:	6813      	ldr	r3, [r2, #0]
  40096e:	3301      	adds	r3, #1
  400970:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
  400972:	4770      	bx	lr
  400974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400978:	20400a64 	.word	0x20400a64
  40097c:	20400a74 	.word	0x20400a74
  400980:	204009f4 	.word	0x204009f4
  400984:	204009f8 	.word	0x204009f8
  400988:	20400a70 	.word	0x20400a70
  40098c:	2040000c 	.word	0x2040000c
  400990:	004007ad 	.word	0x004007ad
  400994:	20400a68 	.word	0x20400a68
  400998:	004007f1 	.word	0x004007f1
  40099c:	00400791 	.word	0x00400791
  4009a0:	20400a60 	.word	0x20400a60
  4009a4:	204009fc 	.word	0x204009fc

004009a8 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  4009a8:	4b21      	ldr	r3, [pc, #132]	; (400a30 <vTaskSwitchContext+0x88>)
  4009aa:	681b      	ldr	r3, [r3, #0]
  4009ac:	b9eb      	cbnz	r3, 4009ea <vTaskSwitchContext+0x42>
{
  4009ae:	b510      	push	{r4, lr}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
  4009b0:	4b20      	ldr	r3, [pc, #128]	; (400a34 <vTaskSwitchContext+0x8c>)
  4009b2:	681b      	ldr	r3, [r3, #0]
  4009b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4009b8:	009b      	lsls	r3, r3, #2
  4009ba:	4a1f      	ldr	r2, [pc, #124]	; (400a38 <vTaskSwitchContext+0x90>)
  4009bc:	58d3      	ldr	r3, [r2, r3]
  4009be:	b9c3      	cbnz	r3, 4009f2 <vTaskSwitchContext+0x4a>
  4009c0:	4b1c      	ldr	r3, [pc, #112]	; (400a34 <vTaskSwitchContext+0x8c>)
  4009c2:	681b      	ldr	r3, [r3, #0]
  4009c4:	b16b      	cbz	r3, 4009e2 <vTaskSwitchContext+0x3a>
  4009c6:	4a1b      	ldr	r2, [pc, #108]	; (400a34 <vTaskSwitchContext+0x8c>)
  4009c8:	491b      	ldr	r1, [pc, #108]	; (400a38 <vTaskSwitchContext+0x90>)
  4009ca:	6813      	ldr	r3, [r2, #0]
  4009cc:	3b01      	subs	r3, #1
  4009ce:	6013      	str	r3, [r2, #0]
  4009d0:	6813      	ldr	r3, [r2, #0]
  4009d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4009d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  4009da:	b953      	cbnz	r3, 4009f2 <vTaskSwitchContext+0x4a>
  4009dc:	6813      	ldr	r3, [r2, #0]
  4009de:	2b00      	cmp	r3, #0
  4009e0:	d1f3      	bne.n	4009ca <vTaskSwitchContext+0x22>
  4009e2:	4b16      	ldr	r3, [pc, #88]	; (400a3c <vTaskSwitchContext+0x94>)
  4009e4:	4798      	blx	r3
  4009e6:	bf00      	nop
  4009e8:	e7fd      	b.n	4009e6 <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
  4009ea:	2201      	movs	r2, #1
  4009ec:	4b14      	ldr	r3, [pc, #80]	; (400a40 <vTaskSwitchContext+0x98>)
  4009ee:	601a      	str	r2, [r3, #0]
  4009f0:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4009f2:	4b10      	ldr	r3, [pc, #64]	; (400a34 <vTaskSwitchContext+0x8c>)
  4009f4:	681b      	ldr	r3, [r3, #0]
  4009f6:	4a10      	ldr	r2, [pc, #64]	; (400a38 <vTaskSwitchContext+0x90>)
  4009f8:	0099      	lsls	r1, r3, #2
  4009fa:	18c8      	adds	r0, r1, r3
  4009fc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  400a00:	6844      	ldr	r4, [r0, #4]
  400a02:	6864      	ldr	r4, [r4, #4]
  400a04:	6044      	str	r4, [r0, #4]
  400a06:	4419      	add	r1, r3
  400a08:	4602      	mov	r2, r0
  400a0a:	3208      	adds	r2, #8
  400a0c:	4294      	cmp	r4, r2
  400a0e:	d009      	beq.n	400a24 <vTaskSwitchContext+0x7c>
  400a10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400a14:	4a08      	ldr	r2, [pc, #32]	; (400a38 <vTaskSwitchContext+0x90>)
  400a16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400a1a:	685b      	ldr	r3, [r3, #4]
  400a1c:	68da      	ldr	r2, [r3, #12]
  400a1e:	4b09      	ldr	r3, [pc, #36]	; (400a44 <vTaskSwitchContext+0x9c>)
  400a20:	601a      	str	r2, [r3, #0]
  400a22:	bd10      	pop	{r4, pc}
  400a24:	6860      	ldr	r0, [r4, #4]
  400a26:	4a04      	ldr	r2, [pc, #16]	; (400a38 <vTaskSwitchContext+0x90>)
  400a28:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  400a2c:	6050      	str	r0, [r2, #4]
  400a2e:	e7ef      	b.n	400a10 <vTaskSwitchContext+0x68>
  400a30:	20400a64 	.word	0x20400a64
  400a34:	20400a68 	.word	0x20400a68
  400a38:	204009fc 	.word	0x204009fc
  400a3c:	004007f1 	.word	0x004007f1
  400a40:	20400a6c 	.word	0x20400a6c
  400a44:	204009f0 	.word	0x204009f0

00400a48 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  400a48:	4b01      	ldr	r3, [pc, #4]	; (400a50 <gfx_mono_set_framebuffer+0x8>)
  400a4a:	6018      	str	r0, [r3, #0]
  400a4c:	4770      	bx	lr
  400a4e:	bf00      	nop
  400a50:	20400a78 	.word	0x20400a78

00400a54 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  400a54:	4b02      	ldr	r3, [pc, #8]	; (400a60 <gfx_mono_framebuffer_put_byte+0xc>)
  400a56:	681b      	ldr	r3, [r3, #0]
  400a58:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  400a5c:	5442      	strb	r2, [r0, r1]
  400a5e:	4770      	bx	lr
  400a60:	20400a78 	.word	0x20400a78

00400a64 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400a64:	4b02      	ldr	r3, [pc, #8]	; (400a70 <gfx_mono_framebuffer_get_byte+0xc>)
  400a66:	681b      	ldr	r3, [r3, #0]
  400a68:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  400a6c:	5c40      	ldrb	r0, [r0, r1]
  400a6e:	4770      	bx	lr
  400a70:	20400a78 	.word	0x20400a78

00400a74 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  400a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  400a78:	1884      	adds	r4, r0, r2
  400a7a:	2c80      	cmp	r4, #128	; 0x80
  400a7c:	dd02      	ble.n	400a84 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  400a7e:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  400a82:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  400a84:	b322      	cbz	r2, 400ad0 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  400a86:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  400a88:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  400a8c:	2601      	movs	r6, #1
  400a8e:	fa06 f101 	lsl.w	r1, r6, r1
  400a92:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  400a94:	2b01      	cmp	r3, #1
  400a96:	d01d      	beq.n	400ad4 <gfx_mono_generic_draw_horizontal_line+0x60>
  400a98:	2b00      	cmp	r3, #0
  400a9a:	d035      	beq.n	400b08 <gfx_mono_generic_draw_horizontal_line+0x94>
  400a9c:	2b02      	cmp	r3, #2
  400a9e:	d117      	bne.n	400ad0 <gfx_mono_generic_draw_horizontal_line+0x5c>
  400aa0:	3801      	subs	r0, #1
  400aa2:	b2c7      	uxtb	r7, r0
  400aa4:	19d4      	adds	r4, r2, r7
  400aa6:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400aa8:	f8df a090 	ldr.w	sl, [pc, #144]	; 400b3c <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  400aac:	f04f 0900 	mov.w	r9, #0
  400ab0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400b40 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400ab4:	4621      	mov	r1, r4
  400ab6:	4628      	mov	r0, r5
  400ab8:	47d0      	blx	sl
			temp ^= pixelmask;
  400aba:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400abe:	464b      	mov	r3, r9
  400ac0:	b2d2      	uxtb	r2, r2
  400ac2:	4621      	mov	r1, r4
  400ac4:	4628      	mov	r0, r5
  400ac6:	47c0      	blx	r8
  400ac8:	3c01      	subs	r4, #1
  400aca:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400acc:	42bc      	cmp	r4, r7
  400ace:	d1f1      	bne.n	400ab4 <gfx_mono_generic_draw_horizontal_line+0x40>
  400ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400ad4:	3801      	subs	r0, #1
  400ad6:	b2c7      	uxtb	r7, r0
  400ad8:	19d4      	adds	r4, r2, r7
  400ada:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400adc:	f8df a05c 	ldr.w	sl, [pc, #92]	; 400b3c <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  400ae0:	f04f 0900 	mov.w	r9, #0
  400ae4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400b40 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400ae8:	4621      	mov	r1, r4
  400aea:	4628      	mov	r0, r5
  400aec:	47d0      	blx	sl
			temp |= pixelmask;
  400aee:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400af2:	464b      	mov	r3, r9
  400af4:	b2d2      	uxtb	r2, r2
  400af6:	4621      	mov	r1, r4
  400af8:	4628      	mov	r0, r5
  400afa:	47c0      	blx	r8
  400afc:	3c01      	subs	r4, #1
  400afe:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400b00:	42bc      	cmp	r4, r7
  400b02:	d1f1      	bne.n	400ae8 <gfx_mono_generic_draw_horizontal_line+0x74>
  400b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400b08:	3801      	subs	r0, #1
  400b0a:	b2c7      	uxtb	r7, r0
  400b0c:	19d4      	adds	r4, r2, r7
  400b0e:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400b10:	f8df 8028 	ldr.w	r8, [pc, #40]	; 400b3c <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  400b14:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  400b16:	f8df 9028 	ldr.w	r9, [pc, #40]	; 400b40 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400b1a:	4621      	mov	r1, r4
  400b1c:	4628      	mov	r0, r5
  400b1e:	47c0      	blx	r8
			temp &= ~pixelmask;
  400b20:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400b24:	2300      	movs	r3, #0
  400b26:	b2d2      	uxtb	r2, r2
  400b28:	4621      	mov	r1, r4
  400b2a:	4628      	mov	r0, r5
  400b2c:	47c8      	blx	r9
  400b2e:	3c01      	subs	r4, #1
  400b30:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400b32:	42bc      	cmp	r4, r7
  400b34:	d1f1      	bne.n	400b1a <gfx_mono_generic_draw_horizontal_line+0xa6>
  400b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400b3a:	bf00      	nop
  400b3c:	00400e65 	.word	0x00400e65
  400b40:	00400d61 	.word	0x00400d61

00400b44 <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
	if (length == 0) {
  400b44:	2a00      	cmp	r2, #0
  400b46:	d048      	beq.n	400bda <gfx_mono_generic_draw_vertical_line+0x96>
{
  400b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400b4c:	4614      	mov	r4, r2
  400b4e:	461f      	mov	r7, r3
  400b50:	4606      	mov	r6, r0
		return;
	}

	gfx_coord_t y2 = y + length - 1;
  400b52:	1e4a      	subs	r2, r1, #1
  400b54:	4422      	add	r2, r4
  400b56:	b2d2      	uxtb	r2, r2

	if (y == y2) {
  400b58:	4291      	cmp	r1, r2
  400b5a:	d031      	beq.n	400bc0 <gfx_mono_generic_draw_vertical_line+0x7c>
  400b5c:	2a1f      	cmp	r2, #31
  400b5e:	bf28      	it	cs
  400b60:	221f      	movcs	r2, #31
  400b62:	4615      	mov	r5, r2

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
		y2 = GFX_MONO_LCD_HEIGHT - 1;
	}

	gfx_coord_t y1page = y / 8;
  400b64:	08cc      	lsrs	r4, r1, #3
	gfx_coord_t y2page = y2 / 8;
  400b66:	ea4f 08d2 	mov.w	r8, r2, lsr #3

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
  400b6a:	f001 0207 	and.w	r2, r1, #7
  400b6e:	23ff      	movs	r3, #255	; 0xff
  400b70:	fa03 f202 	lsl.w	r2, r3, r2
  400b74:	b2d2      	uxtb	r2, r2
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
  400b76:	f005 0507 	and.w	r5, r5, #7
  400b7a:	f1c5 0507 	rsb	r5, r5, #7
  400b7e:	fa43 f505 	asr.w	r5, r3, r5
  400b82:	b2ed      	uxtb	r5, r5

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
  400b84:	4544      	cmp	r4, r8
  400b86:	d020      	beq.n	400bca <gfx_mono_generic_draw_vertical_line+0x86>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
  400b88:	463b      	mov	r3, r7
  400b8a:	4601      	mov	r1, r0
  400b8c:	4620      	mov	r0, r4
  400b8e:	f8df 904c 	ldr.w	r9, [pc, #76]	; 400bdc <gfx_mono_generic_draw_vertical_line+0x98>
  400b92:	47c8      	blx	r9

		while (++y1page < y2page) {
  400b94:	3401      	adds	r4, #1
  400b96:	45a0      	cmp	r8, r4
  400b98:	d90a      	bls.n	400bb0 <gfx_mono_generic_draw_vertical_line+0x6c>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
  400b9a:	f04f 0aff 	mov.w	sl, #255	; 0xff
  400b9e:	463b      	mov	r3, r7
  400ba0:	4652      	mov	r2, sl
  400ba2:	4631      	mov	r1, r6
  400ba4:	4620      	mov	r0, r4
  400ba6:	47c8      	blx	r9
		while (++y1page < y2page) {
  400ba8:	3401      	adds	r4, #1
  400baa:	b2e4      	uxtb	r4, r4
  400bac:	45a0      	cmp	r8, r4
  400bae:	d8f6      	bhi.n	400b9e <gfx_mono_generic_draw_vertical_line+0x5a>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
  400bb0:	463b      	mov	r3, r7
  400bb2:	462a      	mov	r2, r5
  400bb4:	4631      	mov	r1, r6
  400bb6:	4640      	mov	r0, r8
  400bb8:	4c08      	ldr	r4, [pc, #32]	; (400bdc <gfx_mono_generic_draw_vertical_line+0x98>)
  400bba:	47a0      	blx	r4
  400bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_draw_pixel(x, y, color);
  400bc0:	461a      	mov	r2, r3
  400bc2:	4b07      	ldr	r3, [pc, #28]	; (400be0 <gfx_mono_generic_draw_vertical_line+0x9c>)
  400bc4:	4798      	blx	r3
		return;
  400bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
  400bca:	463b      	mov	r3, r7
  400bcc:	402a      	ands	r2, r5
  400bce:	4601      	mov	r1, r0
  400bd0:	4620      	mov	r0, r4
  400bd2:	4c02      	ldr	r4, [pc, #8]	; (400bdc <gfx_mono_generic_draw_vertical_line+0x98>)
  400bd4:	47a0      	blx	r4
  400bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400bda:	4770      	bx	lr
  400bdc:	00400e71 	.word	0x00400e71
  400be0:	00400e01 	.word	0x00400e01

00400be4 <gfx_mono_generic_draw_rect>:
 * \param[in] color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  400be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400be8:	4604      	mov	r4, r0
  400bea:	460f      	mov	r7, r1
  400bec:	4616      	mov	r6, r2
  400bee:	4698      	mov	r8, r3
  400bf0:	f89d 5020 	ldrb.w	r5, [sp, #32]
	gfx_mono_draw_horizontal_line(x, y, width, color);
  400bf4:	462b      	mov	r3, r5
  400bf6:	f8df 9034 	ldr.w	r9, [pc, #52]	; 400c2c <gfx_mono_generic_draw_rect+0x48>
  400bfa:	47c8      	blx	r9
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);
  400bfc:	f108 31ff 	add.w	r1, r8, #4294967295
  400c00:	4439      	add	r1, r7
  400c02:	462b      	mov	r3, r5
  400c04:	4632      	mov	r2, r6
  400c06:	b2c9      	uxtb	r1, r1
  400c08:	4620      	mov	r0, r4
  400c0a:	47c8      	blx	r9

	gfx_mono_draw_vertical_line(x, y, height, color);
  400c0c:	462b      	mov	r3, r5
  400c0e:	4642      	mov	r2, r8
  400c10:	4639      	mov	r1, r7
  400c12:	4620      	mov	r0, r4
  400c14:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400c30 <gfx_mono_generic_draw_rect+0x4c>
  400c18:	47c8      	blx	r9
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
  400c1a:	1e70      	subs	r0, r6, #1
  400c1c:	4420      	add	r0, r4
  400c1e:	462b      	mov	r3, r5
  400c20:	4642      	mov	r2, r8
  400c22:	4639      	mov	r1, r7
  400c24:	b2c0      	uxtb	r0, r0
  400c26:	47c8      	blx	r9
  400c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400c2c:	00400a75 	.word	0x00400a75
  400c30:	00400b45 	.word	0x00400b45

00400c34 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  400c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400c38:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  400c3c:	b18b      	cbz	r3, 400c62 <gfx_mono_generic_draw_filled_rect+0x2e>
  400c3e:	461c      	mov	r4, r3
  400c40:	4690      	mov	r8, r2
  400c42:	4606      	mov	r6, r0
  400c44:	1e4d      	subs	r5, r1, #1
  400c46:	b2ed      	uxtb	r5, r5
  400c48:	442c      	add	r4, r5
  400c4a:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  400c4c:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400c68 <gfx_mono_generic_draw_filled_rect+0x34>
  400c50:	463b      	mov	r3, r7
  400c52:	4642      	mov	r2, r8
  400c54:	4621      	mov	r1, r4
  400c56:	4630      	mov	r0, r6
  400c58:	47c8      	blx	r9
  400c5a:	3c01      	subs	r4, #1
  400c5c:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  400c5e:	42ac      	cmp	r4, r5
  400c60:	d1f6      	bne.n	400c50 <gfx_mono_generic_draw_filled_rect+0x1c>
  400c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400c66:	bf00      	nop
  400c68:	00400a75 	.word	0x00400a75

00400c6c <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  400c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c70:	b083      	sub	sp, #12
  400c72:	4604      	mov	r4, r0
  400c74:	4688      	mov	r8, r1
  400c76:	4691      	mov	r9, r2
  400c78:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  400c7a:	7a5b      	ldrb	r3, [r3, #9]
  400c7c:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400c80:	2100      	movs	r1, #0
  400c82:	9100      	str	r1, [sp, #0]
  400c84:	4649      	mov	r1, r9
  400c86:	4640      	mov	r0, r8
  400c88:	4d21      	ldr	r5, [pc, #132]	; (400d10 <gfx_mono_draw_char+0xa4>)
  400c8a:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  400c8c:	f89b 3000 	ldrb.w	r3, [fp]
  400c90:	b113      	cbz	r3, 400c98 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  400c92:	b003      	add	sp, #12
  400c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400c98:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400c9c:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  400c9e:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  400ca2:	bf18      	it	ne
  400ca4:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  400ca6:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  400caa:	f89b 700a 	ldrb.w	r7, [fp, #10]
  400cae:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  400cb0:	fb17 f70a 	smulbb	r7, r7, sl
  400cb4:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400cb8:	f8db 3004 	ldr.w	r3, [fp, #4]
  400cbc:	fa13 f787 	uxtah	r7, r3, r7
  400cc0:	e01f      	b.n	400d02 <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  400cc2:	0064      	lsls	r4, r4, #1
  400cc4:	b2e4      	uxtb	r4, r4
  400cc6:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400cc8:	b2eb      	uxtb	r3, r5
  400cca:	429e      	cmp	r6, r3
  400ccc:	d910      	bls.n	400cf0 <gfx_mono_draw_char+0x84>
  400cce:	b2eb      	uxtb	r3, r5
  400cd0:	eb08 0003 	add.w	r0, r8, r3
  400cd4:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400cd6:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400cda:	bf08      	it	eq
  400cdc:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  400ce0:	f014 0f80 	tst.w	r4, #128	; 0x80
  400ce4:	d0ed      	beq.n	400cc2 <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400ce6:	2201      	movs	r2, #1
  400ce8:	4649      	mov	r1, r9
  400cea:	4b0a      	ldr	r3, [pc, #40]	; (400d14 <gfx_mono_draw_char+0xa8>)
  400cec:	4798      	blx	r3
  400cee:	e7e8      	b.n	400cc2 <gfx_mono_draw_char+0x56>
		inc_y += 1;
  400cf0:	f109 0901 	add.w	r9, r9, #1
  400cf4:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  400cf8:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400cfc:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  400d00:	d0c7      	beq.n	400c92 <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  400d02:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  400d06:	2e00      	cmp	r6, #0
  400d08:	d0f2      	beq.n	400cf0 <gfx_mono_draw_char+0x84>
  400d0a:	2500      	movs	r5, #0
  400d0c:	462c      	mov	r4, r5
  400d0e:	e7de      	b.n	400cce <gfx_mono_draw_char+0x62>
  400d10:	00400c35 	.word	0x00400c35
  400d14:	00400e01 	.word	0x00400e01

00400d18 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400d1c:	4604      	mov	r4, r0
  400d1e:	4690      	mov	r8, r2
  400d20:	461d      	mov	r5, r3
  400d22:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400d24:	4f0d      	ldr	r7, [pc, #52]	; (400d5c <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  400d26:	460e      	mov	r6, r1
  400d28:	e008      	b.n	400d3c <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  400d2a:	7a6a      	ldrb	r2, [r5, #9]
  400d2c:	3201      	adds	r2, #1
  400d2e:	4442      	add	r2, r8
  400d30:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  400d34:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  400d36:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  400d3a:	b16b      	cbz	r3, 400d58 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  400d3c:	7820      	ldrb	r0, [r4, #0]
  400d3e:	280a      	cmp	r0, #10
  400d40:	d0f3      	beq.n	400d2a <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  400d42:	280d      	cmp	r0, #13
  400d44:	d0f7      	beq.n	400d36 <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  400d46:	462b      	mov	r3, r5
  400d48:	4642      	mov	r2, r8
  400d4a:	4649      	mov	r1, r9
  400d4c:	47b8      	blx	r7
			x += font->width;
  400d4e:	7a2b      	ldrb	r3, [r5, #8]
  400d50:	4499      	add	r9, r3
  400d52:	fa5f f989 	uxtb.w	r9, r9
  400d56:	e7ee      	b.n	400d36 <gfx_mono_draw_string+0x1e>
}
  400d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400d5c:	00400c6d 	.word	0x00400c6d

00400d60 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400d60:	b570      	push	{r4, r5, r6, lr}
  400d62:	4604      	mov	r4, r0
  400d64:	460d      	mov	r5, r1
  400d66:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400d68:	b91b      	cbnz	r3, 400d72 <gfx_mono_ssd1306_put_byte+0x12>
  400d6a:	4b0d      	ldr	r3, [pc, #52]	; (400da0 <gfx_mono_ssd1306_put_byte+0x40>)
  400d6c:	4798      	blx	r3
  400d6e:	42b0      	cmp	r0, r6
  400d70:	d015      	beq.n	400d9e <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400d72:	4632      	mov	r2, r6
  400d74:	4629      	mov	r1, r5
  400d76:	4620      	mov	r0, r4
  400d78:	4b0a      	ldr	r3, [pc, #40]	; (400da4 <gfx_mono_ssd1306_put_byte+0x44>)
  400d7a:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400d7c:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400d80:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400d84:	4c08      	ldr	r4, [pc, #32]	; (400da8 <gfx_mono_ssd1306_put_byte+0x48>)
  400d86:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400d88:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400d8c:	f040 0010 	orr.w	r0, r0, #16
  400d90:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400d92:	f005 000f 	and.w	r0, r5, #15
  400d96:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400d98:	4630      	mov	r0, r6
  400d9a:	4b04      	ldr	r3, [pc, #16]	; (400dac <gfx_mono_ssd1306_put_byte+0x4c>)
  400d9c:	4798      	blx	r3
  400d9e:	bd70      	pop	{r4, r5, r6, pc}
  400da0:	00400a65 	.word	0x00400a65
  400da4:	00400a55 	.word	0x00400a55
  400da8:	00400eb5 	.word	0x00400eb5
  400dac:	004010d5 	.word	0x004010d5

00400db0 <gfx_mono_ssd1306_init>:
{
  400db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400db4:	480d      	ldr	r0, [pc, #52]	; (400dec <gfx_mono_ssd1306_init+0x3c>)
  400db6:	4b0e      	ldr	r3, [pc, #56]	; (400df0 <gfx_mono_ssd1306_init+0x40>)
  400db8:	4798      	blx	r3
	ssd1306_init();
  400dba:	4b0e      	ldr	r3, [pc, #56]	; (400df4 <gfx_mono_ssd1306_init+0x44>)
  400dbc:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400dbe:	2040      	movs	r0, #64	; 0x40
  400dc0:	4b0d      	ldr	r3, [pc, #52]	; (400df8 <gfx_mono_ssd1306_init+0x48>)
  400dc2:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400dc4:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400dc6:	f04f 0801 	mov.w	r8, #1
  400dca:	462f      	mov	r7, r5
  400dcc:	4e0b      	ldr	r6, [pc, #44]	; (400dfc <gfx_mono_ssd1306_init+0x4c>)
{
  400dce:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400dd0:	4643      	mov	r3, r8
  400dd2:	463a      	mov	r2, r7
  400dd4:	b2e1      	uxtb	r1, r4
  400dd6:	4628      	mov	r0, r5
  400dd8:	47b0      	blx	r6
  400dda:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400ddc:	2c80      	cmp	r4, #128	; 0x80
  400dde:	d1f7      	bne.n	400dd0 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400de0:	3501      	adds	r5, #1
  400de2:	b2ed      	uxtb	r5, r5
  400de4:	2d04      	cmp	r5, #4
  400de6:	d1f2      	bne.n	400dce <gfx_mono_ssd1306_init+0x1e>
  400de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400dec:	20400a7c 	.word	0x20400a7c
  400df0:	00400a49 	.word	0x00400a49
  400df4:	00400ef5 	.word	0x00400ef5
  400df8:	00400eb5 	.word	0x00400eb5
  400dfc:	00400d61 	.word	0x00400d61

00400e00 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400e00:	09c3      	lsrs	r3, r0, #7
  400e02:	d12a      	bne.n	400e5a <gfx_mono_ssd1306_draw_pixel+0x5a>
  400e04:	291f      	cmp	r1, #31
  400e06:	d828      	bhi.n	400e5a <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400e0c:	4614      	mov	r4, r2
  400e0e:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400e10:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400e12:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400e16:	2201      	movs	r2, #1
  400e18:	fa02 f701 	lsl.w	r7, r2, r1
  400e1c:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400e20:	4601      	mov	r1, r0
  400e22:	4630      	mov	r0, r6
  400e24:	4b0d      	ldr	r3, [pc, #52]	; (400e5c <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400e26:	4798      	blx	r3
  400e28:	4602      	mov	r2, r0
	switch (color) {
  400e2a:	2c01      	cmp	r4, #1
  400e2c:	d009      	beq.n	400e42 <gfx_mono_ssd1306_draw_pixel+0x42>
  400e2e:	b164      	cbz	r4, 400e4a <gfx_mono_ssd1306_draw_pixel+0x4a>
  400e30:	2c02      	cmp	r4, #2
  400e32:	d00e      	beq.n	400e52 <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400e34:	2300      	movs	r3, #0
  400e36:	4629      	mov	r1, r5
  400e38:	4630      	mov	r0, r6
  400e3a:	4c09      	ldr	r4, [pc, #36]	; (400e60 <gfx_mono_ssd1306_draw_pixel+0x60>)
  400e3c:	47a0      	blx	r4
  400e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400e42:	ea48 0200 	orr.w	r2, r8, r0
  400e46:	b2d2      	uxtb	r2, r2
		break;
  400e48:	e7f4      	b.n	400e34 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  400e4a:	ea20 0207 	bic.w	r2, r0, r7
  400e4e:	b2d2      	uxtb	r2, r2
		break;
  400e50:	e7f0      	b.n	400e34 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400e52:	ea88 0200 	eor.w	r2, r8, r0
  400e56:	b2d2      	uxtb	r2, r2
		break;
  400e58:	e7ec      	b.n	400e34 <gfx_mono_ssd1306_draw_pixel+0x34>
  400e5a:	4770      	bx	lr
  400e5c:	00400a65 	.word	0x00400a65
  400e60:	00400d61 	.word	0x00400d61

00400e64 <gfx_mono_ssd1306_get_byte>:
{
  400e64:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400e66:	4b01      	ldr	r3, [pc, #4]	; (400e6c <gfx_mono_ssd1306_get_byte+0x8>)
  400e68:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400e6a:	bd08      	pop	{r3, pc}
  400e6c:	00400a65 	.word	0x00400a65

00400e70 <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
  400e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e72:	4605      	mov	r5, r0
  400e74:	460e      	mov	r6, r1
  400e76:	4617      	mov	r7, r2
  400e78:	461c      	mov	r4, r3
	return gfx_mono_framebuffer_get_byte(page, column);
  400e7a:	4b0c      	ldr	r3, [pc, #48]	; (400eac <gfx_mono_ssd1306_mask_byte+0x3c>)
  400e7c:	4798      	blx	r3
  400e7e:	4602      	mov	r2, r0
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);

	switch (color) {
  400e80:	2c01      	cmp	r4, #1
  400e82:	d008      	beq.n	400e96 <gfx_mono_ssd1306_mask_byte+0x26>
  400e84:	b154      	cbz	r4, 400e9c <gfx_mono_ssd1306_mask_byte+0x2c>
  400e86:	2c02      	cmp	r4, #2
  400e88:	d00c      	beq.n	400ea4 <gfx_mono_ssd1306_mask_byte+0x34>

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
  400e8a:	2300      	movs	r3, #0
  400e8c:	4631      	mov	r1, r6
  400e8e:	4628      	mov	r0, r5
  400e90:	4c07      	ldr	r4, [pc, #28]	; (400eb0 <gfx_mono_ssd1306_mask_byte+0x40>)
  400e92:	47a0      	blx	r4
  400e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp |= pixel_mask;
  400e96:	433a      	orrs	r2, r7
  400e98:	b2d2      	uxtb	r2, r2
		break;
  400e9a:	e7f6      	b.n	400e8a <gfx_mono_ssd1306_mask_byte+0x1a>
		temp &= ~pixel_mask;
  400e9c:	ea20 0207 	bic.w	r2, r0, r7
  400ea0:	b2d2      	uxtb	r2, r2
		break;
  400ea2:	e7f2      	b.n	400e8a <gfx_mono_ssd1306_mask_byte+0x1a>
		temp ^= pixel_mask;
  400ea4:	407a      	eors	r2, r7
  400ea6:	b2d2      	uxtb	r2, r2
		break;
  400ea8:	e7ef      	b.n	400e8a <gfx_mono_ssd1306_mask_byte+0x1a>
  400eaa:	bf00      	nop
  400eac:	00400a65 	.word	0x00400a65
  400eb0:	00400d61 	.word	0x00400d61

00400eb4 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400eb4:	b538      	push	{r3, r4, r5, lr}
  400eb6:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400eb8:	2208      	movs	r2, #8
  400eba:	4b09      	ldr	r3, [pc, #36]	; (400ee0 <ssd1306_write_command+0x2c>)
  400ebc:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400ebe:	4c09      	ldr	r4, [pc, #36]	; (400ee4 <ssd1306_write_command+0x30>)
  400ec0:	2101      	movs	r1, #1
  400ec2:	4620      	mov	r0, r4
  400ec4:	4b08      	ldr	r3, [pc, #32]	; (400ee8 <ssd1306_write_command+0x34>)
  400ec6:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400ec8:	2301      	movs	r3, #1
  400eca:	461a      	mov	r2, r3
  400ecc:	4629      	mov	r1, r5
  400ece:	4620      	mov	r0, r4
  400ed0:	4c06      	ldr	r4, [pc, #24]	; (400eec <ssd1306_write_command+0x38>)
  400ed2:	47a0      	blx	r4
	delay_us(10);
  400ed4:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400ed8:	4b05      	ldr	r3, [pc, #20]	; (400ef0 <ssd1306_write_command+0x3c>)
  400eda:	4798      	blx	r3
  400edc:	bd38      	pop	{r3, r4, r5, pc}
  400ede:	bf00      	nop
  400ee0:	400e1000 	.word	0x400e1000
  400ee4:	40008000 	.word	0x40008000
  400ee8:	004005c9 	.word	0x004005c9
  400eec:	004005df 	.word	0x004005df
  400ef0:	20400001 	.word	0x20400001

00400ef4 <ssd1306_init>:
{
  400ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400ef8:	4d66      	ldr	r5, [pc, #408]	; (401094 <ssd1306_init+0x1a0>)
  400efa:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400efe:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400f00:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400f04:	4b64      	ldr	r3, [pc, #400]	; (401098 <ssd1306_init+0x1a4>)
  400f06:	2708      	movs	r7, #8
  400f08:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400f0a:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400f0e:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400f10:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f14:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400f16:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400f18:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400f1c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400f1e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400f22:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400f24:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400f26:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400f2a:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400f2c:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400f2e:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f32:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400f34:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400f36:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400f3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400f3c:	f022 0208 	bic.w	r2, r2, #8
  400f40:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400f42:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400f44:	f022 0208 	bic.w	r2, r2, #8
  400f48:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400f4a:	601f      	str	r7, [r3, #0]
  400f4c:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400f4e:	631f      	str	r7, [r3, #48]	; 0x30
  400f50:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400f52:	f8df 817c 	ldr.w	r8, [pc, #380]	; 4010d0 <ssd1306_init+0x1dc>
  400f56:	2300      	movs	r3, #0
  400f58:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400f5c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400f60:	4640      	mov	r0, r8
  400f62:	4c4e      	ldr	r4, [pc, #312]	; (40109c <ssd1306_init+0x1a8>)
  400f64:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400f66:	2300      	movs	r3, #0
  400f68:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400f6c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400f70:	4640      	mov	r0, r8
  400f72:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400f74:	2300      	movs	r3, #0
  400f76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400f7a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400f7e:	4640      	mov	r0, r8
  400f80:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400f82:	2300      	movs	r3, #0
  400f84:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400f88:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400f8c:	4640      	mov	r0, r8
  400f8e:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400f90:	2300      	movs	r3, #0
  400f92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400f96:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400f9a:	4640      	mov	r0, r8
  400f9c:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400f9e:	2300      	movs	r3, #0
  400fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400fa4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400fa8:	4640      	mov	r0, r8
  400faa:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400fac:	4c3c      	ldr	r4, [pc, #240]	; (4010a0 <ssd1306_init+0x1ac>)
  400fae:	f04f 0902 	mov.w	r9, #2
  400fb2:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400fb6:	f04f 0880 	mov.w	r8, #128	; 0x80
  400fba:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400fbe:	6863      	ldr	r3, [r4, #4]
  400fc0:	f043 0301 	orr.w	r3, r3, #1
  400fc4:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400fc6:	463a      	mov	r2, r7
  400fc8:	2101      	movs	r1, #1
  400fca:	4620      	mov	r0, r4
  400fcc:	4b35      	ldr	r3, [pc, #212]	; (4010a4 <ssd1306_init+0x1b0>)
  400fce:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400fd0:	2200      	movs	r2, #0
  400fd2:	2101      	movs	r1, #1
  400fd4:	4620      	mov	r0, r4
  400fd6:	4b34      	ldr	r3, [pc, #208]	; (4010a8 <ssd1306_init+0x1b4>)
  400fd8:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400fda:	2200      	movs	r2, #0
  400fdc:	2101      	movs	r1, #1
  400fde:	4620      	mov	r0, r4
  400fe0:	4b32      	ldr	r3, [pc, #200]	; (4010ac <ssd1306_init+0x1b8>)
  400fe2:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400fe4:	6863      	ldr	r3, [r4, #4]
  400fe6:	f023 0302 	bic.w	r3, r3, #2
  400fea:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400fec:	2200      	movs	r2, #0
  400fee:	2101      	movs	r1, #1
  400ff0:	4620      	mov	r0, r4
  400ff2:	4b2f      	ldr	r3, [pc, #188]	; (4010b0 <ssd1306_init+0x1bc>)
  400ff4:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400ff6:	6863      	ldr	r3, [r4, #4]
  400ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400ffc:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400ffe:	6863      	ldr	r3, [r4, #4]
  401000:	f043 0310 	orr.w	r3, r3, #16
  401004:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  401006:	492b      	ldr	r1, [pc, #172]	; (4010b4 <ssd1306_init+0x1c0>)
  401008:	482b      	ldr	r0, [pc, #172]	; (4010b8 <ssd1306_init+0x1c4>)
  40100a:	4b2c      	ldr	r3, [pc, #176]	; (4010bc <ssd1306_init+0x1c8>)
  40100c:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  40100e:	b2c2      	uxtb	r2, r0
  401010:	2101      	movs	r1, #1
  401012:	4620      	mov	r0, r4
  401014:	4b2a      	ldr	r3, [pc, #168]	; (4010c0 <ssd1306_init+0x1cc>)
  401016:	4798      	blx	r3
		spi_enable_clock(SPI0);
  401018:	4620      	mov	r0, r4
  40101a:	4b2a      	ldr	r3, [pc, #168]	; (4010c4 <ssd1306_init+0x1d0>)
  40101c:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40101e:	2301      	movs	r3, #1
  401020:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401022:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  401024:	f640 30b8 	movw	r0, #3000	; 0xbb8
  401028:	4c27      	ldr	r4, [pc, #156]	; (4010c8 <ssd1306_init+0x1d4>)
  40102a:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40102c:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  40102e:	f640 30b8 	movw	r0, #3000	; 0xbb8
  401032:	47a0      	blx	r4
  401034:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  401036:	20a8      	movs	r0, #168	; 0xa8
  401038:	4c24      	ldr	r4, [pc, #144]	; (4010cc <ssd1306_init+0x1d8>)
  40103a:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  40103c:	201f      	movs	r0, #31
  40103e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  401040:	20d3      	movs	r0, #211	; 0xd3
  401042:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  401044:	2000      	movs	r0, #0
  401046:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  401048:	2040      	movs	r0, #64	; 0x40
  40104a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  40104c:	20a1      	movs	r0, #161	; 0xa1
  40104e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  401050:	20c8      	movs	r0, #200	; 0xc8
  401052:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  401054:	20da      	movs	r0, #218	; 0xda
  401056:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  401058:	4648      	mov	r0, r9
  40105a:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  40105c:	2081      	movs	r0, #129	; 0x81
  40105e:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  401060:	208f      	movs	r0, #143	; 0x8f
  401062:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  401064:	20a4      	movs	r0, #164	; 0xa4
  401066:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  401068:	20a6      	movs	r0, #166	; 0xa6
  40106a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  40106c:	20d5      	movs	r0, #213	; 0xd5
  40106e:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  401070:	4640      	mov	r0, r8
  401072:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  401074:	208d      	movs	r0, #141	; 0x8d
  401076:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  401078:	2014      	movs	r0, #20
  40107a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  40107c:	20db      	movs	r0, #219	; 0xdb
  40107e:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  401080:	2040      	movs	r0, #64	; 0x40
  401082:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  401084:	20d9      	movs	r0, #217	; 0xd9
  401086:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  401088:	20f1      	movs	r0, #241	; 0xf1
  40108a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  40108c:	20af      	movs	r0, #175	; 0xaf
  40108e:	47a0      	blx	r4
  401090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401094:	400e1200 	.word	0x400e1200
  401098:	400e1000 	.word	0x400e1000
  40109c:	004013d9 	.word	0x004013d9
  4010a0:	40008000 	.word	0x40008000
  4010a4:	0040064f 	.word	0x0040064f
  4010a8:	00400613 	.word	0x00400613
  4010ac:	00400631 	.word	0x00400631
  4010b0:	00400695 	.word	0x00400695
  4010b4:	08f0d180 	.word	0x08f0d180
  4010b8:	001e8480 	.word	0x001e8480
  4010bc:	004006a9 	.word	0x004006a9
  4010c0:	004006bf 	.word	0x004006bf
  4010c4:	0040059d 	.word	0x0040059d
  4010c8:	20400001 	.word	0x20400001
  4010cc:	00400eb5 	.word	0x00400eb5
  4010d0:	400e1400 	.word	0x400e1400

004010d4 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  4010d4:	b538      	push	{r3, r4, r5, lr}
  4010d6:	4605      	mov	r5, r0
  4010d8:	2208      	movs	r2, #8
  4010da:	4b09      	ldr	r3, [pc, #36]	; (401100 <ssd1306_write_data+0x2c>)
  4010dc:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4010de:	4c09      	ldr	r4, [pc, #36]	; (401104 <ssd1306_write_data+0x30>)
  4010e0:	2101      	movs	r1, #1
  4010e2:	4620      	mov	r0, r4
  4010e4:	4b08      	ldr	r3, [pc, #32]	; (401108 <ssd1306_write_data+0x34>)
  4010e6:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  4010e8:	2301      	movs	r3, #1
  4010ea:	461a      	mov	r2, r3
  4010ec:	4629      	mov	r1, r5
  4010ee:	4620      	mov	r0, r4
  4010f0:	4c06      	ldr	r4, [pc, #24]	; (40110c <ssd1306_write_data+0x38>)
  4010f2:	47a0      	blx	r4
	delay_us(10);
  4010f4:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  4010f8:	4b05      	ldr	r3, [pc, #20]	; (401110 <ssd1306_write_data+0x3c>)
  4010fa:	4798      	blx	r3
  4010fc:	bd38      	pop	{r3, r4, r5, pc}
  4010fe:	bf00      	nop
  401100:	400e1000 	.word	0x400e1000
  401104:	40008000 	.word	0x40008000
  401108:	004005c9 	.word	0x004005c9
  40110c:	004005df 	.word	0x004005df
  401110:	20400001 	.word	0x20400001

00401114 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401114:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401116:	4810      	ldr	r0, [pc, #64]	; (401158 <sysclk_init+0x44>)
  401118:	4b10      	ldr	r3, [pc, #64]	; (40115c <sysclk_init+0x48>)
  40111a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40111c:	213e      	movs	r1, #62	; 0x3e
  40111e:	2000      	movs	r0, #0
  401120:	4b0f      	ldr	r3, [pc, #60]	; (401160 <sysclk_init+0x4c>)
  401122:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401124:	4c0f      	ldr	r4, [pc, #60]	; (401164 <sysclk_init+0x50>)
  401126:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401128:	2800      	cmp	r0, #0
  40112a:	d0fc      	beq.n	401126 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40112c:	4b0e      	ldr	r3, [pc, #56]	; (401168 <sysclk_init+0x54>)
  40112e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401130:	4a0e      	ldr	r2, [pc, #56]	; (40116c <sysclk_init+0x58>)
  401132:	4b0f      	ldr	r3, [pc, #60]	; (401170 <sysclk_init+0x5c>)
  401134:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401136:	4c0f      	ldr	r4, [pc, #60]	; (401174 <sysclk_init+0x60>)
  401138:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40113a:	2800      	cmp	r0, #0
  40113c:	d0fc      	beq.n	401138 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40113e:	2002      	movs	r0, #2
  401140:	4b0d      	ldr	r3, [pc, #52]	; (401178 <sysclk_init+0x64>)
  401142:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401144:	2000      	movs	r0, #0
  401146:	4b0d      	ldr	r3, [pc, #52]	; (40117c <sysclk_init+0x68>)
  401148:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40114a:	4b0d      	ldr	r3, [pc, #52]	; (401180 <sysclk_init+0x6c>)
  40114c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40114e:	4802      	ldr	r0, [pc, #8]	; (401158 <sysclk_init+0x44>)
  401150:	4b02      	ldr	r3, [pc, #8]	; (40115c <sysclk_init+0x48>)
  401152:	4798      	blx	r3
  401154:	bd10      	pop	{r4, pc}
  401156:	bf00      	nop
  401158:	11e1a300 	.word	0x11e1a300
  40115c:	00401bdd 	.word	0x00401bdd
  401160:	00401669 	.word	0x00401669
  401164:	004016bd 	.word	0x004016bd
  401168:	004016cd 	.word	0x004016cd
  40116c:	20183f01 	.word	0x20183f01
  401170:	400e0600 	.word	0x400e0600
  401174:	004016dd 	.word	0x004016dd
  401178:	004015cd 	.word	0x004015cd
  40117c:	00401605 	.word	0x00401605
  401180:	00401ad1 	.word	0x00401ad1

00401184 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  401184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401186:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40118a:	4b48      	ldr	r3, [pc, #288]	; (4012ac <board_init+0x128>)
  40118c:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40118e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401192:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401196:	4b46      	ldr	r3, [pc, #280]	; (4012b0 <board_init+0x12c>)
  401198:	2200      	movs	r2, #0
  40119a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40119e:	695a      	ldr	r2, [r3, #20]
  4011a0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4011a4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4011a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4011aa:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4011ae:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4011b2:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4011b6:	f007 0007 	and.w	r0, r7, #7
  4011ba:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4011bc:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4011c0:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4011c4:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4011c8:	f3bf 8f4f 	dsb	sy
  4011cc:	f04f 34ff 	mov.w	r4, #4294967295
  4011d0:	fa04 fc00 	lsl.w	ip, r4, r0
  4011d4:	fa06 f000 	lsl.w	r0, r6, r0
  4011d8:	fa04 f40e 	lsl.w	r4, r4, lr
  4011dc:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4011e0:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4011e2:	463a      	mov	r2, r7
  4011e4:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4011e6:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4011ea:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4011ee:	3a01      	subs	r2, #1
  4011f0:	4423      	add	r3, r4
  4011f2:	f1b2 3fff 	cmp.w	r2, #4294967295
  4011f6:	d1f6      	bne.n	4011e6 <board_init+0x62>
        } while(sets--);
  4011f8:	3e01      	subs	r6, #1
  4011fa:	4460      	add	r0, ip
  4011fc:	f1b6 3fff 	cmp.w	r6, #4294967295
  401200:	d1ef      	bne.n	4011e2 <board_init+0x5e>
  401202:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  401206:	4b2a      	ldr	r3, [pc, #168]	; (4012b0 <board_init+0x12c>)
  401208:	695a      	ldr	r2, [r3, #20]
  40120a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40120e:	615a      	str	r2, [r3, #20]
  401210:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401214:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401218:	4a26      	ldr	r2, [pc, #152]	; (4012b4 <board_init+0x130>)
  40121a:	4927      	ldr	r1, [pc, #156]	; (4012b8 <board_init+0x134>)
  40121c:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40121e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  401222:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  401224:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401228:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40122c:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  401230:	f022 0201 	bic.w	r2, r2, #1
  401234:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401238:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  40123c:	f022 0201 	bic.w	r2, r2, #1
  401240:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  401244:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401248:	f3bf 8f6f 	isb	sy
  40124c:	200a      	movs	r0, #10
  40124e:	4c1b      	ldr	r4, [pc, #108]	; (4012bc <board_init+0x138>)
  401250:	47a0      	blx	r4
  401252:	200b      	movs	r0, #11
  401254:	47a0      	blx	r4
  401256:	200c      	movs	r0, #12
  401258:	47a0      	blx	r4
  40125a:	2010      	movs	r0, #16
  40125c:	47a0      	blx	r4
  40125e:	2011      	movs	r0, #17
  401260:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401262:	4b17      	ldr	r3, [pc, #92]	; (4012c0 <board_init+0x13c>)
  401264:	f44f 7280 	mov.w	r2, #256	; 0x100
  401268:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40126a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40126e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401270:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  401274:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401278:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40127a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40127e:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401280:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401284:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  401286:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  401288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40128c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40128e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  401292:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401294:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401296:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40129a:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40129c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4012a0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4012a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  4012a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4012aa:	bf00      	nop
  4012ac:	400e1850 	.word	0x400e1850
  4012b0:	e000ed00 	.word	0xe000ed00
  4012b4:	400e0c00 	.word	0x400e0c00
  4012b8:	5a00080c 	.word	0x5a00080c
  4012bc:	004016ed 	.word	0x004016ed
  4012c0:	400e1200 	.word	0x400e1200

004012c4 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  4012c4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  4012c8:	0053      	lsls	r3, r2, #1
  4012ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4012ce:	fbb2 f2f3 	udiv	r2, r2, r3
  4012d2:	3a01      	subs	r2, #1
  4012d4:	f3c2 020d 	ubfx	r2, r2, #0, #14
  4012d8:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  4012dc:	4770      	bx	lr

004012de <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4012de:	6301      	str	r1, [r0, #48]	; 0x30
  4012e0:	4770      	bx	lr

004012e2 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  4012e2:	6341      	str	r1, [r0, #52]	; 0x34
  4012e4:	4770      	bx	lr

004012e6 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4012e6:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4012e8:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4012ec:	d03a      	beq.n	401364 <pio_set_peripheral+0x7e>
  4012ee:	d813      	bhi.n	401318 <pio_set_peripheral+0x32>
  4012f0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4012f4:	d025      	beq.n	401342 <pio_set_peripheral+0x5c>
  4012f6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4012fa:	d10a      	bne.n	401312 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4012fc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4012fe:	4313      	orrs	r3, r2
  401300:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401302:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401304:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401306:	400b      	ands	r3, r1
  401308:	ea23 0302 	bic.w	r3, r3, r2
  40130c:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40130e:	6042      	str	r2, [r0, #4]
  401310:	4770      	bx	lr
	switch (ul_type) {
  401312:	2900      	cmp	r1, #0
  401314:	d1fb      	bne.n	40130e <pio_set_peripheral+0x28>
  401316:	4770      	bx	lr
  401318:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40131c:	d021      	beq.n	401362 <pio_set_peripheral+0x7c>
  40131e:	d809      	bhi.n	401334 <pio_set_peripheral+0x4e>
  401320:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401324:	d1f3      	bne.n	40130e <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401326:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401328:	4313      	orrs	r3, r2
  40132a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40132c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40132e:	4313      	orrs	r3, r2
  401330:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401332:	e7ec      	b.n	40130e <pio_set_peripheral+0x28>
	switch (ul_type) {
  401334:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401338:	d013      	beq.n	401362 <pio_set_peripheral+0x7c>
  40133a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40133e:	d010      	beq.n	401362 <pio_set_peripheral+0x7c>
  401340:	e7e5      	b.n	40130e <pio_set_peripheral+0x28>
{
  401342:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401344:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401346:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401348:	43d3      	mvns	r3, r2
  40134a:	4021      	ands	r1, r4
  40134c:	461c      	mov	r4, r3
  40134e:	4019      	ands	r1, r3
  401350:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401352:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401354:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401356:	400b      	ands	r3, r1
  401358:	4023      	ands	r3, r4
  40135a:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40135c:	6042      	str	r2, [r0, #4]
}
  40135e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401362:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401364:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401366:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401368:	400b      	ands	r3, r1
  40136a:	ea23 0302 	bic.w	r3, r3, r2
  40136e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401370:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401372:	4313      	orrs	r3, r2
  401374:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401376:	e7ca      	b.n	40130e <pio_set_peripheral+0x28>

00401378 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401378:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40137a:	f012 0f01 	tst.w	r2, #1
  40137e:	d10d      	bne.n	40139c <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  401380:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401382:	f012 0f0a 	tst.w	r2, #10
  401386:	d00b      	beq.n	4013a0 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  401388:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  40138a:	f012 0f02 	tst.w	r2, #2
  40138e:	d109      	bne.n	4013a4 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401390:	f012 0f08 	tst.w	r2, #8
  401394:	d008      	beq.n	4013a8 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401396:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  40139a:	e005      	b.n	4013a8 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40139c:	6641      	str	r1, [r0, #100]	; 0x64
  40139e:	e7f0      	b.n	401382 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4013a0:	6241      	str	r1, [r0, #36]	; 0x24
  4013a2:	e7f2      	b.n	40138a <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4013a4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4013a8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4013aa:	6001      	str	r1, [r0, #0]
  4013ac:	4770      	bx	lr

004013ae <pio_set_output>:
{
  4013ae:	b410      	push	{r4}
  4013b0:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4013b2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4013b4:	b94c      	cbnz	r4, 4013ca <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4013b6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4013b8:	b14b      	cbz	r3, 4013ce <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4013ba:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4013bc:	b94a      	cbnz	r2, 4013d2 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4013be:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4013c0:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4013c2:	6001      	str	r1, [r0, #0]
}
  4013c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4013c8:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4013ca:	6641      	str	r1, [r0, #100]	; 0x64
  4013cc:	e7f4      	b.n	4013b8 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4013ce:	6541      	str	r1, [r0, #84]	; 0x54
  4013d0:	e7f4      	b.n	4013bc <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4013d2:	6301      	str	r1, [r0, #48]	; 0x30
  4013d4:	e7f4      	b.n	4013c0 <pio_set_output+0x12>
	...

004013d8 <pio_configure>:
{
  4013d8:	b570      	push	{r4, r5, r6, lr}
  4013da:	b082      	sub	sp, #8
  4013dc:	4605      	mov	r5, r0
  4013de:	4616      	mov	r6, r2
  4013e0:	461c      	mov	r4, r3
	switch (ul_type) {
  4013e2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4013e6:	d014      	beq.n	401412 <pio_configure+0x3a>
  4013e8:	d90a      	bls.n	401400 <pio_configure+0x28>
  4013ea:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4013ee:	d024      	beq.n	40143a <pio_configure+0x62>
  4013f0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4013f4:	d021      	beq.n	40143a <pio_configure+0x62>
  4013f6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4013fa:	d017      	beq.n	40142c <pio_configure+0x54>
		return 0;
  4013fc:	2000      	movs	r0, #0
  4013fe:	e01a      	b.n	401436 <pio_configure+0x5e>
	switch (ul_type) {
  401400:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401404:	d005      	beq.n	401412 <pio_configure+0x3a>
  401406:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40140a:	d002      	beq.n	401412 <pio_configure+0x3a>
  40140c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401410:	d1f4      	bne.n	4013fc <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  401412:	4632      	mov	r2, r6
  401414:	4628      	mov	r0, r5
  401416:	4b11      	ldr	r3, [pc, #68]	; (40145c <pio_configure+0x84>)
  401418:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40141a:	f014 0f01 	tst.w	r4, #1
  40141e:	d102      	bne.n	401426 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  401420:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  401422:	2001      	movs	r0, #1
  401424:	e007      	b.n	401436 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  401426:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401428:	2001      	movs	r0, #1
  40142a:	e004      	b.n	401436 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  40142c:	461a      	mov	r2, r3
  40142e:	4631      	mov	r1, r6
  401430:	4b0b      	ldr	r3, [pc, #44]	; (401460 <pio_configure+0x88>)
  401432:	4798      	blx	r3
	return 1;
  401434:	2001      	movs	r0, #1
}
  401436:	b002      	add	sp, #8
  401438:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40143a:	f004 0301 	and.w	r3, r4, #1
  40143e:	9300      	str	r3, [sp, #0]
  401440:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401444:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401448:	bf14      	ite	ne
  40144a:	2200      	movne	r2, #0
  40144c:	2201      	moveq	r2, #1
  40144e:	4631      	mov	r1, r6
  401450:	4628      	mov	r0, r5
  401452:	4c04      	ldr	r4, [pc, #16]	; (401464 <pio_configure+0x8c>)
  401454:	47a0      	blx	r4
	return 1;
  401456:	2001      	movs	r0, #1
		break;
  401458:	e7ed      	b.n	401436 <pio_configure+0x5e>
  40145a:	bf00      	nop
  40145c:	004012e7 	.word	0x004012e7
  401460:	00401379 	.word	0x00401379
  401464:	004013af 	.word	0x004013af

00401468 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  401468:	f012 0f10 	tst.w	r2, #16
  40146c:	d012      	beq.n	401494 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  40146e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401472:	f012 0f20 	tst.w	r2, #32
  401476:	d007      	beq.n	401488 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  401478:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  40147c:	f012 0f40 	tst.w	r2, #64	; 0x40
  401480:	d005      	beq.n	40148e <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  401482:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  401486:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  401488:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  40148c:	e7f6      	b.n	40147c <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  40148e:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  401492:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  401494:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  401498:	4770      	bx	lr

0040149a <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  40149a:	6401      	str	r1, [r0, #64]	; 0x40
  40149c:	4770      	bx	lr

0040149e <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40149e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4014a0:	4770      	bx	lr

004014a2 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4014a2:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4014a4:	4770      	bx	lr
	...

004014a8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4014a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4014ac:	4604      	mov	r4, r0
  4014ae:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4014b0:	4b0e      	ldr	r3, [pc, #56]	; (4014ec <pio_handler_process+0x44>)
  4014b2:	4798      	blx	r3
  4014b4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4014b6:	4620      	mov	r0, r4
  4014b8:	4b0d      	ldr	r3, [pc, #52]	; (4014f0 <pio_handler_process+0x48>)
  4014ba:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4014bc:	4005      	ands	r5, r0
  4014be:	d013      	beq.n	4014e8 <pio_handler_process+0x40>
  4014c0:	4c0c      	ldr	r4, [pc, #48]	; (4014f4 <pio_handler_process+0x4c>)
  4014c2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4014c6:	e003      	b.n	4014d0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4014c8:	42b4      	cmp	r4, r6
  4014ca:	d00d      	beq.n	4014e8 <pio_handler_process+0x40>
  4014cc:	3410      	adds	r4, #16
		while (status != 0) {
  4014ce:	b15d      	cbz	r5, 4014e8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4014d0:	6820      	ldr	r0, [r4, #0]
  4014d2:	4540      	cmp	r0, r8
  4014d4:	d1f8      	bne.n	4014c8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4014d6:	6861      	ldr	r1, [r4, #4]
  4014d8:	4229      	tst	r1, r5
  4014da:	d0f5      	beq.n	4014c8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4014dc:	68e3      	ldr	r3, [r4, #12]
  4014de:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4014e0:	6863      	ldr	r3, [r4, #4]
  4014e2:	ea25 0503 	bic.w	r5, r5, r3
  4014e6:	e7ef      	b.n	4014c8 <pio_handler_process+0x20>
  4014e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014ec:	0040149f 	.word	0x0040149f
  4014f0:	004014a3 	.word	0x004014a3
  4014f4:	20400c7c 	.word	0x20400c7c

004014f8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4014f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4014fa:	4c18      	ldr	r4, [pc, #96]	; (40155c <pio_handler_set+0x64>)
  4014fc:	6826      	ldr	r6, [r4, #0]
  4014fe:	2e06      	cmp	r6, #6
  401500:	d82a      	bhi.n	401558 <pio_handler_set+0x60>
  401502:	f04f 0c00 	mov.w	ip, #0
  401506:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401508:	4f15      	ldr	r7, [pc, #84]	; (401560 <pio_handler_set+0x68>)
  40150a:	e004      	b.n	401516 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40150c:	3401      	adds	r4, #1
  40150e:	b2e4      	uxtb	r4, r4
  401510:	46a4      	mov	ip, r4
  401512:	42a6      	cmp	r6, r4
  401514:	d309      	bcc.n	40152a <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  401516:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401518:	0125      	lsls	r5, r4, #4
  40151a:	597d      	ldr	r5, [r7, r5]
  40151c:	428d      	cmp	r5, r1
  40151e:	d1f5      	bne.n	40150c <pio_handler_set+0x14>
  401520:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  401524:	686d      	ldr	r5, [r5, #4]
  401526:	4295      	cmp	r5, r2
  401528:	d1f0      	bne.n	40150c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40152a:	4d0d      	ldr	r5, [pc, #52]	; (401560 <pio_handler_set+0x68>)
  40152c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  401530:	eb05 040e 	add.w	r4, r5, lr
  401534:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  401538:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  40153a:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  40153c:	9906      	ldr	r1, [sp, #24]
  40153e:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  401540:	3601      	adds	r6, #1
  401542:	4566      	cmp	r6, ip
  401544:	d005      	beq.n	401552 <pio_handler_set+0x5a>
  401546:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  401548:	461a      	mov	r2, r3
  40154a:	4b06      	ldr	r3, [pc, #24]	; (401564 <pio_handler_set+0x6c>)
  40154c:	4798      	blx	r3

	return 0;
  40154e:	2000      	movs	r0, #0
  401550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  401552:	4902      	ldr	r1, [pc, #8]	; (40155c <pio_handler_set+0x64>)
  401554:	600e      	str	r6, [r1, #0]
  401556:	e7f6      	b.n	401546 <pio_handler_set+0x4e>
		return 1;
  401558:	2001      	movs	r0, #1
}
  40155a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40155c:	20400cec 	.word	0x20400cec
  401560:	20400c7c 	.word	0x20400c7c
  401564:	00401469 	.word	0x00401469

00401568 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401568:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40156a:	210a      	movs	r1, #10
  40156c:	4801      	ldr	r0, [pc, #4]	; (401574 <PIOA_Handler+0xc>)
  40156e:	4b02      	ldr	r3, [pc, #8]	; (401578 <PIOA_Handler+0x10>)
  401570:	4798      	blx	r3
  401572:	bd08      	pop	{r3, pc}
  401574:	400e0e00 	.word	0x400e0e00
  401578:	004014a9 	.word	0x004014a9

0040157c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40157c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40157e:	210b      	movs	r1, #11
  401580:	4801      	ldr	r0, [pc, #4]	; (401588 <PIOB_Handler+0xc>)
  401582:	4b02      	ldr	r3, [pc, #8]	; (40158c <PIOB_Handler+0x10>)
  401584:	4798      	blx	r3
  401586:	bd08      	pop	{r3, pc}
  401588:	400e1000 	.word	0x400e1000
  40158c:	004014a9 	.word	0x004014a9

00401590 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401590:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401592:	210c      	movs	r1, #12
  401594:	4801      	ldr	r0, [pc, #4]	; (40159c <PIOC_Handler+0xc>)
  401596:	4b02      	ldr	r3, [pc, #8]	; (4015a0 <PIOC_Handler+0x10>)
  401598:	4798      	blx	r3
  40159a:	bd08      	pop	{r3, pc}
  40159c:	400e1200 	.word	0x400e1200
  4015a0:	004014a9 	.word	0x004014a9

004015a4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4015a4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4015a6:	2110      	movs	r1, #16
  4015a8:	4801      	ldr	r0, [pc, #4]	; (4015b0 <PIOD_Handler+0xc>)
  4015aa:	4b02      	ldr	r3, [pc, #8]	; (4015b4 <PIOD_Handler+0x10>)
  4015ac:	4798      	blx	r3
  4015ae:	bd08      	pop	{r3, pc}
  4015b0:	400e1400 	.word	0x400e1400
  4015b4:	004014a9 	.word	0x004014a9

004015b8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4015b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4015ba:	2111      	movs	r1, #17
  4015bc:	4801      	ldr	r0, [pc, #4]	; (4015c4 <PIOE_Handler+0xc>)
  4015be:	4b02      	ldr	r3, [pc, #8]	; (4015c8 <PIOE_Handler+0x10>)
  4015c0:	4798      	blx	r3
  4015c2:	bd08      	pop	{r3, pc}
  4015c4:	400e1600 	.word	0x400e1600
  4015c8:	004014a9 	.word	0x004014a9

004015cc <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4015cc:	2803      	cmp	r0, #3
  4015ce:	d011      	beq.n	4015f4 <pmc_mck_set_division+0x28>
  4015d0:	2804      	cmp	r0, #4
  4015d2:	d012      	beq.n	4015fa <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4015d4:	2802      	cmp	r0, #2
  4015d6:	bf0c      	ite	eq
  4015d8:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4015dc:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4015de:	4a08      	ldr	r2, [pc, #32]	; (401600 <pmc_mck_set_division+0x34>)
  4015e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4015e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4015e6:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4015e8:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4015ea:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4015ec:	f013 0f08 	tst.w	r3, #8
  4015f0:	d0fb      	beq.n	4015ea <pmc_mck_set_division+0x1e>
}
  4015f2:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4015f4:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4015f8:	e7f1      	b.n	4015de <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4015fa:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4015fe:	e7ee      	b.n	4015de <pmc_mck_set_division+0x12>
  401600:	400e0600 	.word	0x400e0600

00401604 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401604:	4a17      	ldr	r2, [pc, #92]	; (401664 <pmc_switch_mck_to_pllack+0x60>)
  401606:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40160c:	4318      	orrs	r0, r3
  40160e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401610:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401612:	f013 0f08 	tst.w	r3, #8
  401616:	d10a      	bne.n	40162e <pmc_switch_mck_to_pllack+0x2a>
  401618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40161c:	4911      	ldr	r1, [pc, #68]	; (401664 <pmc_switch_mck_to_pllack+0x60>)
  40161e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401620:	f012 0f08 	tst.w	r2, #8
  401624:	d103      	bne.n	40162e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401626:	3b01      	subs	r3, #1
  401628:	d1f9      	bne.n	40161e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40162a:	2001      	movs	r0, #1
  40162c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40162e:	4a0d      	ldr	r2, [pc, #52]	; (401664 <pmc_switch_mck_to_pllack+0x60>)
  401630:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401632:	f023 0303 	bic.w	r3, r3, #3
  401636:	f043 0302 	orr.w	r3, r3, #2
  40163a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40163c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40163e:	f013 0f08 	tst.w	r3, #8
  401642:	d10a      	bne.n	40165a <pmc_switch_mck_to_pllack+0x56>
  401644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401648:	4906      	ldr	r1, [pc, #24]	; (401664 <pmc_switch_mck_to_pllack+0x60>)
  40164a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40164c:	f012 0f08 	tst.w	r2, #8
  401650:	d105      	bne.n	40165e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401652:	3b01      	subs	r3, #1
  401654:	d1f9      	bne.n	40164a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401656:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401658:	4770      	bx	lr
	return 0;
  40165a:	2000      	movs	r0, #0
  40165c:	4770      	bx	lr
  40165e:	2000      	movs	r0, #0
  401660:	4770      	bx	lr
  401662:	bf00      	nop
  401664:	400e0600 	.word	0x400e0600

00401668 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401668:	b9a0      	cbnz	r0, 401694 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40166a:	480e      	ldr	r0, [pc, #56]	; (4016a4 <pmc_switch_mainck_to_xtal+0x3c>)
  40166c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40166e:	0209      	lsls	r1, r1, #8
  401670:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401672:	4a0d      	ldr	r2, [pc, #52]	; (4016a8 <pmc_switch_mainck_to_xtal+0x40>)
  401674:	401a      	ands	r2, r3
  401676:	4b0d      	ldr	r3, [pc, #52]	; (4016ac <pmc_switch_mainck_to_xtal+0x44>)
  401678:	4313      	orrs	r3, r2
  40167a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40167c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40167e:	4602      	mov	r2, r0
  401680:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401682:	f013 0f01 	tst.w	r3, #1
  401686:	d0fb      	beq.n	401680 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401688:	4a06      	ldr	r2, [pc, #24]	; (4016a4 <pmc_switch_mainck_to_xtal+0x3c>)
  40168a:	6a11      	ldr	r1, [r2, #32]
  40168c:	4b08      	ldr	r3, [pc, #32]	; (4016b0 <pmc_switch_mainck_to_xtal+0x48>)
  40168e:	430b      	orrs	r3, r1
  401690:	6213      	str	r3, [r2, #32]
  401692:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401694:	4903      	ldr	r1, [pc, #12]	; (4016a4 <pmc_switch_mainck_to_xtal+0x3c>)
  401696:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401698:	4a06      	ldr	r2, [pc, #24]	; (4016b4 <pmc_switch_mainck_to_xtal+0x4c>)
  40169a:	401a      	ands	r2, r3
  40169c:	4b06      	ldr	r3, [pc, #24]	; (4016b8 <pmc_switch_mainck_to_xtal+0x50>)
  40169e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4016a0:	620b      	str	r3, [r1, #32]
  4016a2:	4770      	bx	lr
  4016a4:	400e0600 	.word	0x400e0600
  4016a8:	ffc8fffc 	.word	0xffc8fffc
  4016ac:	00370001 	.word	0x00370001
  4016b0:	01370000 	.word	0x01370000
  4016b4:	fec8fffc 	.word	0xfec8fffc
  4016b8:	01370002 	.word	0x01370002

004016bc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4016bc:	4b02      	ldr	r3, [pc, #8]	; (4016c8 <pmc_osc_is_ready_mainck+0xc>)
  4016be:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4016c0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4016c4:	4770      	bx	lr
  4016c6:	bf00      	nop
  4016c8:	400e0600 	.word	0x400e0600

004016cc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4016cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4016d0:	4b01      	ldr	r3, [pc, #4]	; (4016d8 <pmc_disable_pllack+0xc>)
  4016d2:	629a      	str	r2, [r3, #40]	; 0x28
  4016d4:	4770      	bx	lr
  4016d6:	bf00      	nop
  4016d8:	400e0600 	.word	0x400e0600

004016dc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4016dc:	4b02      	ldr	r3, [pc, #8]	; (4016e8 <pmc_is_locked_pllack+0xc>)
  4016de:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4016e0:	f000 0002 	and.w	r0, r0, #2
  4016e4:	4770      	bx	lr
  4016e6:	bf00      	nop
  4016e8:	400e0600 	.word	0x400e0600

004016ec <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4016ec:	283f      	cmp	r0, #63	; 0x3f
  4016ee:	d81e      	bhi.n	40172e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4016f0:	281f      	cmp	r0, #31
  4016f2:	d80c      	bhi.n	40170e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4016f4:	4b11      	ldr	r3, [pc, #68]	; (40173c <pmc_enable_periph_clk+0x50>)
  4016f6:	699a      	ldr	r2, [r3, #24]
  4016f8:	2301      	movs	r3, #1
  4016fa:	4083      	lsls	r3, r0
  4016fc:	4393      	bics	r3, r2
  4016fe:	d018      	beq.n	401732 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401700:	2301      	movs	r3, #1
  401702:	fa03 f000 	lsl.w	r0, r3, r0
  401706:	4b0d      	ldr	r3, [pc, #52]	; (40173c <pmc_enable_periph_clk+0x50>)
  401708:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40170a:	2000      	movs	r0, #0
  40170c:	4770      	bx	lr
		ul_id -= 32;
  40170e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401710:	4b0a      	ldr	r3, [pc, #40]	; (40173c <pmc_enable_periph_clk+0x50>)
  401712:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401716:	2301      	movs	r3, #1
  401718:	4083      	lsls	r3, r0
  40171a:	4393      	bics	r3, r2
  40171c:	d00b      	beq.n	401736 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40171e:	2301      	movs	r3, #1
  401720:	fa03 f000 	lsl.w	r0, r3, r0
  401724:	4b05      	ldr	r3, [pc, #20]	; (40173c <pmc_enable_periph_clk+0x50>)
  401726:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40172a:	2000      	movs	r0, #0
  40172c:	4770      	bx	lr
		return 1;
  40172e:	2001      	movs	r0, #1
  401730:	4770      	bx	lr
	return 0;
  401732:	2000      	movs	r0, #0
  401734:	4770      	bx	lr
  401736:	2000      	movs	r0, #0
}
  401738:	4770      	bx	lr
  40173a:	bf00      	nop
  40173c:	400e0600 	.word	0x400e0600

00401740 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  401740:	4770      	bx	lr
	...

00401744 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  401744:	4a10      	ldr	r2, [pc, #64]	; (401788 <pmc_enable_waitmode+0x44>)
  401746:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  401748:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  40174c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  401750:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  401752:	6a11      	ldr	r1, [r2, #32]
  401754:	4b0d      	ldr	r3, [pc, #52]	; (40178c <pmc_enable_waitmode+0x48>)
  401756:	430b      	orrs	r3, r1
  401758:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40175a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40175c:	f013 0f08 	tst.w	r3, #8
  401760:	d0fb      	beq.n	40175a <pmc_enable_waitmode+0x16>
  401762:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  401766:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  401768:	3b01      	subs	r3, #1
  40176a:	d1fc      	bne.n	401766 <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  40176c:	4a06      	ldr	r2, [pc, #24]	; (401788 <pmc_enable_waitmode+0x44>)
  40176e:	6a13      	ldr	r3, [r2, #32]
  401770:	f013 0f08 	tst.w	r3, #8
  401774:	d0fb      	beq.n	40176e <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  401776:	4a04      	ldr	r2, [pc, #16]	; (401788 <pmc_enable_waitmode+0x44>)
  401778:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  40177a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  40177e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  401782:	6713      	str	r3, [r2, #112]	; 0x70
  401784:	4770      	bx	lr
  401786:	bf00      	nop
  401788:	400e0600 	.word	0x400e0600
  40178c:	00370004 	.word	0x00370004

00401790 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  401790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  401794:	1e43      	subs	r3, r0, #1
  401796:	2b04      	cmp	r3, #4
  401798:	f200 8107 	bhi.w	4019aa <pmc_sleep+0x21a>
  40179c:	e8df f013 	tbh	[pc, r3, lsl #1]
  4017a0:	00050005 	.word	0x00050005
  4017a4:	00150015 	.word	0x00150015
  4017a8:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  4017aa:	4a81      	ldr	r2, [pc, #516]	; (4019b0 <pmc_sleep+0x220>)
  4017ac:	6913      	ldr	r3, [r2, #16]
  4017ae:	f023 0304 	bic.w	r3, r3, #4
  4017b2:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  4017b4:	2201      	movs	r2, #1
  4017b6:	4b7f      	ldr	r3, [pc, #508]	; (4019b4 <pmc_sleep+0x224>)
  4017b8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4017ba:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4017be:	b662      	cpsie	i
  __ASM volatile ("dsb");
  4017c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  4017c4:	bf30      	wfi
  4017c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4017ca:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  4017cc:	2803      	cmp	r0, #3
  4017ce:	bf0c      	ite	eq
  4017d0:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  4017d2:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  4017d6:	4b78      	ldr	r3, [pc, #480]	; (4019b8 <pmc_sleep+0x228>)
  4017d8:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4017da:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4017dc:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  4017e0:	2200      	movs	r2, #0
  4017e2:	4b74      	ldr	r3, [pc, #464]	; (4019b4 <pmc_sleep+0x224>)
  4017e4:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  4017e6:	2201      	movs	r2, #1
  4017e8:	4b74      	ldr	r3, [pc, #464]	; (4019bc <pmc_sleep+0x22c>)
  4017ea:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  4017ec:	4b74      	ldr	r3, [pc, #464]	; (4019c0 <pmc_sleep+0x230>)
  4017ee:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  4017f0:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  4017f2:	4a74      	ldr	r2, [pc, #464]	; (4019c4 <pmc_sleep+0x234>)
  4017f4:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  4017f8:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  4017fa:	4a73      	ldr	r2, [pc, #460]	; (4019c8 <pmc_sleep+0x238>)
  4017fc:	433a      	orrs	r2, r7
  4017fe:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  401800:	f005 0903 	and.w	r9, r5, #3
  401804:	f1b9 0f01 	cmp.w	r9, #1
  401808:	f240 8089 	bls.w	40191e <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  40180c:	f025 0103 	bic.w	r1, r5, #3
  401810:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  401814:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401816:	461a      	mov	r2, r3
  401818:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40181a:	f013 0f08 	tst.w	r3, #8
  40181e:	d0fb      	beq.n	401818 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  401820:	f011 0f70 	tst.w	r1, #112	; 0x70
  401824:	d008      	beq.n	401838 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  401826:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  40182a:	4b65      	ldr	r3, [pc, #404]	; (4019c0 <pmc_sleep+0x230>)
  40182c:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40182e:	461a      	mov	r2, r3
  401830:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401832:	f013 0f08 	tst.w	r3, #8
  401836:	d0fb      	beq.n	401830 <pmc_sleep+0xa0>
	pmc_disable_pllack();
  401838:	4b64      	ldr	r3, [pc, #400]	; (4019cc <pmc_sleep+0x23c>)
  40183a:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40183c:	4a60      	ldr	r2, [pc, #384]	; (4019c0 <pmc_sleep+0x230>)
  40183e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401840:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  401844:	d0fb      	beq.n	40183e <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401846:	4a5e      	ldr	r2, [pc, #376]	; (4019c0 <pmc_sleep+0x230>)
  401848:	6a11      	ldr	r1, [r2, #32]
  40184a:	4b61      	ldr	r3, [pc, #388]	; (4019d0 <pmc_sleep+0x240>)
  40184c:	400b      	ands	r3, r1
  40184e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401852:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  401854:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401856:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40185a:	d0fb      	beq.n	401854 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  40185c:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  401860:	4a58      	ldr	r2, [pc, #352]	; (4019c4 <pmc_sleep+0x234>)
  401862:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  401864:	2c04      	cmp	r4, #4
  401866:	d05c      	beq.n	401922 <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  401868:	4c52      	ldr	r4, [pc, #328]	; (4019b4 <pmc_sleep+0x224>)
  40186a:	2301      	movs	r3, #1
  40186c:	7023      	strb	r3, [r4, #0]
  40186e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401872:	b662      	cpsie	i

		pmc_enable_waitmode();
  401874:	4b57      	ldr	r3, [pc, #348]	; (4019d4 <pmc_sleep+0x244>)
  401876:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  401878:	b672      	cpsid	i
  40187a:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  40187e:	2300      	movs	r3, #0
  401880:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  401882:	f017 0f02 	tst.w	r7, #2
  401886:	d055      	beq.n	401934 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401888:	4a4d      	ldr	r2, [pc, #308]	; (4019c0 <pmc_sleep+0x230>)
  40188a:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40188c:	4952      	ldr	r1, [pc, #328]	; (4019d8 <pmc_sleep+0x248>)
  40188e:	4019      	ands	r1, r3
  401890:	4b52      	ldr	r3, [pc, #328]	; (4019dc <pmc_sleep+0x24c>)
  401892:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401894:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401896:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  401898:	4b51      	ldr	r3, [pc, #324]	; (4019e0 <pmc_sleep+0x250>)
  40189a:	400b      	ands	r3, r1
  40189c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4018a0:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  4018a2:	4b50      	ldr	r3, [pc, #320]	; (4019e4 <pmc_sleep+0x254>)
  4018a4:	4033      	ands	r3, r6
  4018a6:	2b00      	cmp	r3, #0
  4018a8:	d06e      	beq.n	401988 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  4018aa:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4018ae:	4b44      	ldr	r3, [pc, #272]	; (4019c0 <pmc_sleep+0x230>)
  4018b0:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  4018b2:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  4018b4:	f1b9 0f02 	cmp.w	r9, #2
  4018b8:	d104      	bne.n	4018c4 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  4018ba:	4a41      	ldr	r2, [pc, #260]	; (4019c0 <pmc_sleep+0x230>)
  4018bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4018be:	f013 0f02 	tst.w	r3, #2
  4018c2:	d0fb      	beq.n	4018bc <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  4018c4:	4a3e      	ldr	r2, [pc, #248]	; (4019c0 <pmc_sleep+0x230>)
  4018c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4018c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  4018cc:	f005 0070 	and.w	r0, r5, #112	; 0x70
  4018d0:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4018d2:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4018d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4018d6:	f013 0f08 	tst.w	r3, #8
  4018da:	d0fb      	beq.n	4018d4 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  4018dc:	4b39      	ldr	r3, [pc, #228]	; (4019c4 <pmc_sleep+0x234>)
  4018de:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  4018e2:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4018e6:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4018e8:	461a      	mov	r2, r3
  4018ea:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4018ec:	f013 0f08 	tst.w	r3, #8
  4018f0:	d0fb      	beq.n	4018ea <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  4018f2:	4a33      	ldr	r2, [pc, #204]	; (4019c0 <pmc_sleep+0x230>)
  4018f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4018f6:	420b      	tst	r3, r1
  4018f8:	d0fc      	beq.n	4018f4 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  4018fa:	2200      	movs	r2, #0
  4018fc:	4b2f      	ldr	r3, [pc, #188]	; (4019bc <pmc_sleep+0x22c>)
  4018fe:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  401900:	4b39      	ldr	r3, [pc, #228]	; (4019e8 <pmc_sleep+0x258>)
  401902:	681b      	ldr	r3, [r3, #0]
  401904:	b11b      	cbz	r3, 40190e <pmc_sleep+0x17e>
			callback_clocks_restored();
  401906:	4798      	blx	r3
			callback_clocks_restored = NULL;
  401908:	2200      	movs	r2, #0
  40190a:	4b37      	ldr	r3, [pc, #220]	; (4019e8 <pmc_sleep+0x258>)
  40190c:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  40190e:	2201      	movs	r2, #1
  401910:	4b28      	ldr	r3, [pc, #160]	; (4019b4 <pmc_sleep+0x224>)
  401912:	701a      	strb	r2, [r3, #0]
  401914:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401918:	b662      	cpsie	i
  40191a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  40191e:	4629      	mov	r1, r5
  401920:	e77e      	b.n	401820 <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401922:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  401926:	6a11      	ldr	r1, [r2, #32]
  401928:	4b30      	ldr	r3, [pc, #192]	; (4019ec <pmc_sleep+0x25c>)
  40192a:	400b      	ands	r3, r1
  40192c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401930:	6213      	str	r3, [r2, #32]
  401932:	e799      	b.n	401868 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  401934:	f017 0f01 	tst.w	r7, #1
  401938:	d0b3      	beq.n	4018a2 <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  40193a:	4b21      	ldr	r3, [pc, #132]	; (4019c0 <pmc_sleep+0x230>)
  40193c:	6a1b      	ldr	r3, [r3, #32]
  40193e:	f013 0f01 	tst.w	r3, #1
  401942:	d10b      	bne.n	40195c <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401944:	491e      	ldr	r1, [pc, #120]	; (4019c0 <pmc_sleep+0x230>)
  401946:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  401948:	4a29      	ldr	r2, [pc, #164]	; (4019f0 <pmc_sleep+0x260>)
  40194a:	401a      	ands	r2, r3
  40194c:	4b29      	ldr	r3, [pc, #164]	; (4019f4 <pmc_sleep+0x264>)
  40194e:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401950:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401952:	460a      	mov	r2, r1
  401954:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401956:	f013 0f01 	tst.w	r3, #1
  40195a:	d0fb      	beq.n	401954 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  40195c:	4b18      	ldr	r3, [pc, #96]	; (4019c0 <pmc_sleep+0x230>)
  40195e:	6a1b      	ldr	r3, [r3, #32]
  401960:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401964:	d108      	bne.n	401978 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401966:	4a16      	ldr	r2, [pc, #88]	; (4019c0 <pmc_sleep+0x230>)
  401968:	6a11      	ldr	r1, [r2, #32]
  40196a:	4b23      	ldr	r3, [pc, #140]	; (4019f8 <pmc_sleep+0x268>)
  40196c:	430b      	orrs	r3, r1
  40196e:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  401970:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401972:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401976:	d0fb      	beq.n	401970 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401978:	4a11      	ldr	r2, [pc, #68]	; (4019c0 <pmc_sleep+0x230>)
  40197a:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  40197c:	4b18      	ldr	r3, [pc, #96]	; (4019e0 <pmc_sleep+0x250>)
  40197e:	400b      	ands	r3, r1
  401980:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401984:	6213      	str	r3, [r2, #32]
  401986:	e78c      	b.n	4018a2 <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  401988:	2100      	movs	r1, #0
  40198a:	e793      	b.n	4018b4 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  40198c:	4a08      	ldr	r2, [pc, #32]	; (4019b0 <pmc_sleep+0x220>)
  40198e:	6913      	ldr	r3, [r2, #16]
  401990:	f043 0304 	orr.w	r3, r3, #4
  401994:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  401996:	4a19      	ldr	r2, [pc, #100]	; (4019fc <pmc_sleep+0x26c>)
  401998:	4b19      	ldr	r3, [pc, #100]	; (401a00 <pmc_sleep+0x270>)
  40199a:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  40199c:	2201      	movs	r2, #1
  40199e:	4b05      	ldr	r3, [pc, #20]	; (4019b4 <pmc_sleep+0x224>)
  4019a0:	701a      	strb	r2, [r3, #0]
  4019a2:	f3bf 8f5f 	dmb	sy
  4019a6:	b662      	cpsie	i
  __ASM volatile ("wfi");
  4019a8:	bf30      	wfi
  4019aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4019ae:	bf00      	nop
  4019b0:	e000ed00 	.word	0xe000ed00
  4019b4:	2040001c 	.word	0x2040001c
  4019b8:	00401741 	.word	0x00401741
  4019bc:	20400cf0 	.word	0x20400cf0
  4019c0:	400e0600 	.word	0x400e0600
  4019c4:	400e0c00 	.word	0x400e0c00
  4019c8:	00370008 	.word	0x00370008
  4019cc:	004016cd 	.word	0x004016cd
  4019d0:	fec8ffff 	.word	0xfec8ffff
  4019d4:	00401745 	.word	0x00401745
  4019d8:	fec8fffc 	.word	0xfec8fffc
  4019dc:	01370002 	.word	0x01370002
  4019e0:	ffc8ff87 	.word	0xffc8ff87
  4019e4:	07ff0000 	.word	0x07ff0000
  4019e8:	20400cf4 	.word	0x20400cf4
  4019ec:	ffc8fffe 	.word	0xffc8fffe
  4019f0:	ffc8fffc 	.word	0xffc8fffc
  4019f4:	00370001 	.word	0x00370001
  4019f8:	01370000 	.word	0x01370000
  4019fc:	a5000004 	.word	0xa5000004
  401a00:	400e1810 	.word	0x400e1810

00401a04 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401a04:	e7fe      	b.n	401a04 <Dummy_Handler>
	...

00401a08 <Reset_Handler>:
{
  401a08:	b500      	push	{lr}
  401a0a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401a0c:	4b25      	ldr	r3, [pc, #148]	; (401aa4 <Reset_Handler+0x9c>)
  401a0e:	4a26      	ldr	r2, [pc, #152]	; (401aa8 <Reset_Handler+0xa0>)
  401a10:	429a      	cmp	r2, r3
  401a12:	d010      	beq.n	401a36 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401a14:	4b25      	ldr	r3, [pc, #148]	; (401aac <Reset_Handler+0xa4>)
  401a16:	4a23      	ldr	r2, [pc, #140]	; (401aa4 <Reset_Handler+0x9c>)
  401a18:	429a      	cmp	r2, r3
  401a1a:	d20c      	bcs.n	401a36 <Reset_Handler+0x2e>
  401a1c:	3b01      	subs	r3, #1
  401a1e:	1a9b      	subs	r3, r3, r2
  401a20:	f023 0303 	bic.w	r3, r3, #3
  401a24:	3304      	adds	r3, #4
  401a26:	4413      	add	r3, r2
  401a28:	491f      	ldr	r1, [pc, #124]	; (401aa8 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401a2a:	f851 0b04 	ldr.w	r0, [r1], #4
  401a2e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401a32:	429a      	cmp	r2, r3
  401a34:	d1f9      	bne.n	401a2a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401a36:	4b1e      	ldr	r3, [pc, #120]	; (401ab0 <Reset_Handler+0xa8>)
  401a38:	4a1e      	ldr	r2, [pc, #120]	; (401ab4 <Reset_Handler+0xac>)
  401a3a:	429a      	cmp	r2, r3
  401a3c:	d20a      	bcs.n	401a54 <Reset_Handler+0x4c>
  401a3e:	3b01      	subs	r3, #1
  401a40:	1a9b      	subs	r3, r3, r2
  401a42:	f023 0303 	bic.w	r3, r3, #3
  401a46:	3304      	adds	r3, #4
  401a48:	4413      	add	r3, r2
                *pDest++ = 0;
  401a4a:	2100      	movs	r1, #0
  401a4c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401a50:	4293      	cmp	r3, r2
  401a52:	d1fb      	bne.n	401a4c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401a54:	4a18      	ldr	r2, [pc, #96]	; (401ab8 <Reset_Handler+0xb0>)
  401a56:	4b19      	ldr	r3, [pc, #100]	; (401abc <Reset_Handler+0xb4>)
  401a58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401a5c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401a5e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401a62:	fab3 f383 	clz	r3, r3
  401a66:	095b      	lsrs	r3, r3, #5
  401a68:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401a6a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401a6c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401a70:	2200      	movs	r2, #0
  401a72:	4b13      	ldr	r3, [pc, #76]	; (401ac0 <Reset_Handler+0xb8>)
  401a74:	701a      	strb	r2, [r3, #0]
	return flags;
  401a76:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401a78:	4a12      	ldr	r2, [pc, #72]	; (401ac4 <Reset_Handler+0xbc>)
  401a7a:	6813      	ldr	r3, [r2, #0]
  401a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401a80:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401a82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401a86:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401a8a:	b129      	cbz	r1, 401a98 <Reset_Handler+0x90>
		cpu_irq_enable();
  401a8c:	2201      	movs	r2, #1
  401a8e:	4b0c      	ldr	r3, [pc, #48]	; (401ac0 <Reset_Handler+0xb8>)
  401a90:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401a92:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401a96:	b662      	cpsie	i
        __libc_init_array();
  401a98:	4b0b      	ldr	r3, [pc, #44]	; (401ac8 <Reset_Handler+0xc0>)
  401a9a:	4798      	blx	r3
        main();
  401a9c:	4b0b      	ldr	r3, [pc, #44]	; (401acc <Reset_Handler+0xc4>)
  401a9e:	4798      	blx	r3
  401aa0:	e7fe      	b.n	401aa0 <Reset_Handler+0x98>
  401aa2:	bf00      	nop
  401aa4:	20400000 	.word	0x20400000
  401aa8:	004078ac 	.word	0x004078ac
  401aac:	204009d0 	.word	0x204009d0
  401ab0:	20400d58 	.word	0x20400d58
  401ab4:	204009d0 	.word	0x204009d0
  401ab8:	e000ed00 	.word	0xe000ed00
  401abc:	00400000 	.word	0x00400000
  401ac0:	2040001c 	.word	0x2040001c
  401ac4:	e000ed88 	.word	0xe000ed88
  401ac8:	00402269 	.word	0x00402269
  401acc:	004021ad 	.word	0x004021ad

00401ad0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401ad0:	4b3b      	ldr	r3, [pc, #236]	; (401bc0 <SystemCoreClockUpdate+0xf0>)
  401ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ad4:	f003 0303 	and.w	r3, r3, #3
  401ad8:	2b01      	cmp	r3, #1
  401ada:	d01d      	beq.n	401b18 <SystemCoreClockUpdate+0x48>
  401adc:	b183      	cbz	r3, 401b00 <SystemCoreClockUpdate+0x30>
  401ade:	2b02      	cmp	r3, #2
  401ae0:	d036      	beq.n	401b50 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401ae2:	4b37      	ldr	r3, [pc, #220]	; (401bc0 <SystemCoreClockUpdate+0xf0>)
  401ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ae6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401aea:	2b70      	cmp	r3, #112	; 0x70
  401aec:	d05f      	beq.n	401bae <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401aee:	4b34      	ldr	r3, [pc, #208]	; (401bc0 <SystemCoreClockUpdate+0xf0>)
  401af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401af2:	4934      	ldr	r1, [pc, #208]	; (401bc4 <SystemCoreClockUpdate+0xf4>)
  401af4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401af8:	680b      	ldr	r3, [r1, #0]
  401afa:	40d3      	lsrs	r3, r2
  401afc:	600b      	str	r3, [r1, #0]
  401afe:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401b00:	4b31      	ldr	r3, [pc, #196]	; (401bc8 <SystemCoreClockUpdate+0xf8>)
  401b02:	695b      	ldr	r3, [r3, #20]
  401b04:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401b08:	bf14      	ite	ne
  401b0a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401b0e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401b12:	4b2c      	ldr	r3, [pc, #176]	; (401bc4 <SystemCoreClockUpdate+0xf4>)
  401b14:	601a      	str	r2, [r3, #0]
  401b16:	e7e4      	b.n	401ae2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401b18:	4b29      	ldr	r3, [pc, #164]	; (401bc0 <SystemCoreClockUpdate+0xf0>)
  401b1a:	6a1b      	ldr	r3, [r3, #32]
  401b1c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401b20:	d003      	beq.n	401b2a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401b22:	4a2a      	ldr	r2, [pc, #168]	; (401bcc <SystemCoreClockUpdate+0xfc>)
  401b24:	4b27      	ldr	r3, [pc, #156]	; (401bc4 <SystemCoreClockUpdate+0xf4>)
  401b26:	601a      	str	r2, [r3, #0]
  401b28:	e7db      	b.n	401ae2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401b2a:	4a29      	ldr	r2, [pc, #164]	; (401bd0 <SystemCoreClockUpdate+0x100>)
  401b2c:	4b25      	ldr	r3, [pc, #148]	; (401bc4 <SystemCoreClockUpdate+0xf4>)
  401b2e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401b30:	4b23      	ldr	r3, [pc, #140]	; (401bc0 <SystemCoreClockUpdate+0xf0>)
  401b32:	6a1b      	ldr	r3, [r3, #32]
  401b34:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401b38:	2b10      	cmp	r3, #16
  401b3a:	d005      	beq.n	401b48 <SystemCoreClockUpdate+0x78>
  401b3c:	2b20      	cmp	r3, #32
  401b3e:	d1d0      	bne.n	401ae2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401b40:	4a22      	ldr	r2, [pc, #136]	; (401bcc <SystemCoreClockUpdate+0xfc>)
  401b42:	4b20      	ldr	r3, [pc, #128]	; (401bc4 <SystemCoreClockUpdate+0xf4>)
  401b44:	601a      	str	r2, [r3, #0]
          break;
  401b46:	e7cc      	b.n	401ae2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401b48:	4a22      	ldr	r2, [pc, #136]	; (401bd4 <SystemCoreClockUpdate+0x104>)
  401b4a:	4b1e      	ldr	r3, [pc, #120]	; (401bc4 <SystemCoreClockUpdate+0xf4>)
  401b4c:	601a      	str	r2, [r3, #0]
          break;
  401b4e:	e7c8      	b.n	401ae2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401b50:	4b1b      	ldr	r3, [pc, #108]	; (401bc0 <SystemCoreClockUpdate+0xf0>)
  401b52:	6a1b      	ldr	r3, [r3, #32]
  401b54:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401b58:	d016      	beq.n	401b88 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401b5a:	4a1c      	ldr	r2, [pc, #112]	; (401bcc <SystemCoreClockUpdate+0xfc>)
  401b5c:	4b19      	ldr	r3, [pc, #100]	; (401bc4 <SystemCoreClockUpdate+0xf4>)
  401b5e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401b60:	4b17      	ldr	r3, [pc, #92]	; (401bc0 <SystemCoreClockUpdate+0xf0>)
  401b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b64:	f003 0303 	and.w	r3, r3, #3
  401b68:	2b02      	cmp	r3, #2
  401b6a:	d1ba      	bne.n	401ae2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401b6c:	4a14      	ldr	r2, [pc, #80]	; (401bc0 <SystemCoreClockUpdate+0xf0>)
  401b6e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401b70:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401b72:	4814      	ldr	r0, [pc, #80]	; (401bc4 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401b74:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401b78:	6803      	ldr	r3, [r0, #0]
  401b7a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401b7e:	b2d2      	uxtb	r2, r2
  401b80:	fbb3 f3f2 	udiv	r3, r3, r2
  401b84:	6003      	str	r3, [r0, #0]
  401b86:	e7ac      	b.n	401ae2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401b88:	4a11      	ldr	r2, [pc, #68]	; (401bd0 <SystemCoreClockUpdate+0x100>)
  401b8a:	4b0e      	ldr	r3, [pc, #56]	; (401bc4 <SystemCoreClockUpdate+0xf4>)
  401b8c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401b8e:	4b0c      	ldr	r3, [pc, #48]	; (401bc0 <SystemCoreClockUpdate+0xf0>)
  401b90:	6a1b      	ldr	r3, [r3, #32]
  401b92:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401b96:	2b10      	cmp	r3, #16
  401b98:	d005      	beq.n	401ba6 <SystemCoreClockUpdate+0xd6>
  401b9a:	2b20      	cmp	r3, #32
  401b9c:	d1e0      	bne.n	401b60 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401b9e:	4a0b      	ldr	r2, [pc, #44]	; (401bcc <SystemCoreClockUpdate+0xfc>)
  401ba0:	4b08      	ldr	r3, [pc, #32]	; (401bc4 <SystemCoreClockUpdate+0xf4>)
  401ba2:	601a      	str	r2, [r3, #0]
          break;
  401ba4:	e7dc      	b.n	401b60 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401ba6:	4a0b      	ldr	r2, [pc, #44]	; (401bd4 <SystemCoreClockUpdate+0x104>)
  401ba8:	4b06      	ldr	r3, [pc, #24]	; (401bc4 <SystemCoreClockUpdate+0xf4>)
  401baa:	601a      	str	r2, [r3, #0]
          break;
  401bac:	e7d8      	b.n	401b60 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401bae:	4a05      	ldr	r2, [pc, #20]	; (401bc4 <SystemCoreClockUpdate+0xf4>)
  401bb0:	6813      	ldr	r3, [r2, #0]
  401bb2:	4909      	ldr	r1, [pc, #36]	; (401bd8 <SystemCoreClockUpdate+0x108>)
  401bb4:	fba1 1303 	umull	r1, r3, r1, r3
  401bb8:	085b      	lsrs	r3, r3, #1
  401bba:	6013      	str	r3, [r2, #0]
  401bbc:	4770      	bx	lr
  401bbe:	bf00      	nop
  401bc0:	400e0600 	.word	0x400e0600
  401bc4:	20400020 	.word	0x20400020
  401bc8:	400e1810 	.word	0x400e1810
  401bcc:	00b71b00 	.word	0x00b71b00
  401bd0:	003d0900 	.word	0x003d0900
  401bd4:	007a1200 	.word	0x007a1200
  401bd8:	aaaaaaab 	.word	0xaaaaaaab

00401bdc <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401bdc:	4b16      	ldr	r3, [pc, #88]	; (401c38 <system_init_flash+0x5c>)
  401bde:	4298      	cmp	r0, r3
  401be0:	d913      	bls.n	401c0a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401be2:	4b16      	ldr	r3, [pc, #88]	; (401c3c <system_init_flash+0x60>)
  401be4:	4298      	cmp	r0, r3
  401be6:	d915      	bls.n	401c14 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401be8:	4b15      	ldr	r3, [pc, #84]	; (401c40 <system_init_flash+0x64>)
  401bea:	4298      	cmp	r0, r3
  401bec:	d916      	bls.n	401c1c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401bee:	4b15      	ldr	r3, [pc, #84]	; (401c44 <system_init_flash+0x68>)
  401bf0:	4298      	cmp	r0, r3
  401bf2:	d917      	bls.n	401c24 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401bf4:	4b14      	ldr	r3, [pc, #80]	; (401c48 <system_init_flash+0x6c>)
  401bf6:	4298      	cmp	r0, r3
  401bf8:	d918      	bls.n	401c2c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401bfa:	4b14      	ldr	r3, [pc, #80]	; (401c4c <system_init_flash+0x70>)
  401bfc:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401bfe:	bf94      	ite	ls
  401c00:	4a13      	ldrls	r2, [pc, #76]	; (401c50 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401c02:	4a14      	ldrhi	r2, [pc, #80]	; (401c54 <system_init_flash+0x78>)
  401c04:	4b14      	ldr	r3, [pc, #80]	; (401c58 <system_init_flash+0x7c>)
  401c06:	601a      	str	r2, [r3, #0]
  401c08:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401c0a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401c0e:	4b12      	ldr	r3, [pc, #72]	; (401c58 <system_init_flash+0x7c>)
  401c10:	601a      	str	r2, [r3, #0]
  401c12:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401c14:	4a11      	ldr	r2, [pc, #68]	; (401c5c <system_init_flash+0x80>)
  401c16:	4b10      	ldr	r3, [pc, #64]	; (401c58 <system_init_flash+0x7c>)
  401c18:	601a      	str	r2, [r3, #0]
  401c1a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401c1c:	4a10      	ldr	r2, [pc, #64]	; (401c60 <system_init_flash+0x84>)
  401c1e:	4b0e      	ldr	r3, [pc, #56]	; (401c58 <system_init_flash+0x7c>)
  401c20:	601a      	str	r2, [r3, #0]
  401c22:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401c24:	4a0f      	ldr	r2, [pc, #60]	; (401c64 <system_init_flash+0x88>)
  401c26:	4b0c      	ldr	r3, [pc, #48]	; (401c58 <system_init_flash+0x7c>)
  401c28:	601a      	str	r2, [r3, #0]
  401c2a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401c2c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401c30:	4b09      	ldr	r3, [pc, #36]	; (401c58 <system_init_flash+0x7c>)
  401c32:	601a      	str	r2, [r3, #0]
  401c34:	4770      	bx	lr
  401c36:	bf00      	nop
  401c38:	015ef3bf 	.word	0x015ef3bf
  401c3c:	02bde77f 	.word	0x02bde77f
  401c40:	041cdb3f 	.word	0x041cdb3f
  401c44:	057bceff 	.word	0x057bceff
  401c48:	06dac2bf 	.word	0x06dac2bf
  401c4c:	0839b67f 	.word	0x0839b67f
  401c50:	04000500 	.word	0x04000500
  401c54:	04000600 	.word	0x04000600
  401c58:	400e0c00 	.word	0x400e0c00
  401c5c:	04000100 	.word	0x04000100
  401c60:	04000200 	.word	0x04000200
  401c64:	04000300 	.word	0x04000300

00401c68 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401c68:	4b0a      	ldr	r3, [pc, #40]	; (401c94 <_sbrk+0x2c>)
  401c6a:	681b      	ldr	r3, [r3, #0]
  401c6c:	b153      	cbz	r3, 401c84 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401c6e:	4b09      	ldr	r3, [pc, #36]	; (401c94 <_sbrk+0x2c>)
  401c70:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401c72:	181a      	adds	r2, r3, r0
  401c74:	4908      	ldr	r1, [pc, #32]	; (401c98 <_sbrk+0x30>)
  401c76:	4291      	cmp	r1, r2
  401c78:	db08      	blt.n	401c8c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401c7a:	4610      	mov	r0, r2
  401c7c:	4a05      	ldr	r2, [pc, #20]	; (401c94 <_sbrk+0x2c>)
  401c7e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401c80:	4618      	mov	r0, r3
  401c82:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401c84:	4a05      	ldr	r2, [pc, #20]	; (401c9c <_sbrk+0x34>)
  401c86:	4b03      	ldr	r3, [pc, #12]	; (401c94 <_sbrk+0x2c>)
  401c88:	601a      	str	r2, [r3, #0]
  401c8a:	e7f0      	b.n	401c6e <_sbrk+0x6>
		return (caddr_t) -1;	
  401c8c:	f04f 30ff 	mov.w	r0, #4294967295
}
  401c90:	4770      	bx	lr
  401c92:	bf00      	nop
  401c94:	20400cf8 	.word	0x20400cf8
  401c98:	2045fffc 	.word	0x2045fffc
  401c9c:	20402f58 	.word	0x20402f58

00401ca0 <RTT_init>:
  	NVIC_SetPriority(ID_TC, 4);
	NVIC_EnableIRQ((IRQn_Type) ID_TC);
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
}

static void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource) {
  401ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ca4:	ed2d 8b02 	vpush	{d8}
  401ca8:	b082      	sub	sp, #8
  401caa:	eeb0 8a40 	vmov.f32	s16, s0
  401cae:	4680      	mov	r8, r0
  401cb0:	460f      	mov	r7, r1

  uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
	
  rtt_sel_source(RTT, false);
  401cb2:	4c20      	ldr	r4, [pc, #128]	; (401d34 <RTT_init+0x94>)
  401cb4:	2100      	movs	r1, #0
  401cb6:	4620      	mov	r0, r4
  401cb8:	4b1f      	ldr	r3, [pc, #124]	; (401d38 <RTT_init+0x98>)
  401cba:	4798      	blx	r3
  uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
  401cbc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 401d3c <RTT_init+0x9c>
  401cc0:	eec7 7a08 	vdiv.f32	s15, s14, s16
  401cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  401cc8:	edcd 7a01 	vstr	s15, [sp, #4]
  rtt_init(RTT, pllPreScale);
  401ccc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  401cd0:	4620      	mov	r0, r4
  401cd2:	4b1b      	ldr	r3, [pc, #108]	; (401d40 <RTT_init+0xa0>)
  401cd4:	4798      	blx	r3
  
  if (rttIRQSource & RTT_MR_ALMIEN) {
  401cd6:	f417 3f80 	tst.w	r7, #65536	; 0x10000
  401cda:	d116      	bne.n	401d0a <RTT_init+0x6a>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401cdc:	4b19      	ldr	r3, [pc, #100]	; (401d44 <RTT_init+0xa4>)
  401cde:	2208      	movs	r2, #8
  401ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401ce4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401ce8:	2180      	movs	r1, #128	; 0x80
  401cea:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401cee:	601a      	str	r2, [r3, #0]
  NVIC_ClearPendingIRQ(RTT_IRQn);
  NVIC_SetPriority(RTT_IRQn, 4);
  NVIC_EnableIRQ(RTT_IRQn);

  /* Enable RTT interrupt */
  if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  401cf0:	f417 3f40 	tst.w	r7, #196608	; 0x30000
  401cf4:	d119      	bne.n	401d2a <RTT_init+0x8a>
	rtt_enable_interrupt(RTT, rttIRQSource);
  else
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  401cf6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  401cfa:	480e      	ldr	r0, [pc, #56]	; (401d34 <RTT_init+0x94>)
  401cfc:	4b12      	ldr	r3, [pc, #72]	; (401d48 <RTT_init+0xa8>)
  401cfe:	4798      	blx	r3
		  
}
  401d00:	b002      	add	sp, #8
  401d02:	ecbd 8b02 	vpop	{d8}
  401d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  	ul_previous_time = rtt_read_timer_value(RTT);
  401d0a:	4620      	mov	r0, r4
  401d0c:	4b0f      	ldr	r3, [pc, #60]	; (401d4c <RTT_init+0xac>)
  401d0e:	4798      	blx	r3
  401d10:	4604      	mov	r4, r0
  	while (ul_previous_time == rtt_read_timer_value(RTT));
  401d12:	4e08      	ldr	r6, [pc, #32]	; (401d34 <RTT_init+0x94>)
  401d14:	4d0d      	ldr	r5, [pc, #52]	; (401d4c <RTT_init+0xac>)
  401d16:	4630      	mov	r0, r6
  401d18:	47a8      	blx	r5
  401d1a:	4284      	cmp	r4, r0
  401d1c:	d0fb      	beq.n	401d16 <RTT_init+0x76>
  	rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  401d1e:	eb04 0108 	add.w	r1, r4, r8
  401d22:	4804      	ldr	r0, [pc, #16]	; (401d34 <RTT_init+0x94>)
  401d24:	4b0a      	ldr	r3, [pc, #40]	; (401d50 <RTT_init+0xb0>)
  401d26:	4798      	blx	r3
  401d28:	e7d8      	b.n	401cdc <RTT_init+0x3c>
	rtt_enable_interrupt(RTT, rttIRQSource);
  401d2a:	4639      	mov	r1, r7
  401d2c:	4801      	ldr	r0, [pc, #4]	; (401d34 <RTT_init+0x94>)
  401d2e:	4b09      	ldr	r3, [pc, #36]	; (401d54 <RTT_init+0xb4>)
  401d30:	4798      	blx	r3
  401d32:	e7e5      	b.n	401d00 <RTT_init+0x60>
  401d34:	400e1830 	.word	0x400e1830
  401d38:	004004ed 	.word	0x004004ed
  401d3c:	47000000 	.word	0x47000000
  401d40:	004004d9 	.word	0x004004d9
  401d44:	e000e100 	.word	0xe000e100
  401d48:	0040052d 	.word	0x0040052d
  401d4c:	00400541 	.word	0x00400541
  401d50:	00400559 	.word	0x00400559
  401d54:	00400519 	.word	0x00400519

00401d58 <add_freq>:
void add_freq(void) {
  401d58:	b530      	push	{r4, r5, lr}
  401d5a:	b08d      	sub	sp, #52	; 0x34
    rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  401d5c:	4c12      	ldr	r4, [pc, #72]	; (401da8 <add_freq+0x50>)
  401d5e:	ab09      	add	r3, sp, #36	; 0x24
  401d60:	aa0a      	add	r2, sp, #40	; 0x28
  401d62:	a90b      	add	r1, sp, #44	; 0x2c
  401d64:	4620      	mov	r0, r4
  401d66:	4d11      	ldr	r5, [pc, #68]	; (401dac <add_freq+0x54>)
  401d68:	47a8      	blx	r5
    rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  401d6a:	ab05      	add	r3, sp, #20
  401d6c:	9300      	str	r3, [sp, #0]
  401d6e:	ab06      	add	r3, sp, #24
  401d70:	aa07      	add	r2, sp, #28
  401d72:	a908      	add	r1, sp, #32
  401d74:	4620      	mov	r0, r4
  401d76:	4d0e      	ldr	r5, [pc, #56]	; (401db0 <add_freq+0x58>)
  401d78:	47a8      	blx	r5
    rtc_set_date_alarm(RTC, 1, current_month, 1, current_day);                              
  401d7a:	9b06      	ldr	r3, [sp, #24]
  401d7c:	9300      	str	r3, [sp, #0]
  401d7e:	2301      	movs	r3, #1
  401d80:	9a07      	ldr	r2, [sp, #28]
  401d82:	4619      	mov	r1, r3
  401d84:	4620      	mov	r0, r4
  401d86:	4d0b      	ldr	r5, [pc, #44]	; (401db4 <add_freq+0x5c>)
  401d88:	47a8      	blx	r5
    rtc_set_time_alarm(RTC, 1, current_hour, 1, current_min, 1, current_sec + 20);
  401d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401d8c:	3314      	adds	r3, #20
  401d8e:	9302      	str	r3, [sp, #8]
  401d90:	2101      	movs	r1, #1
  401d92:	9101      	str	r1, [sp, #4]
  401d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401d96:	9300      	str	r3, [sp, #0]
  401d98:	460b      	mov	r3, r1
  401d9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  401d9c:	4620      	mov	r0, r4
  401d9e:	4c06      	ldr	r4, [pc, #24]	; (401db8 <add_freq+0x60>)
  401da0:	47a0      	blx	r4
}
  401da2:	b00d      	add	sp, #52	; 0x34
  401da4:	bd30      	pop	{r4, r5, pc}
  401da6:	bf00      	nop
  401da8:	400e1860 	.word	0x400e1860
  401dac:	004001c7 	.word	0x004001c7
  401db0:	00400345 	.word	0x00400345
  401db4:	00400471 	.word	0x00400471
  401db8:	004002b1 	.word	0x004002b1

00401dbc <pin_toggle>:
void pin_toggle(Pio *pio, uint32_t mask) {
  401dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401dbe:	4606      	mov	r6, r0
  401dc0:	460f      	mov	r7, r1
	pio_clear(pio, mask);		// Coloca a sa�da em 0
  401dc2:	4b06      	ldr	r3, [pc, #24]	; (401ddc <pin_toggle+0x20>)
  401dc4:	4798      	blx	r3
	delay_ms(100);				// Aguarda 100ms
  401dc6:	4d06      	ldr	r5, [pc, #24]	; (401de0 <pin_toggle+0x24>)
  401dc8:	4628      	mov	r0, r5
  401dca:	4c06      	ldr	r4, [pc, #24]	; (401de4 <pin_toggle+0x28>)
  401dcc:	47a0      	blx	r4
	pio_set(pio, mask);			// Coloca a sa�da em 1
  401dce:	4639      	mov	r1, r7
  401dd0:	4630      	mov	r0, r6
  401dd2:	4b05      	ldr	r3, [pc, #20]	; (401de8 <pin_toggle+0x2c>)
  401dd4:	4798      	blx	r3
	delay_ms(100);				// Aguarda 100ms
  401dd6:	4628      	mov	r0, r5
  401dd8:	47a0      	blx	r4
  401dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401ddc:	004012e3 	.word	0x004012e3
  401de0:	004d2b25 	.word	0x004d2b25
  401de4:	20400001 	.word	0x20400001
  401de8:	004012df 	.word	0x004012df

00401dec <TC1_Handler>:
void TC1_Handler(void) {
  401dec:	b500      	push	{lr}
  401dee:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 1);
  401df0:	2101      	movs	r1, #1
  401df2:	4805      	ldr	r0, [pc, #20]	; (401e08 <TC1_Handler+0x1c>)
  401df4:	4b05      	ldr	r3, [pc, #20]	; (401e0c <TC1_Handler+0x20>)
  401df6:	4798      	blx	r3
  401df8:	9001      	str	r0, [sp, #4]
	pin_toggle(LED1_PIO, LED1_IDX_MASK);  
  401dfa:	2101      	movs	r1, #1
  401dfc:	4804      	ldr	r0, [pc, #16]	; (401e10 <TC1_Handler+0x24>)
  401dfe:	4b05      	ldr	r3, [pc, #20]	; (401e14 <TC1_Handler+0x28>)
  401e00:	4798      	blx	r3
}
  401e02:	b003      	add	sp, #12
  401e04:	f85d fb04 	ldr.w	pc, [sp], #4
  401e08:	4000c000 	.word	0x4000c000
  401e0c:	00400719 	.word	0x00400719
  401e10:	400e0e00 	.word	0x400e0e00
  401e14:	00401dbd 	.word	0x00401dbd

00401e18 <TC2_Handler>:
void TC2_Handler(void) {
  401e18:	b500      	push	{lr}
  401e1a:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 2);
  401e1c:	2102      	movs	r1, #2
  401e1e:	4806      	ldr	r0, [pc, #24]	; (401e38 <TC2_Handler+0x20>)
  401e20:	4b06      	ldr	r3, [pc, #24]	; (401e3c <TC2_Handler+0x24>)
  401e22:	4798      	blx	r3
  401e24:	9001      	str	r0, [sp, #4]
	pin_toggle(LED_PIO, LED_IDX_MASK);  
  401e26:	f44f 7180 	mov.w	r1, #256	; 0x100
  401e2a:	4805      	ldr	r0, [pc, #20]	; (401e40 <TC2_Handler+0x28>)
  401e2c:	4b05      	ldr	r3, [pc, #20]	; (401e44 <TC2_Handler+0x2c>)
  401e2e:	4798      	blx	r3
}
  401e30:	b003      	add	sp, #12
  401e32:	f85d fb04 	ldr.w	pc, [sp], #4
  401e36:	bf00      	nop
  401e38:	4000c000 	.word	0x4000c000
  401e3c:	00400719 	.word	0x00400719
  401e40:	400e1200 	.word	0x400e1200
  401e44:	00401dbd 	.word	0x00401dbd

00401e48 <RTT_Handler>:
void RTT_Handler(void) {
  401e48:	b508      	push	{r3, lr}
  ul_status = rtt_get_status(RTT);
  401e4a:	480a      	ldr	r0, [pc, #40]	; (401e74 <RTT_Handler+0x2c>)
  401e4c:	4b0a      	ldr	r3, [pc, #40]	; (401e78 <RTT_Handler+0x30>)
  401e4e:	4798      	blx	r3
  if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  401e50:	f010 0f01 	tst.w	r0, #1
  401e54:	d100      	bne.n	401e58 <RTT_Handler+0x10>
  401e56:	bd08      	pop	{r3, pc}
      pin_toggle(LED2_PIO, LED2_IDX_MASK);
  401e58:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401e5c:	4807      	ldr	r0, [pc, #28]	; (401e7c <RTT_Handler+0x34>)
  401e5e:	4b08      	ldr	r3, [pc, #32]	; (401e80 <RTT_Handler+0x38>)
  401e60:	4798      	blx	r3
	  RTT_init(4, 16, RTT_MR_ALMIEN);
  401e62:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401e66:	2010      	movs	r0, #16
  401e68:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  401e6c:	4b05      	ldr	r3, [pc, #20]	; (401e84 <RTT_Handler+0x3c>)
  401e6e:	4798      	blx	r3
}
  401e70:	e7f1      	b.n	401e56 <RTT_Handler+0xe>
  401e72:	bf00      	nop
  401e74:	400e1830 	.word	0x400e1830
  401e78:	00400555 	.word	0x00400555
  401e7c:	400e1200 	.word	0x400e1200
  401e80:	00401dbd 	.word	0x00401dbd
  401e84:	00401ca1 	.word	0x00401ca1

00401e88 <io_init>:
void io_init(void) {
  401e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401e8c:	b082      	sub	sp, #8
    pmc_enable_periph_clk(LED_PIO_ID);
  401e8e:	200c      	movs	r0, #12
  401e90:	4d36      	ldr	r5, [pc, #216]	; (401f6c <io_init+0xe4>)
  401e92:	47a8      	blx	r5
    pio_configure(LED_PIO, PIO_OUTPUT_1, LED_IDX_MASK, PIO_DEFAULT);
  401e94:	4e36      	ldr	r6, [pc, #216]	; (401f70 <io_init+0xe8>)
  401e96:	2300      	movs	r3, #0
  401e98:	f44f 7280 	mov.w	r2, #256	; 0x100
  401e9c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401ea0:	4630      	mov	r0, r6
  401ea2:	4c34      	ldr	r4, [pc, #208]	; (401f74 <io_init+0xec>)
  401ea4:	47a0      	blx	r4
    pmc_enable_periph_clk(LED1_PIO_ID);
  401ea6:	200a      	movs	r0, #10
  401ea8:	47a8      	blx	r5
    pio_configure(LED1_PIO, PIO_OUTPUT_1, LED1_IDX_MASK, PIO_DEFAULT);
  401eaa:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 401f98 <io_init+0x110>
  401eae:	2300      	movs	r3, #0
  401eb0:	2201      	movs	r2, #1
  401eb2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401eb6:	4640      	mov	r0, r8
  401eb8:	47a0      	blx	r4
    pmc_enable_periph_clk(LED2_PIO_ID);
  401eba:	200c      	movs	r0, #12
  401ebc:	47a8      	blx	r5
    pio_configure(LED2_PIO, PIO_OUTPUT_1, LED2_IDX_MASK, PIO_DEFAULT);
  401ebe:	2300      	movs	r3, #0
  401ec0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401ec4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401ec8:	4630      	mov	r0, r6
  401eca:	47a0      	blx	r4
    pmc_enable_periph_clk(LED3_PIO_ID);
  401ecc:	200b      	movs	r0, #11
  401ece:	47a8      	blx	r5
    pio_configure(LED3_PIO, PIO_OUTPUT_1, LED3_IDX_MASK, PIO_DEFAULT);
  401ed0:	2300      	movs	r3, #0
  401ed2:	2204      	movs	r2, #4
  401ed4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401ed8:	4827      	ldr	r0, [pc, #156]	; (401f78 <io_init+0xf0>)
  401eda:	47a0      	blx	r4
    pmc_enable_periph_clk(BUT1_PIO_ID);
  401edc:	2010      	movs	r0, #16
  401ede:	47a8      	blx	r5
	pmc_enable_periph_clk(BUT2_PIO_ID);
  401ee0:	200c      	movs	r0, #12
  401ee2:	47a8      	blx	r5
	pmc_enable_periph_clk(BUT3_PIO_ID);
  401ee4:	200a      	movs	r0, #10
  401ee6:	47a8      	blx	r5
    pio_configure(BUT1_PIO, PIO_INPUT, BUT1_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  401ee8:	4d24      	ldr	r5, [pc, #144]	; (401f7c <io_init+0xf4>)
  401eea:	2309      	movs	r3, #9
  401eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ef0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401ef4:	4628      	mov	r0, r5
  401ef6:	47a0      	blx	r4
    pio_set_debounce_filter(BUT1_PIO, BUT1_IDX_MASK, 60);
  401ef8:	223c      	movs	r2, #60	; 0x3c
  401efa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401efe:	4628      	mov	r0, r5
  401f00:	4f1f      	ldr	r7, [pc, #124]	; (401f80 <io_init+0xf8>)
  401f02:	47b8      	blx	r7
	pio_configure(BUT2_PIO, PIO_INPUT, BUT2_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  401f04:	2309      	movs	r3, #9
  401f06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401f0a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401f0e:	4630      	mov	r0, r6
  401f10:	47a0      	blx	r4
    pio_set_debounce_filter(BUT2_PIO, BUT2_IDX_MASK, 60);
  401f12:	223c      	movs	r2, #60	; 0x3c
  401f14:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401f18:	4630      	mov	r0, r6
  401f1a:	47b8      	blx	r7
    pio_configure(BUT3_PIO, PIO_INPUT, BUT3_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  401f1c:	2309      	movs	r3, #9
  401f1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401f22:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401f26:	4640      	mov	r0, r8
  401f28:	47a0      	blx	r4
    pio_set_debounce_filter(BUT3_PIO, BUT3_IDX_MASK, 60);
  401f2a:	223c      	movs	r2, #60	; 0x3c
  401f2c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401f30:	4640      	mov	r0, r8
  401f32:	47b8      	blx	r7
    pio_handler_set(BUT1_PIO,
  401f34:	4b13      	ldr	r3, [pc, #76]	; (401f84 <io_init+0xfc>)
  401f36:	9300      	str	r3, [sp, #0]
  401f38:	2340      	movs	r3, #64	; 0x40
  401f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f3e:	2110      	movs	r1, #16
  401f40:	4628      	mov	r0, r5
  401f42:	4c11      	ldr	r4, [pc, #68]	; (401f88 <io_init+0x100>)
  401f44:	47a0      	blx	r4
    pio_enable_interrupt(BUT1_PIO, BUT1_IDX_MASK);
  401f46:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401f4a:	4628      	mov	r0, r5
  401f4c:	4b0f      	ldr	r3, [pc, #60]	; (401f8c <io_init+0x104>)
  401f4e:	4798      	blx	r3
    pio_get_interrupt_status(BUT1_PIO);	
  401f50:	4628      	mov	r0, r5
  401f52:	4b0f      	ldr	r3, [pc, #60]	; (401f90 <io_init+0x108>)
  401f54:	4798      	blx	r3
  401f56:	4b0f      	ldr	r3, [pc, #60]	; (401f94 <io_init+0x10c>)
  401f58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401f5c:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401f5e:	2280      	movs	r2, #128	; 0x80
  401f60:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
}
  401f64:	b002      	add	sp, #8
  401f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401f6a:	bf00      	nop
  401f6c:	004016ed 	.word	0x004016ed
  401f70:	400e1200 	.word	0x400e1200
  401f74:	004013d9 	.word	0x004013d9
  401f78:	400e1000 	.word	0x400e1000
  401f7c:	400e1400 	.word	0x400e1400
  401f80:	004012c5 	.word	0x004012c5
  401f84:	00401d59 	.word	0x00401d59
  401f88:	004014f9 	.word	0x004014f9
  401f8c:	0040149b 	.word	0x0040149b
  401f90:	0040149f 	.word	0x0040149f
  401f94:	e000e100 	.word	0xe000e100
  401f98:	400e0e00 	.word	0x400e0e00

00401f9c <TC_init>:
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  401f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401fa0:	b085      	sub	sp, #20
  401fa2:	4606      	mov	r6, r0
  401fa4:	460c      	mov	r4, r1
  401fa6:	4617      	mov	r7, r2
  401fa8:	4698      	mov	r8, r3
	pmc_enable_periph_clk(ID_TC);
  401faa:	4608      	mov	r0, r1
  401fac:	4b1c      	ldr	r3, [pc, #112]	; (402020 <TC_init+0x84>)
  401fae:	4798      	blx	r3
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401fb0:	4d1c      	ldr	r5, [pc, #112]	; (402024 <TC_init+0x88>)
  401fb2:	9500      	str	r5, [sp, #0]
  401fb4:	ab02      	add	r3, sp, #8
  401fb6:	aa03      	add	r2, sp, #12
  401fb8:	4629      	mov	r1, r5
  401fba:	4640      	mov	r0, r8
  401fbc:	f8df 9080 	ldr.w	r9, [pc, #128]	; 402040 <TC_init+0xa4>
  401fc0:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  401fc2:	9a02      	ldr	r2, [sp, #8]
  401fc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401fc8:	4639      	mov	r1, r7
  401fca:	4630      	mov	r0, r6
  401fcc:	4b16      	ldr	r3, [pc, #88]	; (402028 <TC_init+0x8c>)
  401fce:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  401fd0:	9a03      	ldr	r2, [sp, #12]
  401fd2:	fbb5 f2f2 	udiv	r2, r5, r2
  401fd6:	fbb2 f2f8 	udiv	r2, r2, r8
  401fda:	4639      	mov	r1, r7
  401fdc:	4630      	mov	r0, r6
  401fde:	4b13      	ldr	r3, [pc, #76]	; (40202c <TC_init+0x90>)
  401fe0:	4798      	blx	r3
  	NVIC_SetPriority(ID_TC, 4);
  401fe2:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  401fe4:	2b00      	cmp	r3, #0
  401fe6:	db13      	blt.n	402010 <TC_init+0x74>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401fe8:	4a11      	ldr	r2, [pc, #68]	; (402030 <TC_init+0x94>)
  401fea:	2180      	movs	r1, #128	; 0x80
  401fec:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401fee:	095b      	lsrs	r3, r3, #5
  401ff0:	f004 041f 	and.w	r4, r4, #31
  401ff4:	2201      	movs	r2, #1
  401ff6:	fa02 f404 	lsl.w	r4, r2, r4
  401ffa:	4a0e      	ldr	r2, [pc, #56]	; (402034 <TC_init+0x98>)
  401ffc:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  402000:	2210      	movs	r2, #16
  402002:	4639      	mov	r1, r7
  402004:	4630      	mov	r0, r6
  402006:	4b0c      	ldr	r3, [pc, #48]	; (402038 <TC_init+0x9c>)
  402008:	4798      	blx	r3
}
  40200a:	b005      	add	sp, #20
  40200c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402010:	f004 010f 	and.w	r1, r4, #15
  402014:	4a09      	ldr	r2, [pc, #36]	; (40203c <TC_init+0xa0>)
  402016:	440a      	add	r2, r1
  402018:	2180      	movs	r1, #128	; 0x80
  40201a:	7611      	strb	r1, [r2, #24]
  40201c:	e7e7      	b.n	401fee <TC_init+0x52>
  40201e:	bf00      	nop
  402020:	004016ed 	.word	0x004016ed
  402024:	11e1a300 	.word	0x11e1a300
  402028:	004006e7 	.word	0x004006e7
  40202c:	00400709 	.word	0x00400709
  402030:	e000e400 	.word	0xe000e400
  402034:	e000e100 	.word	0xe000e100
  402038:	00400711 	.word	0x00400711
  40203c:	e000ecfc 	.word	0xe000ecfc
  402040:	00400721 	.word	0x00400721

00402044 <RTC_init>:

void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type) {
  402044:	b082      	sub	sp, #8
  402046:	b570      	push	{r4, r5, r6, lr}
  402048:	b082      	sub	sp, #8
  40204a:	4605      	mov	r5, r0
  40204c:	460c      	mov	r4, r1
  40204e:	a906      	add	r1, sp, #24
  402050:	e881 000c 	stmia.w	r1, {r2, r3}
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  402054:	2002      	movs	r0, #2
  402056:	4b1d      	ldr	r3, [pc, #116]	; (4020cc <RTC_init+0x88>)
  402058:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(rtc, 0);
  40205a:	2100      	movs	r1, #0
  40205c:	4628      	mov	r0, r5
  40205e:	4b1c      	ldr	r3, [pc, #112]	; (4020d0 <RTC_init+0x8c>)
  402060:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  402062:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402064:	9300      	str	r3, [sp, #0]
  402066:	9b08      	ldr	r3, [sp, #32]
  402068:	9a07      	ldr	r2, [sp, #28]
  40206a:	9906      	ldr	r1, [sp, #24]
  40206c:	4628      	mov	r0, r5
  40206e:	4e19      	ldr	r6, [pc, #100]	; (4020d4 <RTC_init+0x90>)
  402070:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  402072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402074:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  402076:	990a      	ldr	r1, [sp, #40]	; 0x28
  402078:	4628      	mov	r0, r5
  40207a:	4e17      	ldr	r6, [pc, #92]	; (4020d8 <RTC_init+0x94>)
  40207c:	47b0      	blx	r6

	/* Configure RTC interrupts */
	NVIC_DisableIRQ(id_rtc);
  40207e:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402080:	b2e4      	uxtb	r4, r4
  402082:	f004 011f 	and.w	r1, r4, #31
  402086:	2301      	movs	r3, #1
  402088:	408b      	lsls	r3, r1
  40208a:	0956      	lsrs	r6, r2, #5
  40208c:	4813      	ldr	r0, [pc, #76]	; (4020dc <RTC_init+0x98>)
  40208e:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  402092:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402096:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  40209a:	2a00      	cmp	r2, #0
  40209c:	db0f      	blt.n	4020be <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40209e:	490f      	ldr	r1, [pc, #60]	; (4020dc <RTC_init+0x98>)
  4020a0:	4411      	add	r1, r2
  4020a2:	2280      	movs	r2, #128	; 0x80
  4020a4:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4020a8:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	NVIC_ClearPendingIRQ(id_rtc);
	NVIC_SetPriority(id_rtc, 4);
	NVIC_EnableIRQ(id_rtc);

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(rtc,  irq_type);
  4020ac:	990d      	ldr	r1, [sp, #52]	; 0x34
  4020ae:	4628      	mov	r0, r5
  4020b0:	4b0b      	ldr	r3, [pc, #44]	; (4020e0 <RTC_init+0x9c>)
  4020b2:	4798      	blx	r3
}
  4020b4:	b002      	add	sp, #8
  4020b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  4020ba:	b002      	add	sp, #8
  4020bc:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4020be:	f004 040f 	and.w	r4, r4, #15
  4020c2:	4a08      	ldr	r2, [pc, #32]	; (4020e4 <RTC_init+0xa0>)
  4020c4:	2180      	movs	r1, #128	; 0x80
  4020c6:	5511      	strb	r1, [r2, r4]
  4020c8:	e7ee      	b.n	4020a8 <RTC_init+0x64>
  4020ca:	bf00      	nop
  4020cc:	004016ed 	.word	0x004016ed
  4020d0:	004001ad 	.word	0x004001ad
  4020d4:	004003b9 	.word	0x004003b9
  4020d8:	00400221 	.word	0x00400221
  4020dc:	e000e100 	.word	0xe000e100
  4020e0:	004001c3 	.word	0x004001c3
  4020e4:	e000ed14 	.word	0xe000ed14

004020e8 <sla>:

void sla(void) {	
  4020e8:	b530      	push	{r4, r5, lr}
  4020ea:	b08b      	sub	sp, #44	; 0x2c
	gfx_mono_draw_rect(0, 0, 128, 32, GFX_PIXEL_CLR);
  4020ec:	2400      	movs	r4, #0
  4020ee:	9400      	str	r4, [sp, #0]
  4020f0:	2320      	movs	r3, #32
  4020f2:	2280      	movs	r2, #128	; 0x80
  4020f4:	4621      	mov	r1, r4
  4020f6:	4620      	mov	r0, r4
  4020f8:	4d0b      	ldr	r5, [pc, #44]	; (402128 <sla+0x40>)
  4020fa:	47a8      	blx	r5

	/* Leitura do valor atual do RTC */           
	uint32_t current_hour, current_min, current_sec;
	rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  4020fc:	ab07      	add	r3, sp, #28
  4020fe:	aa08      	add	r2, sp, #32
  402100:	a909      	add	r1, sp, #36	; 0x24
  402102:	480a      	ldr	r0, [pc, #40]	; (40212c <sla+0x44>)
  402104:	4d0a      	ldr	r5, [pc, #40]	; (402130 <sla+0x48>)
  402106:	47a8      	blx	r5

	/* Imprime na tela o valor atual do RTC */
	char str[20];
	sprintf(str, "%02d:%02d:%02d", current_hour, current_min, current_sec);
  402108:	9b07      	ldr	r3, [sp, #28]
  40210a:	9300      	str	r3, [sp, #0]
  40210c:	9b08      	ldr	r3, [sp, #32]
  40210e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402110:	4908      	ldr	r1, [pc, #32]	; (402134 <sla+0x4c>)
  402112:	a802      	add	r0, sp, #8
  402114:	4d08      	ldr	r5, [pc, #32]	; (402138 <sla+0x50>)
  402116:	47a8      	blx	r5
	gfx_mono_draw_string(str, 0, 0, &sysfont);
  402118:	4b08      	ldr	r3, [pc, #32]	; (40213c <sla+0x54>)
  40211a:	4622      	mov	r2, r4
  40211c:	4621      	mov	r1, r4
  40211e:	a802      	add	r0, sp, #8
  402120:	4c07      	ldr	r4, [pc, #28]	; (402140 <sla+0x58>)
  402122:	47a0      	blx	r4
}
  402124:	b00b      	add	sp, #44	; 0x2c
  402126:	bd30      	pop	{r4, r5, pc}
  402128:	00400be5 	.word	0x00400be5
  40212c:	400e1860 	.word	0x400e1860
  402130:	004001c7 	.word	0x004001c7
  402134:	004075e4 	.word	0x004075e4
  402138:	00402489 	.word	0x00402489
  40213c:	20400010 	.word	0x20400010
  402140:	00400d19 	.word	0x00400d19

00402144 <RTC_Handler>:
void RTC_Handler(void) {
  402144:	b538      	push	{r3, r4, r5, lr}
    uint32_t ul_status = rtc_get_status(RTC);
  402146:	4813      	ldr	r0, [pc, #76]	; (402194 <RTC_Handler+0x50>)
  402148:	4b13      	ldr	r3, [pc, #76]	; (402198 <RTC_Handler+0x54>)
  40214a:	4798      	blx	r3
  40214c:	4604      	mov	r4, r0
    if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {	
  40214e:	f010 0f04 	tst.w	r0, #4
  402152:	d117      	bne.n	402184 <RTC_Handler+0x40>
    if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  402154:	f014 0f02 	tst.w	r4, #2
  402158:	d117      	bne.n	40218a <RTC_Handler+0x46>
    rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  40215a:	4d0e      	ldr	r5, [pc, #56]	; (402194 <RTC_Handler+0x50>)
  40215c:	2104      	movs	r1, #4
  40215e:	4628      	mov	r0, r5
  402160:	4c0e      	ldr	r4, [pc, #56]	; (40219c <RTC_Handler+0x58>)
  402162:	47a0      	blx	r4
    rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  402164:	2102      	movs	r1, #2
  402166:	4628      	mov	r0, r5
  402168:	47a0      	blx	r4
    rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  40216a:	2101      	movs	r1, #1
  40216c:	4628      	mov	r0, r5
  40216e:	47a0      	blx	r4
    rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  402170:	2108      	movs	r1, #8
  402172:	4628      	mov	r0, r5
  402174:	47a0      	blx	r4
    rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  402176:	2110      	movs	r1, #16
  402178:	4628      	mov	r0, r5
  40217a:	47a0      	blx	r4
    rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  40217c:	2120      	movs	r1, #32
  40217e:	4628      	mov	r0, r5
  402180:	47a0      	blx	r4
  402182:	bd38      	pop	{r3, r4, r5, pc}
		sla();
  402184:	4b06      	ldr	r3, [pc, #24]	; (4021a0 <RTC_Handler+0x5c>)
  402186:	4798      	blx	r3
  402188:	e7e4      	b.n	402154 <RTC_Handler+0x10>
    	pin_toggle(LED3_PIO, LED3_IDX_MASK);
  40218a:	2104      	movs	r1, #4
  40218c:	4805      	ldr	r0, [pc, #20]	; (4021a4 <RTC_Handler+0x60>)
  40218e:	4b06      	ldr	r3, [pc, #24]	; (4021a8 <RTC_Handler+0x64>)
  402190:	4798      	blx	r3
  402192:	e7e2      	b.n	40215a <RTC_Handler+0x16>
  402194:	400e1860 	.word	0x400e1860
  402198:	004004d1 	.word	0x004004d1
  40219c:	004004d5 	.word	0x004004d5
  4021a0:	004020e9 	.word	0x004020e9
  4021a4:	400e1000 	.word	0x400e1000
  4021a8:	00401dbd 	.word	0x00401dbd

004021ac <main>:

int main (void) {
  4021ac:	b500      	push	{lr}
  4021ae:	b08f      	sub	sp, #60	; 0x3c
	board_init();
  4021b0:	4b20      	ldr	r3, [pc, #128]	; (402234 <main+0x88>)
  4021b2:	4798      	blx	r3
	sysclk_init();
  4021b4:	4b20      	ldr	r3, [pc, #128]	; (402238 <main+0x8c>)
  4021b6:	4798      	blx	r3
	delay_init();

	WDT->WDT_MR = WDT_MR_WDDIS;
  4021b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4021bc:	4b1f      	ldr	r3, [pc, #124]	; (40223c <main+0x90>)
  4021be:	605a      	str	r2, [r3, #4]

	io_init();
  4021c0:	4b1f      	ldr	r3, [pc, #124]	; (402240 <main+0x94>)
  4021c2:	4798      	blx	r3

	gfx_mono_ssd1306_init();
  4021c4:	4b1f      	ldr	r3, [pc, #124]	; (402244 <main+0x98>)
  4021c6:	4798      	blx	r3

	/** Configura RTC */                                                                        
    calendar rtc_initial = {2018, 3, 19, 12, 15, 45 ,1};                                            
  4021c8:	ac07      	add	r4, sp, #28
  4021ca:	4d1f      	ldr	r5, [pc, #124]	; (402248 <main+0x9c>)
  4021cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4021ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4021d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4021d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_ALREN | RTC_IER_SECEN);
  4021d8:	2306      	movs	r3, #6
  4021da:	9305      	str	r3, [sp, #20]
  4021dc:	466c      	mov	r4, sp
  4021de:	ad09      	add	r5, sp, #36	; 0x24
  4021e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4021e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4021e4:	682b      	ldr	r3, [r5, #0]
  4021e6:	6023      	str	r3, [r4, #0]
  4021e8:	ab07      	add	r3, sp, #28
  4021ea:	cb0c      	ldmia	r3, {r2, r3}
  4021ec:	2102      	movs	r1, #2
  4021ee:	4817      	ldr	r0, [pc, #92]	; (40224c <main+0xa0>)
  4021f0:	4c17      	ldr	r4, [pc, #92]	; (402250 <main+0xa4>)
  4021f2:	47a0      	blx	r4

	TC_init(TC0, ID_TC1, 1, 2);
  4021f4:	4c17      	ldr	r4, [pc, #92]	; (402254 <main+0xa8>)
  4021f6:	2302      	movs	r3, #2
  4021f8:	2201      	movs	r2, #1
  4021fa:	2118      	movs	r1, #24
  4021fc:	4620      	mov	r0, r4
  4021fe:	4e16      	ldr	r6, [pc, #88]	; (402258 <main+0xac>)
  402200:	47b0      	blx	r6
	tc_start(TC0, 1);
  402202:	2101      	movs	r1, #1
  402204:	4620      	mov	r0, r4
  402206:	4d15      	ldr	r5, [pc, #84]	; (40225c <main+0xb0>)
  402208:	47a8      	blx	r5

	TC_init(TC0, ID_TC2, 2, 5);
  40220a:	2305      	movs	r3, #5
  40220c:	2202      	movs	r2, #2
  40220e:	2119      	movs	r1, #25
  402210:	4620      	mov	r0, r4
  402212:	47b0      	blx	r6
	tc_start(TC0, 2);
  402214:	2102      	movs	r1, #2
  402216:	4620      	mov	r0, r4
  402218:	47a8      	blx	r5

	RTT_init(4, 16, RTT_MR_ALMIEN);
  40221a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40221e:	2010      	movs	r0, #16
  402220:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  402224:	4b0e      	ldr	r3, [pc, #56]	; (402260 <main+0xb4>)
  402226:	4798      	blx	r3


	while (1) {		
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  402228:	2502      	movs	r5, #2
  40222a:	4c0e      	ldr	r4, [pc, #56]	; (402264 <main+0xb8>)
  40222c:	4628      	mov	r0, r5
  40222e:	47a0      	blx	r4
  402230:	e7fc      	b.n	40222c <main+0x80>
  402232:	bf00      	nop
  402234:	00401185 	.word	0x00401185
  402238:	00401115 	.word	0x00401115
  40223c:	400e1850 	.word	0x400e1850
  402240:	00401e89 	.word	0x00401e89
  402244:	00400db1 	.word	0x00400db1
  402248:	004075c8 	.word	0x004075c8
  40224c:	400e1860 	.word	0x400e1860
  402250:	00402045 	.word	0x00402045
  402254:	4000c000 	.word	0x4000c000
  402258:	00401f9d 	.word	0x00401f9d
  40225c:	00400701 	.word	0x00400701
  402260:	00401ca1 	.word	0x00401ca1
  402264:	00401791 	.word	0x00401791

00402268 <__libc_init_array>:
  402268:	b570      	push	{r4, r5, r6, lr}
  40226a:	4e0f      	ldr	r6, [pc, #60]	; (4022a8 <__libc_init_array+0x40>)
  40226c:	4d0f      	ldr	r5, [pc, #60]	; (4022ac <__libc_init_array+0x44>)
  40226e:	1b76      	subs	r6, r6, r5
  402270:	10b6      	asrs	r6, r6, #2
  402272:	bf18      	it	ne
  402274:	2400      	movne	r4, #0
  402276:	d005      	beq.n	402284 <__libc_init_array+0x1c>
  402278:	3401      	adds	r4, #1
  40227a:	f855 3b04 	ldr.w	r3, [r5], #4
  40227e:	4798      	blx	r3
  402280:	42a6      	cmp	r6, r4
  402282:	d1f9      	bne.n	402278 <__libc_init_array+0x10>
  402284:	4e0a      	ldr	r6, [pc, #40]	; (4022b0 <__libc_init_array+0x48>)
  402286:	4d0b      	ldr	r5, [pc, #44]	; (4022b4 <__libc_init_array+0x4c>)
  402288:	1b76      	subs	r6, r6, r5
  40228a:	f005 faf9 	bl	407880 <_init>
  40228e:	10b6      	asrs	r6, r6, #2
  402290:	bf18      	it	ne
  402292:	2400      	movne	r4, #0
  402294:	d006      	beq.n	4022a4 <__libc_init_array+0x3c>
  402296:	3401      	adds	r4, #1
  402298:	f855 3b04 	ldr.w	r3, [r5], #4
  40229c:	4798      	blx	r3
  40229e:	42a6      	cmp	r6, r4
  4022a0:	d1f9      	bne.n	402296 <__libc_init_array+0x2e>
  4022a2:	bd70      	pop	{r4, r5, r6, pc}
  4022a4:	bd70      	pop	{r4, r5, r6, pc}
  4022a6:	bf00      	nop
  4022a8:	0040788c 	.word	0x0040788c
  4022ac:	0040788c 	.word	0x0040788c
  4022b0:	00407894 	.word	0x00407894
  4022b4:	0040788c 	.word	0x0040788c

004022b8 <memcpy>:
  4022b8:	4684      	mov	ip, r0
  4022ba:	ea41 0300 	orr.w	r3, r1, r0
  4022be:	f013 0303 	ands.w	r3, r3, #3
  4022c2:	d16d      	bne.n	4023a0 <memcpy+0xe8>
  4022c4:	3a40      	subs	r2, #64	; 0x40
  4022c6:	d341      	bcc.n	40234c <memcpy+0x94>
  4022c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4022cc:	f840 3b04 	str.w	r3, [r0], #4
  4022d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4022d4:	f840 3b04 	str.w	r3, [r0], #4
  4022d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4022dc:	f840 3b04 	str.w	r3, [r0], #4
  4022e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4022e4:	f840 3b04 	str.w	r3, [r0], #4
  4022e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4022ec:	f840 3b04 	str.w	r3, [r0], #4
  4022f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4022f4:	f840 3b04 	str.w	r3, [r0], #4
  4022f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4022fc:	f840 3b04 	str.w	r3, [r0], #4
  402300:	f851 3b04 	ldr.w	r3, [r1], #4
  402304:	f840 3b04 	str.w	r3, [r0], #4
  402308:	f851 3b04 	ldr.w	r3, [r1], #4
  40230c:	f840 3b04 	str.w	r3, [r0], #4
  402310:	f851 3b04 	ldr.w	r3, [r1], #4
  402314:	f840 3b04 	str.w	r3, [r0], #4
  402318:	f851 3b04 	ldr.w	r3, [r1], #4
  40231c:	f840 3b04 	str.w	r3, [r0], #4
  402320:	f851 3b04 	ldr.w	r3, [r1], #4
  402324:	f840 3b04 	str.w	r3, [r0], #4
  402328:	f851 3b04 	ldr.w	r3, [r1], #4
  40232c:	f840 3b04 	str.w	r3, [r0], #4
  402330:	f851 3b04 	ldr.w	r3, [r1], #4
  402334:	f840 3b04 	str.w	r3, [r0], #4
  402338:	f851 3b04 	ldr.w	r3, [r1], #4
  40233c:	f840 3b04 	str.w	r3, [r0], #4
  402340:	f851 3b04 	ldr.w	r3, [r1], #4
  402344:	f840 3b04 	str.w	r3, [r0], #4
  402348:	3a40      	subs	r2, #64	; 0x40
  40234a:	d2bd      	bcs.n	4022c8 <memcpy+0x10>
  40234c:	3230      	adds	r2, #48	; 0x30
  40234e:	d311      	bcc.n	402374 <memcpy+0xbc>
  402350:	f851 3b04 	ldr.w	r3, [r1], #4
  402354:	f840 3b04 	str.w	r3, [r0], #4
  402358:	f851 3b04 	ldr.w	r3, [r1], #4
  40235c:	f840 3b04 	str.w	r3, [r0], #4
  402360:	f851 3b04 	ldr.w	r3, [r1], #4
  402364:	f840 3b04 	str.w	r3, [r0], #4
  402368:	f851 3b04 	ldr.w	r3, [r1], #4
  40236c:	f840 3b04 	str.w	r3, [r0], #4
  402370:	3a10      	subs	r2, #16
  402372:	d2ed      	bcs.n	402350 <memcpy+0x98>
  402374:	320c      	adds	r2, #12
  402376:	d305      	bcc.n	402384 <memcpy+0xcc>
  402378:	f851 3b04 	ldr.w	r3, [r1], #4
  40237c:	f840 3b04 	str.w	r3, [r0], #4
  402380:	3a04      	subs	r2, #4
  402382:	d2f9      	bcs.n	402378 <memcpy+0xc0>
  402384:	3204      	adds	r2, #4
  402386:	d008      	beq.n	40239a <memcpy+0xe2>
  402388:	07d2      	lsls	r2, r2, #31
  40238a:	bf1c      	itt	ne
  40238c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402390:	f800 3b01 	strbne.w	r3, [r0], #1
  402394:	d301      	bcc.n	40239a <memcpy+0xe2>
  402396:	880b      	ldrh	r3, [r1, #0]
  402398:	8003      	strh	r3, [r0, #0]
  40239a:	4660      	mov	r0, ip
  40239c:	4770      	bx	lr
  40239e:	bf00      	nop
  4023a0:	2a08      	cmp	r2, #8
  4023a2:	d313      	bcc.n	4023cc <memcpy+0x114>
  4023a4:	078b      	lsls	r3, r1, #30
  4023a6:	d08d      	beq.n	4022c4 <memcpy+0xc>
  4023a8:	f010 0303 	ands.w	r3, r0, #3
  4023ac:	d08a      	beq.n	4022c4 <memcpy+0xc>
  4023ae:	f1c3 0304 	rsb	r3, r3, #4
  4023b2:	1ad2      	subs	r2, r2, r3
  4023b4:	07db      	lsls	r3, r3, #31
  4023b6:	bf1c      	itt	ne
  4023b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4023bc:	f800 3b01 	strbne.w	r3, [r0], #1
  4023c0:	d380      	bcc.n	4022c4 <memcpy+0xc>
  4023c2:	f831 3b02 	ldrh.w	r3, [r1], #2
  4023c6:	f820 3b02 	strh.w	r3, [r0], #2
  4023ca:	e77b      	b.n	4022c4 <memcpy+0xc>
  4023cc:	3a04      	subs	r2, #4
  4023ce:	d3d9      	bcc.n	402384 <memcpy+0xcc>
  4023d0:	3a01      	subs	r2, #1
  4023d2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4023d6:	f800 3b01 	strb.w	r3, [r0], #1
  4023da:	d2f9      	bcs.n	4023d0 <memcpy+0x118>
  4023dc:	780b      	ldrb	r3, [r1, #0]
  4023de:	7003      	strb	r3, [r0, #0]
  4023e0:	784b      	ldrb	r3, [r1, #1]
  4023e2:	7043      	strb	r3, [r0, #1]
  4023e4:	788b      	ldrb	r3, [r1, #2]
  4023e6:	7083      	strb	r3, [r0, #2]
  4023e8:	4660      	mov	r0, ip
  4023ea:	4770      	bx	lr

004023ec <memset>:
  4023ec:	b470      	push	{r4, r5, r6}
  4023ee:	0786      	lsls	r6, r0, #30
  4023f0:	d046      	beq.n	402480 <memset+0x94>
  4023f2:	1e54      	subs	r4, r2, #1
  4023f4:	2a00      	cmp	r2, #0
  4023f6:	d041      	beq.n	40247c <memset+0x90>
  4023f8:	b2ca      	uxtb	r2, r1
  4023fa:	4603      	mov	r3, r0
  4023fc:	e002      	b.n	402404 <memset+0x18>
  4023fe:	f114 34ff 	adds.w	r4, r4, #4294967295
  402402:	d33b      	bcc.n	40247c <memset+0x90>
  402404:	f803 2b01 	strb.w	r2, [r3], #1
  402408:	079d      	lsls	r5, r3, #30
  40240a:	d1f8      	bne.n	4023fe <memset+0x12>
  40240c:	2c03      	cmp	r4, #3
  40240e:	d92e      	bls.n	40246e <memset+0x82>
  402410:	b2cd      	uxtb	r5, r1
  402412:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402416:	2c0f      	cmp	r4, #15
  402418:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40241c:	d919      	bls.n	402452 <memset+0x66>
  40241e:	f103 0210 	add.w	r2, r3, #16
  402422:	4626      	mov	r6, r4
  402424:	3e10      	subs	r6, #16
  402426:	2e0f      	cmp	r6, #15
  402428:	f842 5c10 	str.w	r5, [r2, #-16]
  40242c:	f842 5c0c 	str.w	r5, [r2, #-12]
  402430:	f842 5c08 	str.w	r5, [r2, #-8]
  402434:	f842 5c04 	str.w	r5, [r2, #-4]
  402438:	f102 0210 	add.w	r2, r2, #16
  40243c:	d8f2      	bhi.n	402424 <memset+0x38>
  40243e:	f1a4 0210 	sub.w	r2, r4, #16
  402442:	f022 020f 	bic.w	r2, r2, #15
  402446:	f004 040f 	and.w	r4, r4, #15
  40244a:	3210      	adds	r2, #16
  40244c:	2c03      	cmp	r4, #3
  40244e:	4413      	add	r3, r2
  402450:	d90d      	bls.n	40246e <memset+0x82>
  402452:	461e      	mov	r6, r3
  402454:	4622      	mov	r2, r4
  402456:	3a04      	subs	r2, #4
  402458:	2a03      	cmp	r2, #3
  40245a:	f846 5b04 	str.w	r5, [r6], #4
  40245e:	d8fa      	bhi.n	402456 <memset+0x6a>
  402460:	1f22      	subs	r2, r4, #4
  402462:	f022 0203 	bic.w	r2, r2, #3
  402466:	3204      	adds	r2, #4
  402468:	4413      	add	r3, r2
  40246a:	f004 0403 	and.w	r4, r4, #3
  40246e:	b12c      	cbz	r4, 40247c <memset+0x90>
  402470:	b2c9      	uxtb	r1, r1
  402472:	441c      	add	r4, r3
  402474:	f803 1b01 	strb.w	r1, [r3], #1
  402478:	429c      	cmp	r4, r3
  40247a:	d1fb      	bne.n	402474 <memset+0x88>
  40247c:	bc70      	pop	{r4, r5, r6}
  40247e:	4770      	bx	lr
  402480:	4614      	mov	r4, r2
  402482:	4603      	mov	r3, r0
  402484:	e7c2      	b.n	40240c <memset+0x20>
  402486:	bf00      	nop

00402488 <sprintf>:
  402488:	b40e      	push	{r1, r2, r3}
  40248a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40248c:	b09c      	sub	sp, #112	; 0x70
  40248e:	ab21      	add	r3, sp, #132	; 0x84
  402490:	490f      	ldr	r1, [pc, #60]	; (4024d0 <sprintf+0x48>)
  402492:	f853 2b04 	ldr.w	r2, [r3], #4
  402496:	9301      	str	r3, [sp, #4]
  402498:	4605      	mov	r5, r0
  40249a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40249e:	6808      	ldr	r0, [r1, #0]
  4024a0:	9502      	str	r5, [sp, #8]
  4024a2:	f44f 7702 	mov.w	r7, #520	; 0x208
  4024a6:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4024aa:	a902      	add	r1, sp, #8
  4024ac:	9506      	str	r5, [sp, #24]
  4024ae:	f8ad 7014 	strh.w	r7, [sp, #20]
  4024b2:	9404      	str	r4, [sp, #16]
  4024b4:	9407      	str	r4, [sp, #28]
  4024b6:	f8ad 6016 	strh.w	r6, [sp, #22]
  4024ba:	f000 f88f 	bl	4025dc <_svfprintf_r>
  4024be:	9b02      	ldr	r3, [sp, #8]
  4024c0:	2200      	movs	r2, #0
  4024c2:	701a      	strb	r2, [r3, #0]
  4024c4:	b01c      	add	sp, #112	; 0x70
  4024c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4024ca:	b003      	add	sp, #12
  4024cc:	4770      	bx	lr
  4024ce:	bf00      	nop
  4024d0:	20400024 	.word	0x20400024
	...

00402500 <strlen>:
  402500:	f890 f000 	pld	[r0]
  402504:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  402508:	f020 0107 	bic.w	r1, r0, #7
  40250c:	f06f 0c00 	mvn.w	ip, #0
  402510:	f010 0407 	ands.w	r4, r0, #7
  402514:	f891 f020 	pld	[r1, #32]
  402518:	f040 8049 	bne.w	4025ae <strlen+0xae>
  40251c:	f04f 0400 	mov.w	r4, #0
  402520:	f06f 0007 	mvn.w	r0, #7
  402524:	e9d1 2300 	ldrd	r2, r3, [r1]
  402528:	f891 f040 	pld	[r1, #64]	; 0x40
  40252c:	f100 0008 	add.w	r0, r0, #8
  402530:	fa82 f24c 	uadd8	r2, r2, ip
  402534:	faa4 f28c 	sel	r2, r4, ip
  402538:	fa83 f34c 	uadd8	r3, r3, ip
  40253c:	faa2 f38c 	sel	r3, r2, ip
  402540:	bb4b      	cbnz	r3, 402596 <strlen+0x96>
  402542:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  402546:	fa82 f24c 	uadd8	r2, r2, ip
  40254a:	f100 0008 	add.w	r0, r0, #8
  40254e:	faa4 f28c 	sel	r2, r4, ip
  402552:	fa83 f34c 	uadd8	r3, r3, ip
  402556:	faa2 f38c 	sel	r3, r2, ip
  40255a:	b9e3      	cbnz	r3, 402596 <strlen+0x96>
  40255c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  402560:	fa82 f24c 	uadd8	r2, r2, ip
  402564:	f100 0008 	add.w	r0, r0, #8
  402568:	faa4 f28c 	sel	r2, r4, ip
  40256c:	fa83 f34c 	uadd8	r3, r3, ip
  402570:	faa2 f38c 	sel	r3, r2, ip
  402574:	b97b      	cbnz	r3, 402596 <strlen+0x96>
  402576:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40257a:	f101 0120 	add.w	r1, r1, #32
  40257e:	fa82 f24c 	uadd8	r2, r2, ip
  402582:	f100 0008 	add.w	r0, r0, #8
  402586:	faa4 f28c 	sel	r2, r4, ip
  40258a:	fa83 f34c 	uadd8	r3, r3, ip
  40258e:	faa2 f38c 	sel	r3, r2, ip
  402592:	2b00      	cmp	r3, #0
  402594:	d0c6      	beq.n	402524 <strlen+0x24>
  402596:	2a00      	cmp	r2, #0
  402598:	bf04      	itt	eq
  40259a:	3004      	addeq	r0, #4
  40259c:	461a      	moveq	r2, r3
  40259e:	ba12      	rev	r2, r2
  4025a0:	fab2 f282 	clz	r2, r2
  4025a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4025a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4025ac:	4770      	bx	lr
  4025ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4025b2:	f004 0503 	and.w	r5, r4, #3
  4025b6:	f1c4 0000 	rsb	r0, r4, #0
  4025ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4025be:	f014 0f04 	tst.w	r4, #4
  4025c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4025c6:	fa0c f505 	lsl.w	r5, ip, r5
  4025ca:	ea62 0205 	orn	r2, r2, r5
  4025ce:	bf1c      	itt	ne
  4025d0:	ea63 0305 	ornne	r3, r3, r5
  4025d4:	4662      	movne	r2, ip
  4025d6:	f04f 0400 	mov.w	r4, #0
  4025da:	e7a9      	b.n	402530 <strlen+0x30>

004025dc <_svfprintf_r>:
  4025dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025e0:	b0c3      	sub	sp, #268	; 0x10c
  4025e2:	460c      	mov	r4, r1
  4025e4:	910b      	str	r1, [sp, #44]	; 0x2c
  4025e6:	4692      	mov	sl, r2
  4025e8:	930f      	str	r3, [sp, #60]	; 0x3c
  4025ea:	900c      	str	r0, [sp, #48]	; 0x30
  4025ec:	f002 fb42 	bl	404c74 <_localeconv_r>
  4025f0:	6803      	ldr	r3, [r0, #0]
  4025f2:	931a      	str	r3, [sp, #104]	; 0x68
  4025f4:	4618      	mov	r0, r3
  4025f6:	f7ff ff83 	bl	402500 <strlen>
  4025fa:	89a3      	ldrh	r3, [r4, #12]
  4025fc:	9019      	str	r0, [sp, #100]	; 0x64
  4025fe:	0619      	lsls	r1, r3, #24
  402600:	d503      	bpl.n	40260a <_svfprintf_r+0x2e>
  402602:	6923      	ldr	r3, [r4, #16]
  402604:	2b00      	cmp	r3, #0
  402606:	f001 8003 	beq.w	403610 <_svfprintf_r+0x1034>
  40260a:	2300      	movs	r3, #0
  40260c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  402610:	9313      	str	r3, [sp, #76]	; 0x4c
  402612:	9315      	str	r3, [sp, #84]	; 0x54
  402614:	9314      	str	r3, [sp, #80]	; 0x50
  402616:	9327      	str	r3, [sp, #156]	; 0x9c
  402618:	9326      	str	r3, [sp, #152]	; 0x98
  40261a:	9318      	str	r3, [sp, #96]	; 0x60
  40261c:	931b      	str	r3, [sp, #108]	; 0x6c
  40261e:	9309      	str	r3, [sp, #36]	; 0x24
  402620:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  402624:	46c8      	mov	r8, r9
  402626:	9316      	str	r3, [sp, #88]	; 0x58
  402628:	9317      	str	r3, [sp, #92]	; 0x5c
  40262a:	f89a 3000 	ldrb.w	r3, [sl]
  40262e:	4654      	mov	r4, sl
  402630:	b1e3      	cbz	r3, 40266c <_svfprintf_r+0x90>
  402632:	2b25      	cmp	r3, #37	; 0x25
  402634:	d102      	bne.n	40263c <_svfprintf_r+0x60>
  402636:	e019      	b.n	40266c <_svfprintf_r+0x90>
  402638:	2b25      	cmp	r3, #37	; 0x25
  40263a:	d003      	beq.n	402644 <_svfprintf_r+0x68>
  40263c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402640:	2b00      	cmp	r3, #0
  402642:	d1f9      	bne.n	402638 <_svfprintf_r+0x5c>
  402644:	eba4 050a 	sub.w	r5, r4, sl
  402648:	b185      	cbz	r5, 40266c <_svfprintf_r+0x90>
  40264a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40264c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40264e:	f8c8 a000 	str.w	sl, [r8]
  402652:	3301      	adds	r3, #1
  402654:	442a      	add	r2, r5
  402656:	2b07      	cmp	r3, #7
  402658:	f8c8 5004 	str.w	r5, [r8, #4]
  40265c:	9227      	str	r2, [sp, #156]	; 0x9c
  40265e:	9326      	str	r3, [sp, #152]	; 0x98
  402660:	dc7f      	bgt.n	402762 <_svfprintf_r+0x186>
  402662:	f108 0808 	add.w	r8, r8, #8
  402666:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402668:	442b      	add	r3, r5
  40266a:	9309      	str	r3, [sp, #36]	; 0x24
  40266c:	7823      	ldrb	r3, [r4, #0]
  40266e:	2b00      	cmp	r3, #0
  402670:	d07f      	beq.n	402772 <_svfprintf_r+0x196>
  402672:	2300      	movs	r3, #0
  402674:	461a      	mov	r2, r3
  402676:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40267a:	4619      	mov	r1, r3
  40267c:	930d      	str	r3, [sp, #52]	; 0x34
  40267e:	469b      	mov	fp, r3
  402680:	f04f 30ff 	mov.w	r0, #4294967295
  402684:	7863      	ldrb	r3, [r4, #1]
  402686:	900a      	str	r0, [sp, #40]	; 0x28
  402688:	f104 0a01 	add.w	sl, r4, #1
  40268c:	f10a 0a01 	add.w	sl, sl, #1
  402690:	f1a3 0020 	sub.w	r0, r3, #32
  402694:	2858      	cmp	r0, #88	; 0x58
  402696:	f200 83c1 	bhi.w	402e1c <_svfprintf_r+0x840>
  40269a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40269e:	0238      	.short	0x0238
  4026a0:	03bf03bf 	.word	0x03bf03bf
  4026a4:	03bf0240 	.word	0x03bf0240
  4026a8:	03bf03bf 	.word	0x03bf03bf
  4026ac:	03bf03bf 	.word	0x03bf03bf
  4026b0:	024503bf 	.word	0x024503bf
  4026b4:	03bf0203 	.word	0x03bf0203
  4026b8:	026b005d 	.word	0x026b005d
  4026bc:	028603bf 	.word	0x028603bf
  4026c0:	039d039d 	.word	0x039d039d
  4026c4:	039d039d 	.word	0x039d039d
  4026c8:	039d039d 	.word	0x039d039d
  4026cc:	039d039d 	.word	0x039d039d
  4026d0:	03bf039d 	.word	0x03bf039d
  4026d4:	03bf03bf 	.word	0x03bf03bf
  4026d8:	03bf03bf 	.word	0x03bf03bf
  4026dc:	03bf03bf 	.word	0x03bf03bf
  4026e0:	03bf03bf 	.word	0x03bf03bf
  4026e4:	033703bf 	.word	0x033703bf
  4026e8:	03bf0357 	.word	0x03bf0357
  4026ec:	03bf0357 	.word	0x03bf0357
  4026f0:	03bf03bf 	.word	0x03bf03bf
  4026f4:	039803bf 	.word	0x039803bf
  4026f8:	03bf03bf 	.word	0x03bf03bf
  4026fc:	03bf03ad 	.word	0x03bf03ad
  402700:	03bf03bf 	.word	0x03bf03bf
  402704:	03bf03bf 	.word	0x03bf03bf
  402708:	03bf0259 	.word	0x03bf0259
  40270c:	031e03bf 	.word	0x031e03bf
  402710:	03bf03bf 	.word	0x03bf03bf
  402714:	03bf03bf 	.word	0x03bf03bf
  402718:	03bf03bf 	.word	0x03bf03bf
  40271c:	03bf03bf 	.word	0x03bf03bf
  402720:	03bf03bf 	.word	0x03bf03bf
  402724:	02db02c6 	.word	0x02db02c6
  402728:	03570357 	.word	0x03570357
  40272c:	028b0357 	.word	0x028b0357
  402730:	03bf02db 	.word	0x03bf02db
  402734:	029003bf 	.word	0x029003bf
  402738:	029d03bf 	.word	0x029d03bf
  40273c:	02b401cc 	.word	0x02b401cc
  402740:	03bf0208 	.word	0x03bf0208
  402744:	03bf01e1 	.word	0x03bf01e1
  402748:	03bf007e 	.word	0x03bf007e
  40274c:	020d03bf 	.word	0x020d03bf
  402750:	980d      	ldr	r0, [sp, #52]	; 0x34
  402752:	930f      	str	r3, [sp, #60]	; 0x3c
  402754:	4240      	negs	r0, r0
  402756:	900d      	str	r0, [sp, #52]	; 0x34
  402758:	f04b 0b04 	orr.w	fp, fp, #4
  40275c:	f89a 3000 	ldrb.w	r3, [sl]
  402760:	e794      	b.n	40268c <_svfprintf_r+0xb0>
  402762:	aa25      	add	r2, sp, #148	; 0x94
  402764:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402766:	980c      	ldr	r0, [sp, #48]	; 0x30
  402768:	f003 fad4 	bl	405d14 <__ssprint_r>
  40276c:	b940      	cbnz	r0, 402780 <_svfprintf_r+0x1a4>
  40276e:	46c8      	mov	r8, r9
  402770:	e779      	b.n	402666 <_svfprintf_r+0x8a>
  402772:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402774:	b123      	cbz	r3, 402780 <_svfprintf_r+0x1a4>
  402776:	980c      	ldr	r0, [sp, #48]	; 0x30
  402778:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40277a:	aa25      	add	r2, sp, #148	; 0x94
  40277c:	f003 faca 	bl	405d14 <__ssprint_r>
  402780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402782:	899b      	ldrh	r3, [r3, #12]
  402784:	f013 0f40 	tst.w	r3, #64	; 0x40
  402788:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40278a:	bf18      	it	ne
  40278c:	f04f 33ff 	movne.w	r3, #4294967295
  402790:	9309      	str	r3, [sp, #36]	; 0x24
  402792:	9809      	ldr	r0, [sp, #36]	; 0x24
  402794:	b043      	add	sp, #268	; 0x10c
  402796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40279a:	f01b 0f20 	tst.w	fp, #32
  40279e:	9311      	str	r3, [sp, #68]	; 0x44
  4027a0:	f040 81dd 	bne.w	402b5e <_svfprintf_r+0x582>
  4027a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4027a6:	f01b 0f10 	tst.w	fp, #16
  4027aa:	4613      	mov	r3, r2
  4027ac:	f040 856e 	bne.w	40328c <_svfprintf_r+0xcb0>
  4027b0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4027b4:	f000 856a 	beq.w	40328c <_svfprintf_r+0xcb0>
  4027b8:	8814      	ldrh	r4, [r2, #0]
  4027ba:	3204      	adds	r2, #4
  4027bc:	2500      	movs	r5, #0
  4027be:	2301      	movs	r3, #1
  4027c0:	920f      	str	r2, [sp, #60]	; 0x3c
  4027c2:	2700      	movs	r7, #0
  4027c4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4027c8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4027ca:	1c4a      	adds	r2, r1, #1
  4027cc:	f000 8265 	beq.w	402c9a <_svfprintf_r+0x6be>
  4027d0:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  4027d4:	9207      	str	r2, [sp, #28]
  4027d6:	ea54 0205 	orrs.w	r2, r4, r5
  4027da:	f040 8264 	bne.w	402ca6 <_svfprintf_r+0x6ca>
  4027de:	2900      	cmp	r1, #0
  4027e0:	f040 843c 	bne.w	40305c <_svfprintf_r+0xa80>
  4027e4:	2b00      	cmp	r3, #0
  4027e6:	f040 84d7 	bne.w	403198 <_svfprintf_r+0xbbc>
  4027ea:	f01b 0301 	ands.w	r3, fp, #1
  4027ee:	930e      	str	r3, [sp, #56]	; 0x38
  4027f0:	f000 8604 	beq.w	4033fc <_svfprintf_r+0xe20>
  4027f4:	ae42      	add	r6, sp, #264	; 0x108
  4027f6:	2330      	movs	r3, #48	; 0x30
  4027f8:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4027fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4027fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402800:	4293      	cmp	r3, r2
  402802:	bfb8      	it	lt
  402804:	4613      	movlt	r3, r2
  402806:	9308      	str	r3, [sp, #32]
  402808:	2300      	movs	r3, #0
  40280a:	9312      	str	r3, [sp, #72]	; 0x48
  40280c:	b117      	cbz	r7, 402814 <_svfprintf_r+0x238>
  40280e:	9b08      	ldr	r3, [sp, #32]
  402810:	3301      	adds	r3, #1
  402812:	9308      	str	r3, [sp, #32]
  402814:	9b07      	ldr	r3, [sp, #28]
  402816:	f013 0302 	ands.w	r3, r3, #2
  40281a:	9310      	str	r3, [sp, #64]	; 0x40
  40281c:	d002      	beq.n	402824 <_svfprintf_r+0x248>
  40281e:	9b08      	ldr	r3, [sp, #32]
  402820:	3302      	adds	r3, #2
  402822:	9308      	str	r3, [sp, #32]
  402824:	9b07      	ldr	r3, [sp, #28]
  402826:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40282a:	f040 830e 	bne.w	402e4a <_svfprintf_r+0x86e>
  40282e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402830:	9a08      	ldr	r2, [sp, #32]
  402832:	eba3 0b02 	sub.w	fp, r3, r2
  402836:	f1bb 0f00 	cmp.w	fp, #0
  40283a:	f340 8306 	ble.w	402e4a <_svfprintf_r+0x86e>
  40283e:	f1bb 0f10 	cmp.w	fp, #16
  402842:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402844:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402846:	dd29      	ble.n	40289c <_svfprintf_r+0x2c0>
  402848:	4643      	mov	r3, r8
  40284a:	4621      	mov	r1, r4
  40284c:	46a8      	mov	r8, r5
  40284e:	2710      	movs	r7, #16
  402850:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402852:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402854:	e006      	b.n	402864 <_svfprintf_r+0x288>
  402856:	f1ab 0b10 	sub.w	fp, fp, #16
  40285a:	f1bb 0f10 	cmp.w	fp, #16
  40285e:	f103 0308 	add.w	r3, r3, #8
  402862:	dd18      	ble.n	402896 <_svfprintf_r+0x2ba>
  402864:	3201      	adds	r2, #1
  402866:	48b7      	ldr	r0, [pc, #732]	; (402b44 <_svfprintf_r+0x568>)
  402868:	9226      	str	r2, [sp, #152]	; 0x98
  40286a:	3110      	adds	r1, #16
  40286c:	2a07      	cmp	r2, #7
  40286e:	9127      	str	r1, [sp, #156]	; 0x9c
  402870:	e883 0081 	stmia.w	r3, {r0, r7}
  402874:	ddef      	ble.n	402856 <_svfprintf_r+0x27a>
  402876:	aa25      	add	r2, sp, #148	; 0x94
  402878:	4629      	mov	r1, r5
  40287a:	4620      	mov	r0, r4
  40287c:	f003 fa4a 	bl	405d14 <__ssprint_r>
  402880:	2800      	cmp	r0, #0
  402882:	f47f af7d 	bne.w	402780 <_svfprintf_r+0x1a4>
  402886:	f1ab 0b10 	sub.w	fp, fp, #16
  40288a:	f1bb 0f10 	cmp.w	fp, #16
  40288e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402890:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402892:	464b      	mov	r3, r9
  402894:	dce6      	bgt.n	402864 <_svfprintf_r+0x288>
  402896:	4645      	mov	r5, r8
  402898:	460c      	mov	r4, r1
  40289a:	4698      	mov	r8, r3
  40289c:	3201      	adds	r2, #1
  40289e:	4ba9      	ldr	r3, [pc, #676]	; (402b44 <_svfprintf_r+0x568>)
  4028a0:	9226      	str	r2, [sp, #152]	; 0x98
  4028a2:	445c      	add	r4, fp
  4028a4:	2a07      	cmp	r2, #7
  4028a6:	9427      	str	r4, [sp, #156]	; 0x9c
  4028a8:	e888 0808 	stmia.w	r8, {r3, fp}
  4028ac:	f300 8498 	bgt.w	4031e0 <_svfprintf_r+0xc04>
  4028b0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4028b4:	f108 0808 	add.w	r8, r8, #8
  4028b8:	b177      	cbz	r7, 4028d8 <_svfprintf_r+0x2fc>
  4028ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4028bc:	3301      	adds	r3, #1
  4028be:	3401      	adds	r4, #1
  4028c0:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  4028c4:	2201      	movs	r2, #1
  4028c6:	2b07      	cmp	r3, #7
  4028c8:	9427      	str	r4, [sp, #156]	; 0x9c
  4028ca:	9326      	str	r3, [sp, #152]	; 0x98
  4028cc:	e888 0006 	stmia.w	r8, {r1, r2}
  4028d0:	f300 83db 	bgt.w	40308a <_svfprintf_r+0xaae>
  4028d4:	f108 0808 	add.w	r8, r8, #8
  4028d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4028da:	b16b      	cbz	r3, 4028f8 <_svfprintf_r+0x31c>
  4028dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4028de:	3301      	adds	r3, #1
  4028e0:	3402      	adds	r4, #2
  4028e2:	a91e      	add	r1, sp, #120	; 0x78
  4028e4:	2202      	movs	r2, #2
  4028e6:	2b07      	cmp	r3, #7
  4028e8:	9427      	str	r4, [sp, #156]	; 0x9c
  4028ea:	9326      	str	r3, [sp, #152]	; 0x98
  4028ec:	e888 0006 	stmia.w	r8, {r1, r2}
  4028f0:	f300 83d6 	bgt.w	4030a0 <_svfprintf_r+0xac4>
  4028f4:	f108 0808 	add.w	r8, r8, #8
  4028f8:	2d80      	cmp	r5, #128	; 0x80
  4028fa:	f000 8315 	beq.w	402f28 <_svfprintf_r+0x94c>
  4028fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402900:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402902:	1a9f      	subs	r7, r3, r2
  402904:	2f00      	cmp	r7, #0
  402906:	dd36      	ble.n	402976 <_svfprintf_r+0x39a>
  402908:	2f10      	cmp	r7, #16
  40290a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40290c:	4d8e      	ldr	r5, [pc, #568]	; (402b48 <_svfprintf_r+0x56c>)
  40290e:	dd27      	ble.n	402960 <_svfprintf_r+0x384>
  402910:	4642      	mov	r2, r8
  402912:	4621      	mov	r1, r4
  402914:	46b0      	mov	r8, r6
  402916:	f04f 0b10 	mov.w	fp, #16
  40291a:	462e      	mov	r6, r5
  40291c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40291e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402920:	e004      	b.n	40292c <_svfprintf_r+0x350>
  402922:	3f10      	subs	r7, #16
  402924:	2f10      	cmp	r7, #16
  402926:	f102 0208 	add.w	r2, r2, #8
  40292a:	dd15      	ble.n	402958 <_svfprintf_r+0x37c>
  40292c:	3301      	adds	r3, #1
  40292e:	3110      	adds	r1, #16
  402930:	2b07      	cmp	r3, #7
  402932:	9127      	str	r1, [sp, #156]	; 0x9c
  402934:	9326      	str	r3, [sp, #152]	; 0x98
  402936:	e882 0840 	stmia.w	r2, {r6, fp}
  40293a:	ddf2      	ble.n	402922 <_svfprintf_r+0x346>
  40293c:	aa25      	add	r2, sp, #148	; 0x94
  40293e:	4629      	mov	r1, r5
  402940:	4620      	mov	r0, r4
  402942:	f003 f9e7 	bl	405d14 <__ssprint_r>
  402946:	2800      	cmp	r0, #0
  402948:	f47f af1a 	bne.w	402780 <_svfprintf_r+0x1a4>
  40294c:	3f10      	subs	r7, #16
  40294e:	2f10      	cmp	r7, #16
  402950:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402952:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402954:	464a      	mov	r2, r9
  402956:	dce9      	bgt.n	40292c <_svfprintf_r+0x350>
  402958:	4635      	mov	r5, r6
  40295a:	460c      	mov	r4, r1
  40295c:	4646      	mov	r6, r8
  40295e:	4690      	mov	r8, r2
  402960:	3301      	adds	r3, #1
  402962:	443c      	add	r4, r7
  402964:	2b07      	cmp	r3, #7
  402966:	9427      	str	r4, [sp, #156]	; 0x9c
  402968:	9326      	str	r3, [sp, #152]	; 0x98
  40296a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40296e:	f300 8381 	bgt.w	403074 <_svfprintf_r+0xa98>
  402972:	f108 0808 	add.w	r8, r8, #8
  402976:	9b07      	ldr	r3, [sp, #28]
  402978:	05df      	lsls	r7, r3, #23
  40297a:	f100 8268 	bmi.w	402e4e <_svfprintf_r+0x872>
  40297e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402980:	990e      	ldr	r1, [sp, #56]	; 0x38
  402982:	f8c8 6000 	str.w	r6, [r8]
  402986:	3301      	adds	r3, #1
  402988:	440c      	add	r4, r1
  40298a:	2b07      	cmp	r3, #7
  40298c:	9427      	str	r4, [sp, #156]	; 0x9c
  40298e:	f8c8 1004 	str.w	r1, [r8, #4]
  402992:	9326      	str	r3, [sp, #152]	; 0x98
  402994:	f300 834d 	bgt.w	403032 <_svfprintf_r+0xa56>
  402998:	f108 0808 	add.w	r8, r8, #8
  40299c:	9b07      	ldr	r3, [sp, #28]
  40299e:	075b      	lsls	r3, r3, #29
  4029a0:	d53a      	bpl.n	402a18 <_svfprintf_r+0x43c>
  4029a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4029a4:	9a08      	ldr	r2, [sp, #32]
  4029a6:	1a9d      	subs	r5, r3, r2
  4029a8:	2d00      	cmp	r5, #0
  4029aa:	dd35      	ble.n	402a18 <_svfprintf_r+0x43c>
  4029ac:	2d10      	cmp	r5, #16
  4029ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4029b0:	dd20      	ble.n	4029f4 <_svfprintf_r+0x418>
  4029b2:	2610      	movs	r6, #16
  4029b4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4029b6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4029ba:	e004      	b.n	4029c6 <_svfprintf_r+0x3ea>
  4029bc:	3d10      	subs	r5, #16
  4029be:	2d10      	cmp	r5, #16
  4029c0:	f108 0808 	add.w	r8, r8, #8
  4029c4:	dd16      	ble.n	4029f4 <_svfprintf_r+0x418>
  4029c6:	3301      	adds	r3, #1
  4029c8:	4a5e      	ldr	r2, [pc, #376]	; (402b44 <_svfprintf_r+0x568>)
  4029ca:	9326      	str	r3, [sp, #152]	; 0x98
  4029cc:	3410      	adds	r4, #16
  4029ce:	2b07      	cmp	r3, #7
  4029d0:	9427      	str	r4, [sp, #156]	; 0x9c
  4029d2:	e888 0044 	stmia.w	r8, {r2, r6}
  4029d6:	ddf1      	ble.n	4029bc <_svfprintf_r+0x3e0>
  4029d8:	aa25      	add	r2, sp, #148	; 0x94
  4029da:	4659      	mov	r1, fp
  4029dc:	4638      	mov	r0, r7
  4029de:	f003 f999 	bl	405d14 <__ssprint_r>
  4029e2:	2800      	cmp	r0, #0
  4029e4:	f47f aecc 	bne.w	402780 <_svfprintf_r+0x1a4>
  4029e8:	3d10      	subs	r5, #16
  4029ea:	2d10      	cmp	r5, #16
  4029ec:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4029ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4029f0:	46c8      	mov	r8, r9
  4029f2:	dce8      	bgt.n	4029c6 <_svfprintf_r+0x3ea>
  4029f4:	3301      	adds	r3, #1
  4029f6:	4a53      	ldr	r2, [pc, #332]	; (402b44 <_svfprintf_r+0x568>)
  4029f8:	9326      	str	r3, [sp, #152]	; 0x98
  4029fa:	442c      	add	r4, r5
  4029fc:	2b07      	cmp	r3, #7
  4029fe:	9427      	str	r4, [sp, #156]	; 0x9c
  402a00:	e888 0024 	stmia.w	r8, {r2, r5}
  402a04:	dd08      	ble.n	402a18 <_svfprintf_r+0x43c>
  402a06:	aa25      	add	r2, sp, #148	; 0x94
  402a08:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402a0a:	980c      	ldr	r0, [sp, #48]	; 0x30
  402a0c:	f003 f982 	bl	405d14 <__ssprint_r>
  402a10:	2800      	cmp	r0, #0
  402a12:	f47f aeb5 	bne.w	402780 <_svfprintf_r+0x1a4>
  402a16:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402a1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402a1c:	9908      	ldr	r1, [sp, #32]
  402a1e:	428a      	cmp	r2, r1
  402a20:	bfac      	ite	ge
  402a22:	189b      	addge	r3, r3, r2
  402a24:	185b      	addlt	r3, r3, r1
  402a26:	9309      	str	r3, [sp, #36]	; 0x24
  402a28:	2c00      	cmp	r4, #0
  402a2a:	f040 830d 	bne.w	403048 <_svfprintf_r+0xa6c>
  402a2e:	2300      	movs	r3, #0
  402a30:	9326      	str	r3, [sp, #152]	; 0x98
  402a32:	46c8      	mov	r8, r9
  402a34:	e5f9      	b.n	40262a <_svfprintf_r+0x4e>
  402a36:	9311      	str	r3, [sp, #68]	; 0x44
  402a38:	f01b 0320 	ands.w	r3, fp, #32
  402a3c:	f040 81e3 	bne.w	402e06 <_svfprintf_r+0x82a>
  402a40:	f01b 0210 	ands.w	r2, fp, #16
  402a44:	f040 842e 	bne.w	4032a4 <_svfprintf_r+0xcc8>
  402a48:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  402a4c:	f000 842a 	beq.w	4032a4 <_svfprintf_r+0xcc8>
  402a50:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402a52:	4613      	mov	r3, r2
  402a54:	460a      	mov	r2, r1
  402a56:	3204      	adds	r2, #4
  402a58:	880c      	ldrh	r4, [r1, #0]
  402a5a:	920f      	str	r2, [sp, #60]	; 0x3c
  402a5c:	2500      	movs	r5, #0
  402a5e:	e6b0      	b.n	4027c2 <_svfprintf_r+0x1e6>
  402a60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402a62:	9311      	str	r3, [sp, #68]	; 0x44
  402a64:	6816      	ldr	r6, [r2, #0]
  402a66:	2400      	movs	r4, #0
  402a68:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  402a6c:	1d15      	adds	r5, r2, #4
  402a6e:	2e00      	cmp	r6, #0
  402a70:	f000 86a7 	beq.w	4037c2 <_svfprintf_r+0x11e6>
  402a74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402a76:	1c53      	adds	r3, r2, #1
  402a78:	f000 8609 	beq.w	40368e <_svfprintf_r+0x10b2>
  402a7c:	4621      	mov	r1, r4
  402a7e:	4630      	mov	r0, r6
  402a80:	f002 fbd6 	bl	405230 <memchr>
  402a84:	2800      	cmp	r0, #0
  402a86:	f000 86e1 	beq.w	40384c <_svfprintf_r+0x1270>
  402a8a:	1b83      	subs	r3, r0, r6
  402a8c:	930e      	str	r3, [sp, #56]	; 0x38
  402a8e:	940a      	str	r4, [sp, #40]	; 0x28
  402a90:	950f      	str	r5, [sp, #60]	; 0x3c
  402a92:	f8cd b01c 	str.w	fp, [sp, #28]
  402a96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  402a9a:	9308      	str	r3, [sp, #32]
  402a9c:	9412      	str	r4, [sp, #72]	; 0x48
  402a9e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402aa2:	e6b3      	b.n	40280c <_svfprintf_r+0x230>
  402aa4:	f89a 3000 	ldrb.w	r3, [sl]
  402aa8:	2201      	movs	r2, #1
  402aaa:	212b      	movs	r1, #43	; 0x2b
  402aac:	e5ee      	b.n	40268c <_svfprintf_r+0xb0>
  402aae:	f04b 0b20 	orr.w	fp, fp, #32
  402ab2:	f89a 3000 	ldrb.w	r3, [sl]
  402ab6:	e5e9      	b.n	40268c <_svfprintf_r+0xb0>
  402ab8:	9311      	str	r3, [sp, #68]	; 0x44
  402aba:	2a00      	cmp	r2, #0
  402abc:	f040 8795 	bne.w	4039ea <_svfprintf_r+0x140e>
  402ac0:	4b22      	ldr	r3, [pc, #136]	; (402b4c <_svfprintf_r+0x570>)
  402ac2:	9318      	str	r3, [sp, #96]	; 0x60
  402ac4:	f01b 0f20 	tst.w	fp, #32
  402ac8:	f040 8111 	bne.w	402cee <_svfprintf_r+0x712>
  402acc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402ace:	f01b 0f10 	tst.w	fp, #16
  402ad2:	4613      	mov	r3, r2
  402ad4:	f040 83e1 	bne.w	40329a <_svfprintf_r+0xcbe>
  402ad8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402adc:	f000 83dd 	beq.w	40329a <_svfprintf_r+0xcbe>
  402ae0:	3304      	adds	r3, #4
  402ae2:	8814      	ldrh	r4, [r2, #0]
  402ae4:	930f      	str	r3, [sp, #60]	; 0x3c
  402ae6:	2500      	movs	r5, #0
  402ae8:	f01b 0f01 	tst.w	fp, #1
  402aec:	f000 810c 	beq.w	402d08 <_svfprintf_r+0x72c>
  402af0:	ea54 0305 	orrs.w	r3, r4, r5
  402af4:	f000 8108 	beq.w	402d08 <_svfprintf_r+0x72c>
  402af8:	2330      	movs	r3, #48	; 0x30
  402afa:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  402afe:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  402b02:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  402b06:	f04b 0b02 	orr.w	fp, fp, #2
  402b0a:	2302      	movs	r3, #2
  402b0c:	e659      	b.n	4027c2 <_svfprintf_r+0x1e6>
  402b0e:	f89a 3000 	ldrb.w	r3, [sl]
  402b12:	2900      	cmp	r1, #0
  402b14:	f47f adba 	bne.w	40268c <_svfprintf_r+0xb0>
  402b18:	2201      	movs	r2, #1
  402b1a:	2120      	movs	r1, #32
  402b1c:	e5b6      	b.n	40268c <_svfprintf_r+0xb0>
  402b1e:	f04b 0b01 	orr.w	fp, fp, #1
  402b22:	f89a 3000 	ldrb.w	r3, [sl]
  402b26:	e5b1      	b.n	40268c <_svfprintf_r+0xb0>
  402b28:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  402b2a:	6823      	ldr	r3, [r4, #0]
  402b2c:	930d      	str	r3, [sp, #52]	; 0x34
  402b2e:	4618      	mov	r0, r3
  402b30:	2800      	cmp	r0, #0
  402b32:	4623      	mov	r3, r4
  402b34:	f103 0304 	add.w	r3, r3, #4
  402b38:	f6ff ae0a 	blt.w	402750 <_svfprintf_r+0x174>
  402b3c:	930f      	str	r3, [sp, #60]	; 0x3c
  402b3e:	f89a 3000 	ldrb.w	r3, [sl]
  402b42:	e5a3      	b.n	40268c <_svfprintf_r+0xb0>
  402b44:	0040763c 	.word	0x0040763c
  402b48:	0040764c 	.word	0x0040764c
  402b4c:	0040761c 	.word	0x0040761c
  402b50:	f04b 0b10 	orr.w	fp, fp, #16
  402b54:	f01b 0f20 	tst.w	fp, #32
  402b58:	9311      	str	r3, [sp, #68]	; 0x44
  402b5a:	f43f ae23 	beq.w	4027a4 <_svfprintf_r+0x1c8>
  402b5e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402b60:	3507      	adds	r5, #7
  402b62:	f025 0307 	bic.w	r3, r5, #7
  402b66:	f103 0208 	add.w	r2, r3, #8
  402b6a:	e9d3 4500 	ldrd	r4, r5, [r3]
  402b6e:	920f      	str	r2, [sp, #60]	; 0x3c
  402b70:	2301      	movs	r3, #1
  402b72:	e626      	b.n	4027c2 <_svfprintf_r+0x1e6>
  402b74:	f89a 3000 	ldrb.w	r3, [sl]
  402b78:	2b2a      	cmp	r3, #42	; 0x2a
  402b7a:	f10a 0401 	add.w	r4, sl, #1
  402b7e:	f000 8727 	beq.w	4039d0 <_svfprintf_r+0x13f4>
  402b82:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402b86:	2809      	cmp	r0, #9
  402b88:	46a2      	mov	sl, r4
  402b8a:	f200 86ad 	bhi.w	4038e8 <_svfprintf_r+0x130c>
  402b8e:	2300      	movs	r3, #0
  402b90:	461c      	mov	r4, r3
  402b92:	f81a 3b01 	ldrb.w	r3, [sl], #1
  402b96:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402b9a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  402b9e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402ba2:	2809      	cmp	r0, #9
  402ba4:	d9f5      	bls.n	402b92 <_svfprintf_r+0x5b6>
  402ba6:	940a      	str	r4, [sp, #40]	; 0x28
  402ba8:	e572      	b.n	402690 <_svfprintf_r+0xb4>
  402baa:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  402bae:	f89a 3000 	ldrb.w	r3, [sl]
  402bb2:	e56b      	b.n	40268c <_svfprintf_r+0xb0>
  402bb4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  402bb8:	f89a 3000 	ldrb.w	r3, [sl]
  402bbc:	e566      	b.n	40268c <_svfprintf_r+0xb0>
  402bbe:	f89a 3000 	ldrb.w	r3, [sl]
  402bc2:	2b6c      	cmp	r3, #108	; 0x6c
  402bc4:	bf03      	ittte	eq
  402bc6:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  402bca:	f04b 0b20 	orreq.w	fp, fp, #32
  402bce:	f10a 0a01 	addeq.w	sl, sl, #1
  402bd2:	f04b 0b10 	orrne.w	fp, fp, #16
  402bd6:	e559      	b.n	40268c <_svfprintf_r+0xb0>
  402bd8:	2a00      	cmp	r2, #0
  402bda:	f040 8711 	bne.w	403a00 <_svfprintf_r+0x1424>
  402bde:	f01b 0f20 	tst.w	fp, #32
  402be2:	f040 84f9 	bne.w	4035d8 <_svfprintf_r+0xffc>
  402be6:	f01b 0f10 	tst.w	fp, #16
  402bea:	f040 84ac 	bne.w	403546 <_svfprintf_r+0xf6a>
  402bee:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402bf2:	f000 84a8 	beq.w	403546 <_svfprintf_r+0xf6a>
  402bf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402bf8:	6813      	ldr	r3, [r2, #0]
  402bfa:	3204      	adds	r2, #4
  402bfc:	920f      	str	r2, [sp, #60]	; 0x3c
  402bfe:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  402c02:	801a      	strh	r2, [r3, #0]
  402c04:	e511      	b.n	40262a <_svfprintf_r+0x4e>
  402c06:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402c08:	4bb3      	ldr	r3, [pc, #716]	; (402ed8 <_svfprintf_r+0x8fc>)
  402c0a:	680c      	ldr	r4, [r1, #0]
  402c0c:	9318      	str	r3, [sp, #96]	; 0x60
  402c0e:	2230      	movs	r2, #48	; 0x30
  402c10:	2378      	movs	r3, #120	; 0x78
  402c12:	3104      	adds	r1, #4
  402c14:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  402c18:	9311      	str	r3, [sp, #68]	; 0x44
  402c1a:	f04b 0b02 	orr.w	fp, fp, #2
  402c1e:	910f      	str	r1, [sp, #60]	; 0x3c
  402c20:	2500      	movs	r5, #0
  402c22:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  402c26:	2302      	movs	r3, #2
  402c28:	e5cb      	b.n	4027c2 <_svfprintf_r+0x1e6>
  402c2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402c2c:	9311      	str	r3, [sp, #68]	; 0x44
  402c2e:	680a      	ldr	r2, [r1, #0]
  402c30:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  402c34:	2300      	movs	r3, #0
  402c36:	460a      	mov	r2, r1
  402c38:	461f      	mov	r7, r3
  402c3a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402c3e:	3204      	adds	r2, #4
  402c40:	2301      	movs	r3, #1
  402c42:	9308      	str	r3, [sp, #32]
  402c44:	f8cd b01c 	str.w	fp, [sp, #28]
  402c48:	970a      	str	r7, [sp, #40]	; 0x28
  402c4a:	9712      	str	r7, [sp, #72]	; 0x48
  402c4c:	920f      	str	r2, [sp, #60]	; 0x3c
  402c4e:	930e      	str	r3, [sp, #56]	; 0x38
  402c50:	ae28      	add	r6, sp, #160	; 0xa0
  402c52:	e5df      	b.n	402814 <_svfprintf_r+0x238>
  402c54:	9311      	str	r3, [sp, #68]	; 0x44
  402c56:	2a00      	cmp	r2, #0
  402c58:	f040 86ea 	bne.w	403a30 <_svfprintf_r+0x1454>
  402c5c:	f01b 0f20 	tst.w	fp, #32
  402c60:	d15d      	bne.n	402d1e <_svfprintf_r+0x742>
  402c62:	f01b 0f10 	tst.w	fp, #16
  402c66:	f040 8308 	bne.w	40327a <_svfprintf_r+0xc9e>
  402c6a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402c6e:	f000 8304 	beq.w	40327a <_svfprintf_r+0xc9e>
  402c72:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402c74:	f9b1 4000 	ldrsh.w	r4, [r1]
  402c78:	3104      	adds	r1, #4
  402c7a:	17e5      	asrs	r5, r4, #31
  402c7c:	4622      	mov	r2, r4
  402c7e:	462b      	mov	r3, r5
  402c80:	910f      	str	r1, [sp, #60]	; 0x3c
  402c82:	2a00      	cmp	r2, #0
  402c84:	f173 0300 	sbcs.w	r3, r3, #0
  402c88:	db58      	blt.n	402d3c <_svfprintf_r+0x760>
  402c8a:	990a      	ldr	r1, [sp, #40]	; 0x28
  402c8c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402c90:	1c4a      	adds	r2, r1, #1
  402c92:	f04f 0301 	mov.w	r3, #1
  402c96:	f47f ad9b 	bne.w	4027d0 <_svfprintf_r+0x1f4>
  402c9a:	ea54 0205 	orrs.w	r2, r4, r5
  402c9e:	f000 81df 	beq.w	403060 <_svfprintf_r+0xa84>
  402ca2:	f8cd b01c 	str.w	fp, [sp, #28]
  402ca6:	2b01      	cmp	r3, #1
  402ca8:	f000 827b 	beq.w	4031a2 <_svfprintf_r+0xbc6>
  402cac:	2b02      	cmp	r3, #2
  402cae:	f040 8206 	bne.w	4030be <_svfprintf_r+0xae2>
  402cb2:	9818      	ldr	r0, [sp, #96]	; 0x60
  402cb4:	464e      	mov	r6, r9
  402cb6:	0923      	lsrs	r3, r4, #4
  402cb8:	f004 010f 	and.w	r1, r4, #15
  402cbc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  402cc0:	092a      	lsrs	r2, r5, #4
  402cc2:	461c      	mov	r4, r3
  402cc4:	4615      	mov	r5, r2
  402cc6:	5c43      	ldrb	r3, [r0, r1]
  402cc8:	f806 3d01 	strb.w	r3, [r6, #-1]!
  402ccc:	ea54 0305 	orrs.w	r3, r4, r5
  402cd0:	d1f1      	bne.n	402cb6 <_svfprintf_r+0x6da>
  402cd2:	eba9 0306 	sub.w	r3, r9, r6
  402cd6:	930e      	str	r3, [sp, #56]	; 0x38
  402cd8:	e590      	b.n	4027fc <_svfprintf_r+0x220>
  402cda:	9311      	str	r3, [sp, #68]	; 0x44
  402cdc:	2a00      	cmp	r2, #0
  402cde:	f040 86a3 	bne.w	403a28 <_svfprintf_r+0x144c>
  402ce2:	4b7e      	ldr	r3, [pc, #504]	; (402edc <_svfprintf_r+0x900>)
  402ce4:	9318      	str	r3, [sp, #96]	; 0x60
  402ce6:	f01b 0f20 	tst.w	fp, #32
  402cea:	f43f aeef 	beq.w	402acc <_svfprintf_r+0x4f0>
  402cee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402cf0:	3507      	adds	r5, #7
  402cf2:	f025 0307 	bic.w	r3, r5, #7
  402cf6:	f103 0208 	add.w	r2, r3, #8
  402cfa:	f01b 0f01 	tst.w	fp, #1
  402cfe:	920f      	str	r2, [sp, #60]	; 0x3c
  402d00:	e9d3 4500 	ldrd	r4, r5, [r3]
  402d04:	f47f aef4 	bne.w	402af0 <_svfprintf_r+0x514>
  402d08:	2302      	movs	r3, #2
  402d0a:	e55a      	b.n	4027c2 <_svfprintf_r+0x1e6>
  402d0c:	9311      	str	r3, [sp, #68]	; 0x44
  402d0e:	2a00      	cmp	r2, #0
  402d10:	f040 8686 	bne.w	403a20 <_svfprintf_r+0x1444>
  402d14:	f04b 0b10 	orr.w	fp, fp, #16
  402d18:	f01b 0f20 	tst.w	fp, #32
  402d1c:	d0a1      	beq.n	402c62 <_svfprintf_r+0x686>
  402d1e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402d20:	3507      	adds	r5, #7
  402d22:	f025 0507 	bic.w	r5, r5, #7
  402d26:	e9d5 2300 	ldrd	r2, r3, [r5]
  402d2a:	2a00      	cmp	r2, #0
  402d2c:	f105 0108 	add.w	r1, r5, #8
  402d30:	461d      	mov	r5, r3
  402d32:	f173 0300 	sbcs.w	r3, r3, #0
  402d36:	910f      	str	r1, [sp, #60]	; 0x3c
  402d38:	4614      	mov	r4, r2
  402d3a:	daa6      	bge.n	402c8a <_svfprintf_r+0x6ae>
  402d3c:	272d      	movs	r7, #45	; 0x2d
  402d3e:	4264      	negs	r4, r4
  402d40:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  402d44:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  402d48:	2301      	movs	r3, #1
  402d4a:	e53d      	b.n	4027c8 <_svfprintf_r+0x1ec>
  402d4c:	9311      	str	r3, [sp, #68]	; 0x44
  402d4e:	2a00      	cmp	r2, #0
  402d50:	f040 8662 	bne.w	403a18 <_svfprintf_r+0x143c>
  402d54:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402d56:	3507      	adds	r5, #7
  402d58:	f025 0307 	bic.w	r3, r5, #7
  402d5c:	f103 0208 	add.w	r2, r3, #8
  402d60:	920f      	str	r2, [sp, #60]	; 0x3c
  402d62:	681a      	ldr	r2, [r3, #0]
  402d64:	9215      	str	r2, [sp, #84]	; 0x54
  402d66:	685b      	ldr	r3, [r3, #4]
  402d68:	9314      	str	r3, [sp, #80]	; 0x50
  402d6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  402d6c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  402d6e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  402d72:	4628      	mov	r0, r5
  402d74:	4621      	mov	r1, r4
  402d76:	f04f 32ff 	mov.w	r2, #4294967295
  402d7a:	4b59      	ldr	r3, [pc, #356]	; (402ee0 <_svfprintf_r+0x904>)
  402d7c:	f003 fd3a 	bl	4067f4 <__aeabi_dcmpun>
  402d80:	2800      	cmp	r0, #0
  402d82:	f040 834a 	bne.w	40341a <_svfprintf_r+0xe3e>
  402d86:	4628      	mov	r0, r5
  402d88:	4621      	mov	r1, r4
  402d8a:	f04f 32ff 	mov.w	r2, #4294967295
  402d8e:	4b54      	ldr	r3, [pc, #336]	; (402ee0 <_svfprintf_r+0x904>)
  402d90:	f003 fd12 	bl	4067b8 <__aeabi_dcmple>
  402d94:	2800      	cmp	r0, #0
  402d96:	f040 8340 	bne.w	40341a <_svfprintf_r+0xe3e>
  402d9a:	a815      	add	r0, sp, #84	; 0x54
  402d9c:	c80d      	ldmia	r0, {r0, r2, r3}
  402d9e:	9914      	ldr	r1, [sp, #80]	; 0x50
  402da0:	f003 fd00 	bl	4067a4 <__aeabi_dcmplt>
  402da4:	2800      	cmp	r0, #0
  402da6:	f040 8530 	bne.w	40380a <_svfprintf_r+0x122e>
  402daa:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402dae:	4e4d      	ldr	r6, [pc, #308]	; (402ee4 <_svfprintf_r+0x908>)
  402db0:	4b4d      	ldr	r3, [pc, #308]	; (402ee8 <_svfprintf_r+0x90c>)
  402db2:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  402db6:	9007      	str	r0, [sp, #28]
  402db8:	9811      	ldr	r0, [sp, #68]	; 0x44
  402dba:	2203      	movs	r2, #3
  402dbc:	2100      	movs	r1, #0
  402dbe:	9208      	str	r2, [sp, #32]
  402dc0:	910a      	str	r1, [sp, #40]	; 0x28
  402dc2:	2847      	cmp	r0, #71	; 0x47
  402dc4:	bfd8      	it	le
  402dc6:	461e      	movle	r6, r3
  402dc8:	920e      	str	r2, [sp, #56]	; 0x38
  402dca:	9112      	str	r1, [sp, #72]	; 0x48
  402dcc:	e51e      	b.n	40280c <_svfprintf_r+0x230>
  402dce:	f04b 0b08 	orr.w	fp, fp, #8
  402dd2:	f89a 3000 	ldrb.w	r3, [sl]
  402dd6:	e459      	b.n	40268c <_svfprintf_r+0xb0>
  402dd8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402ddc:	2300      	movs	r3, #0
  402dde:	461c      	mov	r4, r3
  402de0:	f81a 3b01 	ldrb.w	r3, [sl], #1
  402de4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402de8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  402dec:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402df0:	2809      	cmp	r0, #9
  402df2:	d9f5      	bls.n	402de0 <_svfprintf_r+0x804>
  402df4:	940d      	str	r4, [sp, #52]	; 0x34
  402df6:	e44b      	b.n	402690 <_svfprintf_r+0xb4>
  402df8:	f04b 0b10 	orr.w	fp, fp, #16
  402dfc:	9311      	str	r3, [sp, #68]	; 0x44
  402dfe:	f01b 0320 	ands.w	r3, fp, #32
  402e02:	f43f ae1d 	beq.w	402a40 <_svfprintf_r+0x464>
  402e06:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402e08:	3507      	adds	r5, #7
  402e0a:	f025 0307 	bic.w	r3, r5, #7
  402e0e:	f103 0208 	add.w	r2, r3, #8
  402e12:	e9d3 4500 	ldrd	r4, r5, [r3]
  402e16:	920f      	str	r2, [sp, #60]	; 0x3c
  402e18:	2300      	movs	r3, #0
  402e1a:	e4d2      	b.n	4027c2 <_svfprintf_r+0x1e6>
  402e1c:	9311      	str	r3, [sp, #68]	; 0x44
  402e1e:	2a00      	cmp	r2, #0
  402e20:	f040 85e7 	bne.w	4039f2 <_svfprintf_r+0x1416>
  402e24:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402e26:	2a00      	cmp	r2, #0
  402e28:	f43f aca3 	beq.w	402772 <_svfprintf_r+0x196>
  402e2c:	2300      	movs	r3, #0
  402e2e:	2101      	movs	r1, #1
  402e30:	461f      	mov	r7, r3
  402e32:	9108      	str	r1, [sp, #32]
  402e34:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  402e38:	f8cd b01c 	str.w	fp, [sp, #28]
  402e3c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402e40:	930a      	str	r3, [sp, #40]	; 0x28
  402e42:	9312      	str	r3, [sp, #72]	; 0x48
  402e44:	910e      	str	r1, [sp, #56]	; 0x38
  402e46:	ae28      	add	r6, sp, #160	; 0xa0
  402e48:	e4e4      	b.n	402814 <_svfprintf_r+0x238>
  402e4a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402e4c:	e534      	b.n	4028b8 <_svfprintf_r+0x2dc>
  402e4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402e50:	2b65      	cmp	r3, #101	; 0x65
  402e52:	f340 80a7 	ble.w	402fa4 <_svfprintf_r+0x9c8>
  402e56:	a815      	add	r0, sp, #84	; 0x54
  402e58:	c80d      	ldmia	r0, {r0, r2, r3}
  402e5a:	9914      	ldr	r1, [sp, #80]	; 0x50
  402e5c:	f003 fc98 	bl	406790 <__aeabi_dcmpeq>
  402e60:	2800      	cmp	r0, #0
  402e62:	f000 8150 	beq.w	403106 <_svfprintf_r+0xb2a>
  402e66:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402e68:	4a20      	ldr	r2, [pc, #128]	; (402eec <_svfprintf_r+0x910>)
  402e6a:	f8c8 2000 	str.w	r2, [r8]
  402e6e:	3301      	adds	r3, #1
  402e70:	3401      	adds	r4, #1
  402e72:	2201      	movs	r2, #1
  402e74:	2b07      	cmp	r3, #7
  402e76:	9427      	str	r4, [sp, #156]	; 0x9c
  402e78:	9326      	str	r3, [sp, #152]	; 0x98
  402e7a:	f8c8 2004 	str.w	r2, [r8, #4]
  402e7e:	f300 836a 	bgt.w	403556 <_svfprintf_r+0xf7a>
  402e82:	f108 0808 	add.w	r8, r8, #8
  402e86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402e88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402e8a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402e8c:	4293      	cmp	r3, r2
  402e8e:	db03      	blt.n	402e98 <_svfprintf_r+0x8bc>
  402e90:	9b07      	ldr	r3, [sp, #28]
  402e92:	07dd      	lsls	r5, r3, #31
  402e94:	f57f ad82 	bpl.w	40299c <_svfprintf_r+0x3c0>
  402e98:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402e9a:	9919      	ldr	r1, [sp, #100]	; 0x64
  402e9c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  402e9e:	f8c8 2000 	str.w	r2, [r8]
  402ea2:	3301      	adds	r3, #1
  402ea4:	440c      	add	r4, r1
  402ea6:	2b07      	cmp	r3, #7
  402ea8:	f8c8 1004 	str.w	r1, [r8, #4]
  402eac:	9427      	str	r4, [sp, #156]	; 0x9c
  402eae:	9326      	str	r3, [sp, #152]	; 0x98
  402eb0:	f300 839e 	bgt.w	4035f0 <_svfprintf_r+0x1014>
  402eb4:	f108 0808 	add.w	r8, r8, #8
  402eb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402eba:	1e5e      	subs	r6, r3, #1
  402ebc:	2e00      	cmp	r6, #0
  402ebe:	f77f ad6d 	ble.w	40299c <_svfprintf_r+0x3c0>
  402ec2:	2e10      	cmp	r6, #16
  402ec4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402ec6:	4d0a      	ldr	r5, [pc, #40]	; (402ef0 <_svfprintf_r+0x914>)
  402ec8:	f340 81f5 	ble.w	4032b6 <_svfprintf_r+0xcda>
  402ecc:	4622      	mov	r2, r4
  402ece:	2710      	movs	r7, #16
  402ed0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  402ed4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  402ed6:	e013      	b.n	402f00 <_svfprintf_r+0x924>
  402ed8:	0040761c 	.word	0x0040761c
  402edc:	00407608 	.word	0x00407608
  402ee0:	7fefffff 	.word	0x7fefffff
  402ee4:	004075fc 	.word	0x004075fc
  402ee8:	004075f8 	.word	0x004075f8
  402eec:	00407638 	.word	0x00407638
  402ef0:	0040764c 	.word	0x0040764c
  402ef4:	f108 0808 	add.w	r8, r8, #8
  402ef8:	3e10      	subs	r6, #16
  402efa:	2e10      	cmp	r6, #16
  402efc:	f340 81da 	ble.w	4032b4 <_svfprintf_r+0xcd8>
  402f00:	3301      	adds	r3, #1
  402f02:	3210      	adds	r2, #16
  402f04:	2b07      	cmp	r3, #7
  402f06:	9227      	str	r2, [sp, #156]	; 0x9c
  402f08:	9326      	str	r3, [sp, #152]	; 0x98
  402f0a:	e888 00a0 	stmia.w	r8, {r5, r7}
  402f0e:	ddf1      	ble.n	402ef4 <_svfprintf_r+0x918>
  402f10:	aa25      	add	r2, sp, #148	; 0x94
  402f12:	4621      	mov	r1, r4
  402f14:	4658      	mov	r0, fp
  402f16:	f002 fefd 	bl	405d14 <__ssprint_r>
  402f1a:	2800      	cmp	r0, #0
  402f1c:	f47f ac30 	bne.w	402780 <_svfprintf_r+0x1a4>
  402f20:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402f22:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402f24:	46c8      	mov	r8, r9
  402f26:	e7e7      	b.n	402ef8 <_svfprintf_r+0x91c>
  402f28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402f2a:	9a08      	ldr	r2, [sp, #32]
  402f2c:	1a9f      	subs	r7, r3, r2
  402f2e:	2f00      	cmp	r7, #0
  402f30:	f77f ace5 	ble.w	4028fe <_svfprintf_r+0x322>
  402f34:	2f10      	cmp	r7, #16
  402f36:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402f38:	4db6      	ldr	r5, [pc, #728]	; (403214 <_svfprintf_r+0xc38>)
  402f3a:	dd27      	ble.n	402f8c <_svfprintf_r+0x9b0>
  402f3c:	4642      	mov	r2, r8
  402f3e:	4621      	mov	r1, r4
  402f40:	46b0      	mov	r8, r6
  402f42:	f04f 0b10 	mov.w	fp, #16
  402f46:	462e      	mov	r6, r5
  402f48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402f4a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402f4c:	e004      	b.n	402f58 <_svfprintf_r+0x97c>
  402f4e:	3f10      	subs	r7, #16
  402f50:	2f10      	cmp	r7, #16
  402f52:	f102 0208 	add.w	r2, r2, #8
  402f56:	dd15      	ble.n	402f84 <_svfprintf_r+0x9a8>
  402f58:	3301      	adds	r3, #1
  402f5a:	3110      	adds	r1, #16
  402f5c:	2b07      	cmp	r3, #7
  402f5e:	9127      	str	r1, [sp, #156]	; 0x9c
  402f60:	9326      	str	r3, [sp, #152]	; 0x98
  402f62:	e882 0840 	stmia.w	r2, {r6, fp}
  402f66:	ddf2      	ble.n	402f4e <_svfprintf_r+0x972>
  402f68:	aa25      	add	r2, sp, #148	; 0x94
  402f6a:	4629      	mov	r1, r5
  402f6c:	4620      	mov	r0, r4
  402f6e:	f002 fed1 	bl	405d14 <__ssprint_r>
  402f72:	2800      	cmp	r0, #0
  402f74:	f47f ac04 	bne.w	402780 <_svfprintf_r+0x1a4>
  402f78:	3f10      	subs	r7, #16
  402f7a:	2f10      	cmp	r7, #16
  402f7c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402f7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402f80:	464a      	mov	r2, r9
  402f82:	dce9      	bgt.n	402f58 <_svfprintf_r+0x97c>
  402f84:	4635      	mov	r5, r6
  402f86:	460c      	mov	r4, r1
  402f88:	4646      	mov	r6, r8
  402f8a:	4690      	mov	r8, r2
  402f8c:	3301      	adds	r3, #1
  402f8e:	443c      	add	r4, r7
  402f90:	2b07      	cmp	r3, #7
  402f92:	9427      	str	r4, [sp, #156]	; 0x9c
  402f94:	9326      	str	r3, [sp, #152]	; 0x98
  402f96:	e888 00a0 	stmia.w	r8, {r5, r7}
  402f9a:	f300 8232 	bgt.w	403402 <_svfprintf_r+0xe26>
  402f9e:	f108 0808 	add.w	r8, r8, #8
  402fa2:	e4ac      	b.n	4028fe <_svfprintf_r+0x322>
  402fa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402fa6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402fa8:	2b01      	cmp	r3, #1
  402faa:	f340 81fe 	ble.w	4033aa <_svfprintf_r+0xdce>
  402fae:	3701      	adds	r7, #1
  402fb0:	3401      	adds	r4, #1
  402fb2:	2301      	movs	r3, #1
  402fb4:	2f07      	cmp	r7, #7
  402fb6:	9427      	str	r4, [sp, #156]	; 0x9c
  402fb8:	9726      	str	r7, [sp, #152]	; 0x98
  402fba:	f8c8 6000 	str.w	r6, [r8]
  402fbe:	f8c8 3004 	str.w	r3, [r8, #4]
  402fc2:	f300 8203 	bgt.w	4033cc <_svfprintf_r+0xdf0>
  402fc6:	f108 0808 	add.w	r8, r8, #8
  402fca:	9a19      	ldr	r2, [sp, #100]	; 0x64
  402fcc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402fce:	f8c8 3000 	str.w	r3, [r8]
  402fd2:	3701      	adds	r7, #1
  402fd4:	4414      	add	r4, r2
  402fd6:	2f07      	cmp	r7, #7
  402fd8:	9427      	str	r4, [sp, #156]	; 0x9c
  402fda:	9726      	str	r7, [sp, #152]	; 0x98
  402fdc:	f8c8 2004 	str.w	r2, [r8, #4]
  402fe0:	f300 8200 	bgt.w	4033e4 <_svfprintf_r+0xe08>
  402fe4:	f108 0808 	add.w	r8, r8, #8
  402fe8:	a815      	add	r0, sp, #84	; 0x54
  402fea:	c80d      	ldmia	r0, {r0, r2, r3}
  402fec:	9914      	ldr	r1, [sp, #80]	; 0x50
  402fee:	f003 fbcf 	bl	406790 <__aeabi_dcmpeq>
  402ff2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402ff4:	2800      	cmp	r0, #0
  402ff6:	f040 8101 	bne.w	4031fc <_svfprintf_r+0xc20>
  402ffa:	3b01      	subs	r3, #1
  402ffc:	3701      	adds	r7, #1
  402ffe:	3601      	adds	r6, #1
  403000:	441c      	add	r4, r3
  403002:	2f07      	cmp	r7, #7
  403004:	9726      	str	r7, [sp, #152]	; 0x98
  403006:	9427      	str	r4, [sp, #156]	; 0x9c
  403008:	f8c8 6000 	str.w	r6, [r8]
  40300c:	f8c8 3004 	str.w	r3, [r8, #4]
  403010:	f300 8127 	bgt.w	403262 <_svfprintf_r+0xc86>
  403014:	f108 0808 	add.w	r8, r8, #8
  403018:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40301a:	f8c8 2004 	str.w	r2, [r8, #4]
  40301e:	3701      	adds	r7, #1
  403020:	4414      	add	r4, r2
  403022:	ab21      	add	r3, sp, #132	; 0x84
  403024:	2f07      	cmp	r7, #7
  403026:	9427      	str	r4, [sp, #156]	; 0x9c
  403028:	9726      	str	r7, [sp, #152]	; 0x98
  40302a:	f8c8 3000 	str.w	r3, [r8]
  40302e:	f77f acb3 	ble.w	402998 <_svfprintf_r+0x3bc>
  403032:	aa25      	add	r2, sp, #148	; 0x94
  403034:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403036:	980c      	ldr	r0, [sp, #48]	; 0x30
  403038:	f002 fe6c 	bl	405d14 <__ssprint_r>
  40303c:	2800      	cmp	r0, #0
  40303e:	f47f ab9f 	bne.w	402780 <_svfprintf_r+0x1a4>
  403042:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403044:	46c8      	mov	r8, r9
  403046:	e4a9      	b.n	40299c <_svfprintf_r+0x3c0>
  403048:	aa25      	add	r2, sp, #148	; 0x94
  40304a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40304c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40304e:	f002 fe61 	bl	405d14 <__ssprint_r>
  403052:	2800      	cmp	r0, #0
  403054:	f43f aceb 	beq.w	402a2e <_svfprintf_r+0x452>
  403058:	f7ff bb92 	b.w	402780 <_svfprintf_r+0x1a4>
  40305c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  403060:	2b01      	cmp	r3, #1
  403062:	f000 8134 	beq.w	4032ce <_svfprintf_r+0xcf2>
  403066:	2b02      	cmp	r3, #2
  403068:	d125      	bne.n	4030b6 <_svfprintf_r+0xada>
  40306a:	f8cd b01c 	str.w	fp, [sp, #28]
  40306e:	2400      	movs	r4, #0
  403070:	2500      	movs	r5, #0
  403072:	e61e      	b.n	402cb2 <_svfprintf_r+0x6d6>
  403074:	aa25      	add	r2, sp, #148	; 0x94
  403076:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403078:	980c      	ldr	r0, [sp, #48]	; 0x30
  40307a:	f002 fe4b 	bl	405d14 <__ssprint_r>
  40307e:	2800      	cmp	r0, #0
  403080:	f47f ab7e 	bne.w	402780 <_svfprintf_r+0x1a4>
  403084:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403086:	46c8      	mov	r8, r9
  403088:	e475      	b.n	402976 <_svfprintf_r+0x39a>
  40308a:	aa25      	add	r2, sp, #148	; 0x94
  40308c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40308e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403090:	f002 fe40 	bl	405d14 <__ssprint_r>
  403094:	2800      	cmp	r0, #0
  403096:	f47f ab73 	bne.w	402780 <_svfprintf_r+0x1a4>
  40309a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40309c:	46c8      	mov	r8, r9
  40309e:	e41b      	b.n	4028d8 <_svfprintf_r+0x2fc>
  4030a0:	aa25      	add	r2, sp, #148	; 0x94
  4030a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4030a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4030a6:	f002 fe35 	bl	405d14 <__ssprint_r>
  4030aa:	2800      	cmp	r0, #0
  4030ac:	f47f ab68 	bne.w	402780 <_svfprintf_r+0x1a4>
  4030b0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4030b2:	46c8      	mov	r8, r9
  4030b4:	e420      	b.n	4028f8 <_svfprintf_r+0x31c>
  4030b6:	f8cd b01c 	str.w	fp, [sp, #28]
  4030ba:	2400      	movs	r4, #0
  4030bc:	2500      	movs	r5, #0
  4030be:	4649      	mov	r1, r9
  4030c0:	e000      	b.n	4030c4 <_svfprintf_r+0xae8>
  4030c2:	4631      	mov	r1, r6
  4030c4:	08e2      	lsrs	r2, r4, #3
  4030c6:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4030ca:	08e8      	lsrs	r0, r5, #3
  4030cc:	f004 0307 	and.w	r3, r4, #7
  4030d0:	4605      	mov	r5, r0
  4030d2:	4614      	mov	r4, r2
  4030d4:	3330      	adds	r3, #48	; 0x30
  4030d6:	ea54 0205 	orrs.w	r2, r4, r5
  4030da:	f801 3c01 	strb.w	r3, [r1, #-1]
  4030de:	f101 36ff 	add.w	r6, r1, #4294967295
  4030e2:	d1ee      	bne.n	4030c2 <_svfprintf_r+0xae6>
  4030e4:	9a07      	ldr	r2, [sp, #28]
  4030e6:	07d2      	lsls	r2, r2, #31
  4030e8:	f57f adf3 	bpl.w	402cd2 <_svfprintf_r+0x6f6>
  4030ec:	2b30      	cmp	r3, #48	; 0x30
  4030ee:	f43f adf0 	beq.w	402cd2 <_svfprintf_r+0x6f6>
  4030f2:	3902      	subs	r1, #2
  4030f4:	2330      	movs	r3, #48	; 0x30
  4030f6:	f806 3c01 	strb.w	r3, [r6, #-1]
  4030fa:	eba9 0301 	sub.w	r3, r9, r1
  4030fe:	930e      	str	r3, [sp, #56]	; 0x38
  403100:	460e      	mov	r6, r1
  403102:	f7ff bb7b 	b.w	4027fc <_svfprintf_r+0x220>
  403106:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403108:	2900      	cmp	r1, #0
  40310a:	f340 822e 	ble.w	40356a <_svfprintf_r+0xf8e>
  40310e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403110:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403112:	4293      	cmp	r3, r2
  403114:	bfa8      	it	ge
  403116:	4613      	movge	r3, r2
  403118:	2b00      	cmp	r3, #0
  40311a:	461f      	mov	r7, r3
  40311c:	dd0d      	ble.n	40313a <_svfprintf_r+0xb5e>
  40311e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403120:	f8c8 6000 	str.w	r6, [r8]
  403124:	3301      	adds	r3, #1
  403126:	443c      	add	r4, r7
  403128:	2b07      	cmp	r3, #7
  40312a:	9427      	str	r4, [sp, #156]	; 0x9c
  40312c:	f8c8 7004 	str.w	r7, [r8, #4]
  403130:	9326      	str	r3, [sp, #152]	; 0x98
  403132:	f300 831f 	bgt.w	403774 <_svfprintf_r+0x1198>
  403136:	f108 0808 	add.w	r8, r8, #8
  40313a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40313c:	2f00      	cmp	r7, #0
  40313e:	bfa8      	it	ge
  403140:	1bdb      	subge	r3, r3, r7
  403142:	2b00      	cmp	r3, #0
  403144:	461f      	mov	r7, r3
  403146:	f340 80d6 	ble.w	4032f6 <_svfprintf_r+0xd1a>
  40314a:	2f10      	cmp	r7, #16
  40314c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40314e:	4d31      	ldr	r5, [pc, #196]	; (403214 <_svfprintf_r+0xc38>)
  403150:	f340 81ed 	ble.w	40352e <_svfprintf_r+0xf52>
  403154:	4642      	mov	r2, r8
  403156:	4621      	mov	r1, r4
  403158:	46b0      	mov	r8, r6
  40315a:	f04f 0b10 	mov.w	fp, #16
  40315e:	462e      	mov	r6, r5
  403160:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403162:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403164:	e004      	b.n	403170 <_svfprintf_r+0xb94>
  403166:	3208      	adds	r2, #8
  403168:	3f10      	subs	r7, #16
  40316a:	2f10      	cmp	r7, #16
  40316c:	f340 81db 	ble.w	403526 <_svfprintf_r+0xf4a>
  403170:	3301      	adds	r3, #1
  403172:	3110      	adds	r1, #16
  403174:	2b07      	cmp	r3, #7
  403176:	9127      	str	r1, [sp, #156]	; 0x9c
  403178:	9326      	str	r3, [sp, #152]	; 0x98
  40317a:	e882 0840 	stmia.w	r2, {r6, fp}
  40317e:	ddf2      	ble.n	403166 <_svfprintf_r+0xb8a>
  403180:	aa25      	add	r2, sp, #148	; 0x94
  403182:	4629      	mov	r1, r5
  403184:	4620      	mov	r0, r4
  403186:	f002 fdc5 	bl	405d14 <__ssprint_r>
  40318a:	2800      	cmp	r0, #0
  40318c:	f47f aaf8 	bne.w	402780 <_svfprintf_r+0x1a4>
  403190:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403192:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403194:	464a      	mov	r2, r9
  403196:	e7e7      	b.n	403168 <_svfprintf_r+0xb8c>
  403198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40319a:	930e      	str	r3, [sp, #56]	; 0x38
  40319c:	464e      	mov	r6, r9
  40319e:	f7ff bb2d 	b.w	4027fc <_svfprintf_r+0x220>
  4031a2:	2d00      	cmp	r5, #0
  4031a4:	bf08      	it	eq
  4031a6:	2c0a      	cmpeq	r4, #10
  4031a8:	f0c0 808f 	bcc.w	4032ca <_svfprintf_r+0xcee>
  4031ac:	464e      	mov	r6, r9
  4031ae:	4620      	mov	r0, r4
  4031b0:	4629      	mov	r1, r5
  4031b2:	220a      	movs	r2, #10
  4031b4:	2300      	movs	r3, #0
  4031b6:	f003 fb5b 	bl	406870 <__aeabi_uldivmod>
  4031ba:	3230      	adds	r2, #48	; 0x30
  4031bc:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4031c0:	4620      	mov	r0, r4
  4031c2:	4629      	mov	r1, r5
  4031c4:	2300      	movs	r3, #0
  4031c6:	220a      	movs	r2, #10
  4031c8:	f003 fb52 	bl	406870 <__aeabi_uldivmod>
  4031cc:	4604      	mov	r4, r0
  4031ce:	460d      	mov	r5, r1
  4031d0:	ea54 0305 	orrs.w	r3, r4, r5
  4031d4:	d1eb      	bne.n	4031ae <_svfprintf_r+0xbd2>
  4031d6:	eba9 0306 	sub.w	r3, r9, r6
  4031da:	930e      	str	r3, [sp, #56]	; 0x38
  4031dc:	f7ff bb0e 	b.w	4027fc <_svfprintf_r+0x220>
  4031e0:	aa25      	add	r2, sp, #148	; 0x94
  4031e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4031e4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4031e6:	f002 fd95 	bl	405d14 <__ssprint_r>
  4031ea:	2800      	cmp	r0, #0
  4031ec:	f47f aac8 	bne.w	402780 <_svfprintf_r+0x1a4>
  4031f0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4031f4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4031f6:	46c8      	mov	r8, r9
  4031f8:	f7ff bb5e 	b.w	4028b8 <_svfprintf_r+0x2dc>
  4031fc:	1e5e      	subs	r6, r3, #1
  4031fe:	2e00      	cmp	r6, #0
  403200:	f77f af0a 	ble.w	403018 <_svfprintf_r+0xa3c>
  403204:	2e10      	cmp	r6, #16
  403206:	4d03      	ldr	r5, [pc, #12]	; (403214 <_svfprintf_r+0xc38>)
  403208:	dd22      	ble.n	403250 <_svfprintf_r+0xc74>
  40320a:	4622      	mov	r2, r4
  40320c:	f04f 0b10 	mov.w	fp, #16
  403210:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403212:	e006      	b.n	403222 <_svfprintf_r+0xc46>
  403214:	0040764c 	.word	0x0040764c
  403218:	3e10      	subs	r6, #16
  40321a:	2e10      	cmp	r6, #16
  40321c:	f108 0808 	add.w	r8, r8, #8
  403220:	dd15      	ble.n	40324e <_svfprintf_r+0xc72>
  403222:	3701      	adds	r7, #1
  403224:	3210      	adds	r2, #16
  403226:	2f07      	cmp	r7, #7
  403228:	9227      	str	r2, [sp, #156]	; 0x9c
  40322a:	9726      	str	r7, [sp, #152]	; 0x98
  40322c:	e888 0820 	stmia.w	r8, {r5, fp}
  403230:	ddf2      	ble.n	403218 <_svfprintf_r+0xc3c>
  403232:	aa25      	add	r2, sp, #148	; 0x94
  403234:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403236:	4620      	mov	r0, r4
  403238:	f002 fd6c 	bl	405d14 <__ssprint_r>
  40323c:	2800      	cmp	r0, #0
  40323e:	f47f aa9f 	bne.w	402780 <_svfprintf_r+0x1a4>
  403242:	3e10      	subs	r6, #16
  403244:	2e10      	cmp	r6, #16
  403246:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403248:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40324a:	46c8      	mov	r8, r9
  40324c:	dce9      	bgt.n	403222 <_svfprintf_r+0xc46>
  40324e:	4614      	mov	r4, r2
  403250:	3701      	adds	r7, #1
  403252:	4434      	add	r4, r6
  403254:	2f07      	cmp	r7, #7
  403256:	9427      	str	r4, [sp, #156]	; 0x9c
  403258:	9726      	str	r7, [sp, #152]	; 0x98
  40325a:	e888 0060 	stmia.w	r8, {r5, r6}
  40325e:	f77f aed9 	ble.w	403014 <_svfprintf_r+0xa38>
  403262:	aa25      	add	r2, sp, #148	; 0x94
  403264:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403266:	980c      	ldr	r0, [sp, #48]	; 0x30
  403268:	f002 fd54 	bl	405d14 <__ssprint_r>
  40326c:	2800      	cmp	r0, #0
  40326e:	f47f aa87 	bne.w	402780 <_svfprintf_r+0x1a4>
  403272:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403274:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403276:	46c8      	mov	r8, r9
  403278:	e6ce      	b.n	403018 <_svfprintf_r+0xa3c>
  40327a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40327c:	6814      	ldr	r4, [r2, #0]
  40327e:	4613      	mov	r3, r2
  403280:	3304      	adds	r3, #4
  403282:	17e5      	asrs	r5, r4, #31
  403284:	930f      	str	r3, [sp, #60]	; 0x3c
  403286:	4622      	mov	r2, r4
  403288:	462b      	mov	r3, r5
  40328a:	e4fa      	b.n	402c82 <_svfprintf_r+0x6a6>
  40328c:	3204      	adds	r2, #4
  40328e:	681c      	ldr	r4, [r3, #0]
  403290:	920f      	str	r2, [sp, #60]	; 0x3c
  403292:	2301      	movs	r3, #1
  403294:	2500      	movs	r5, #0
  403296:	f7ff ba94 	b.w	4027c2 <_svfprintf_r+0x1e6>
  40329a:	681c      	ldr	r4, [r3, #0]
  40329c:	3304      	adds	r3, #4
  40329e:	930f      	str	r3, [sp, #60]	; 0x3c
  4032a0:	2500      	movs	r5, #0
  4032a2:	e421      	b.n	402ae8 <_svfprintf_r+0x50c>
  4032a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4032a6:	460a      	mov	r2, r1
  4032a8:	3204      	adds	r2, #4
  4032aa:	680c      	ldr	r4, [r1, #0]
  4032ac:	920f      	str	r2, [sp, #60]	; 0x3c
  4032ae:	2500      	movs	r5, #0
  4032b0:	f7ff ba87 	b.w	4027c2 <_svfprintf_r+0x1e6>
  4032b4:	4614      	mov	r4, r2
  4032b6:	3301      	adds	r3, #1
  4032b8:	4434      	add	r4, r6
  4032ba:	2b07      	cmp	r3, #7
  4032bc:	9427      	str	r4, [sp, #156]	; 0x9c
  4032be:	9326      	str	r3, [sp, #152]	; 0x98
  4032c0:	e888 0060 	stmia.w	r8, {r5, r6}
  4032c4:	f77f ab68 	ble.w	402998 <_svfprintf_r+0x3bc>
  4032c8:	e6b3      	b.n	403032 <_svfprintf_r+0xa56>
  4032ca:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4032ce:	f8cd b01c 	str.w	fp, [sp, #28]
  4032d2:	ae42      	add	r6, sp, #264	; 0x108
  4032d4:	3430      	adds	r4, #48	; 0x30
  4032d6:	2301      	movs	r3, #1
  4032d8:	f806 4d41 	strb.w	r4, [r6, #-65]!
  4032dc:	930e      	str	r3, [sp, #56]	; 0x38
  4032de:	f7ff ba8d 	b.w	4027fc <_svfprintf_r+0x220>
  4032e2:	aa25      	add	r2, sp, #148	; 0x94
  4032e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4032e6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4032e8:	f002 fd14 	bl	405d14 <__ssprint_r>
  4032ec:	2800      	cmp	r0, #0
  4032ee:	f47f aa47 	bne.w	402780 <_svfprintf_r+0x1a4>
  4032f2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4032f4:	46c8      	mov	r8, r9
  4032f6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4032f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4032fa:	429a      	cmp	r2, r3
  4032fc:	db44      	blt.n	403388 <_svfprintf_r+0xdac>
  4032fe:	9b07      	ldr	r3, [sp, #28]
  403300:	07d9      	lsls	r1, r3, #31
  403302:	d441      	bmi.n	403388 <_svfprintf_r+0xdac>
  403304:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403306:	9812      	ldr	r0, [sp, #72]	; 0x48
  403308:	1a9a      	subs	r2, r3, r2
  40330a:	1a1d      	subs	r5, r3, r0
  40330c:	4295      	cmp	r5, r2
  40330e:	bfa8      	it	ge
  403310:	4615      	movge	r5, r2
  403312:	2d00      	cmp	r5, #0
  403314:	dd0e      	ble.n	403334 <_svfprintf_r+0xd58>
  403316:	9926      	ldr	r1, [sp, #152]	; 0x98
  403318:	f8c8 5004 	str.w	r5, [r8, #4]
  40331c:	3101      	adds	r1, #1
  40331e:	4406      	add	r6, r0
  403320:	442c      	add	r4, r5
  403322:	2907      	cmp	r1, #7
  403324:	f8c8 6000 	str.w	r6, [r8]
  403328:	9427      	str	r4, [sp, #156]	; 0x9c
  40332a:	9126      	str	r1, [sp, #152]	; 0x98
  40332c:	f300 823b 	bgt.w	4037a6 <_svfprintf_r+0x11ca>
  403330:	f108 0808 	add.w	r8, r8, #8
  403334:	2d00      	cmp	r5, #0
  403336:	bfac      	ite	ge
  403338:	1b56      	subge	r6, r2, r5
  40333a:	4616      	movlt	r6, r2
  40333c:	2e00      	cmp	r6, #0
  40333e:	f77f ab2d 	ble.w	40299c <_svfprintf_r+0x3c0>
  403342:	2e10      	cmp	r6, #16
  403344:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403346:	4db0      	ldr	r5, [pc, #704]	; (403608 <_svfprintf_r+0x102c>)
  403348:	ddb5      	ble.n	4032b6 <_svfprintf_r+0xcda>
  40334a:	4622      	mov	r2, r4
  40334c:	2710      	movs	r7, #16
  40334e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403352:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403354:	e004      	b.n	403360 <_svfprintf_r+0xd84>
  403356:	f108 0808 	add.w	r8, r8, #8
  40335a:	3e10      	subs	r6, #16
  40335c:	2e10      	cmp	r6, #16
  40335e:	dda9      	ble.n	4032b4 <_svfprintf_r+0xcd8>
  403360:	3301      	adds	r3, #1
  403362:	3210      	adds	r2, #16
  403364:	2b07      	cmp	r3, #7
  403366:	9227      	str	r2, [sp, #156]	; 0x9c
  403368:	9326      	str	r3, [sp, #152]	; 0x98
  40336a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40336e:	ddf2      	ble.n	403356 <_svfprintf_r+0xd7a>
  403370:	aa25      	add	r2, sp, #148	; 0x94
  403372:	4621      	mov	r1, r4
  403374:	4658      	mov	r0, fp
  403376:	f002 fccd 	bl	405d14 <__ssprint_r>
  40337a:	2800      	cmp	r0, #0
  40337c:	f47f aa00 	bne.w	402780 <_svfprintf_r+0x1a4>
  403380:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403382:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403384:	46c8      	mov	r8, r9
  403386:	e7e8      	b.n	40335a <_svfprintf_r+0xd7e>
  403388:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40338a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40338c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40338e:	f8c8 1000 	str.w	r1, [r8]
  403392:	3301      	adds	r3, #1
  403394:	4404      	add	r4, r0
  403396:	2b07      	cmp	r3, #7
  403398:	9427      	str	r4, [sp, #156]	; 0x9c
  40339a:	f8c8 0004 	str.w	r0, [r8, #4]
  40339e:	9326      	str	r3, [sp, #152]	; 0x98
  4033a0:	f300 81f5 	bgt.w	40378e <_svfprintf_r+0x11b2>
  4033a4:	f108 0808 	add.w	r8, r8, #8
  4033a8:	e7ac      	b.n	403304 <_svfprintf_r+0xd28>
  4033aa:	9b07      	ldr	r3, [sp, #28]
  4033ac:	07da      	lsls	r2, r3, #31
  4033ae:	f53f adfe 	bmi.w	402fae <_svfprintf_r+0x9d2>
  4033b2:	3701      	adds	r7, #1
  4033b4:	3401      	adds	r4, #1
  4033b6:	2301      	movs	r3, #1
  4033b8:	2f07      	cmp	r7, #7
  4033ba:	9427      	str	r4, [sp, #156]	; 0x9c
  4033bc:	9726      	str	r7, [sp, #152]	; 0x98
  4033be:	f8c8 6000 	str.w	r6, [r8]
  4033c2:	f8c8 3004 	str.w	r3, [r8, #4]
  4033c6:	f77f ae25 	ble.w	403014 <_svfprintf_r+0xa38>
  4033ca:	e74a      	b.n	403262 <_svfprintf_r+0xc86>
  4033cc:	aa25      	add	r2, sp, #148	; 0x94
  4033ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4033d0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4033d2:	f002 fc9f 	bl	405d14 <__ssprint_r>
  4033d6:	2800      	cmp	r0, #0
  4033d8:	f47f a9d2 	bne.w	402780 <_svfprintf_r+0x1a4>
  4033dc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4033de:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4033e0:	46c8      	mov	r8, r9
  4033e2:	e5f2      	b.n	402fca <_svfprintf_r+0x9ee>
  4033e4:	aa25      	add	r2, sp, #148	; 0x94
  4033e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4033e8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4033ea:	f002 fc93 	bl	405d14 <__ssprint_r>
  4033ee:	2800      	cmp	r0, #0
  4033f0:	f47f a9c6 	bne.w	402780 <_svfprintf_r+0x1a4>
  4033f4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4033f6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4033f8:	46c8      	mov	r8, r9
  4033fa:	e5f5      	b.n	402fe8 <_svfprintf_r+0xa0c>
  4033fc:	464e      	mov	r6, r9
  4033fe:	f7ff b9fd 	b.w	4027fc <_svfprintf_r+0x220>
  403402:	aa25      	add	r2, sp, #148	; 0x94
  403404:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403406:	980c      	ldr	r0, [sp, #48]	; 0x30
  403408:	f002 fc84 	bl	405d14 <__ssprint_r>
  40340c:	2800      	cmp	r0, #0
  40340e:	f47f a9b7 	bne.w	402780 <_svfprintf_r+0x1a4>
  403412:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403414:	46c8      	mov	r8, r9
  403416:	f7ff ba72 	b.w	4028fe <_svfprintf_r+0x322>
  40341a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40341c:	4622      	mov	r2, r4
  40341e:	4620      	mov	r0, r4
  403420:	9c14      	ldr	r4, [sp, #80]	; 0x50
  403422:	4623      	mov	r3, r4
  403424:	4621      	mov	r1, r4
  403426:	f003 f9e5 	bl	4067f4 <__aeabi_dcmpun>
  40342a:	2800      	cmp	r0, #0
  40342c:	f040 8286 	bne.w	40393c <_svfprintf_r+0x1360>
  403430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403432:	3301      	adds	r3, #1
  403434:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403436:	f023 0320 	bic.w	r3, r3, #32
  40343a:	930e      	str	r3, [sp, #56]	; 0x38
  40343c:	f000 81e2 	beq.w	403804 <_svfprintf_r+0x1228>
  403440:	2b47      	cmp	r3, #71	; 0x47
  403442:	f000 811e 	beq.w	403682 <_svfprintf_r+0x10a6>
  403446:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40344a:	9307      	str	r3, [sp, #28]
  40344c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40344e:	1e1f      	subs	r7, r3, #0
  403450:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403452:	9308      	str	r3, [sp, #32]
  403454:	bfbb      	ittet	lt
  403456:	463b      	movlt	r3, r7
  403458:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40345c:	2300      	movge	r3, #0
  40345e:	232d      	movlt	r3, #45	; 0x2d
  403460:	9310      	str	r3, [sp, #64]	; 0x40
  403462:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403464:	2b66      	cmp	r3, #102	; 0x66
  403466:	f000 81bb 	beq.w	4037e0 <_svfprintf_r+0x1204>
  40346a:	2b46      	cmp	r3, #70	; 0x46
  40346c:	f000 80df 	beq.w	40362e <_svfprintf_r+0x1052>
  403470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403472:	9a08      	ldr	r2, [sp, #32]
  403474:	2b45      	cmp	r3, #69	; 0x45
  403476:	bf0c      	ite	eq
  403478:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40347a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40347c:	a823      	add	r0, sp, #140	; 0x8c
  40347e:	a920      	add	r1, sp, #128	; 0x80
  403480:	bf08      	it	eq
  403482:	1c5d      	addeq	r5, r3, #1
  403484:	9004      	str	r0, [sp, #16]
  403486:	9103      	str	r1, [sp, #12]
  403488:	a81f      	add	r0, sp, #124	; 0x7c
  40348a:	2102      	movs	r1, #2
  40348c:	463b      	mov	r3, r7
  40348e:	9002      	str	r0, [sp, #8]
  403490:	9501      	str	r5, [sp, #4]
  403492:	9100      	str	r1, [sp, #0]
  403494:	980c      	ldr	r0, [sp, #48]	; 0x30
  403496:	f000 fb73 	bl	403b80 <_dtoa_r>
  40349a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40349c:	2b67      	cmp	r3, #103	; 0x67
  40349e:	4606      	mov	r6, r0
  4034a0:	f040 81e0 	bne.w	403864 <_svfprintf_r+0x1288>
  4034a4:	f01b 0f01 	tst.w	fp, #1
  4034a8:	f000 8246 	beq.w	403938 <_svfprintf_r+0x135c>
  4034ac:	1974      	adds	r4, r6, r5
  4034ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4034b0:	9808      	ldr	r0, [sp, #32]
  4034b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4034b4:	4639      	mov	r1, r7
  4034b6:	f003 f96b 	bl	406790 <__aeabi_dcmpeq>
  4034ba:	2800      	cmp	r0, #0
  4034bc:	f040 8165 	bne.w	40378a <_svfprintf_r+0x11ae>
  4034c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4034c2:	42a3      	cmp	r3, r4
  4034c4:	d206      	bcs.n	4034d4 <_svfprintf_r+0xef8>
  4034c6:	2130      	movs	r1, #48	; 0x30
  4034c8:	1c5a      	adds	r2, r3, #1
  4034ca:	9223      	str	r2, [sp, #140]	; 0x8c
  4034cc:	7019      	strb	r1, [r3, #0]
  4034ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4034d0:	429c      	cmp	r4, r3
  4034d2:	d8f9      	bhi.n	4034c8 <_svfprintf_r+0xeec>
  4034d4:	1b9b      	subs	r3, r3, r6
  4034d6:	9313      	str	r3, [sp, #76]	; 0x4c
  4034d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4034da:	2b47      	cmp	r3, #71	; 0x47
  4034dc:	f000 80e9 	beq.w	4036b2 <_svfprintf_r+0x10d6>
  4034e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4034e2:	2b65      	cmp	r3, #101	; 0x65
  4034e4:	f340 81cd 	ble.w	403882 <_svfprintf_r+0x12a6>
  4034e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4034ea:	2b66      	cmp	r3, #102	; 0x66
  4034ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4034ee:	9312      	str	r3, [sp, #72]	; 0x48
  4034f0:	f000 819e 	beq.w	403830 <_svfprintf_r+0x1254>
  4034f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4034f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4034f8:	4619      	mov	r1, r3
  4034fa:	4291      	cmp	r1, r2
  4034fc:	f300 818a 	bgt.w	403814 <_svfprintf_r+0x1238>
  403500:	f01b 0f01 	tst.w	fp, #1
  403504:	f040 8213 	bne.w	40392e <_svfprintf_r+0x1352>
  403508:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40350c:	9308      	str	r3, [sp, #32]
  40350e:	2367      	movs	r3, #103	; 0x67
  403510:	920e      	str	r2, [sp, #56]	; 0x38
  403512:	9311      	str	r3, [sp, #68]	; 0x44
  403514:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403516:	2b00      	cmp	r3, #0
  403518:	f040 80c4 	bne.w	4036a4 <_svfprintf_r+0x10c8>
  40351c:	930a      	str	r3, [sp, #40]	; 0x28
  40351e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403522:	f7ff b973 	b.w	40280c <_svfprintf_r+0x230>
  403526:	4635      	mov	r5, r6
  403528:	460c      	mov	r4, r1
  40352a:	4646      	mov	r6, r8
  40352c:	4690      	mov	r8, r2
  40352e:	3301      	adds	r3, #1
  403530:	443c      	add	r4, r7
  403532:	2b07      	cmp	r3, #7
  403534:	9427      	str	r4, [sp, #156]	; 0x9c
  403536:	9326      	str	r3, [sp, #152]	; 0x98
  403538:	e888 00a0 	stmia.w	r8, {r5, r7}
  40353c:	f73f aed1 	bgt.w	4032e2 <_svfprintf_r+0xd06>
  403540:	f108 0808 	add.w	r8, r8, #8
  403544:	e6d7      	b.n	4032f6 <_svfprintf_r+0xd1a>
  403546:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403548:	6813      	ldr	r3, [r2, #0]
  40354a:	3204      	adds	r2, #4
  40354c:	920f      	str	r2, [sp, #60]	; 0x3c
  40354e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403550:	601a      	str	r2, [r3, #0]
  403552:	f7ff b86a 	b.w	40262a <_svfprintf_r+0x4e>
  403556:	aa25      	add	r2, sp, #148	; 0x94
  403558:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40355a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40355c:	f002 fbda 	bl	405d14 <__ssprint_r>
  403560:	2800      	cmp	r0, #0
  403562:	f47f a90d 	bne.w	402780 <_svfprintf_r+0x1a4>
  403566:	46c8      	mov	r8, r9
  403568:	e48d      	b.n	402e86 <_svfprintf_r+0x8aa>
  40356a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40356c:	4a27      	ldr	r2, [pc, #156]	; (40360c <_svfprintf_r+0x1030>)
  40356e:	f8c8 2000 	str.w	r2, [r8]
  403572:	3301      	adds	r3, #1
  403574:	3401      	adds	r4, #1
  403576:	2201      	movs	r2, #1
  403578:	2b07      	cmp	r3, #7
  40357a:	9427      	str	r4, [sp, #156]	; 0x9c
  40357c:	9326      	str	r3, [sp, #152]	; 0x98
  40357e:	f8c8 2004 	str.w	r2, [r8, #4]
  403582:	dc72      	bgt.n	40366a <_svfprintf_r+0x108e>
  403584:	f108 0808 	add.w	r8, r8, #8
  403588:	b929      	cbnz	r1, 403596 <_svfprintf_r+0xfba>
  40358a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40358c:	b91b      	cbnz	r3, 403596 <_svfprintf_r+0xfba>
  40358e:	9b07      	ldr	r3, [sp, #28]
  403590:	07d8      	lsls	r0, r3, #31
  403592:	f57f aa03 	bpl.w	40299c <_svfprintf_r+0x3c0>
  403596:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403598:	9819      	ldr	r0, [sp, #100]	; 0x64
  40359a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40359c:	f8c8 2000 	str.w	r2, [r8]
  4035a0:	3301      	adds	r3, #1
  4035a2:	4602      	mov	r2, r0
  4035a4:	4422      	add	r2, r4
  4035a6:	2b07      	cmp	r3, #7
  4035a8:	9227      	str	r2, [sp, #156]	; 0x9c
  4035aa:	f8c8 0004 	str.w	r0, [r8, #4]
  4035ae:	9326      	str	r3, [sp, #152]	; 0x98
  4035b0:	f300 818d 	bgt.w	4038ce <_svfprintf_r+0x12f2>
  4035b4:	f108 0808 	add.w	r8, r8, #8
  4035b8:	2900      	cmp	r1, #0
  4035ba:	f2c0 8165 	blt.w	403888 <_svfprintf_r+0x12ac>
  4035be:	9913      	ldr	r1, [sp, #76]	; 0x4c
  4035c0:	f8c8 6000 	str.w	r6, [r8]
  4035c4:	3301      	adds	r3, #1
  4035c6:	188c      	adds	r4, r1, r2
  4035c8:	2b07      	cmp	r3, #7
  4035ca:	9427      	str	r4, [sp, #156]	; 0x9c
  4035cc:	9326      	str	r3, [sp, #152]	; 0x98
  4035ce:	f8c8 1004 	str.w	r1, [r8, #4]
  4035d2:	f77f a9e1 	ble.w	402998 <_svfprintf_r+0x3bc>
  4035d6:	e52c      	b.n	403032 <_svfprintf_r+0xa56>
  4035d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4035da:	9909      	ldr	r1, [sp, #36]	; 0x24
  4035dc:	6813      	ldr	r3, [r2, #0]
  4035de:	17cd      	asrs	r5, r1, #31
  4035e0:	4608      	mov	r0, r1
  4035e2:	3204      	adds	r2, #4
  4035e4:	4629      	mov	r1, r5
  4035e6:	920f      	str	r2, [sp, #60]	; 0x3c
  4035e8:	e9c3 0100 	strd	r0, r1, [r3]
  4035ec:	f7ff b81d 	b.w	40262a <_svfprintf_r+0x4e>
  4035f0:	aa25      	add	r2, sp, #148	; 0x94
  4035f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4035f4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4035f6:	f002 fb8d 	bl	405d14 <__ssprint_r>
  4035fa:	2800      	cmp	r0, #0
  4035fc:	f47f a8c0 	bne.w	402780 <_svfprintf_r+0x1a4>
  403600:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403602:	46c8      	mov	r8, r9
  403604:	e458      	b.n	402eb8 <_svfprintf_r+0x8dc>
  403606:	bf00      	nop
  403608:	0040764c 	.word	0x0040764c
  40360c:	00407638 	.word	0x00407638
  403610:	2140      	movs	r1, #64	; 0x40
  403612:	980c      	ldr	r0, [sp, #48]	; 0x30
  403614:	f001 fb40 	bl	404c98 <_malloc_r>
  403618:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40361a:	6010      	str	r0, [r2, #0]
  40361c:	6110      	str	r0, [r2, #16]
  40361e:	2800      	cmp	r0, #0
  403620:	f000 81f2 	beq.w	403a08 <_svfprintf_r+0x142c>
  403624:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403626:	2340      	movs	r3, #64	; 0x40
  403628:	6153      	str	r3, [r2, #20]
  40362a:	f7fe bfee 	b.w	40260a <_svfprintf_r+0x2e>
  40362e:	a823      	add	r0, sp, #140	; 0x8c
  403630:	a920      	add	r1, sp, #128	; 0x80
  403632:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403634:	9004      	str	r0, [sp, #16]
  403636:	9103      	str	r1, [sp, #12]
  403638:	a81f      	add	r0, sp, #124	; 0x7c
  40363a:	2103      	movs	r1, #3
  40363c:	9002      	str	r0, [sp, #8]
  40363e:	9a08      	ldr	r2, [sp, #32]
  403640:	9401      	str	r4, [sp, #4]
  403642:	463b      	mov	r3, r7
  403644:	9100      	str	r1, [sp, #0]
  403646:	980c      	ldr	r0, [sp, #48]	; 0x30
  403648:	f000 fa9a 	bl	403b80 <_dtoa_r>
  40364c:	4625      	mov	r5, r4
  40364e:	4606      	mov	r6, r0
  403650:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403652:	2b46      	cmp	r3, #70	; 0x46
  403654:	eb06 0405 	add.w	r4, r6, r5
  403658:	f47f af29 	bne.w	4034ae <_svfprintf_r+0xed2>
  40365c:	7833      	ldrb	r3, [r6, #0]
  40365e:	2b30      	cmp	r3, #48	; 0x30
  403660:	f000 8178 	beq.w	403954 <_svfprintf_r+0x1378>
  403664:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  403666:	442c      	add	r4, r5
  403668:	e721      	b.n	4034ae <_svfprintf_r+0xed2>
  40366a:	aa25      	add	r2, sp, #148	; 0x94
  40366c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40366e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403670:	f002 fb50 	bl	405d14 <__ssprint_r>
  403674:	2800      	cmp	r0, #0
  403676:	f47f a883 	bne.w	402780 <_svfprintf_r+0x1a4>
  40367a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40367c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40367e:	46c8      	mov	r8, r9
  403680:	e782      	b.n	403588 <_svfprintf_r+0xfac>
  403682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403684:	2b00      	cmp	r3, #0
  403686:	bf08      	it	eq
  403688:	2301      	moveq	r3, #1
  40368a:	930a      	str	r3, [sp, #40]	; 0x28
  40368c:	e6db      	b.n	403446 <_svfprintf_r+0xe6a>
  40368e:	4630      	mov	r0, r6
  403690:	940a      	str	r4, [sp, #40]	; 0x28
  403692:	f7fe ff35 	bl	402500 <strlen>
  403696:	950f      	str	r5, [sp, #60]	; 0x3c
  403698:	900e      	str	r0, [sp, #56]	; 0x38
  40369a:	f8cd b01c 	str.w	fp, [sp, #28]
  40369e:	4603      	mov	r3, r0
  4036a0:	f7ff b9f9 	b.w	402a96 <_svfprintf_r+0x4ba>
  4036a4:	272d      	movs	r7, #45	; 0x2d
  4036a6:	2300      	movs	r3, #0
  4036a8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4036ac:	930a      	str	r3, [sp, #40]	; 0x28
  4036ae:	f7ff b8ae 	b.w	40280e <_svfprintf_r+0x232>
  4036b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4036b4:	9312      	str	r3, [sp, #72]	; 0x48
  4036b6:	461a      	mov	r2, r3
  4036b8:	3303      	adds	r3, #3
  4036ba:	db04      	blt.n	4036c6 <_svfprintf_r+0x10ea>
  4036bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4036be:	4619      	mov	r1, r3
  4036c0:	4291      	cmp	r1, r2
  4036c2:	f6bf af17 	bge.w	4034f4 <_svfprintf_r+0xf18>
  4036c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4036c8:	3b02      	subs	r3, #2
  4036ca:	9311      	str	r3, [sp, #68]	; 0x44
  4036cc:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  4036d0:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  4036d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4036d6:	3b01      	subs	r3, #1
  4036d8:	2b00      	cmp	r3, #0
  4036da:	931f      	str	r3, [sp, #124]	; 0x7c
  4036dc:	bfbd      	ittte	lt
  4036de:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4036e0:	f1c3 0301 	rsblt	r3, r3, #1
  4036e4:	222d      	movlt	r2, #45	; 0x2d
  4036e6:	222b      	movge	r2, #43	; 0x2b
  4036e8:	2b09      	cmp	r3, #9
  4036ea:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4036ee:	f340 8116 	ble.w	40391e <_svfprintf_r+0x1342>
  4036f2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4036f6:	4620      	mov	r0, r4
  4036f8:	4dab      	ldr	r5, [pc, #684]	; (4039a8 <_svfprintf_r+0x13cc>)
  4036fa:	e000      	b.n	4036fe <_svfprintf_r+0x1122>
  4036fc:	4610      	mov	r0, r2
  4036fe:	fb85 1203 	smull	r1, r2, r5, r3
  403702:	17d9      	asrs	r1, r3, #31
  403704:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  403708:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40370c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  403710:	3230      	adds	r2, #48	; 0x30
  403712:	2909      	cmp	r1, #9
  403714:	f800 2c01 	strb.w	r2, [r0, #-1]
  403718:	460b      	mov	r3, r1
  40371a:	f100 32ff 	add.w	r2, r0, #4294967295
  40371e:	dced      	bgt.n	4036fc <_svfprintf_r+0x1120>
  403720:	3330      	adds	r3, #48	; 0x30
  403722:	3802      	subs	r0, #2
  403724:	b2d9      	uxtb	r1, r3
  403726:	4284      	cmp	r4, r0
  403728:	f802 1c01 	strb.w	r1, [r2, #-1]
  40372c:	f240 8165 	bls.w	4039fa <_svfprintf_r+0x141e>
  403730:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  403734:	4613      	mov	r3, r2
  403736:	e001      	b.n	40373c <_svfprintf_r+0x1160>
  403738:	f813 1b01 	ldrb.w	r1, [r3], #1
  40373c:	f800 1b01 	strb.w	r1, [r0], #1
  403740:	42a3      	cmp	r3, r4
  403742:	d1f9      	bne.n	403738 <_svfprintf_r+0x115c>
  403744:	3301      	adds	r3, #1
  403746:	1a9b      	subs	r3, r3, r2
  403748:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40374c:	4413      	add	r3, r2
  40374e:	aa21      	add	r2, sp, #132	; 0x84
  403750:	1a9b      	subs	r3, r3, r2
  403752:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403754:	931b      	str	r3, [sp, #108]	; 0x6c
  403756:	2a01      	cmp	r2, #1
  403758:	4413      	add	r3, r2
  40375a:	930e      	str	r3, [sp, #56]	; 0x38
  40375c:	f340 8119 	ble.w	403992 <_svfprintf_r+0x13b6>
  403760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403762:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403764:	4413      	add	r3, r2
  403766:	930e      	str	r3, [sp, #56]	; 0x38
  403768:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40376c:	9308      	str	r3, [sp, #32]
  40376e:	2300      	movs	r3, #0
  403770:	9312      	str	r3, [sp, #72]	; 0x48
  403772:	e6cf      	b.n	403514 <_svfprintf_r+0xf38>
  403774:	aa25      	add	r2, sp, #148	; 0x94
  403776:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403778:	980c      	ldr	r0, [sp, #48]	; 0x30
  40377a:	f002 facb 	bl	405d14 <__ssprint_r>
  40377e:	2800      	cmp	r0, #0
  403780:	f47e affe 	bne.w	402780 <_svfprintf_r+0x1a4>
  403784:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403786:	46c8      	mov	r8, r9
  403788:	e4d7      	b.n	40313a <_svfprintf_r+0xb5e>
  40378a:	4623      	mov	r3, r4
  40378c:	e6a2      	b.n	4034d4 <_svfprintf_r+0xef8>
  40378e:	aa25      	add	r2, sp, #148	; 0x94
  403790:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403792:	980c      	ldr	r0, [sp, #48]	; 0x30
  403794:	f002 fabe 	bl	405d14 <__ssprint_r>
  403798:	2800      	cmp	r0, #0
  40379a:	f47e aff1 	bne.w	402780 <_svfprintf_r+0x1a4>
  40379e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4037a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4037a2:	46c8      	mov	r8, r9
  4037a4:	e5ae      	b.n	403304 <_svfprintf_r+0xd28>
  4037a6:	aa25      	add	r2, sp, #148	; 0x94
  4037a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4037aa:	980c      	ldr	r0, [sp, #48]	; 0x30
  4037ac:	f002 fab2 	bl	405d14 <__ssprint_r>
  4037b0:	2800      	cmp	r0, #0
  4037b2:	f47e afe5 	bne.w	402780 <_svfprintf_r+0x1a4>
  4037b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4037b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4037ba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4037bc:	1a9a      	subs	r2, r3, r2
  4037be:	46c8      	mov	r8, r9
  4037c0:	e5b8      	b.n	403334 <_svfprintf_r+0xd58>
  4037c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4037c4:	9612      	str	r6, [sp, #72]	; 0x48
  4037c6:	2b06      	cmp	r3, #6
  4037c8:	bf28      	it	cs
  4037ca:	2306      	movcs	r3, #6
  4037cc:	960a      	str	r6, [sp, #40]	; 0x28
  4037ce:	4637      	mov	r7, r6
  4037d0:	9308      	str	r3, [sp, #32]
  4037d2:	950f      	str	r5, [sp, #60]	; 0x3c
  4037d4:	f8cd b01c 	str.w	fp, [sp, #28]
  4037d8:	930e      	str	r3, [sp, #56]	; 0x38
  4037da:	4e74      	ldr	r6, [pc, #464]	; (4039ac <_svfprintf_r+0x13d0>)
  4037dc:	f7ff b816 	b.w	40280c <_svfprintf_r+0x230>
  4037e0:	a823      	add	r0, sp, #140	; 0x8c
  4037e2:	a920      	add	r1, sp, #128	; 0x80
  4037e4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4037e6:	9004      	str	r0, [sp, #16]
  4037e8:	9103      	str	r1, [sp, #12]
  4037ea:	a81f      	add	r0, sp, #124	; 0x7c
  4037ec:	2103      	movs	r1, #3
  4037ee:	9002      	str	r0, [sp, #8]
  4037f0:	9a08      	ldr	r2, [sp, #32]
  4037f2:	9501      	str	r5, [sp, #4]
  4037f4:	463b      	mov	r3, r7
  4037f6:	9100      	str	r1, [sp, #0]
  4037f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4037fa:	f000 f9c1 	bl	403b80 <_dtoa_r>
  4037fe:	4606      	mov	r6, r0
  403800:	1944      	adds	r4, r0, r5
  403802:	e72b      	b.n	40365c <_svfprintf_r+0x1080>
  403804:	2306      	movs	r3, #6
  403806:	930a      	str	r3, [sp, #40]	; 0x28
  403808:	e61d      	b.n	403446 <_svfprintf_r+0xe6a>
  40380a:	272d      	movs	r7, #45	; 0x2d
  40380c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403810:	f7ff bacd 	b.w	402dae <_svfprintf_r+0x7d2>
  403814:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403816:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403818:	4413      	add	r3, r2
  40381a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40381c:	930e      	str	r3, [sp, #56]	; 0x38
  40381e:	2a00      	cmp	r2, #0
  403820:	f340 80b0 	ble.w	403984 <_svfprintf_r+0x13a8>
  403824:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403828:	9308      	str	r3, [sp, #32]
  40382a:	2367      	movs	r3, #103	; 0x67
  40382c:	9311      	str	r3, [sp, #68]	; 0x44
  40382e:	e671      	b.n	403514 <_svfprintf_r+0xf38>
  403830:	2b00      	cmp	r3, #0
  403832:	f340 80c3 	ble.w	4039bc <_svfprintf_r+0x13e0>
  403836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403838:	2a00      	cmp	r2, #0
  40383a:	f040 8099 	bne.w	403970 <_svfprintf_r+0x1394>
  40383e:	f01b 0f01 	tst.w	fp, #1
  403842:	f040 8095 	bne.w	403970 <_svfprintf_r+0x1394>
  403846:	9308      	str	r3, [sp, #32]
  403848:	930e      	str	r3, [sp, #56]	; 0x38
  40384a:	e663      	b.n	403514 <_svfprintf_r+0xf38>
  40384c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40384e:	9308      	str	r3, [sp, #32]
  403850:	930e      	str	r3, [sp, #56]	; 0x38
  403852:	900a      	str	r0, [sp, #40]	; 0x28
  403854:	950f      	str	r5, [sp, #60]	; 0x3c
  403856:	f8cd b01c 	str.w	fp, [sp, #28]
  40385a:	9012      	str	r0, [sp, #72]	; 0x48
  40385c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403860:	f7fe bfd4 	b.w	40280c <_svfprintf_r+0x230>
  403864:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403866:	2b47      	cmp	r3, #71	; 0x47
  403868:	f47f ae20 	bne.w	4034ac <_svfprintf_r+0xed0>
  40386c:	f01b 0f01 	tst.w	fp, #1
  403870:	f47f aeee 	bne.w	403650 <_svfprintf_r+0x1074>
  403874:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403876:	1b9b      	subs	r3, r3, r6
  403878:	9313      	str	r3, [sp, #76]	; 0x4c
  40387a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40387c:	2b47      	cmp	r3, #71	; 0x47
  40387e:	f43f af18 	beq.w	4036b2 <_svfprintf_r+0x10d6>
  403882:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403884:	9312      	str	r3, [sp, #72]	; 0x48
  403886:	e721      	b.n	4036cc <_svfprintf_r+0x10f0>
  403888:	424f      	negs	r7, r1
  40388a:	3110      	adds	r1, #16
  40388c:	4d48      	ldr	r5, [pc, #288]	; (4039b0 <_svfprintf_r+0x13d4>)
  40388e:	da2f      	bge.n	4038f0 <_svfprintf_r+0x1314>
  403890:	2410      	movs	r4, #16
  403892:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403896:	e004      	b.n	4038a2 <_svfprintf_r+0x12c6>
  403898:	f108 0808 	add.w	r8, r8, #8
  40389c:	3f10      	subs	r7, #16
  40389e:	2f10      	cmp	r7, #16
  4038a0:	dd26      	ble.n	4038f0 <_svfprintf_r+0x1314>
  4038a2:	3301      	adds	r3, #1
  4038a4:	3210      	adds	r2, #16
  4038a6:	2b07      	cmp	r3, #7
  4038a8:	9227      	str	r2, [sp, #156]	; 0x9c
  4038aa:	9326      	str	r3, [sp, #152]	; 0x98
  4038ac:	f8c8 5000 	str.w	r5, [r8]
  4038b0:	f8c8 4004 	str.w	r4, [r8, #4]
  4038b4:	ddf0      	ble.n	403898 <_svfprintf_r+0x12bc>
  4038b6:	aa25      	add	r2, sp, #148	; 0x94
  4038b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4038ba:	4658      	mov	r0, fp
  4038bc:	f002 fa2a 	bl	405d14 <__ssprint_r>
  4038c0:	2800      	cmp	r0, #0
  4038c2:	f47e af5d 	bne.w	402780 <_svfprintf_r+0x1a4>
  4038c6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4038c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4038ca:	46c8      	mov	r8, r9
  4038cc:	e7e6      	b.n	40389c <_svfprintf_r+0x12c0>
  4038ce:	aa25      	add	r2, sp, #148	; 0x94
  4038d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4038d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4038d4:	f002 fa1e 	bl	405d14 <__ssprint_r>
  4038d8:	2800      	cmp	r0, #0
  4038da:	f47e af51 	bne.w	402780 <_svfprintf_r+0x1a4>
  4038de:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4038e0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4038e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4038e4:	46c8      	mov	r8, r9
  4038e6:	e667      	b.n	4035b8 <_svfprintf_r+0xfdc>
  4038e8:	2000      	movs	r0, #0
  4038ea:	900a      	str	r0, [sp, #40]	; 0x28
  4038ec:	f7fe bed0 	b.w	402690 <_svfprintf_r+0xb4>
  4038f0:	3301      	adds	r3, #1
  4038f2:	443a      	add	r2, r7
  4038f4:	2b07      	cmp	r3, #7
  4038f6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4038fa:	9227      	str	r2, [sp, #156]	; 0x9c
  4038fc:	9326      	str	r3, [sp, #152]	; 0x98
  4038fe:	f108 0808 	add.w	r8, r8, #8
  403902:	f77f ae5c 	ble.w	4035be <_svfprintf_r+0xfe2>
  403906:	aa25      	add	r2, sp, #148	; 0x94
  403908:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40390a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40390c:	f002 fa02 	bl	405d14 <__ssprint_r>
  403910:	2800      	cmp	r0, #0
  403912:	f47e af35 	bne.w	402780 <_svfprintf_r+0x1a4>
  403916:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403918:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40391a:	46c8      	mov	r8, r9
  40391c:	e64f      	b.n	4035be <_svfprintf_r+0xfe2>
  40391e:	3330      	adds	r3, #48	; 0x30
  403920:	2230      	movs	r2, #48	; 0x30
  403922:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  403926:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40392a:	ab22      	add	r3, sp, #136	; 0x88
  40392c:	e70f      	b.n	40374e <_svfprintf_r+0x1172>
  40392e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403930:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403932:	4413      	add	r3, r2
  403934:	930e      	str	r3, [sp, #56]	; 0x38
  403936:	e775      	b.n	403824 <_svfprintf_r+0x1248>
  403938:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40393a:	e5cb      	b.n	4034d4 <_svfprintf_r+0xef8>
  40393c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40393e:	4e1d      	ldr	r6, [pc, #116]	; (4039b4 <_svfprintf_r+0x13d8>)
  403940:	2b00      	cmp	r3, #0
  403942:	bfb6      	itet	lt
  403944:	272d      	movlt	r7, #45	; 0x2d
  403946:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40394a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40394e:	4b1a      	ldr	r3, [pc, #104]	; (4039b8 <_svfprintf_r+0x13dc>)
  403950:	f7ff ba2f 	b.w	402db2 <_svfprintf_r+0x7d6>
  403954:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403956:	9808      	ldr	r0, [sp, #32]
  403958:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40395a:	4639      	mov	r1, r7
  40395c:	f002 ff18 	bl	406790 <__aeabi_dcmpeq>
  403960:	2800      	cmp	r0, #0
  403962:	f47f ae7f 	bne.w	403664 <_svfprintf_r+0x1088>
  403966:	f1c5 0501 	rsb	r5, r5, #1
  40396a:	951f      	str	r5, [sp, #124]	; 0x7c
  40396c:	442c      	add	r4, r5
  40396e:	e59e      	b.n	4034ae <_svfprintf_r+0xed2>
  403970:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403972:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403974:	4413      	add	r3, r2
  403976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403978:	441a      	add	r2, r3
  40397a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40397e:	920e      	str	r2, [sp, #56]	; 0x38
  403980:	9308      	str	r3, [sp, #32]
  403982:	e5c7      	b.n	403514 <_svfprintf_r+0xf38>
  403984:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403986:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403988:	f1c3 0301 	rsb	r3, r3, #1
  40398c:	441a      	add	r2, r3
  40398e:	4613      	mov	r3, r2
  403990:	e7d0      	b.n	403934 <_svfprintf_r+0x1358>
  403992:	f01b 0301 	ands.w	r3, fp, #1
  403996:	9312      	str	r3, [sp, #72]	; 0x48
  403998:	f47f aee2 	bne.w	403760 <_svfprintf_r+0x1184>
  40399c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40399e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4039a2:	9308      	str	r3, [sp, #32]
  4039a4:	e5b6      	b.n	403514 <_svfprintf_r+0xf38>
  4039a6:	bf00      	nop
  4039a8:	66666667 	.word	0x66666667
  4039ac:	00407630 	.word	0x00407630
  4039b0:	0040764c 	.word	0x0040764c
  4039b4:	00407604 	.word	0x00407604
  4039b8:	00407600 	.word	0x00407600
  4039bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4039be:	b913      	cbnz	r3, 4039c6 <_svfprintf_r+0x13ea>
  4039c0:	f01b 0f01 	tst.w	fp, #1
  4039c4:	d002      	beq.n	4039cc <_svfprintf_r+0x13f0>
  4039c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4039c8:	3301      	adds	r3, #1
  4039ca:	e7d4      	b.n	403976 <_svfprintf_r+0x139a>
  4039cc:	2301      	movs	r3, #1
  4039ce:	e73a      	b.n	403846 <_svfprintf_r+0x126a>
  4039d0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4039d2:	f89a 3001 	ldrb.w	r3, [sl, #1]
  4039d6:	6828      	ldr	r0, [r5, #0]
  4039d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  4039dc:	900a      	str	r0, [sp, #40]	; 0x28
  4039de:	4628      	mov	r0, r5
  4039e0:	3004      	adds	r0, #4
  4039e2:	46a2      	mov	sl, r4
  4039e4:	900f      	str	r0, [sp, #60]	; 0x3c
  4039e6:	f7fe be51 	b.w	40268c <_svfprintf_r+0xb0>
  4039ea:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4039ee:	f7ff b867 	b.w	402ac0 <_svfprintf_r+0x4e4>
  4039f2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4039f6:	f7ff ba15 	b.w	402e24 <_svfprintf_r+0x848>
  4039fa:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  4039fe:	e6a6      	b.n	40374e <_svfprintf_r+0x1172>
  403a00:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403a04:	f7ff b8eb 	b.w	402bde <_svfprintf_r+0x602>
  403a08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403a0a:	230c      	movs	r3, #12
  403a0c:	6013      	str	r3, [r2, #0]
  403a0e:	f04f 33ff 	mov.w	r3, #4294967295
  403a12:	9309      	str	r3, [sp, #36]	; 0x24
  403a14:	f7fe bebd 	b.w	402792 <_svfprintf_r+0x1b6>
  403a18:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403a1c:	f7ff b99a 	b.w	402d54 <_svfprintf_r+0x778>
  403a20:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403a24:	f7ff b976 	b.w	402d14 <_svfprintf_r+0x738>
  403a28:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403a2c:	f7ff b959 	b.w	402ce2 <_svfprintf_r+0x706>
  403a30:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403a34:	f7ff b912 	b.w	402c5c <_svfprintf_r+0x680>

00403a38 <register_fini>:
  403a38:	4b02      	ldr	r3, [pc, #8]	; (403a44 <register_fini+0xc>)
  403a3a:	b113      	cbz	r3, 403a42 <register_fini+0xa>
  403a3c:	4802      	ldr	r0, [pc, #8]	; (403a48 <register_fini+0x10>)
  403a3e:	f000 b805 	b.w	403a4c <atexit>
  403a42:	4770      	bx	lr
  403a44:	00000000 	.word	0x00000000
  403a48:	004049d5 	.word	0x004049d5

00403a4c <atexit>:
  403a4c:	2300      	movs	r3, #0
  403a4e:	4601      	mov	r1, r0
  403a50:	461a      	mov	r2, r3
  403a52:	4618      	mov	r0, r3
  403a54:	f002 b9ea 	b.w	405e2c <__register_exitproc>

00403a58 <quorem>:
  403a58:	6902      	ldr	r2, [r0, #16]
  403a5a:	690b      	ldr	r3, [r1, #16]
  403a5c:	4293      	cmp	r3, r2
  403a5e:	f300 808d 	bgt.w	403b7c <quorem+0x124>
  403a62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a66:	f103 38ff 	add.w	r8, r3, #4294967295
  403a6a:	f101 0714 	add.w	r7, r1, #20
  403a6e:	f100 0b14 	add.w	fp, r0, #20
  403a72:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  403a76:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  403a7a:	ea4f 0488 	mov.w	r4, r8, lsl #2
  403a7e:	b083      	sub	sp, #12
  403a80:	3201      	adds	r2, #1
  403a82:	fbb3 f9f2 	udiv	r9, r3, r2
  403a86:	eb0b 0304 	add.w	r3, fp, r4
  403a8a:	9400      	str	r4, [sp, #0]
  403a8c:	eb07 0a04 	add.w	sl, r7, r4
  403a90:	9301      	str	r3, [sp, #4]
  403a92:	f1b9 0f00 	cmp.w	r9, #0
  403a96:	d039      	beq.n	403b0c <quorem+0xb4>
  403a98:	2500      	movs	r5, #0
  403a9a:	462e      	mov	r6, r5
  403a9c:	46bc      	mov	ip, r7
  403a9e:	46de      	mov	lr, fp
  403aa0:	f85c 4b04 	ldr.w	r4, [ip], #4
  403aa4:	f8de 3000 	ldr.w	r3, [lr]
  403aa8:	b2a2      	uxth	r2, r4
  403aaa:	fb09 5502 	mla	r5, r9, r2, r5
  403aae:	0c22      	lsrs	r2, r4, #16
  403ab0:	0c2c      	lsrs	r4, r5, #16
  403ab2:	fb09 4202 	mla	r2, r9, r2, r4
  403ab6:	b2ad      	uxth	r5, r5
  403ab8:	1b75      	subs	r5, r6, r5
  403aba:	b296      	uxth	r6, r2
  403abc:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  403ac0:	fa15 f383 	uxtah	r3, r5, r3
  403ac4:	eb06 4623 	add.w	r6, r6, r3, asr #16
  403ac8:	b29b      	uxth	r3, r3
  403aca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  403ace:	45e2      	cmp	sl, ip
  403ad0:	ea4f 4512 	mov.w	r5, r2, lsr #16
  403ad4:	f84e 3b04 	str.w	r3, [lr], #4
  403ad8:	ea4f 4626 	mov.w	r6, r6, asr #16
  403adc:	d2e0      	bcs.n	403aa0 <quorem+0x48>
  403ade:	9b00      	ldr	r3, [sp, #0]
  403ae0:	f85b 3003 	ldr.w	r3, [fp, r3]
  403ae4:	b993      	cbnz	r3, 403b0c <quorem+0xb4>
  403ae6:	9c01      	ldr	r4, [sp, #4]
  403ae8:	1f23      	subs	r3, r4, #4
  403aea:	459b      	cmp	fp, r3
  403aec:	d20c      	bcs.n	403b08 <quorem+0xb0>
  403aee:	f854 3c04 	ldr.w	r3, [r4, #-4]
  403af2:	b94b      	cbnz	r3, 403b08 <quorem+0xb0>
  403af4:	f1a4 0308 	sub.w	r3, r4, #8
  403af8:	e002      	b.n	403b00 <quorem+0xa8>
  403afa:	681a      	ldr	r2, [r3, #0]
  403afc:	3b04      	subs	r3, #4
  403afe:	b91a      	cbnz	r2, 403b08 <quorem+0xb0>
  403b00:	459b      	cmp	fp, r3
  403b02:	f108 38ff 	add.w	r8, r8, #4294967295
  403b06:	d3f8      	bcc.n	403afa <quorem+0xa2>
  403b08:	f8c0 8010 	str.w	r8, [r0, #16]
  403b0c:	4604      	mov	r4, r0
  403b0e:	f001 fe4d 	bl	4057ac <__mcmp>
  403b12:	2800      	cmp	r0, #0
  403b14:	db2e      	blt.n	403b74 <quorem+0x11c>
  403b16:	f109 0901 	add.w	r9, r9, #1
  403b1a:	465d      	mov	r5, fp
  403b1c:	2300      	movs	r3, #0
  403b1e:	f857 1b04 	ldr.w	r1, [r7], #4
  403b22:	6828      	ldr	r0, [r5, #0]
  403b24:	b28a      	uxth	r2, r1
  403b26:	1a9a      	subs	r2, r3, r2
  403b28:	0c0b      	lsrs	r3, r1, #16
  403b2a:	fa12 f280 	uxtah	r2, r2, r0
  403b2e:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  403b32:	eb03 4322 	add.w	r3, r3, r2, asr #16
  403b36:	b292      	uxth	r2, r2
  403b38:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  403b3c:	45ba      	cmp	sl, r7
  403b3e:	f845 2b04 	str.w	r2, [r5], #4
  403b42:	ea4f 4323 	mov.w	r3, r3, asr #16
  403b46:	d2ea      	bcs.n	403b1e <quorem+0xc6>
  403b48:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  403b4c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  403b50:	b982      	cbnz	r2, 403b74 <quorem+0x11c>
  403b52:	1f1a      	subs	r2, r3, #4
  403b54:	4593      	cmp	fp, r2
  403b56:	d20b      	bcs.n	403b70 <quorem+0x118>
  403b58:	f853 2c04 	ldr.w	r2, [r3, #-4]
  403b5c:	b942      	cbnz	r2, 403b70 <quorem+0x118>
  403b5e:	3b08      	subs	r3, #8
  403b60:	e002      	b.n	403b68 <quorem+0x110>
  403b62:	681a      	ldr	r2, [r3, #0]
  403b64:	3b04      	subs	r3, #4
  403b66:	b91a      	cbnz	r2, 403b70 <quorem+0x118>
  403b68:	459b      	cmp	fp, r3
  403b6a:	f108 38ff 	add.w	r8, r8, #4294967295
  403b6e:	d3f8      	bcc.n	403b62 <quorem+0x10a>
  403b70:	f8c4 8010 	str.w	r8, [r4, #16]
  403b74:	4648      	mov	r0, r9
  403b76:	b003      	add	sp, #12
  403b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b7c:	2000      	movs	r0, #0
  403b7e:	4770      	bx	lr

00403b80 <_dtoa_r>:
  403b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b84:	6c01      	ldr	r1, [r0, #64]	; 0x40
  403b86:	b09b      	sub	sp, #108	; 0x6c
  403b88:	4604      	mov	r4, r0
  403b8a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  403b8c:	4692      	mov	sl, r2
  403b8e:	469b      	mov	fp, r3
  403b90:	b141      	cbz	r1, 403ba4 <_dtoa_r+0x24>
  403b92:	6c42      	ldr	r2, [r0, #68]	; 0x44
  403b94:	604a      	str	r2, [r1, #4]
  403b96:	2301      	movs	r3, #1
  403b98:	4093      	lsls	r3, r2
  403b9a:	608b      	str	r3, [r1, #8]
  403b9c:	f001 fc2e 	bl	4053fc <_Bfree>
  403ba0:	2300      	movs	r3, #0
  403ba2:	6423      	str	r3, [r4, #64]	; 0x40
  403ba4:	f1bb 0f00 	cmp.w	fp, #0
  403ba8:	465d      	mov	r5, fp
  403baa:	db35      	blt.n	403c18 <_dtoa_r+0x98>
  403bac:	2300      	movs	r3, #0
  403bae:	6033      	str	r3, [r6, #0]
  403bb0:	4b9d      	ldr	r3, [pc, #628]	; (403e28 <_dtoa_r+0x2a8>)
  403bb2:	43ab      	bics	r3, r5
  403bb4:	d015      	beq.n	403be2 <_dtoa_r+0x62>
  403bb6:	4650      	mov	r0, sl
  403bb8:	4659      	mov	r1, fp
  403bba:	2200      	movs	r2, #0
  403bbc:	2300      	movs	r3, #0
  403bbe:	f002 fde7 	bl	406790 <__aeabi_dcmpeq>
  403bc2:	4680      	mov	r8, r0
  403bc4:	2800      	cmp	r0, #0
  403bc6:	d02d      	beq.n	403c24 <_dtoa_r+0xa4>
  403bc8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403bca:	2301      	movs	r3, #1
  403bcc:	6013      	str	r3, [r2, #0]
  403bce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403bd0:	2b00      	cmp	r3, #0
  403bd2:	f000 80bd 	beq.w	403d50 <_dtoa_r+0x1d0>
  403bd6:	4895      	ldr	r0, [pc, #596]	; (403e2c <_dtoa_r+0x2ac>)
  403bd8:	6018      	str	r0, [r3, #0]
  403bda:	3801      	subs	r0, #1
  403bdc:	b01b      	add	sp, #108	; 0x6c
  403bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403be2:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403be4:	f242 730f 	movw	r3, #9999	; 0x270f
  403be8:	6013      	str	r3, [r2, #0]
  403bea:	f1ba 0f00 	cmp.w	sl, #0
  403bee:	d10d      	bne.n	403c0c <_dtoa_r+0x8c>
  403bf0:	f3c5 0513 	ubfx	r5, r5, #0, #20
  403bf4:	b955      	cbnz	r5, 403c0c <_dtoa_r+0x8c>
  403bf6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403bf8:	488d      	ldr	r0, [pc, #564]	; (403e30 <_dtoa_r+0x2b0>)
  403bfa:	2b00      	cmp	r3, #0
  403bfc:	d0ee      	beq.n	403bdc <_dtoa_r+0x5c>
  403bfe:	f100 0308 	add.w	r3, r0, #8
  403c02:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  403c04:	6013      	str	r3, [r2, #0]
  403c06:	b01b      	add	sp, #108	; 0x6c
  403c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403c0e:	4889      	ldr	r0, [pc, #548]	; (403e34 <_dtoa_r+0x2b4>)
  403c10:	2b00      	cmp	r3, #0
  403c12:	d0e3      	beq.n	403bdc <_dtoa_r+0x5c>
  403c14:	1cc3      	adds	r3, r0, #3
  403c16:	e7f4      	b.n	403c02 <_dtoa_r+0x82>
  403c18:	2301      	movs	r3, #1
  403c1a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  403c1e:	6033      	str	r3, [r6, #0]
  403c20:	46ab      	mov	fp, r5
  403c22:	e7c5      	b.n	403bb0 <_dtoa_r+0x30>
  403c24:	aa18      	add	r2, sp, #96	; 0x60
  403c26:	ab19      	add	r3, sp, #100	; 0x64
  403c28:	9201      	str	r2, [sp, #4]
  403c2a:	9300      	str	r3, [sp, #0]
  403c2c:	4652      	mov	r2, sl
  403c2e:	465b      	mov	r3, fp
  403c30:	4620      	mov	r0, r4
  403c32:	f001 fe5b 	bl	4058ec <__d2b>
  403c36:	0d2b      	lsrs	r3, r5, #20
  403c38:	4681      	mov	r9, r0
  403c3a:	d071      	beq.n	403d20 <_dtoa_r+0x1a0>
  403c3c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  403c40:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  403c44:	9f18      	ldr	r7, [sp, #96]	; 0x60
  403c46:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  403c4a:	4650      	mov	r0, sl
  403c4c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  403c50:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  403c54:	2200      	movs	r2, #0
  403c56:	4b78      	ldr	r3, [pc, #480]	; (403e38 <_dtoa_r+0x2b8>)
  403c58:	f002 f97e 	bl	405f58 <__aeabi_dsub>
  403c5c:	a36c      	add	r3, pc, #432	; (adr r3, 403e10 <_dtoa_r+0x290>)
  403c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c62:	f002 fb2d 	bl	4062c0 <__aeabi_dmul>
  403c66:	a36c      	add	r3, pc, #432	; (adr r3, 403e18 <_dtoa_r+0x298>)
  403c68:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c6c:	f002 f976 	bl	405f5c <__adddf3>
  403c70:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403c74:	4630      	mov	r0, r6
  403c76:	f002 fabd 	bl	4061f4 <__aeabi_i2d>
  403c7a:	a369      	add	r3, pc, #420	; (adr r3, 403e20 <_dtoa_r+0x2a0>)
  403c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c80:	f002 fb1e 	bl	4062c0 <__aeabi_dmul>
  403c84:	4602      	mov	r2, r0
  403c86:	460b      	mov	r3, r1
  403c88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403c8c:	f002 f966 	bl	405f5c <__adddf3>
  403c90:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403c94:	f002 fdc4 	bl	406820 <__aeabi_d2iz>
  403c98:	2200      	movs	r2, #0
  403c9a:	9002      	str	r0, [sp, #8]
  403c9c:	2300      	movs	r3, #0
  403c9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403ca2:	f002 fd7f 	bl	4067a4 <__aeabi_dcmplt>
  403ca6:	2800      	cmp	r0, #0
  403ca8:	f040 8173 	bne.w	403f92 <_dtoa_r+0x412>
  403cac:	9d02      	ldr	r5, [sp, #8]
  403cae:	2d16      	cmp	r5, #22
  403cb0:	f200 815d 	bhi.w	403f6e <_dtoa_r+0x3ee>
  403cb4:	4b61      	ldr	r3, [pc, #388]	; (403e3c <_dtoa_r+0x2bc>)
  403cb6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  403cba:	e9d3 0100 	ldrd	r0, r1, [r3]
  403cbe:	4652      	mov	r2, sl
  403cc0:	465b      	mov	r3, fp
  403cc2:	f002 fd8d 	bl	4067e0 <__aeabi_dcmpgt>
  403cc6:	2800      	cmp	r0, #0
  403cc8:	f000 81c5 	beq.w	404056 <_dtoa_r+0x4d6>
  403ccc:	1e6b      	subs	r3, r5, #1
  403cce:	9302      	str	r3, [sp, #8]
  403cd0:	2300      	movs	r3, #0
  403cd2:	930e      	str	r3, [sp, #56]	; 0x38
  403cd4:	1bbf      	subs	r7, r7, r6
  403cd6:	1e7b      	subs	r3, r7, #1
  403cd8:	9306      	str	r3, [sp, #24]
  403cda:	f100 8154 	bmi.w	403f86 <_dtoa_r+0x406>
  403cde:	2300      	movs	r3, #0
  403ce0:	9308      	str	r3, [sp, #32]
  403ce2:	9b02      	ldr	r3, [sp, #8]
  403ce4:	2b00      	cmp	r3, #0
  403ce6:	f2c0 8145 	blt.w	403f74 <_dtoa_r+0x3f4>
  403cea:	9a06      	ldr	r2, [sp, #24]
  403cec:	930d      	str	r3, [sp, #52]	; 0x34
  403cee:	4611      	mov	r1, r2
  403cf0:	4419      	add	r1, r3
  403cf2:	2300      	movs	r3, #0
  403cf4:	9106      	str	r1, [sp, #24]
  403cf6:	930c      	str	r3, [sp, #48]	; 0x30
  403cf8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403cfa:	2b09      	cmp	r3, #9
  403cfc:	d82a      	bhi.n	403d54 <_dtoa_r+0x1d4>
  403cfe:	2b05      	cmp	r3, #5
  403d00:	f340 865b 	ble.w	4049ba <_dtoa_r+0xe3a>
  403d04:	3b04      	subs	r3, #4
  403d06:	9324      	str	r3, [sp, #144]	; 0x90
  403d08:	2500      	movs	r5, #0
  403d0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403d0c:	3b02      	subs	r3, #2
  403d0e:	2b03      	cmp	r3, #3
  403d10:	f200 8642 	bhi.w	404998 <_dtoa_r+0xe18>
  403d14:	e8df f013 	tbh	[pc, r3, lsl #1]
  403d18:	02c903d4 	.word	0x02c903d4
  403d1c:	046103df 	.word	0x046103df
  403d20:	9f18      	ldr	r7, [sp, #96]	; 0x60
  403d22:	9e19      	ldr	r6, [sp, #100]	; 0x64
  403d24:	443e      	add	r6, r7
  403d26:	f206 4332 	addw	r3, r6, #1074	; 0x432
  403d2a:	2b20      	cmp	r3, #32
  403d2c:	f340 818e 	ble.w	40404c <_dtoa_r+0x4cc>
  403d30:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  403d34:	f206 4012 	addw	r0, r6, #1042	; 0x412
  403d38:	409d      	lsls	r5, r3
  403d3a:	fa2a f000 	lsr.w	r0, sl, r0
  403d3e:	4328      	orrs	r0, r5
  403d40:	f002 fa48 	bl	4061d4 <__aeabi_ui2d>
  403d44:	2301      	movs	r3, #1
  403d46:	3e01      	subs	r6, #1
  403d48:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  403d4c:	9314      	str	r3, [sp, #80]	; 0x50
  403d4e:	e781      	b.n	403c54 <_dtoa_r+0xd4>
  403d50:	483b      	ldr	r0, [pc, #236]	; (403e40 <_dtoa_r+0x2c0>)
  403d52:	e743      	b.n	403bdc <_dtoa_r+0x5c>
  403d54:	2100      	movs	r1, #0
  403d56:	6461      	str	r1, [r4, #68]	; 0x44
  403d58:	4620      	mov	r0, r4
  403d5a:	9125      	str	r1, [sp, #148]	; 0x94
  403d5c:	f001 fb28 	bl	4053b0 <_Balloc>
  403d60:	f04f 33ff 	mov.w	r3, #4294967295
  403d64:	930a      	str	r3, [sp, #40]	; 0x28
  403d66:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403d68:	930f      	str	r3, [sp, #60]	; 0x3c
  403d6a:	2301      	movs	r3, #1
  403d6c:	9004      	str	r0, [sp, #16]
  403d6e:	6420      	str	r0, [r4, #64]	; 0x40
  403d70:	9224      	str	r2, [sp, #144]	; 0x90
  403d72:	930b      	str	r3, [sp, #44]	; 0x2c
  403d74:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403d76:	2b00      	cmp	r3, #0
  403d78:	f2c0 80d9 	blt.w	403f2e <_dtoa_r+0x3ae>
  403d7c:	9a02      	ldr	r2, [sp, #8]
  403d7e:	2a0e      	cmp	r2, #14
  403d80:	f300 80d5 	bgt.w	403f2e <_dtoa_r+0x3ae>
  403d84:	4b2d      	ldr	r3, [pc, #180]	; (403e3c <_dtoa_r+0x2bc>)
  403d86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403d8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  403d92:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403d94:	2b00      	cmp	r3, #0
  403d96:	f2c0 83ba 	blt.w	40450e <_dtoa_r+0x98e>
  403d9a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  403d9e:	4650      	mov	r0, sl
  403da0:	462a      	mov	r2, r5
  403da2:	4633      	mov	r3, r6
  403da4:	4659      	mov	r1, fp
  403da6:	f002 fbb5 	bl	406514 <__aeabi_ddiv>
  403daa:	f002 fd39 	bl	406820 <__aeabi_d2iz>
  403dae:	4680      	mov	r8, r0
  403db0:	f002 fa20 	bl	4061f4 <__aeabi_i2d>
  403db4:	462a      	mov	r2, r5
  403db6:	4633      	mov	r3, r6
  403db8:	f002 fa82 	bl	4062c0 <__aeabi_dmul>
  403dbc:	460b      	mov	r3, r1
  403dbe:	4602      	mov	r2, r0
  403dc0:	4659      	mov	r1, fp
  403dc2:	4650      	mov	r0, sl
  403dc4:	f002 f8c8 	bl	405f58 <__aeabi_dsub>
  403dc8:	9d04      	ldr	r5, [sp, #16]
  403dca:	f108 0330 	add.w	r3, r8, #48	; 0x30
  403dce:	702b      	strb	r3, [r5, #0]
  403dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403dd2:	2b01      	cmp	r3, #1
  403dd4:	4606      	mov	r6, r0
  403dd6:	460f      	mov	r7, r1
  403dd8:	f105 0501 	add.w	r5, r5, #1
  403ddc:	d068      	beq.n	403eb0 <_dtoa_r+0x330>
  403dde:	2200      	movs	r2, #0
  403de0:	4b18      	ldr	r3, [pc, #96]	; (403e44 <_dtoa_r+0x2c4>)
  403de2:	f002 fa6d 	bl	4062c0 <__aeabi_dmul>
  403de6:	2200      	movs	r2, #0
  403de8:	2300      	movs	r3, #0
  403dea:	4606      	mov	r6, r0
  403dec:	460f      	mov	r7, r1
  403dee:	f002 fccf 	bl	406790 <__aeabi_dcmpeq>
  403df2:	2800      	cmp	r0, #0
  403df4:	f040 8088 	bne.w	403f08 <_dtoa_r+0x388>
  403df8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  403dfc:	f04f 0a00 	mov.w	sl, #0
  403e00:	f8df b040 	ldr.w	fp, [pc, #64]	; 403e44 <_dtoa_r+0x2c4>
  403e04:	940c      	str	r4, [sp, #48]	; 0x30
  403e06:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  403e0a:	e028      	b.n	403e5e <_dtoa_r+0x2de>
  403e0c:	f3af 8000 	nop.w
  403e10:	636f4361 	.word	0x636f4361
  403e14:	3fd287a7 	.word	0x3fd287a7
  403e18:	8b60c8b3 	.word	0x8b60c8b3
  403e1c:	3fc68a28 	.word	0x3fc68a28
  403e20:	509f79fb 	.word	0x509f79fb
  403e24:	3fd34413 	.word	0x3fd34413
  403e28:	7ff00000 	.word	0x7ff00000
  403e2c:	00407639 	.word	0x00407639
  403e30:	0040765c 	.word	0x0040765c
  403e34:	00407668 	.word	0x00407668
  403e38:	3ff80000 	.word	0x3ff80000
  403e3c:	004076a8 	.word	0x004076a8
  403e40:	00407638 	.word	0x00407638
  403e44:	40240000 	.word	0x40240000
  403e48:	f002 fa3a 	bl	4062c0 <__aeabi_dmul>
  403e4c:	2200      	movs	r2, #0
  403e4e:	2300      	movs	r3, #0
  403e50:	4606      	mov	r6, r0
  403e52:	460f      	mov	r7, r1
  403e54:	f002 fc9c 	bl	406790 <__aeabi_dcmpeq>
  403e58:	2800      	cmp	r0, #0
  403e5a:	f040 83c1 	bne.w	4045e0 <_dtoa_r+0xa60>
  403e5e:	4642      	mov	r2, r8
  403e60:	464b      	mov	r3, r9
  403e62:	4630      	mov	r0, r6
  403e64:	4639      	mov	r1, r7
  403e66:	f002 fb55 	bl	406514 <__aeabi_ddiv>
  403e6a:	f002 fcd9 	bl	406820 <__aeabi_d2iz>
  403e6e:	4604      	mov	r4, r0
  403e70:	f002 f9c0 	bl	4061f4 <__aeabi_i2d>
  403e74:	4642      	mov	r2, r8
  403e76:	464b      	mov	r3, r9
  403e78:	f002 fa22 	bl	4062c0 <__aeabi_dmul>
  403e7c:	4602      	mov	r2, r0
  403e7e:	460b      	mov	r3, r1
  403e80:	4630      	mov	r0, r6
  403e82:	4639      	mov	r1, r7
  403e84:	f002 f868 	bl	405f58 <__aeabi_dsub>
  403e88:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  403e8c:	9e04      	ldr	r6, [sp, #16]
  403e8e:	f805 eb01 	strb.w	lr, [r5], #1
  403e92:	eba5 0e06 	sub.w	lr, r5, r6
  403e96:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  403e98:	45b6      	cmp	lr, r6
  403e9a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403e9e:	4652      	mov	r2, sl
  403ea0:	465b      	mov	r3, fp
  403ea2:	d1d1      	bne.n	403e48 <_dtoa_r+0x2c8>
  403ea4:	46a0      	mov	r8, r4
  403ea6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  403eaa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403eac:	4606      	mov	r6, r0
  403eae:	460f      	mov	r7, r1
  403eb0:	4632      	mov	r2, r6
  403eb2:	463b      	mov	r3, r7
  403eb4:	4630      	mov	r0, r6
  403eb6:	4639      	mov	r1, r7
  403eb8:	f002 f850 	bl	405f5c <__adddf3>
  403ebc:	4606      	mov	r6, r0
  403ebe:	460f      	mov	r7, r1
  403ec0:	4602      	mov	r2, r0
  403ec2:	460b      	mov	r3, r1
  403ec4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403ec8:	f002 fc6c 	bl	4067a4 <__aeabi_dcmplt>
  403ecc:	b948      	cbnz	r0, 403ee2 <_dtoa_r+0x362>
  403ece:	4632      	mov	r2, r6
  403ed0:	463b      	mov	r3, r7
  403ed2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403ed6:	f002 fc5b 	bl	406790 <__aeabi_dcmpeq>
  403eda:	b1a8      	cbz	r0, 403f08 <_dtoa_r+0x388>
  403edc:	f018 0f01 	tst.w	r8, #1
  403ee0:	d012      	beq.n	403f08 <_dtoa_r+0x388>
  403ee2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  403ee6:	9a04      	ldr	r2, [sp, #16]
  403ee8:	1e6b      	subs	r3, r5, #1
  403eea:	e004      	b.n	403ef6 <_dtoa_r+0x376>
  403eec:	429a      	cmp	r2, r3
  403eee:	f000 8401 	beq.w	4046f4 <_dtoa_r+0xb74>
  403ef2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  403ef6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403efa:	f103 0501 	add.w	r5, r3, #1
  403efe:	d0f5      	beq.n	403eec <_dtoa_r+0x36c>
  403f00:	f108 0801 	add.w	r8, r8, #1
  403f04:	f883 8000 	strb.w	r8, [r3]
  403f08:	4649      	mov	r1, r9
  403f0a:	4620      	mov	r0, r4
  403f0c:	f001 fa76 	bl	4053fc <_Bfree>
  403f10:	2200      	movs	r2, #0
  403f12:	9b02      	ldr	r3, [sp, #8]
  403f14:	702a      	strb	r2, [r5, #0]
  403f16:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403f18:	3301      	adds	r3, #1
  403f1a:	6013      	str	r3, [r2, #0]
  403f1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403f1e:	2b00      	cmp	r3, #0
  403f20:	f000 839e 	beq.w	404660 <_dtoa_r+0xae0>
  403f24:	9804      	ldr	r0, [sp, #16]
  403f26:	601d      	str	r5, [r3, #0]
  403f28:	b01b      	add	sp, #108	; 0x6c
  403f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403f30:	2a00      	cmp	r2, #0
  403f32:	d03e      	beq.n	403fb2 <_dtoa_r+0x432>
  403f34:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403f36:	2a01      	cmp	r2, #1
  403f38:	f340 8311 	ble.w	40455e <_dtoa_r+0x9de>
  403f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403f3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403f40:	1e5f      	subs	r7, r3, #1
  403f42:	42ba      	cmp	r2, r7
  403f44:	f2c0 838f 	blt.w	404666 <_dtoa_r+0xae6>
  403f48:	1bd7      	subs	r7, r2, r7
  403f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403f4c:	2b00      	cmp	r3, #0
  403f4e:	f2c0 848b 	blt.w	404868 <_dtoa_r+0xce8>
  403f52:	9d08      	ldr	r5, [sp, #32]
  403f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403f56:	9a08      	ldr	r2, [sp, #32]
  403f58:	441a      	add	r2, r3
  403f5a:	9208      	str	r2, [sp, #32]
  403f5c:	9a06      	ldr	r2, [sp, #24]
  403f5e:	2101      	movs	r1, #1
  403f60:	441a      	add	r2, r3
  403f62:	4620      	mov	r0, r4
  403f64:	9206      	str	r2, [sp, #24]
  403f66:	f001 fae3 	bl	405530 <__i2b>
  403f6a:	4606      	mov	r6, r0
  403f6c:	e024      	b.n	403fb8 <_dtoa_r+0x438>
  403f6e:	2301      	movs	r3, #1
  403f70:	930e      	str	r3, [sp, #56]	; 0x38
  403f72:	e6af      	b.n	403cd4 <_dtoa_r+0x154>
  403f74:	9a08      	ldr	r2, [sp, #32]
  403f76:	9b02      	ldr	r3, [sp, #8]
  403f78:	1ad2      	subs	r2, r2, r3
  403f7a:	425b      	negs	r3, r3
  403f7c:	930c      	str	r3, [sp, #48]	; 0x30
  403f7e:	2300      	movs	r3, #0
  403f80:	9208      	str	r2, [sp, #32]
  403f82:	930d      	str	r3, [sp, #52]	; 0x34
  403f84:	e6b8      	b.n	403cf8 <_dtoa_r+0x178>
  403f86:	f1c7 0301 	rsb	r3, r7, #1
  403f8a:	9308      	str	r3, [sp, #32]
  403f8c:	2300      	movs	r3, #0
  403f8e:	9306      	str	r3, [sp, #24]
  403f90:	e6a7      	b.n	403ce2 <_dtoa_r+0x162>
  403f92:	9d02      	ldr	r5, [sp, #8]
  403f94:	4628      	mov	r0, r5
  403f96:	f002 f92d 	bl	4061f4 <__aeabi_i2d>
  403f9a:	4602      	mov	r2, r0
  403f9c:	460b      	mov	r3, r1
  403f9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403fa2:	f002 fbf5 	bl	406790 <__aeabi_dcmpeq>
  403fa6:	2800      	cmp	r0, #0
  403fa8:	f47f ae80 	bne.w	403cac <_dtoa_r+0x12c>
  403fac:	1e6b      	subs	r3, r5, #1
  403fae:	9302      	str	r3, [sp, #8]
  403fb0:	e67c      	b.n	403cac <_dtoa_r+0x12c>
  403fb2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403fb4:	9d08      	ldr	r5, [sp, #32]
  403fb6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  403fb8:	2d00      	cmp	r5, #0
  403fba:	dd0c      	ble.n	403fd6 <_dtoa_r+0x456>
  403fbc:	9906      	ldr	r1, [sp, #24]
  403fbe:	2900      	cmp	r1, #0
  403fc0:	460b      	mov	r3, r1
  403fc2:	dd08      	ble.n	403fd6 <_dtoa_r+0x456>
  403fc4:	42a9      	cmp	r1, r5
  403fc6:	9a08      	ldr	r2, [sp, #32]
  403fc8:	bfa8      	it	ge
  403fca:	462b      	movge	r3, r5
  403fcc:	1ad2      	subs	r2, r2, r3
  403fce:	1aed      	subs	r5, r5, r3
  403fd0:	1acb      	subs	r3, r1, r3
  403fd2:	9208      	str	r2, [sp, #32]
  403fd4:	9306      	str	r3, [sp, #24]
  403fd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403fd8:	b1d3      	cbz	r3, 404010 <_dtoa_r+0x490>
  403fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403fdc:	2b00      	cmp	r3, #0
  403fde:	f000 82b7 	beq.w	404550 <_dtoa_r+0x9d0>
  403fe2:	2f00      	cmp	r7, #0
  403fe4:	dd10      	ble.n	404008 <_dtoa_r+0x488>
  403fe6:	4631      	mov	r1, r6
  403fe8:	463a      	mov	r2, r7
  403fea:	4620      	mov	r0, r4
  403fec:	f001 fb3c 	bl	405668 <__pow5mult>
  403ff0:	464a      	mov	r2, r9
  403ff2:	4601      	mov	r1, r0
  403ff4:	4606      	mov	r6, r0
  403ff6:	4620      	mov	r0, r4
  403ff8:	f001 faa4 	bl	405544 <__multiply>
  403ffc:	4649      	mov	r1, r9
  403ffe:	4680      	mov	r8, r0
  404000:	4620      	mov	r0, r4
  404002:	f001 f9fb 	bl	4053fc <_Bfree>
  404006:	46c1      	mov	r9, r8
  404008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40400a:	1bda      	subs	r2, r3, r7
  40400c:	f040 82a1 	bne.w	404552 <_dtoa_r+0x9d2>
  404010:	2101      	movs	r1, #1
  404012:	4620      	mov	r0, r4
  404014:	f001 fa8c 	bl	405530 <__i2b>
  404018:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40401a:	2b00      	cmp	r3, #0
  40401c:	4680      	mov	r8, r0
  40401e:	dd1c      	ble.n	40405a <_dtoa_r+0x4da>
  404020:	4601      	mov	r1, r0
  404022:	461a      	mov	r2, r3
  404024:	4620      	mov	r0, r4
  404026:	f001 fb1f 	bl	405668 <__pow5mult>
  40402a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40402c:	2b01      	cmp	r3, #1
  40402e:	4680      	mov	r8, r0
  404030:	f340 8254 	ble.w	4044dc <_dtoa_r+0x95c>
  404034:	2300      	movs	r3, #0
  404036:	930c      	str	r3, [sp, #48]	; 0x30
  404038:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40403c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  404040:	6918      	ldr	r0, [r3, #16]
  404042:	f001 fa25 	bl	405490 <__hi0bits>
  404046:	f1c0 0020 	rsb	r0, r0, #32
  40404a:	e010      	b.n	40406e <_dtoa_r+0x4ee>
  40404c:	f1c3 0520 	rsb	r5, r3, #32
  404050:	fa0a f005 	lsl.w	r0, sl, r5
  404054:	e674      	b.n	403d40 <_dtoa_r+0x1c0>
  404056:	900e      	str	r0, [sp, #56]	; 0x38
  404058:	e63c      	b.n	403cd4 <_dtoa_r+0x154>
  40405a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40405c:	2b01      	cmp	r3, #1
  40405e:	f340 8287 	ble.w	404570 <_dtoa_r+0x9f0>
  404062:	2300      	movs	r3, #0
  404064:	930c      	str	r3, [sp, #48]	; 0x30
  404066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404068:	2001      	movs	r0, #1
  40406a:	2b00      	cmp	r3, #0
  40406c:	d1e4      	bne.n	404038 <_dtoa_r+0x4b8>
  40406e:	9a06      	ldr	r2, [sp, #24]
  404070:	4410      	add	r0, r2
  404072:	f010 001f 	ands.w	r0, r0, #31
  404076:	f000 80a1 	beq.w	4041bc <_dtoa_r+0x63c>
  40407a:	f1c0 0320 	rsb	r3, r0, #32
  40407e:	2b04      	cmp	r3, #4
  404080:	f340 849e 	ble.w	4049c0 <_dtoa_r+0xe40>
  404084:	9b08      	ldr	r3, [sp, #32]
  404086:	f1c0 001c 	rsb	r0, r0, #28
  40408a:	4403      	add	r3, r0
  40408c:	9308      	str	r3, [sp, #32]
  40408e:	4613      	mov	r3, r2
  404090:	4403      	add	r3, r0
  404092:	4405      	add	r5, r0
  404094:	9306      	str	r3, [sp, #24]
  404096:	9b08      	ldr	r3, [sp, #32]
  404098:	2b00      	cmp	r3, #0
  40409a:	dd05      	ble.n	4040a8 <_dtoa_r+0x528>
  40409c:	4649      	mov	r1, r9
  40409e:	461a      	mov	r2, r3
  4040a0:	4620      	mov	r0, r4
  4040a2:	f001 fb31 	bl	405708 <__lshift>
  4040a6:	4681      	mov	r9, r0
  4040a8:	9b06      	ldr	r3, [sp, #24]
  4040aa:	2b00      	cmp	r3, #0
  4040ac:	dd05      	ble.n	4040ba <_dtoa_r+0x53a>
  4040ae:	4641      	mov	r1, r8
  4040b0:	461a      	mov	r2, r3
  4040b2:	4620      	mov	r0, r4
  4040b4:	f001 fb28 	bl	405708 <__lshift>
  4040b8:	4680      	mov	r8, r0
  4040ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4040bc:	2b00      	cmp	r3, #0
  4040be:	f040 8086 	bne.w	4041ce <_dtoa_r+0x64e>
  4040c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4040c4:	2b00      	cmp	r3, #0
  4040c6:	f340 8266 	ble.w	404596 <_dtoa_r+0xa16>
  4040ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4040cc:	2b00      	cmp	r3, #0
  4040ce:	f000 8098 	beq.w	404202 <_dtoa_r+0x682>
  4040d2:	2d00      	cmp	r5, #0
  4040d4:	dd05      	ble.n	4040e2 <_dtoa_r+0x562>
  4040d6:	4631      	mov	r1, r6
  4040d8:	462a      	mov	r2, r5
  4040da:	4620      	mov	r0, r4
  4040dc:	f001 fb14 	bl	405708 <__lshift>
  4040e0:	4606      	mov	r6, r0
  4040e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4040e4:	2b00      	cmp	r3, #0
  4040e6:	f040 8337 	bne.w	404758 <_dtoa_r+0xbd8>
  4040ea:	9606      	str	r6, [sp, #24]
  4040ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4040ee:	9a04      	ldr	r2, [sp, #16]
  4040f0:	f8dd b018 	ldr.w	fp, [sp, #24]
  4040f4:	3b01      	subs	r3, #1
  4040f6:	18d3      	adds	r3, r2, r3
  4040f8:	930b      	str	r3, [sp, #44]	; 0x2c
  4040fa:	f00a 0301 	and.w	r3, sl, #1
  4040fe:	930c      	str	r3, [sp, #48]	; 0x30
  404100:	4617      	mov	r7, r2
  404102:	46c2      	mov	sl, r8
  404104:	4651      	mov	r1, sl
  404106:	4648      	mov	r0, r9
  404108:	f7ff fca6 	bl	403a58 <quorem>
  40410c:	4631      	mov	r1, r6
  40410e:	4605      	mov	r5, r0
  404110:	4648      	mov	r0, r9
  404112:	f001 fb4b 	bl	4057ac <__mcmp>
  404116:	465a      	mov	r2, fp
  404118:	900a      	str	r0, [sp, #40]	; 0x28
  40411a:	4651      	mov	r1, sl
  40411c:	4620      	mov	r0, r4
  40411e:	f001 fb61 	bl	4057e4 <__mdiff>
  404122:	68c2      	ldr	r2, [r0, #12]
  404124:	4680      	mov	r8, r0
  404126:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40412a:	2a00      	cmp	r2, #0
  40412c:	f040 822b 	bne.w	404586 <_dtoa_r+0xa06>
  404130:	4601      	mov	r1, r0
  404132:	4648      	mov	r0, r9
  404134:	9308      	str	r3, [sp, #32]
  404136:	f001 fb39 	bl	4057ac <__mcmp>
  40413a:	4641      	mov	r1, r8
  40413c:	9006      	str	r0, [sp, #24]
  40413e:	4620      	mov	r0, r4
  404140:	f001 f95c 	bl	4053fc <_Bfree>
  404144:	9a06      	ldr	r2, [sp, #24]
  404146:	9b08      	ldr	r3, [sp, #32]
  404148:	b932      	cbnz	r2, 404158 <_dtoa_r+0x5d8>
  40414a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40414c:	b921      	cbnz	r1, 404158 <_dtoa_r+0x5d8>
  40414e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404150:	2a00      	cmp	r2, #0
  404152:	f000 83ef 	beq.w	404934 <_dtoa_r+0xdb4>
  404156:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404158:	990a      	ldr	r1, [sp, #40]	; 0x28
  40415a:	2900      	cmp	r1, #0
  40415c:	f2c0 829f 	blt.w	40469e <_dtoa_r+0xb1e>
  404160:	d105      	bne.n	40416e <_dtoa_r+0x5ee>
  404162:	9924      	ldr	r1, [sp, #144]	; 0x90
  404164:	b919      	cbnz	r1, 40416e <_dtoa_r+0x5ee>
  404166:	990c      	ldr	r1, [sp, #48]	; 0x30
  404168:	2900      	cmp	r1, #0
  40416a:	f000 8298 	beq.w	40469e <_dtoa_r+0xb1e>
  40416e:	2a00      	cmp	r2, #0
  404170:	f300 8306 	bgt.w	404780 <_dtoa_r+0xc00>
  404174:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404176:	703b      	strb	r3, [r7, #0]
  404178:	f107 0801 	add.w	r8, r7, #1
  40417c:	4297      	cmp	r7, r2
  40417e:	4645      	mov	r5, r8
  404180:	f000 830c 	beq.w	40479c <_dtoa_r+0xc1c>
  404184:	4649      	mov	r1, r9
  404186:	2300      	movs	r3, #0
  404188:	220a      	movs	r2, #10
  40418a:	4620      	mov	r0, r4
  40418c:	f001 f940 	bl	405410 <__multadd>
  404190:	455e      	cmp	r6, fp
  404192:	4681      	mov	r9, r0
  404194:	4631      	mov	r1, r6
  404196:	f04f 0300 	mov.w	r3, #0
  40419a:	f04f 020a 	mov.w	r2, #10
  40419e:	4620      	mov	r0, r4
  4041a0:	f000 81eb 	beq.w	40457a <_dtoa_r+0x9fa>
  4041a4:	f001 f934 	bl	405410 <__multadd>
  4041a8:	4659      	mov	r1, fp
  4041aa:	4606      	mov	r6, r0
  4041ac:	2300      	movs	r3, #0
  4041ae:	220a      	movs	r2, #10
  4041b0:	4620      	mov	r0, r4
  4041b2:	f001 f92d 	bl	405410 <__multadd>
  4041b6:	4647      	mov	r7, r8
  4041b8:	4683      	mov	fp, r0
  4041ba:	e7a3      	b.n	404104 <_dtoa_r+0x584>
  4041bc:	201c      	movs	r0, #28
  4041be:	9b08      	ldr	r3, [sp, #32]
  4041c0:	4403      	add	r3, r0
  4041c2:	9308      	str	r3, [sp, #32]
  4041c4:	9b06      	ldr	r3, [sp, #24]
  4041c6:	4403      	add	r3, r0
  4041c8:	4405      	add	r5, r0
  4041ca:	9306      	str	r3, [sp, #24]
  4041cc:	e763      	b.n	404096 <_dtoa_r+0x516>
  4041ce:	4641      	mov	r1, r8
  4041d0:	4648      	mov	r0, r9
  4041d2:	f001 faeb 	bl	4057ac <__mcmp>
  4041d6:	2800      	cmp	r0, #0
  4041d8:	f6bf af73 	bge.w	4040c2 <_dtoa_r+0x542>
  4041dc:	9f02      	ldr	r7, [sp, #8]
  4041de:	4649      	mov	r1, r9
  4041e0:	2300      	movs	r3, #0
  4041e2:	220a      	movs	r2, #10
  4041e4:	4620      	mov	r0, r4
  4041e6:	3f01      	subs	r7, #1
  4041e8:	9702      	str	r7, [sp, #8]
  4041ea:	f001 f911 	bl	405410 <__multadd>
  4041ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4041f0:	4681      	mov	r9, r0
  4041f2:	2b00      	cmp	r3, #0
  4041f4:	f040 83b6 	bne.w	404964 <_dtoa_r+0xde4>
  4041f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4041fa:	2b00      	cmp	r3, #0
  4041fc:	f340 83bf 	ble.w	40497e <_dtoa_r+0xdfe>
  404200:	930a      	str	r3, [sp, #40]	; 0x28
  404202:	f8dd b010 	ldr.w	fp, [sp, #16]
  404206:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404208:	465d      	mov	r5, fp
  40420a:	e002      	b.n	404212 <_dtoa_r+0x692>
  40420c:	f001 f900 	bl	405410 <__multadd>
  404210:	4681      	mov	r9, r0
  404212:	4641      	mov	r1, r8
  404214:	4648      	mov	r0, r9
  404216:	f7ff fc1f 	bl	403a58 <quorem>
  40421a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40421e:	f805 ab01 	strb.w	sl, [r5], #1
  404222:	eba5 030b 	sub.w	r3, r5, fp
  404226:	42bb      	cmp	r3, r7
  404228:	f04f 020a 	mov.w	r2, #10
  40422c:	f04f 0300 	mov.w	r3, #0
  404230:	4649      	mov	r1, r9
  404232:	4620      	mov	r0, r4
  404234:	dbea      	blt.n	40420c <_dtoa_r+0x68c>
  404236:	9b04      	ldr	r3, [sp, #16]
  404238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40423a:	2a01      	cmp	r2, #1
  40423c:	bfac      	ite	ge
  40423e:	189b      	addge	r3, r3, r2
  404240:	3301      	addlt	r3, #1
  404242:	461d      	mov	r5, r3
  404244:	f04f 0b00 	mov.w	fp, #0
  404248:	4649      	mov	r1, r9
  40424a:	2201      	movs	r2, #1
  40424c:	4620      	mov	r0, r4
  40424e:	f001 fa5b 	bl	405708 <__lshift>
  404252:	4641      	mov	r1, r8
  404254:	4681      	mov	r9, r0
  404256:	f001 faa9 	bl	4057ac <__mcmp>
  40425a:	2800      	cmp	r0, #0
  40425c:	f340 823d 	ble.w	4046da <_dtoa_r+0xb5a>
  404260:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  404264:	9904      	ldr	r1, [sp, #16]
  404266:	1e6b      	subs	r3, r5, #1
  404268:	e004      	b.n	404274 <_dtoa_r+0x6f4>
  40426a:	428b      	cmp	r3, r1
  40426c:	f000 81ae 	beq.w	4045cc <_dtoa_r+0xa4c>
  404270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  404274:	2a39      	cmp	r2, #57	; 0x39
  404276:	f103 0501 	add.w	r5, r3, #1
  40427a:	d0f6      	beq.n	40426a <_dtoa_r+0x6ea>
  40427c:	3201      	adds	r2, #1
  40427e:	701a      	strb	r2, [r3, #0]
  404280:	4641      	mov	r1, r8
  404282:	4620      	mov	r0, r4
  404284:	f001 f8ba 	bl	4053fc <_Bfree>
  404288:	2e00      	cmp	r6, #0
  40428a:	f43f ae3d 	beq.w	403f08 <_dtoa_r+0x388>
  40428e:	f1bb 0f00 	cmp.w	fp, #0
  404292:	d005      	beq.n	4042a0 <_dtoa_r+0x720>
  404294:	45b3      	cmp	fp, r6
  404296:	d003      	beq.n	4042a0 <_dtoa_r+0x720>
  404298:	4659      	mov	r1, fp
  40429a:	4620      	mov	r0, r4
  40429c:	f001 f8ae 	bl	4053fc <_Bfree>
  4042a0:	4631      	mov	r1, r6
  4042a2:	4620      	mov	r0, r4
  4042a4:	f001 f8aa 	bl	4053fc <_Bfree>
  4042a8:	e62e      	b.n	403f08 <_dtoa_r+0x388>
  4042aa:	2300      	movs	r3, #0
  4042ac:	930b      	str	r3, [sp, #44]	; 0x2c
  4042ae:	9b02      	ldr	r3, [sp, #8]
  4042b0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4042b2:	4413      	add	r3, r2
  4042b4:	930f      	str	r3, [sp, #60]	; 0x3c
  4042b6:	3301      	adds	r3, #1
  4042b8:	2b01      	cmp	r3, #1
  4042ba:	461f      	mov	r7, r3
  4042bc:	461e      	mov	r6, r3
  4042be:	930a      	str	r3, [sp, #40]	; 0x28
  4042c0:	bfb8      	it	lt
  4042c2:	2701      	movlt	r7, #1
  4042c4:	2100      	movs	r1, #0
  4042c6:	2f17      	cmp	r7, #23
  4042c8:	6461      	str	r1, [r4, #68]	; 0x44
  4042ca:	d90a      	bls.n	4042e2 <_dtoa_r+0x762>
  4042cc:	2201      	movs	r2, #1
  4042ce:	2304      	movs	r3, #4
  4042d0:	005b      	lsls	r3, r3, #1
  4042d2:	f103 0014 	add.w	r0, r3, #20
  4042d6:	4287      	cmp	r7, r0
  4042d8:	4611      	mov	r1, r2
  4042da:	f102 0201 	add.w	r2, r2, #1
  4042de:	d2f7      	bcs.n	4042d0 <_dtoa_r+0x750>
  4042e0:	6461      	str	r1, [r4, #68]	; 0x44
  4042e2:	4620      	mov	r0, r4
  4042e4:	f001 f864 	bl	4053b0 <_Balloc>
  4042e8:	2e0e      	cmp	r6, #14
  4042ea:	9004      	str	r0, [sp, #16]
  4042ec:	6420      	str	r0, [r4, #64]	; 0x40
  4042ee:	f63f ad41 	bhi.w	403d74 <_dtoa_r+0x1f4>
  4042f2:	2d00      	cmp	r5, #0
  4042f4:	f43f ad3e 	beq.w	403d74 <_dtoa_r+0x1f4>
  4042f8:	9902      	ldr	r1, [sp, #8]
  4042fa:	2900      	cmp	r1, #0
  4042fc:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  404300:	f340 8202 	ble.w	404708 <_dtoa_r+0xb88>
  404304:	4bb8      	ldr	r3, [pc, #736]	; (4045e8 <_dtoa_r+0xa68>)
  404306:	f001 020f 	and.w	r2, r1, #15
  40430a:	110d      	asrs	r5, r1, #4
  40430c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404310:	06e9      	lsls	r1, r5, #27
  404312:	e9d3 6700 	ldrd	r6, r7, [r3]
  404316:	f140 81ae 	bpl.w	404676 <_dtoa_r+0xaf6>
  40431a:	4bb4      	ldr	r3, [pc, #720]	; (4045ec <_dtoa_r+0xa6c>)
  40431c:	4650      	mov	r0, sl
  40431e:	4659      	mov	r1, fp
  404320:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  404324:	f002 f8f6 	bl	406514 <__aeabi_ddiv>
  404328:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40432c:	f005 050f 	and.w	r5, r5, #15
  404330:	f04f 0a03 	mov.w	sl, #3
  404334:	b18d      	cbz	r5, 40435a <_dtoa_r+0x7da>
  404336:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4045ec <_dtoa_r+0xa6c>
  40433a:	07ea      	lsls	r2, r5, #31
  40433c:	d509      	bpl.n	404352 <_dtoa_r+0x7d2>
  40433e:	4630      	mov	r0, r6
  404340:	4639      	mov	r1, r7
  404342:	e9d8 2300 	ldrd	r2, r3, [r8]
  404346:	f001 ffbb 	bl	4062c0 <__aeabi_dmul>
  40434a:	f10a 0a01 	add.w	sl, sl, #1
  40434e:	4606      	mov	r6, r0
  404350:	460f      	mov	r7, r1
  404352:	106d      	asrs	r5, r5, #1
  404354:	f108 0808 	add.w	r8, r8, #8
  404358:	d1ef      	bne.n	40433a <_dtoa_r+0x7ba>
  40435a:	463b      	mov	r3, r7
  40435c:	4632      	mov	r2, r6
  40435e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  404362:	f002 f8d7 	bl	406514 <__aeabi_ddiv>
  404366:	4607      	mov	r7, r0
  404368:	4688      	mov	r8, r1
  40436a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40436c:	b143      	cbz	r3, 404380 <_dtoa_r+0x800>
  40436e:	2200      	movs	r2, #0
  404370:	4b9f      	ldr	r3, [pc, #636]	; (4045f0 <_dtoa_r+0xa70>)
  404372:	4638      	mov	r0, r7
  404374:	4641      	mov	r1, r8
  404376:	f002 fa15 	bl	4067a4 <__aeabi_dcmplt>
  40437a:	2800      	cmp	r0, #0
  40437c:	f040 8286 	bne.w	40488c <_dtoa_r+0xd0c>
  404380:	4650      	mov	r0, sl
  404382:	f001 ff37 	bl	4061f4 <__aeabi_i2d>
  404386:	463a      	mov	r2, r7
  404388:	4643      	mov	r3, r8
  40438a:	f001 ff99 	bl	4062c0 <__aeabi_dmul>
  40438e:	4b99      	ldr	r3, [pc, #612]	; (4045f4 <_dtoa_r+0xa74>)
  404390:	2200      	movs	r2, #0
  404392:	f001 fde3 	bl	405f5c <__adddf3>
  404396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404398:	4605      	mov	r5, r0
  40439a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40439e:	2b00      	cmp	r3, #0
  4043a0:	f000 813e 	beq.w	404620 <_dtoa_r+0xaa0>
  4043a4:	9b02      	ldr	r3, [sp, #8]
  4043a6:	9315      	str	r3, [sp, #84]	; 0x54
  4043a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4043aa:	9312      	str	r3, [sp, #72]	; 0x48
  4043ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4043ae:	2b00      	cmp	r3, #0
  4043b0:	f000 81fa 	beq.w	4047a8 <_dtoa_r+0xc28>
  4043b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4043b6:	4b8c      	ldr	r3, [pc, #560]	; (4045e8 <_dtoa_r+0xa68>)
  4043b8:	498f      	ldr	r1, [pc, #572]	; (4045f8 <_dtoa_r+0xa78>)
  4043ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4043be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4043c2:	2000      	movs	r0, #0
  4043c4:	f002 f8a6 	bl	406514 <__aeabi_ddiv>
  4043c8:	462a      	mov	r2, r5
  4043ca:	4633      	mov	r3, r6
  4043cc:	f001 fdc4 	bl	405f58 <__aeabi_dsub>
  4043d0:	4682      	mov	sl, r0
  4043d2:	468b      	mov	fp, r1
  4043d4:	4638      	mov	r0, r7
  4043d6:	4641      	mov	r1, r8
  4043d8:	f002 fa22 	bl	406820 <__aeabi_d2iz>
  4043dc:	4605      	mov	r5, r0
  4043de:	f001 ff09 	bl	4061f4 <__aeabi_i2d>
  4043e2:	4602      	mov	r2, r0
  4043e4:	460b      	mov	r3, r1
  4043e6:	4638      	mov	r0, r7
  4043e8:	4641      	mov	r1, r8
  4043ea:	f001 fdb5 	bl	405f58 <__aeabi_dsub>
  4043ee:	3530      	adds	r5, #48	; 0x30
  4043f0:	fa5f f885 	uxtb.w	r8, r5
  4043f4:	9d04      	ldr	r5, [sp, #16]
  4043f6:	4606      	mov	r6, r0
  4043f8:	460f      	mov	r7, r1
  4043fa:	f885 8000 	strb.w	r8, [r5]
  4043fe:	4602      	mov	r2, r0
  404400:	460b      	mov	r3, r1
  404402:	4650      	mov	r0, sl
  404404:	4659      	mov	r1, fp
  404406:	3501      	adds	r5, #1
  404408:	f002 f9ea 	bl	4067e0 <__aeabi_dcmpgt>
  40440c:	2800      	cmp	r0, #0
  40440e:	d154      	bne.n	4044ba <_dtoa_r+0x93a>
  404410:	4632      	mov	r2, r6
  404412:	463b      	mov	r3, r7
  404414:	2000      	movs	r0, #0
  404416:	4976      	ldr	r1, [pc, #472]	; (4045f0 <_dtoa_r+0xa70>)
  404418:	f001 fd9e 	bl	405f58 <__aeabi_dsub>
  40441c:	4602      	mov	r2, r0
  40441e:	460b      	mov	r3, r1
  404420:	4650      	mov	r0, sl
  404422:	4659      	mov	r1, fp
  404424:	f002 f9dc 	bl	4067e0 <__aeabi_dcmpgt>
  404428:	2800      	cmp	r0, #0
  40442a:	f040 8270 	bne.w	40490e <_dtoa_r+0xd8e>
  40442e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404430:	2a01      	cmp	r2, #1
  404432:	f000 8111 	beq.w	404658 <_dtoa_r+0xad8>
  404436:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404438:	9a04      	ldr	r2, [sp, #16]
  40443a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40443e:	4413      	add	r3, r2
  404440:	4699      	mov	r9, r3
  404442:	e00d      	b.n	404460 <_dtoa_r+0x8e0>
  404444:	2000      	movs	r0, #0
  404446:	496a      	ldr	r1, [pc, #424]	; (4045f0 <_dtoa_r+0xa70>)
  404448:	f001 fd86 	bl	405f58 <__aeabi_dsub>
  40444c:	4652      	mov	r2, sl
  40444e:	465b      	mov	r3, fp
  404450:	f002 f9a8 	bl	4067a4 <__aeabi_dcmplt>
  404454:	2800      	cmp	r0, #0
  404456:	f040 8258 	bne.w	40490a <_dtoa_r+0xd8a>
  40445a:	454d      	cmp	r5, r9
  40445c:	f000 80fa 	beq.w	404654 <_dtoa_r+0xad4>
  404460:	4650      	mov	r0, sl
  404462:	4659      	mov	r1, fp
  404464:	2200      	movs	r2, #0
  404466:	4b65      	ldr	r3, [pc, #404]	; (4045fc <_dtoa_r+0xa7c>)
  404468:	f001 ff2a 	bl	4062c0 <__aeabi_dmul>
  40446c:	2200      	movs	r2, #0
  40446e:	4b63      	ldr	r3, [pc, #396]	; (4045fc <_dtoa_r+0xa7c>)
  404470:	4682      	mov	sl, r0
  404472:	468b      	mov	fp, r1
  404474:	4630      	mov	r0, r6
  404476:	4639      	mov	r1, r7
  404478:	f001 ff22 	bl	4062c0 <__aeabi_dmul>
  40447c:	460f      	mov	r7, r1
  40447e:	4606      	mov	r6, r0
  404480:	f002 f9ce 	bl	406820 <__aeabi_d2iz>
  404484:	4680      	mov	r8, r0
  404486:	f001 feb5 	bl	4061f4 <__aeabi_i2d>
  40448a:	4602      	mov	r2, r0
  40448c:	460b      	mov	r3, r1
  40448e:	4630      	mov	r0, r6
  404490:	4639      	mov	r1, r7
  404492:	f001 fd61 	bl	405f58 <__aeabi_dsub>
  404496:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40449a:	fa5f f888 	uxtb.w	r8, r8
  40449e:	4652      	mov	r2, sl
  4044a0:	465b      	mov	r3, fp
  4044a2:	f805 8b01 	strb.w	r8, [r5], #1
  4044a6:	4606      	mov	r6, r0
  4044a8:	460f      	mov	r7, r1
  4044aa:	f002 f97b 	bl	4067a4 <__aeabi_dcmplt>
  4044ae:	4632      	mov	r2, r6
  4044b0:	463b      	mov	r3, r7
  4044b2:	2800      	cmp	r0, #0
  4044b4:	d0c6      	beq.n	404444 <_dtoa_r+0x8c4>
  4044b6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4044ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4044bc:	9302      	str	r3, [sp, #8]
  4044be:	e523      	b.n	403f08 <_dtoa_r+0x388>
  4044c0:	2300      	movs	r3, #0
  4044c2:	930b      	str	r3, [sp, #44]	; 0x2c
  4044c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4044c6:	2b00      	cmp	r3, #0
  4044c8:	f340 80dc 	ble.w	404684 <_dtoa_r+0xb04>
  4044cc:	461f      	mov	r7, r3
  4044ce:	461e      	mov	r6, r3
  4044d0:	930f      	str	r3, [sp, #60]	; 0x3c
  4044d2:	930a      	str	r3, [sp, #40]	; 0x28
  4044d4:	e6f6      	b.n	4042c4 <_dtoa_r+0x744>
  4044d6:	2301      	movs	r3, #1
  4044d8:	930b      	str	r3, [sp, #44]	; 0x2c
  4044da:	e7f3      	b.n	4044c4 <_dtoa_r+0x944>
  4044dc:	f1ba 0f00 	cmp.w	sl, #0
  4044e0:	f47f ada8 	bne.w	404034 <_dtoa_r+0x4b4>
  4044e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4044e8:	2b00      	cmp	r3, #0
  4044ea:	f47f adba 	bne.w	404062 <_dtoa_r+0x4e2>
  4044ee:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4044f2:	0d3f      	lsrs	r7, r7, #20
  4044f4:	053f      	lsls	r7, r7, #20
  4044f6:	2f00      	cmp	r7, #0
  4044f8:	f000 820d 	beq.w	404916 <_dtoa_r+0xd96>
  4044fc:	9b08      	ldr	r3, [sp, #32]
  4044fe:	3301      	adds	r3, #1
  404500:	9308      	str	r3, [sp, #32]
  404502:	9b06      	ldr	r3, [sp, #24]
  404504:	3301      	adds	r3, #1
  404506:	9306      	str	r3, [sp, #24]
  404508:	2301      	movs	r3, #1
  40450a:	930c      	str	r3, [sp, #48]	; 0x30
  40450c:	e5ab      	b.n	404066 <_dtoa_r+0x4e6>
  40450e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404510:	2b00      	cmp	r3, #0
  404512:	f73f ac42 	bgt.w	403d9a <_dtoa_r+0x21a>
  404516:	f040 8221 	bne.w	40495c <_dtoa_r+0xddc>
  40451a:	2200      	movs	r2, #0
  40451c:	4b38      	ldr	r3, [pc, #224]	; (404600 <_dtoa_r+0xa80>)
  40451e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404522:	f001 fecd 	bl	4062c0 <__aeabi_dmul>
  404526:	4652      	mov	r2, sl
  404528:	465b      	mov	r3, fp
  40452a:	f002 f94f 	bl	4067cc <__aeabi_dcmpge>
  40452e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  404532:	4646      	mov	r6, r8
  404534:	2800      	cmp	r0, #0
  404536:	d041      	beq.n	4045bc <_dtoa_r+0xa3c>
  404538:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40453a:	9d04      	ldr	r5, [sp, #16]
  40453c:	43db      	mvns	r3, r3
  40453e:	9302      	str	r3, [sp, #8]
  404540:	4641      	mov	r1, r8
  404542:	4620      	mov	r0, r4
  404544:	f000 ff5a 	bl	4053fc <_Bfree>
  404548:	2e00      	cmp	r6, #0
  40454a:	f43f acdd 	beq.w	403f08 <_dtoa_r+0x388>
  40454e:	e6a7      	b.n	4042a0 <_dtoa_r+0x720>
  404550:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404552:	4649      	mov	r1, r9
  404554:	4620      	mov	r0, r4
  404556:	f001 f887 	bl	405668 <__pow5mult>
  40455a:	4681      	mov	r9, r0
  40455c:	e558      	b.n	404010 <_dtoa_r+0x490>
  40455e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404560:	2a00      	cmp	r2, #0
  404562:	f000 8187 	beq.w	404874 <_dtoa_r+0xcf4>
  404566:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40456a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40456c:	9d08      	ldr	r5, [sp, #32]
  40456e:	e4f2      	b.n	403f56 <_dtoa_r+0x3d6>
  404570:	f1ba 0f00 	cmp.w	sl, #0
  404574:	f47f ad75 	bne.w	404062 <_dtoa_r+0x4e2>
  404578:	e7b4      	b.n	4044e4 <_dtoa_r+0x964>
  40457a:	f000 ff49 	bl	405410 <__multadd>
  40457e:	4647      	mov	r7, r8
  404580:	4606      	mov	r6, r0
  404582:	4683      	mov	fp, r0
  404584:	e5be      	b.n	404104 <_dtoa_r+0x584>
  404586:	4601      	mov	r1, r0
  404588:	4620      	mov	r0, r4
  40458a:	9306      	str	r3, [sp, #24]
  40458c:	f000 ff36 	bl	4053fc <_Bfree>
  404590:	2201      	movs	r2, #1
  404592:	9b06      	ldr	r3, [sp, #24]
  404594:	e5e0      	b.n	404158 <_dtoa_r+0x5d8>
  404596:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404598:	2b02      	cmp	r3, #2
  40459a:	f77f ad96 	ble.w	4040ca <_dtoa_r+0x54a>
  40459e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4045a0:	2b00      	cmp	r3, #0
  4045a2:	d1c9      	bne.n	404538 <_dtoa_r+0x9b8>
  4045a4:	4641      	mov	r1, r8
  4045a6:	2205      	movs	r2, #5
  4045a8:	4620      	mov	r0, r4
  4045aa:	f000 ff31 	bl	405410 <__multadd>
  4045ae:	4601      	mov	r1, r0
  4045b0:	4680      	mov	r8, r0
  4045b2:	4648      	mov	r0, r9
  4045b4:	f001 f8fa 	bl	4057ac <__mcmp>
  4045b8:	2800      	cmp	r0, #0
  4045ba:	ddbd      	ble.n	404538 <_dtoa_r+0x9b8>
  4045bc:	9a02      	ldr	r2, [sp, #8]
  4045be:	9904      	ldr	r1, [sp, #16]
  4045c0:	2331      	movs	r3, #49	; 0x31
  4045c2:	3201      	adds	r2, #1
  4045c4:	9202      	str	r2, [sp, #8]
  4045c6:	700b      	strb	r3, [r1, #0]
  4045c8:	1c4d      	adds	r5, r1, #1
  4045ca:	e7b9      	b.n	404540 <_dtoa_r+0x9c0>
  4045cc:	9a02      	ldr	r2, [sp, #8]
  4045ce:	3201      	adds	r2, #1
  4045d0:	9202      	str	r2, [sp, #8]
  4045d2:	9a04      	ldr	r2, [sp, #16]
  4045d4:	2331      	movs	r3, #49	; 0x31
  4045d6:	7013      	strb	r3, [r2, #0]
  4045d8:	e652      	b.n	404280 <_dtoa_r+0x700>
  4045da:	2301      	movs	r3, #1
  4045dc:	930b      	str	r3, [sp, #44]	; 0x2c
  4045de:	e666      	b.n	4042ae <_dtoa_r+0x72e>
  4045e0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4045e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4045e6:	e48f      	b.n	403f08 <_dtoa_r+0x388>
  4045e8:	004076a8 	.word	0x004076a8
  4045ec:	00407680 	.word	0x00407680
  4045f0:	3ff00000 	.word	0x3ff00000
  4045f4:	401c0000 	.word	0x401c0000
  4045f8:	3fe00000 	.word	0x3fe00000
  4045fc:	40240000 	.word	0x40240000
  404600:	40140000 	.word	0x40140000
  404604:	4650      	mov	r0, sl
  404606:	f001 fdf5 	bl	4061f4 <__aeabi_i2d>
  40460a:	463a      	mov	r2, r7
  40460c:	4643      	mov	r3, r8
  40460e:	f001 fe57 	bl	4062c0 <__aeabi_dmul>
  404612:	2200      	movs	r2, #0
  404614:	4bc1      	ldr	r3, [pc, #772]	; (40491c <_dtoa_r+0xd9c>)
  404616:	f001 fca1 	bl	405f5c <__adddf3>
  40461a:	4605      	mov	r5, r0
  40461c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  404620:	4641      	mov	r1, r8
  404622:	2200      	movs	r2, #0
  404624:	4bbe      	ldr	r3, [pc, #760]	; (404920 <_dtoa_r+0xda0>)
  404626:	4638      	mov	r0, r7
  404628:	f001 fc96 	bl	405f58 <__aeabi_dsub>
  40462c:	462a      	mov	r2, r5
  40462e:	4633      	mov	r3, r6
  404630:	4682      	mov	sl, r0
  404632:	468b      	mov	fp, r1
  404634:	f002 f8d4 	bl	4067e0 <__aeabi_dcmpgt>
  404638:	4680      	mov	r8, r0
  40463a:	2800      	cmp	r0, #0
  40463c:	f040 8110 	bne.w	404860 <_dtoa_r+0xce0>
  404640:	462a      	mov	r2, r5
  404642:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  404646:	4650      	mov	r0, sl
  404648:	4659      	mov	r1, fp
  40464a:	f002 f8ab 	bl	4067a4 <__aeabi_dcmplt>
  40464e:	b118      	cbz	r0, 404658 <_dtoa_r+0xad8>
  404650:	4646      	mov	r6, r8
  404652:	e771      	b.n	404538 <_dtoa_r+0x9b8>
  404654:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404658:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40465c:	f7ff bb8a 	b.w	403d74 <_dtoa_r+0x1f4>
  404660:	9804      	ldr	r0, [sp, #16]
  404662:	f7ff babb 	b.w	403bdc <_dtoa_r+0x5c>
  404666:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404668:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40466a:	970c      	str	r7, [sp, #48]	; 0x30
  40466c:	1afb      	subs	r3, r7, r3
  40466e:	441a      	add	r2, r3
  404670:	920d      	str	r2, [sp, #52]	; 0x34
  404672:	2700      	movs	r7, #0
  404674:	e469      	b.n	403f4a <_dtoa_r+0x3ca>
  404676:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40467a:	f04f 0a02 	mov.w	sl, #2
  40467e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  404682:	e657      	b.n	404334 <_dtoa_r+0x7b4>
  404684:	2100      	movs	r1, #0
  404686:	2301      	movs	r3, #1
  404688:	6461      	str	r1, [r4, #68]	; 0x44
  40468a:	4620      	mov	r0, r4
  40468c:	9325      	str	r3, [sp, #148]	; 0x94
  40468e:	f000 fe8f 	bl	4053b0 <_Balloc>
  404692:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404694:	9004      	str	r0, [sp, #16]
  404696:	6420      	str	r0, [r4, #64]	; 0x40
  404698:	930a      	str	r3, [sp, #40]	; 0x28
  40469a:	930f      	str	r3, [sp, #60]	; 0x3c
  40469c:	e629      	b.n	4042f2 <_dtoa_r+0x772>
  40469e:	2a00      	cmp	r2, #0
  4046a0:	46d0      	mov	r8, sl
  4046a2:	f8cd b018 	str.w	fp, [sp, #24]
  4046a6:	469a      	mov	sl, r3
  4046a8:	dd11      	ble.n	4046ce <_dtoa_r+0xb4e>
  4046aa:	4649      	mov	r1, r9
  4046ac:	2201      	movs	r2, #1
  4046ae:	4620      	mov	r0, r4
  4046b0:	f001 f82a 	bl	405708 <__lshift>
  4046b4:	4641      	mov	r1, r8
  4046b6:	4681      	mov	r9, r0
  4046b8:	f001 f878 	bl	4057ac <__mcmp>
  4046bc:	2800      	cmp	r0, #0
  4046be:	f340 8146 	ble.w	40494e <_dtoa_r+0xdce>
  4046c2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4046c6:	f000 8106 	beq.w	4048d6 <_dtoa_r+0xd56>
  4046ca:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4046ce:	46b3      	mov	fp, r6
  4046d0:	f887 a000 	strb.w	sl, [r7]
  4046d4:	1c7d      	adds	r5, r7, #1
  4046d6:	9e06      	ldr	r6, [sp, #24]
  4046d8:	e5d2      	b.n	404280 <_dtoa_r+0x700>
  4046da:	d104      	bne.n	4046e6 <_dtoa_r+0xb66>
  4046dc:	f01a 0f01 	tst.w	sl, #1
  4046e0:	d001      	beq.n	4046e6 <_dtoa_r+0xb66>
  4046e2:	e5bd      	b.n	404260 <_dtoa_r+0x6e0>
  4046e4:	4615      	mov	r5, r2
  4046e6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4046ea:	2b30      	cmp	r3, #48	; 0x30
  4046ec:	f105 32ff 	add.w	r2, r5, #4294967295
  4046f0:	d0f8      	beq.n	4046e4 <_dtoa_r+0xb64>
  4046f2:	e5c5      	b.n	404280 <_dtoa_r+0x700>
  4046f4:	9904      	ldr	r1, [sp, #16]
  4046f6:	2230      	movs	r2, #48	; 0x30
  4046f8:	700a      	strb	r2, [r1, #0]
  4046fa:	9a02      	ldr	r2, [sp, #8]
  4046fc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404700:	3201      	adds	r2, #1
  404702:	9202      	str	r2, [sp, #8]
  404704:	f7ff bbfc 	b.w	403f00 <_dtoa_r+0x380>
  404708:	f000 80bb 	beq.w	404882 <_dtoa_r+0xd02>
  40470c:	9b02      	ldr	r3, [sp, #8]
  40470e:	425d      	negs	r5, r3
  404710:	4b84      	ldr	r3, [pc, #528]	; (404924 <_dtoa_r+0xda4>)
  404712:	f005 020f 	and.w	r2, r5, #15
  404716:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40471a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40471e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  404722:	f001 fdcd 	bl	4062c0 <__aeabi_dmul>
  404726:	112d      	asrs	r5, r5, #4
  404728:	4607      	mov	r7, r0
  40472a:	4688      	mov	r8, r1
  40472c:	f000 812c 	beq.w	404988 <_dtoa_r+0xe08>
  404730:	4e7d      	ldr	r6, [pc, #500]	; (404928 <_dtoa_r+0xda8>)
  404732:	f04f 0a02 	mov.w	sl, #2
  404736:	07eb      	lsls	r3, r5, #31
  404738:	d509      	bpl.n	40474e <_dtoa_r+0xbce>
  40473a:	4638      	mov	r0, r7
  40473c:	4641      	mov	r1, r8
  40473e:	e9d6 2300 	ldrd	r2, r3, [r6]
  404742:	f001 fdbd 	bl	4062c0 <__aeabi_dmul>
  404746:	f10a 0a01 	add.w	sl, sl, #1
  40474a:	4607      	mov	r7, r0
  40474c:	4688      	mov	r8, r1
  40474e:	106d      	asrs	r5, r5, #1
  404750:	f106 0608 	add.w	r6, r6, #8
  404754:	d1ef      	bne.n	404736 <_dtoa_r+0xbb6>
  404756:	e608      	b.n	40436a <_dtoa_r+0x7ea>
  404758:	6871      	ldr	r1, [r6, #4]
  40475a:	4620      	mov	r0, r4
  40475c:	f000 fe28 	bl	4053b0 <_Balloc>
  404760:	6933      	ldr	r3, [r6, #16]
  404762:	3302      	adds	r3, #2
  404764:	009a      	lsls	r2, r3, #2
  404766:	4605      	mov	r5, r0
  404768:	f106 010c 	add.w	r1, r6, #12
  40476c:	300c      	adds	r0, #12
  40476e:	f7fd fda3 	bl	4022b8 <memcpy>
  404772:	4629      	mov	r1, r5
  404774:	2201      	movs	r2, #1
  404776:	4620      	mov	r0, r4
  404778:	f000 ffc6 	bl	405708 <__lshift>
  40477c:	9006      	str	r0, [sp, #24]
  40477e:	e4b5      	b.n	4040ec <_dtoa_r+0x56c>
  404780:	2b39      	cmp	r3, #57	; 0x39
  404782:	f8cd b018 	str.w	fp, [sp, #24]
  404786:	46d0      	mov	r8, sl
  404788:	f000 80a5 	beq.w	4048d6 <_dtoa_r+0xd56>
  40478c:	f103 0a01 	add.w	sl, r3, #1
  404790:	46b3      	mov	fp, r6
  404792:	f887 a000 	strb.w	sl, [r7]
  404796:	1c7d      	adds	r5, r7, #1
  404798:	9e06      	ldr	r6, [sp, #24]
  40479a:	e571      	b.n	404280 <_dtoa_r+0x700>
  40479c:	465a      	mov	r2, fp
  40479e:	46d0      	mov	r8, sl
  4047a0:	46b3      	mov	fp, r6
  4047a2:	469a      	mov	sl, r3
  4047a4:	4616      	mov	r6, r2
  4047a6:	e54f      	b.n	404248 <_dtoa_r+0x6c8>
  4047a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4047aa:	495e      	ldr	r1, [pc, #376]	; (404924 <_dtoa_r+0xda4>)
  4047ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4047b0:	462a      	mov	r2, r5
  4047b2:	4633      	mov	r3, r6
  4047b4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4047b8:	f001 fd82 	bl	4062c0 <__aeabi_dmul>
  4047bc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4047c0:	4638      	mov	r0, r7
  4047c2:	4641      	mov	r1, r8
  4047c4:	f002 f82c 	bl	406820 <__aeabi_d2iz>
  4047c8:	4605      	mov	r5, r0
  4047ca:	f001 fd13 	bl	4061f4 <__aeabi_i2d>
  4047ce:	460b      	mov	r3, r1
  4047d0:	4602      	mov	r2, r0
  4047d2:	4641      	mov	r1, r8
  4047d4:	4638      	mov	r0, r7
  4047d6:	f001 fbbf 	bl	405f58 <__aeabi_dsub>
  4047da:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4047dc:	460f      	mov	r7, r1
  4047de:	9904      	ldr	r1, [sp, #16]
  4047e0:	3530      	adds	r5, #48	; 0x30
  4047e2:	2b01      	cmp	r3, #1
  4047e4:	700d      	strb	r5, [r1, #0]
  4047e6:	4606      	mov	r6, r0
  4047e8:	f101 0501 	add.w	r5, r1, #1
  4047ec:	d026      	beq.n	40483c <_dtoa_r+0xcbc>
  4047ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4047f0:	9a04      	ldr	r2, [sp, #16]
  4047f2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 404930 <_dtoa_r+0xdb0>
  4047f6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4047fa:	4413      	add	r3, r2
  4047fc:	f04f 0a00 	mov.w	sl, #0
  404800:	4699      	mov	r9, r3
  404802:	4652      	mov	r2, sl
  404804:	465b      	mov	r3, fp
  404806:	4630      	mov	r0, r6
  404808:	4639      	mov	r1, r7
  40480a:	f001 fd59 	bl	4062c0 <__aeabi_dmul>
  40480e:	460f      	mov	r7, r1
  404810:	4606      	mov	r6, r0
  404812:	f002 f805 	bl	406820 <__aeabi_d2iz>
  404816:	4680      	mov	r8, r0
  404818:	f001 fcec 	bl	4061f4 <__aeabi_i2d>
  40481c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  404820:	4602      	mov	r2, r0
  404822:	460b      	mov	r3, r1
  404824:	4630      	mov	r0, r6
  404826:	4639      	mov	r1, r7
  404828:	f001 fb96 	bl	405f58 <__aeabi_dsub>
  40482c:	f805 8b01 	strb.w	r8, [r5], #1
  404830:	454d      	cmp	r5, r9
  404832:	4606      	mov	r6, r0
  404834:	460f      	mov	r7, r1
  404836:	d1e4      	bne.n	404802 <_dtoa_r+0xc82>
  404838:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40483c:	4b3b      	ldr	r3, [pc, #236]	; (40492c <_dtoa_r+0xdac>)
  40483e:	2200      	movs	r2, #0
  404840:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  404844:	f001 fb8a 	bl	405f5c <__adddf3>
  404848:	4632      	mov	r2, r6
  40484a:	463b      	mov	r3, r7
  40484c:	f001 ffaa 	bl	4067a4 <__aeabi_dcmplt>
  404850:	2800      	cmp	r0, #0
  404852:	d046      	beq.n	4048e2 <_dtoa_r+0xd62>
  404854:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404856:	9302      	str	r3, [sp, #8]
  404858:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40485c:	f7ff bb43 	b.w	403ee6 <_dtoa_r+0x366>
  404860:	f04f 0800 	mov.w	r8, #0
  404864:	4646      	mov	r6, r8
  404866:	e6a9      	b.n	4045bc <_dtoa_r+0xa3c>
  404868:	9b08      	ldr	r3, [sp, #32]
  40486a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40486c:	1a9d      	subs	r5, r3, r2
  40486e:	2300      	movs	r3, #0
  404870:	f7ff bb71 	b.w	403f56 <_dtoa_r+0x3d6>
  404874:	9b18      	ldr	r3, [sp, #96]	; 0x60
  404876:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404878:	9d08      	ldr	r5, [sp, #32]
  40487a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40487e:	f7ff bb6a 	b.w	403f56 <_dtoa_r+0x3d6>
  404882:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  404886:	f04f 0a02 	mov.w	sl, #2
  40488a:	e56e      	b.n	40436a <_dtoa_r+0x7ea>
  40488c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40488e:	2b00      	cmp	r3, #0
  404890:	f43f aeb8 	beq.w	404604 <_dtoa_r+0xa84>
  404894:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404896:	2b00      	cmp	r3, #0
  404898:	f77f aede 	ble.w	404658 <_dtoa_r+0xad8>
  40489c:	2200      	movs	r2, #0
  40489e:	4b24      	ldr	r3, [pc, #144]	; (404930 <_dtoa_r+0xdb0>)
  4048a0:	4638      	mov	r0, r7
  4048a2:	4641      	mov	r1, r8
  4048a4:	f001 fd0c 	bl	4062c0 <__aeabi_dmul>
  4048a8:	4607      	mov	r7, r0
  4048aa:	4688      	mov	r8, r1
  4048ac:	f10a 0001 	add.w	r0, sl, #1
  4048b0:	f001 fca0 	bl	4061f4 <__aeabi_i2d>
  4048b4:	463a      	mov	r2, r7
  4048b6:	4643      	mov	r3, r8
  4048b8:	f001 fd02 	bl	4062c0 <__aeabi_dmul>
  4048bc:	2200      	movs	r2, #0
  4048be:	4b17      	ldr	r3, [pc, #92]	; (40491c <_dtoa_r+0xd9c>)
  4048c0:	f001 fb4c 	bl	405f5c <__adddf3>
  4048c4:	9a02      	ldr	r2, [sp, #8]
  4048c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4048c8:	9312      	str	r3, [sp, #72]	; 0x48
  4048ca:	3a01      	subs	r2, #1
  4048cc:	4605      	mov	r5, r0
  4048ce:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4048d2:	9215      	str	r2, [sp, #84]	; 0x54
  4048d4:	e56a      	b.n	4043ac <_dtoa_r+0x82c>
  4048d6:	2239      	movs	r2, #57	; 0x39
  4048d8:	46b3      	mov	fp, r6
  4048da:	703a      	strb	r2, [r7, #0]
  4048dc:	9e06      	ldr	r6, [sp, #24]
  4048de:	1c7d      	adds	r5, r7, #1
  4048e0:	e4c0      	b.n	404264 <_dtoa_r+0x6e4>
  4048e2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4048e6:	2000      	movs	r0, #0
  4048e8:	4910      	ldr	r1, [pc, #64]	; (40492c <_dtoa_r+0xdac>)
  4048ea:	f001 fb35 	bl	405f58 <__aeabi_dsub>
  4048ee:	4632      	mov	r2, r6
  4048f0:	463b      	mov	r3, r7
  4048f2:	f001 ff75 	bl	4067e0 <__aeabi_dcmpgt>
  4048f6:	b908      	cbnz	r0, 4048fc <_dtoa_r+0xd7c>
  4048f8:	e6ae      	b.n	404658 <_dtoa_r+0xad8>
  4048fa:	4615      	mov	r5, r2
  4048fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404900:	2b30      	cmp	r3, #48	; 0x30
  404902:	f105 32ff 	add.w	r2, r5, #4294967295
  404906:	d0f8      	beq.n	4048fa <_dtoa_r+0xd7a>
  404908:	e5d7      	b.n	4044ba <_dtoa_r+0x93a>
  40490a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40490e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404910:	9302      	str	r3, [sp, #8]
  404912:	f7ff bae8 	b.w	403ee6 <_dtoa_r+0x366>
  404916:	970c      	str	r7, [sp, #48]	; 0x30
  404918:	f7ff bba5 	b.w	404066 <_dtoa_r+0x4e6>
  40491c:	401c0000 	.word	0x401c0000
  404920:	40140000 	.word	0x40140000
  404924:	004076a8 	.word	0x004076a8
  404928:	00407680 	.word	0x00407680
  40492c:	3fe00000 	.word	0x3fe00000
  404930:	40240000 	.word	0x40240000
  404934:	2b39      	cmp	r3, #57	; 0x39
  404936:	f8cd b018 	str.w	fp, [sp, #24]
  40493a:	46d0      	mov	r8, sl
  40493c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404940:	469a      	mov	sl, r3
  404942:	d0c8      	beq.n	4048d6 <_dtoa_r+0xd56>
  404944:	f1bb 0f00 	cmp.w	fp, #0
  404948:	f73f aebf 	bgt.w	4046ca <_dtoa_r+0xb4a>
  40494c:	e6bf      	b.n	4046ce <_dtoa_r+0xb4e>
  40494e:	f47f aebe 	bne.w	4046ce <_dtoa_r+0xb4e>
  404952:	f01a 0f01 	tst.w	sl, #1
  404956:	f43f aeba 	beq.w	4046ce <_dtoa_r+0xb4e>
  40495a:	e6b2      	b.n	4046c2 <_dtoa_r+0xb42>
  40495c:	f04f 0800 	mov.w	r8, #0
  404960:	4646      	mov	r6, r8
  404962:	e5e9      	b.n	404538 <_dtoa_r+0x9b8>
  404964:	4631      	mov	r1, r6
  404966:	2300      	movs	r3, #0
  404968:	220a      	movs	r2, #10
  40496a:	4620      	mov	r0, r4
  40496c:	f000 fd50 	bl	405410 <__multadd>
  404970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404972:	2b00      	cmp	r3, #0
  404974:	4606      	mov	r6, r0
  404976:	dd0a      	ble.n	40498e <_dtoa_r+0xe0e>
  404978:	930a      	str	r3, [sp, #40]	; 0x28
  40497a:	f7ff bbaa 	b.w	4040d2 <_dtoa_r+0x552>
  40497e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404980:	2b02      	cmp	r3, #2
  404982:	dc23      	bgt.n	4049cc <_dtoa_r+0xe4c>
  404984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404986:	e43b      	b.n	404200 <_dtoa_r+0x680>
  404988:	f04f 0a02 	mov.w	sl, #2
  40498c:	e4ed      	b.n	40436a <_dtoa_r+0x7ea>
  40498e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404990:	2b02      	cmp	r3, #2
  404992:	dc1b      	bgt.n	4049cc <_dtoa_r+0xe4c>
  404994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404996:	e7ef      	b.n	404978 <_dtoa_r+0xdf8>
  404998:	2500      	movs	r5, #0
  40499a:	6465      	str	r5, [r4, #68]	; 0x44
  40499c:	4629      	mov	r1, r5
  40499e:	4620      	mov	r0, r4
  4049a0:	f000 fd06 	bl	4053b0 <_Balloc>
  4049a4:	f04f 33ff 	mov.w	r3, #4294967295
  4049a8:	930a      	str	r3, [sp, #40]	; 0x28
  4049aa:	930f      	str	r3, [sp, #60]	; 0x3c
  4049ac:	2301      	movs	r3, #1
  4049ae:	9004      	str	r0, [sp, #16]
  4049b0:	9525      	str	r5, [sp, #148]	; 0x94
  4049b2:	6420      	str	r0, [r4, #64]	; 0x40
  4049b4:	930b      	str	r3, [sp, #44]	; 0x2c
  4049b6:	f7ff b9dd 	b.w	403d74 <_dtoa_r+0x1f4>
  4049ba:	2501      	movs	r5, #1
  4049bc:	f7ff b9a5 	b.w	403d0a <_dtoa_r+0x18a>
  4049c0:	f43f ab69 	beq.w	404096 <_dtoa_r+0x516>
  4049c4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4049c8:	f7ff bbf9 	b.w	4041be <_dtoa_r+0x63e>
  4049cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4049ce:	930a      	str	r3, [sp, #40]	; 0x28
  4049d0:	e5e5      	b.n	40459e <_dtoa_r+0xa1e>
  4049d2:	bf00      	nop

004049d4 <__libc_fini_array>:
  4049d4:	b538      	push	{r3, r4, r5, lr}
  4049d6:	4c0a      	ldr	r4, [pc, #40]	; (404a00 <__libc_fini_array+0x2c>)
  4049d8:	4d0a      	ldr	r5, [pc, #40]	; (404a04 <__libc_fini_array+0x30>)
  4049da:	1b64      	subs	r4, r4, r5
  4049dc:	10a4      	asrs	r4, r4, #2
  4049de:	d00a      	beq.n	4049f6 <__libc_fini_array+0x22>
  4049e0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4049e4:	3b01      	subs	r3, #1
  4049e6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4049ea:	3c01      	subs	r4, #1
  4049ec:	f855 3904 	ldr.w	r3, [r5], #-4
  4049f0:	4798      	blx	r3
  4049f2:	2c00      	cmp	r4, #0
  4049f4:	d1f9      	bne.n	4049ea <__libc_fini_array+0x16>
  4049f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4049fa:	f002 bf4b 	b.w	407894 <_fini>
  4049fe:	bf00      	nop
  404a00:	004078a4 	.word	0x004078a4
  404a04:	004078a0 	.word	0x004078a0

00404a08 <_malloc_trim_r>:
  404a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404a0a:	4f24      	ldr	r7, [pc, #144]	; (404a9c <_malloc_trim_r+0x94>)
  404a0c:	460c      	mov	r4, r1
  404a0e:	4606      	mov	r6, r0
  404a10:	f000 fcc2 	bl	405398 <__malloc_lock>
  404a14:	68bb      	ldr	r3, [r7, #8]
  404a16:	685d      	ldr	r5, [r3, #4]
  404a18:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  404a1c:	310f      	adds	r1, #15
  404a1e:	f025 0503 	bic.w	r5, r5, #3
  404a22:	4429      	add	r1, r5
  404a24:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404a28:	f021 010f 	bic.w	r1, r1, #15
  404a2c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  404a30:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404a34:	db07      	blt.n	404a46 <_malloc_trim_r+0x3e>
  404a36:	2100      	movs	r1, #0
  404a38:	4630      	mov	r0, r6
  404a3a:	f001 f959 	bl	405cf0 <_sbrk_r>
  404a3e:	68bb      	ldr	r3, [r7, #8]
  404a40:	442b      	add	r3, r5
  404a42:	4298      	cmp	r0, r3
  404a44:	d004      	beq.n	404a50 <_malloc_trim_r+0x48>
  404a46:	4630      	mov	r0, r6
  404a48:	f000 fcac 	bl	4053a4 <__malloc_unlock>
  404a4c:	2000      	movs	r0, #0
  404a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404a50:	4261      	negs	r1, r4
  404a52:	4630      	mov	r0, r6
  404a54:	f001 f94c 	bl	405cf0 <_sbrk_r>
  404a58:	3001      	adds	r0, #1
  404a5a:	d00d      	beq.n	404a78 <_malloc_trim_r+0x70>
  404a5c:	4b10      	ldr	r3, [pc, #64]	; (404aa0 <_malloc_trim_r+0x98>)
  404a5e:	68ba      	ldr	r2, [r7, #8]
  404a60:	6819      	ldr	r1, [r3, #0]
  404a62:	1b2d      	subs	r5, r5, r4
  404a64:	f045 0501 	orr.w	r5, r5, #1
  404a68:	4630      	mov	r0, r6
  404a6a:	1b09      	subs	r1, r1, r4
  404a6c:	6055      	str	r5, [r2, #4]
  404a6e:	6019      	str	r1, [r3, #0]
  404a70:	f000 fc98 	bl	4053a4 <__malloc_unlock>
  404a74:	2001      	movs	r0, #1
  404a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404a78:	2100      	movs	r1, #0
  404a7a:	4630      	mov	r0, r6
  404a7c:	f001 f938 	bl	405cf0 <_sbrk_r>
  404a80:	68ba      	ldr	r2, [r7, #8]
  404a82:	1a83      	subs	r3, r0, r2
  404a84:	2b0f      	cmp	r3, #15
  404a86:	ddde      	ble.n	404a46 <_malloc_trim_r+0x3e>
  404a88:	4c06      	ldr	r4, [pc, #24]	; (404aa4 <_malloc_trim_r+0x9c>)
  404a8a:	4905      	ldr	r1, [pc, #20]	; (404aa0 <_malloc_trim_r+0x98>)
  404a8c:	6824      	ldr	r4, [r4, #0]
  404a8e:	f043 0301 	orr.w	r3, r3, #1
  404a92:	1b00      	subs	r0, r0, r4
  404a94:	6053      	str	r3, [r2, #4]
  404a96:	6008      	str	r0, [r1, #0]
  404a98:	e7d5      	b.n	404a46 <_malloc_trim_r+0x3e>
  404a9a:	bf00      	nop
  404a9c:	204005c0 	.word	0x204005c0
  404aa0:	20400cfc 	.word	0x20400cfc
  404aa4:	204009c8 	.word	0x204009c8

00404aa8 <_free_r>:
  404aa8:	2900      	cmp	r1, #0
  404aaa:	d044      	beq.n	404b36 <_free_r+0x8e>
  404aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404ab0:	460d      	mov	r5, r1
  404ab2:	4680      	mov	r8, r0
  404ab4:	f000 fc70 	bl	405398 <__malloc_lock>
  404ab8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  404abc:	4969      	ldr	r1, [pc, #420]	; (404c64 <_free_r+0x1bc>)
  404abe:	f027 0301 	bic.w	r3, r7, #1
  404ac2:	f1a5 0408 	sub.w	r4, r5, #8
  404ac6:	18e2      	adds	r2, r4, r3
  404ac8:	688e      	ldr	r6, [r1, #8]
  404aca:	6850      	ldr	r0, [r2, #4]
  404acc:	42b2      	cmp	r2, r6
  404ace:	f020 0003 	bic.w	r0, r0, #3
  404ad2:	d05e      	beq.n	404b92 <_free_r+0xea>
  404ad4:	07fe      	lsls	r6, r7, #31
  404ad6:	6050      	str	r0, [r2, #4]
  404ad8:	d40b      	bmi.n	404af2 <_free_r+0x4a>
  404ada:	f855 7c08 	ldr.w	r7, [r5, #-8]
  404ade:	1be4      	subs	r4, r4, r7
  404ae0:	f101 0e08 	add.w	lr, r1, #8
  404ae4:	68a5      	ldr	r5, [r4, #8]
  404ae6:	4575      	cmp	r5, lr
  404ae8:	443b      	add	r3, r7
  404aea:	d06d      	beq.n	404bc8 <_free_r+0x120>
  404aec:	68e7      	ldr	r7, [r4, #12]
  404aee:	60ef      	str	r7, [r5, #12]
  404af0:	60bd      	str	r5, [r7, #8]
  404af2:	1815      	adds	r5, r2, r0
  404af4:	686d      	ldr	r5, [r5, #4]
  404af6:	07ed      	lsls	r5, r5, #31
  404af8:	d53e      	bpl.n	404b78 <_free_r+0xd0>
  404afa:	f043 0201 	orr.w	r2, r3, #1
  404afe:	6062      	str	r2, [r4, #4]
  404b00:	50e3      	str	r3, [r4, r3]
  404b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404b06:	d217      	bcs.n	404b38 <_free_r+0x90>
  404b08:	08db      	lsrs	r3, r3, #3
  404b0a:	1c58      	adds	r0, r3, #1
  404b0c:	109a      	asrs	r2, r3, #2
  404b0e:	684d      	ldr	r5, [r1, #4]
  404b10:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  404b14:	60a7      	str	r7, [r4, #8]
  404b16:	2301      	movs	r3, #1
  404b18:	4093      	lsls	r3, r2
  404b1a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  404b1e:	432b      	orrs	r3, r5
  404b20:	3a08      	subs	r2, #8
  404b22:	60e2      	str	r2, [r4, #12]
  404b24:	604b      	str	r3, [r1, #4]
  404b26:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  404b2a:	60fc      	str	r4, [r7, #12]
  404b2c:	4640      	mov	r0, r8
  404b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404b32:	f000 bc37 	b.w	4053a4 <__malloc_unlock>
  404b36:	4770      	bx	lr
  404b38:	0a5a      	lsrs	r2, r3, #9
  404b3a:	2a04      	cmp	r2, #4
  404b3c:	d852      	bhi.n	404be4 <_free_r+0x13c>
  404b3e:	099a      	lsrs	r2, r3, #6
  404b40:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404b44:	00ff      	lsls	r7, r7, #3
  404b46:	f102 0538 	add.w	r5, r2, #56	; 0x38
  404b4a:	19c8      	adds	r0, r1, r7
  404b4c:	59ca      	ldr	r2, [r1, r7]
  404b4e:	3808      	subs	r0, #8
  404b50:	4290      	cmp	r0, r2
  404b52:	d04f      	beq.n	404bf4 <_free_r+0x14c>
  404b54:	6851      	ldr	r1, [r2, #4]
  404b56:	f021 0103 	bic.w	r1, r1, #3
  404b5a:	428b      	cmp	r3, r1
  404b5c:	d232      	bcs.n	404bc4 <_free_r+0x11c>
  404b5e:	6892      	ldr	r2, [r2, #8]
  404b60:	4290      	cmp	r0, r2
  404b62:	d1f7      	bne.n	404b54 <_free_r+0xac>
  404b64:	68c3      	ldr	r3, [r0, #12]
  404b66:	60a0      	str	r0, [r4, #8]
  404b68:	60e3      	str	r3, [r4, #12]
  404b6a:	609c      	str	r4, [r3, #8]
  404b6c:	60c4      	str	r4, [r0, #12]
  404b6e:	4640      	mov	r0, r8
  404b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404b74:	f000 bc16 	b.w	4053a4 <__malloc_unlock>
  404b78:	6895      	ldr	r5, [r2, #8]
  404b7a:	4f3b      	ldr	r7, [pc, #236]	; (404c68 <_free_r+0x1c0>)
  404b7c:	42bd      	cmp	r5, r7
  404b7e:	4403      	add	r3, r0
  404b80:	d040      	beq.n	404c04 <_free_r+0x15c>
  404b82:	68d0      	ldr	r0, [r2, #12]
  404b84:	60e8      	str	r0, [r5, #12]
  404b86:	f043 0201 	orr.w	r2, r3, #1
  404b8a:	6085      	str	r5, [r0, #8]
  404b8c:	6062      	str	r2, [r4, #4]
  404b8e:	50e3      	str	r3, [r4, r3]
  404b90:	e7b7      	b.n	404b02 <_free_r+0x5a>
  404b92:	07ff      	lsls	r7, r7, #31
  404b94:	4403      	add	r3, r0
  404b96:	d407      	bmi.n	404ba8 <_free_r+0x100>
  404b98:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404b9c:	1aa4      	subs	r4, r4, r2
  404b9e:	4413      	add	r3, r2
  404ba0:	68a0      	ldr	r0, [r4, #8]
  404ba2:	68e2      	ldr	r2, [r4, #12]
  404ba4:	60c2      	str	r2, [r0, #12]
  404ba6:	6090      	str	r0, [r2, #8]
  404ba8:	4a30      	ldr	r2, [pc, #192]	; (404c6c <_free_r+0x1c4>)
  404baa:	6812      	ldr	r2, [r2, #0]
  404bac:	f043 0001 	orr.w	r0, r3, #1
  404bb0:	4293      	cmp	r3, r2
  404bb2:	6060      	str	r0, [r4, #4]
  404bb4:	608c      	str	r4, [r1, #8]
  404bb6:	d3b9      	bcc.n	404b2c <_free_r+0x84>
  404bb8:	4b2d      	ldr	r3, [pc, #180]	; (404c70 <_free_r+0x1c8>)
  404bba:	4640      	mov	r0, r8
  404bbc:	6819      	ldr	r1, [r3, #0]
  404bbe:	f7ff ff23 	bl	404a08 <_malloc_trim_r>
  404bc2:	e7b3      	b.n	404b2c <_free_r+0x84>
  404bc4:	4610      	mov	r0, r2
  404bc6:	e7cd      	b.n	404b64 <_free_r+0xbc>
  404bc8:	1811      	adds	r1, r2, r0
  404bca:	6849      	ldr	r1, [r1, #4]
  404bcc:	07c9      	lsls	r1, r1, #31
  404bce:	d444      	bmi.n	404c5a <_free_r+0x1b2>
  404bd0:	6891      	ldr	r1, [r2, #8]
  404bd2:	68d2      	ldr	r2, [r2, #12]
  404bd4:	60ca      	str	r2, [r1, #12]
  404bd6:	4403      	add	r3, r0
  404bd8:	f043 0001 	orr.w	r0, r3, #1
  404bdc:	6091      	str	r1, [r2, #8]
  404bde:	6060      	str	r0, [r4, #4]
  404be0:	50e3      	str	r3, [r4, r3]
  404be2:	e7a3      	b.n	404b2c <_free_r+0x84>
  404be4:	2a14      	cmp	r2, #20
  404be6:	d816      	bhi.n	404c16 <_free_r+0x16e>
  404be8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404bec:	00ff      	lsls	r7, r7, #3
  404bee:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  404bf2:	e7aa      	b.n	404b4a <_free_r+0xa2>
  404bf4:	10aa      	asrs	r2, r5, #2
  404bf6:	2301      	movs	r3, #1
  404bf8:	684d      	ldr	r5, [r1, #4]
  404bfa:	4093      	lsls	r3, r2
  404bfc:	432b      	orrs	r3, r5
  404bfe:	604b      	str	r3, [r1, #4]
  404c00:	4603      	mov	r3, r0
  404c02:	e7b0      	b.n	404b66 <_free_r+0xbe>
  404c04:	f043 0201 	orr.w	r2, r3, #1
  404c08:	614c      	str	r4, [r1, #20]
  404c0a:	610c      	str	r4, [r1, #16]
  404c0c:	60e5      	str	r5, [r4, #12]
  404c0e:	60a5      	str	r5, [r4, #8]
  404c10:	6062      	str	r2, [r4, #4]
  404c12:	50e3      	str	r3, [r4, r3]
  404c14:	e78a      	b.n	404b2c <_free_r+0x84>
  404c16:	2a54      	cmp	r2, #84	; 0x54
  404c18:	d806      	bhi.n	404c28 <_free_r+0x180>
  404c1a:	0b1a      	lsrs	r2, r3, #12
  404c1c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  404c20:	00ff      	lsls	r7, r7, #3
  404c22:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  404c26:	e790      	b.n	404b4a <_free_r+0xa2>
  404c28:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404c2c:	d806      	bhi.n	404c3c <_free_r+0x194>
  404c2e:	0bda      	lsrs	r2, r3, #15
  404c30:	f102 0778 	add.w	r7, r2, #120	; 0x78
  404c34:	00ff      	lsls	r7, r7, #3
  404c36:	f102 0577 	add.w	r5, r2, #119	; 0x77
  404c3a:	e786      	b.n	404b4a <_free_r+0xa2>
  404c3c:	f240 5054 	movw	r0, #1364	; 0x554
  404c40:	4282      	cmp	r2, r0
  404c42:	d806      	bhi.n	404c52 <_free_r+0x1aa>
  404c44:	0c9a      	lsrs	r2, r3, #18
  404c46:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  404c4a:	00ff      	lsls	r7, r7, #3
  404c4c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  404c50:	e77b      	b.n	404b4a <_free_r+0xa2>
  404c52:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  404c56:	257e      	movs	r5, #126	; 0x7e
  404c58:	e777      	b.n	404b4a <_free_r+0xa2>
  404c5a:	f043 0101 	orr.w	r1, r3, #1
  404c5e:	6061      	str	r1, [r4, #4]
  404c60:	6013      	str	r3, [r2, #0]
  404c62:	e763      	b.n	404b2c <_free_r+0x84>
  404c64:	204005c0 	.word	0x204005c0
  404c68:	204005c8 	.word	0x204005c8
  404c6c:	204009cc 	.word	0x204009cc
  404c70:	20400d2c 	.word	0x20400d2c

00404c74 <_localeconv_r>:
  404c74:	4a04      	ldr	r2, [pc, #16]	; (404c88 <_localeconv_r+0x14>)
  404c76:	4b05      	ldr	r3, [pc, #20]	; (404c8c <_localeconv_r+0x18>)
  404c78:	6812      	ldr	r2, [r2, #0]
  404c7a:	6b50      	ldr	r0, [r2, #52]	; 0x34
  404c7c:	2800      	cmp	r0, #0
  404c7e:	bf08      	it	eq
  404c80:	4618      	moveq	r0, r3
  404c82:	30f0      	adds	r0, #240	; 0xf0
  404c84:	4770      	bx	lr
  404c86:	bf00      	nop
  404c88:	20400024 	.word	0x20400024
  404c8c:	20400454 	.word	0x20400454

00404c90 <__retarget_lock_acquire_recursive>:
  404c90:	4770      	bx	lr
  404c92:	bf00      	nop

00404c94 <__retarget_lock_release_recursive>:
  404c94:	4770      	bx	lr
  404c96:	bf00      	nop

00404c98 <_malloc_r>:
  404c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c9c:	f101 060b 	add.w	r6, r1, #11
  404ca0:	2e16      	cmp	r6, #22
  404ca2:	b083      	sub	sp, #12
  404ca4:	4605      	mov	r5, r0
  404ca6:	f240 809e 	bls.w	404de6 <_malloc_r+0x14e>
  404caa:	f036 0607 	bics.w	r6, r6, #7
  404cae:	f100 80bd 	bmi.w	404e2c <_malloc_r+0x194>
  404cb2:	42b1      	cmp	r1, r6
  404cb4:	f200 80ba 	bhi.w	404e2c <_malloc_r+0x194>
  404cb8:	f000 fb6e 	bl	405398 <__malloc_lock>
  404cbc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404cc0:	f0c0 8293 	bcc.w	4051ea <_malloc_r+0x552>
  404cc4:	0a73      	lsrs	r3, r6, #9
  404cc6:	f000 80b8 	beq.w	404e3a <_malloc_r+0x1a2>
  404cca:	2b04      	cmp	r3, #4
  404ccc:	f200 8179 	bhi.w	404fc2 <_malloc_r+0x32a>
  404cd0:	09b3      	lsrs	r3, r6, #6
  404cd2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  404cd6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  404cda:	00c3      	lsls	r3, r0, #3
  404cdc:	4fbf      	ldr	r7, [pc, #764]	; (404fdc <_malloc_r+0x344>)
  404cde:	443b      	add	r3, r7
  404ce0:	f1a3 0108 	sub.w	r1, r3, #8
  404ce4:	685c      	ldr	r4, [r3, #4]
  404ce6:	42a1      	cmp	r1, r4
  404ce8:	d106      	bne.n	404cf8 <_malloc_r+0x60>
  404cea:	e00c      	b.n	404d06 <_malloc_r+0x6e>
  404cec:	2a00      	cmp	r2, #0
  404cee:	f280 80aa 	bge.w	404e46 <_malloc_r+0x1ae>
  404cf2:	68e4      	ldr	r4, [r4, #12]
  404cf4:	42a1      	cmp	r1, r4
  404cf6:	d006      	beq.n	404d06 <_malloc_r+0x6e>
  404cf8:	6863      	ldr	r3, [r4, #4]
  404cfa:	f023 0303 	bic.w	r3, r3, #3
  404cfe:	1b9a      	subs	r2, r3, r6
  404d00:	2a0f      	cmp	r2, #15
  404d02:	ddf3      	ble.n	404cec <_malloc_r+0x54>
  404d04:	4670      	mov	r0, lr
  404d06:	693c      	ldr	r4, [r7, #16]
  404d08:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404ff0 <_malloc_r+0x358>
  404d0c:	4574      	cmp	r4, lr
  404d0e:	f000 81ab 	beq.w	405068 <_malloc_r+0x3d0>
  404d12:	6863      	ldr	r3, [r4, #4]
  404d14:	f023 0303 	bic.w	r3, r3, #3
  404d18:	1b9a      	subs	r2, r3, r6
  404d1a:	2a0f      	cmp	r2, #15
  404d1c:	f300 8190 	bgt.w	405040 <_malloc_r+0x3a8>
  404d20:	2a00      	cmp	r2, #0
  404d22:	f8c7 e014 	str.w	lr, [r7, #20]
  404d26:	f8c7 e010 	str.w	lr, [r7, #16]
  404d2a:	f280 809d 	bge.w	404e68 <_malloc_r+0x1d0>
  404d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404d32:	f080 8161 	bcs.w	404ff8 <_malloc_r+0x360>
  404d36:	08db      	lsrs	r3, r3, #3
  404d38:	f103 0c01 	add.w	ip, r3, #1
  404d3c:	1099      	asrs	r1, r3, #2
  404d3e:	687a      	ldr	r2, [r7, #4]
  404d40:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404d44:	f8c4 8008 	str.w	r8, [r4, #8]
  404d48:	2301      	movs	r3, #1
  404d4a:	408b      	lsls	r3, r1
  404d4c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404d50:	4313      	orrs	r3, r2
  404d52:	3908      	subs	r1, #8
  404d54:	60e1      	str	r1, [r4, #12]
  404d56:	607b      	str	r3, [r7, #4]
  404d58:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404d5c:	f8c8 400c 	str.w	r4, [r8, #12]
  404d60:	1082      	asrs	r2, r0, #2
  404d62:	2401      	movs	r4, #1
  404d64:	4094      	lsls	r4, r2
  404d66:	429c      	cmp	r4, r3
  404d68:	f200 808b 	bhi.w	404e82 <_malloc_r+0x1ea>
  404d6c:	421c      	tst	r4, r3
  404d6e:	d106      	bne.n	404d7e <_malloc_r+0xe6>
  404d70:	f020 0003 	bic.w	r0, r0, #3
  404d74:	0064      	lsls	r4, r4, #1
  404d76:	421c      	tst	r4, r3
  404d78:	f100 0004 	add.w	r0, r0, #4
  404d7c:	d0fa      	beq.n	404d74 <_malloc_r+0xdc>
  404d7e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404d82:	46cc      	mov	ip, r9
  404d84:	4680      	mov	r8, r0
  404d86:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404d8a:	459c      	cmp	ip, r3
  404d8c:	d107      	bne.n	404d9e <_malloc_r+0x106>
  404d8e:	e16d      	b.n	40506c <_malloc_r+0x3d4>
  404d90:	2a00      	cmp	r2, #0
  404d92:	f280 817b 	bge.w	40508c <_malloc_r+0x3f4>
  404d96:	68db      	ldr	r3, [r3, #12]
  404d98:	459c      	cmp	ip, r3
  404d9a:	f000 8167 	beq.w	40506c <_malloc_r+0x3d4>
  404d9e:	6859      	ldr	r1, [r3, #4]
  404da0:	f021 0103 	bic.w	r1, r1, #3
  404da4:	1b8a      	subs	r2, r1, r6
  404da6:	2a0f      	cmp	r2, #15
  404da8:	ddf2      	ble.n	404d90 <_malloc_r+0xf8>
  404daa:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404dae:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404db2:	9300      	str	r3, [sp, #0]
  404db4:	199c      	adds	r4, r3, r6
  404db6:	4628      	mov	r0, r5
  404db8:	f046 0601 	orr.w	r6, r6, #1
  404dbc:	f042 0501 	orr.w	r5, r2, #1
  404dc0:	605e      	str	r6, [r3, #4]
  404dc2:	f8c8 c00c 	str.w	ip, [r8, #12]
  404dc6:	f8cc 8008 	str.w	r8, [ip, #8]
  404dca:	617c      	str	r4, [r7, #20]
  404dcc:	613c      	str	r4, [r7, #16]
  404dce:	f8c4 e00c 	str.w	lr, [r4, #12]
  404dd2:	f8c4 e008 	str.w	lr, [r4, #8]
  404dd6:	6065      	str	r5, [r4, #4]
  404dd8:	505a      	str	r2, [r3, r1]
  404dda:	f000 fae3 	bl	4053a4 <__malloc_unlock>
  404dde:	9b00      	ldr	r3, [sp, #0]
  404de0:	f103 0408 	add.w	r4, r3, #8
  404de4:	e01e      	b.n	404e24 <_malloc_r+0x18c>
  404de6:	2910      	cmp	r1, #16
  404de8:	d820      	bhi.n	404e2c <_malloc_r+0x194>
  404dea:	f000 fad5 	bl	405398 <__malloc_lock>
  404dee:	2610      	movs	r6, #16
  404df0:	2318      	movs	r3, #24
  404df2:	2002      	movs	r0, #2
  404df4:	4f79      	ldr	r7, [pc, #484]	; (404fdc <_malloc_r+0x344>)
  404df6:	443b      	add	r3, r7
  404df8:	f1a3 0208 	sub.w	r2, r3, #8
  404dfc:	685c      	ldr	r4, [r3, #4]
  404dfe:	4294      	cmp	r4, r2
  404e00:	f000 813d 	beq.w	40507e <_malloc_r+0x3e6>
  404e04:	6863      	ldr	r3, [r4, #4]
  404e06:	68e1      	ldr	r1, [r4, #12]
  404e08:	68a6      	ldr	r6, [r4, #8]
  404e0a:	f023 0303 	bic.w	r3, r3, #3
  404e0e:	4423      	add	r3, r4
  404e10:	4628      	mov	r0, r5
  404e12:	685a      	ldr	r2, [r3, #4]
  404e14:	60f1      	str	r1, [r6, #12]
  404e16:	f042 0201 	orr.w	r2, r2, #1
  404e1a:	608e      	str	r6, [r1, #8]
  404e1c:	605a      	str	r2, [r3, #4]
  404e1e:	f000 fac1 	bl	4053a4 <__malloc_unlock>
  404e22:	3408      	adds	r4, #8
  404e24:	4620      	mov	r0, r4
  404e26:	b003      	add	sp, #12
  404e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e2c:	2400      	movs	r4, #0
  404e2e:	230c      	movs	r3, #12
  404e30:	4620      	mov	r0, r4
  404e32:	602b      	str	r3, [r5, #0]
  404e34:	b003      	add	sp, #12
  404e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e3a:	2040      	movs	r0, #64	; 0x40
  404e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
  404e40:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404e44:	e74a      	b.n	404cdc <_malloc_r+0x44>
  404e46:	4423      	add	r3, r4
  404e48:	68e1      	ldr	r1, [r4, #12]
  404e4a:	685a      	ldr	r2, [r3, #4]
  404e4c:	68a6      	ldr	r6, [r4, #8]
  404e4e:	f042 0201 	orr.w	r2, r2, #1
  404e52:	60f1      	str	r1, [r6, #12]
  404e54:	4628      	mov	r0, r5
  404e56:	608e      	str	r6, [r1, #8]
  404e58:	605a      	str	r2, [r3, #4]
  404e5a:	f000 faa3 	bl	4053a4 <__malloc_unlock>
  404e5e:	3408      	adds	r4, #8
  404e60:	4620      	mov	r0, r4
  404e62:	b003      	add	sp, #12
  404e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e68:	4423      	add	r3, r4
  404e6a:	4628      	mov	r0, r5
  404e6c:	685a      	ldr	r2, [r3, #4]
  404e6e:	f042 0201 	orr.w	r2, r2, #1
  404e72:	605a      	str	r2, [r3, #4]
  404e74:	f000 fa96 	bl	4053a4 <__malloc_unlock>
  404e78:	3408      	adds	r4, #8
  404e7a:	4620      	mov	r0, r4
  404e7c:	b003      	add	sp, #12
  404e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e82:	68bc      	ldr	r4, [r7, #8]
  404e84:	6863      	ldr	r3, [r4, #4]
  404e86:	f023 0803 	bic.w	r8, r3, #3
  404e8a:	45b0      	cmp	r8, r6
  404e8c:	d304      	bcc.n	404e98 <_malloc_r+0x200>
  404e8e:	eba8 0306 	sub.w	r3, r8, r6
  404e92:	2b0f      	cmp	r3, #15
  404e94:	f300 8085 	bgt.w	404fa2 <_malloc_r+0x30a>
  404e98:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404ff4 <_malloc_r+0x35c>
  404e9c:	4b50      	ldr	r3, [pc, #320]	; (404fe0 <_malloc_r+0x348>)
  404e9e:	f8d9 2000 	ldr.w	r2, [r9]
  404ea2:	681b      	ldr	r3, [r3, #0]
  404ea4:	3201      	adds	r2, #1
  404ea6:	4433      	add	r3, r6
  404ea8:	eb04 0a08 	add.w	sl, r4, r8
  404eac:	f000 8155 	beq.w	40515a <_malloc_r+0x4c2>
  404eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404eb4:	330f      	adds	r3, #15
  404eb6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404eba:	f02b 0b0f 	bic.w	fp, fp, #15
  404ebe:	4659      	mov	r1, fp
  404ec0:	4628      	mov	r0, r5
  404ec2:	f000 ff15 	bl	405cf0 <_sbrk_r>
  404ec6:	1c41      	adds	r1, r0, #1
  404ec8:	4602      	mov	r2, r0
  404eca:	f000 80fc 	beq.w	4050c6 <_malloc_r+0x42e>
  404ece:	4582      	cmp	sl, r0
  404ed0:	f200 80f7 	bhi.w	4050c2 <_malloc_r+0x42a>
  404ed4:	4b43      	ldr	r3, [pc, #268]	; (404fe4 <_malloc_r+0x34c>)
  404ed6:	6819      	ldr	r1, [r3, #0]
  404ed8:	4459      	add	r1, fp
  404eda:	6019      	str	r1, [r3, #0]
  404edc:	f000 814d 	beq.w	40517a <_malloc_r+0x4e2>
  404ee0:	f8d9 0000 	ldr.w	r0, [r9]
  404ee4:	3001      	adds	r0, #1
  404ee6:	bf1b      	ittet	ne
  404ee8:	eba2 0a0a 	subne.w	sl, r2, sl
  404eec:	4451      	addne	r1, sl
  404eee:	f8c9 2000 	streq.w	r2, [r9]
  404ef2:	6019      	strne	r1, [r3, #0]
  404ef4:	f012 0107 	ands.w	r1, r2, #7
  404ef8:	f000 8115 	beq.w	405126 <_malloc_r+0x48e>
  404efc:	f1c1 0008 	rsb	r0, r1, #8
  404f00:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404f04:	4402      	add	r2, r0
  404f06:	3108      	adds	r1, #8
  404f08:	eb02 090b 	add.w	r9, r2, fp
  404f0c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404f10:	eba1 0909 	sub.w	r9, r1, r9
  404f14:	4649      	mov	r1, r9
  404f16:	4628      	mov	r0, r5
  404f18:	9301      	str	r3, [sp, #4]
  404f1a:	9200      	str	r2, [sp, #0]
  404f1c:	f000 fee8 	bl	405cf0 <_sbrk_r>
  404f20:	1c43      	adds	r3, r0, #1
  404f22:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404f26:	f000 8143 	beq.w	4051b0 <_malloc_r+0x518>
  404f2a:	1a80      	subs	r0, r0, r2
  404f2c:	4448      	add	r0, r9
  404f2e:	f040 0001 	orr.w	r0, r0, #1
  404f32:	6819      	ldr	r1, [r3, #0]
  404f34:	60ba      	str	r2, [r7, #8]
  404f36:	4449      	add	r1, r9
  404f38:	42bc      	cmp	r4, r7
  404f3a:	6050      	str	r0, [r2, #4]
  404f3c:	6019      	str	r1, [r3, #0]
  404f3e:	d017      	beq.n	404f70 <_malloc_r+0x2d8>
  404f40:	f1b8 0f0f 	cmp.w	r8, #15
  404f44:	f240 80fb 	bls.w	40513e <_malloc_r+0x4a6>
  404f48:	6860      	ldr	r0, [r4, #4]
  404f4a:	f1a8 020c 	sub.w	r2, r8, #12
  404f4e:	f022 0207 	bic.w	r2, r2, #7
  404f52:	eb04 0e02 	add.w	lr, r4, r2
  404f56:	f000 0001 	and.w	r0, r0, #1
  404f5a:	f04f 0c05 	mov.w	ip, #5
  404f5e:	4310      	orrs	r0, r2
  404f60:	2a0f      	cmp	r2, #15
  404f62:	6060      	str	r0, [r4, #4]
  404f64:	f8ce c004 	str.w	ip, [lr, #4]
  404f68:	f8ce c008 	str.w	ip, [lr, #8]
  404f6c:	f200 8117 	bhi.w	40519e <_malloc_r+0x506>
  404f70:	4b1d      	ldr	r3, [pc, #116]	; (404fe8 <_malloc_r+0x350>)
  404f72:	68bc      	ldr	r4, [r7, #8]
  404f74:	681a      	ldr	r2, [r3, #0]
  404f76:	4291      	cmp	r1, r2
  404f78:	bf88      	it	hi
  404f7a:	6019      	strhi	r1, [r3, #0]
  404f7c:	4b1b      	ldr	r3, [pc, #108]	; (404fec <_malloc_r+0x354>)
  404f7e:	681a      	ldr	r2, [r3, #0]
  404f80:	4291      	cmp	r1, r2
  404f82:	6862      	ldr	r2, [r4, #4]
  404f84:	bf88      	it	hi
  404f86:	6019      	strhi	r1, [r3, #0]
  404f88:	f022 0203 	bic.w	r2, r2, #3
  404f8c:	4296      	cmp	r6, r2
  404f8e:	eba2 0306 	sub.w	r3, r2, r6
  404f92:	d801      	bhi.n	404f98 <_malloc_r+0x300>
  404f94:	2b0f      	cmp	r3, #15
  404f96:	dc04      	bgt.n	404fa2 <_malloc_r+0x30a>
  404f98:	4628      	mov	r0, r5
  404f9a:	f000 fa03 	bl	4053a4 <__malloc_unlock>
  404f9e:	2400      	movs	r4, #0
  404fa0:	e740      	b.n	404e24 <_malloc_r+0x18c>
  404fa2:	19a2      	adds	r2, r4, r6
  404fa4:	f043 0301 	orr.w	r3, r3, #1
  404fa8:	f046 0601 	orr.w	r6, r6, #1
  404fac:	6066      	str	r6, [r4, #4]
  404fae:	4628      	mov	r0, r5
  404fb0:	60ba      	str	r2, [r7, #8]
  404fb2:	6053      	str	r3, [r2, #4]
  404fb4:	f000 f9f6 	bl	4053a4 <__malloc_unlock>
  404fb8:	3408      	adds	r4, #8
  404fba:	4620      	mov	r0, r4
  404fbc:	b003      	add	sp, #12
  404fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404fc2:	2b14      	cmp	r3, #20
  404fc4:	d971      	bls.n	4050aa <_malloc_r+0x412>
  404fc6:	2b54      	cmp	r3, #84	; 0x54
  404fc8:	f200 80a3 	bhi.w	405112 <_malloc_r+0x47a>
  404fcc:	0b33      	lsrs	r3, r6, #12
  404fce:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404fd2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404fd6:	00c3      	lsls	r3, r0, #3
  404fd8:	e680      	b.n	404cdc <_malloc_r+0x44>
  404fda:	bf00      	nop
  404fdc:	204005c0 	.word	0x204005c0
  404fe0:	20400d2c 	.word	0x20400d2c
  404fe4:	20400cfc 	.word	0x20400cfc
  404fe8:	20400d24 	.word	0x20400d24
  404fec:	20400d28 	.word	0x20400d28
  404ff0:	204005c8 	.word	0x204005c8
  404ff4:	204009c8 	.word	0x204009c8
  404ff8:	0a5a      	lsrs	r2, r3, #9
  404ffa:	2a04      	cmp	r2, #4
  404ffc:	d95b      	bls.n	4050b6 <_malloc_r+0x41e>
  404ffe:	2a14      	cmp	r2, #20
  405000:	f200 80ae 	bhi.w	405160 <_malloc_r+0x4c8>
  405004:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  405008:	00c9      	lsls	r1, r1, #3
  40500a:	325b      	adds	r2, #91	; 0x5b
  40500c:	eb07 0c01 	add.w	ip, r7, r1
  405010:	5879      	ldr	r1, [r7, r1]
  405012:	f1ac 0c08 	sub.w	ip, ip, #8
  405016:	458c      	cmp	ip, r1
  405018:	f000 8088 	beq.w	40512c <_malloc_r+0x494>
  40501c:	684a      	ldr	r2, [r1, #4]
  40501e:	f022 0203 	bic.w	r2, r2, #3
  405022:	4293      	cmp	r3, r2
  405024:	d273      	bcs.n	40510e <_malloc_r+0x476>
  405026:	6889      	ldr	r1, [r1, #8]
  405028:	458c      	cmp	ip, r1
  40502a:	d1f7      	bne.n	40501c <_malloc_r+0x384>
  40502c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  405030:	687b      	ldr	r3, [r7, #4]
  405032:	60e2      	str	r2, [r4, #12]
  405034:	f8c4 c008 	str.w	ip, [r4, #8]
  405038:	6094      	str	r4, [r2, #8]
  40503a:	f8cc 400c 	str.w	r4, [ip, #12]
  40503e:	e68f      	b.n	404d60 <_malloc_r+0xc8>
  405040:	19a1      	adds	r1, r4, r6
  405042:	f046 0c01 	orr.w	ip, r6, #1
  405046:	f042 0601 	orr.w	r6, r2, #1
  40504a:	f8c4 c004 	str.w	ip, [r4, #4]
  40504e:	4628      	mov	r0, r5
  405050:	6179      	str	r1, [r7, #20]
  405052:	6139      	str	r1, [r7, #16]
  405054:	f8c1 e00c 	str.w	lr, [r1, #12]
  405058:	f8c1 e008 	str.w	lr, [r1, #8]
  40505c:	604e      	str	r6, [r1, #4]
  40505e:	50e2      	str	r2, [r4, r3]
  405060:	f000 f9a0 	bl	4053a4 <__malloc_unlock>
  405064:	3408      	adds	r4, #8
  405066:	e6dd      	b.n	404e24 <_malloc_r+0x18c>
  405068:	687b      	ldr	r3, [r7, #4]
  40506a:	e679      	b.n	404d60 <_malloc_r+0xc8>
  40506c:	f108 0801 	add.w	r8, r8, #1
  405070:	f018 0f03 	tst.w	r8, #3
  405074:	f10c 0c08 	add.w	ip, ip, #8
  405078:	f47f ae85 	bne.w	404d86 <_malloc_r+0xee>
  40507c:	e02d      	b.n	4050da <_malloc_r+0x442>
  40507e:	68dc      	ldr	r4, [r3, #12]
  405080:	42a3      	cmp	r3, r4
  405082:	bf08      	it	eq
  405084:	3002      	addeq	r0, #2
  405086:	f43f ae3e 	beq.w	404d06 <_malloc_r+0x6e>
  40508a:	e6bb      	b.n	404e04 <_malloc_r+0x16c>
  40508c:	4419      	add	r1, r3
  40508e:	461c      	mov	r4, r3
  405090:	684a      	ldr	r2, [r1, #4]
  405092:	68db      	ldr	r3, [r3, #12]
  405094:	f854 6f08 	ldr.w	r6, [r4, #8]!
  405098:	f042 0201 	orr.w	r2, r2, #1
  40509c:	604a      	str	r2, [r1, #4]
  40509e:	4628      	mov	r0, r5
  4050a0:	60f3      	str	r3, [r6, #12]
  4050a2:	609e      	str	r6, [r3, #8]
  4050a4:	f000 f97e 	bl	4053a4 <__malloc_unlock>
  4050a8:	e6bc      	b.n	404e24 <_malloc_r+0x18c>
  4050aa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4050ae:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4050b2:	00c3      	lsls	r3, r0, #3
  4050b4:	e612      	b.n	404cdc <_malloc_r+0x44>
  4050b6:	099a      	lsrs	r2, r3, #6
  4050b8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4050bc:	00c9      	lsls	r1, r1, #3
  4050be:	3238      	adds	r2, #56	; 0x38
  4050c0:	e7a4      	b.n	40500c <_malloc_r+0x374>
  4050c2:	42bc      	cmp	r4, r7
  4050c4:	d054      	beq.n	405170 <_malloc_r+0x4d8>
  4050c6:	68bc      	ldr	r4, [r7, #8]
  4050c8:	6862      	ldr	r2, [r4, #4]
  4050ca:	f022 0203 	bic.w	r2, r2, #3
  4050ce:	e75d      	b.n	404f8c <_malloc_r+0x2f4>
  4050d0:	f859 3908 	ldr.w	r3, [r9], #-8
  4050d4:	4599      	cmp	r9, r3
  4050d6:	f040 8086 	bne.w	4051e6 <_malloc_r+0x54e>
  4050da:	f010 0f03 	tst.w	r0, #3
  4050de:	f100 30ff 	add.w	r0, r0, #4294967295
  4050e2:	d1f5      	bne.n	4050d0 <_malloc_r+0x438>
  4050e4:	687b      	ldr	r3, [r7, #4]
  4050e6:	ea23 0304 	bic.w	r3, r3, r4
  4050ea:	607b      	str	r3, [r7, #4]
  4050ec:	0064      	lsls	r4, r4, #1
  4050ee:	429c      	cmp	r4, r3
  4050f0:	f63f aec7 	bhi.w	404e82 <_malloc_r+0x1ea>
  4050f4:	2c00      	cmp	r4, #0
  4050f6:	f43f aec4 	beq.w	404e82 <_malloc_r+0x1ea>
  4050fa:	421c      	tst	r4, r3
  4050fc:	4640      	mov	r0, r8
  4050fe:	f47f ae3e 	bne.w	404d7e <_malloc_r+0xe6>
  405102:	0064      	lsls	r4, r4, #1
  405104:	421c      	tst	r4, r3
  405106:	f100 0004 	add.w	r0, r0, #4
  40510a:	d0fa      	beq.n	405102 <_malloc_r+0x46a>
  40510c:	e637      	b.n	404d7e <_malloc_r+0xe6>
  40510e:	468c      	mov	ip, r1
  405110:	e78c      	b.n	40502c <_malloc_r+0x394>
  405112:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  405116:	d815      	bhi.n	405144 <_malloc_r+0x4ac>
  405118:	0bf3      	lsrs	r3, r6, #15
  40511a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40511e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  405122:	00c3      	lsls	r3, r0, #3
  405124:	e5da      	b.n	404cdc <_malloc_r+0x44>
  405126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40512a:	e6ed      	b.n	404f08 <_malloc_r+0x270>
  40512c:	687b      	ldr	r3, [r7, #4]
  40512e:	1092      	asrs	r2, r2, #2
  405130:	2101      	movs	r1, #1
  405132:	fa01 f202 	lsl.w	r2, r1, r2
  405136:	4313      	orrs	r3, r2
  405138:	607b      	str	r3, [r7, #4]
  40513a:	4662      	mov	r2, ip
  40513c:	e779      	b.n	405032 <_malloc_r+0x39a>
  40513e:	2301      	movs	r3, #1
  405140:	6053      	str	r3, [r2, #4]
  405142:	e729      	b.n	404f98 <_malloc_r+0x300>
  405144:	f240 5254 	movw	r2, #1364	; 0x554
  405148:	4293      	cmp	r3, r2
  40514a:	d822      	bhi.n	405192 <_malloc_r+0x4fa>
  40514c:	0cb3      	lsrs	r3, r6, #18
  40514e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  405152:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  405156:	00c3      	lsls	r3, r0, #3
  405158:	e5c0      	b.n	404cdc <_malloc_r+0x44>
  40515a:	f103 0b10 	add.w	fp, r3, #16
  40515e:	e6ae      	b.n	404ebe <_malloc_r+0x226>
  405160:	2a54      	cmp	r2, #84	; 0x54
  405162:	d829      	bhi.n	4051b8 <_malloc_r+0x520>
  405164:	0b1a      	lsrs	r2, r3, #12
  405166:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40516a:	00c9      	lsls	r1, r1, #3
  40516c:	326e      	adds	r2, #110	; 0x6e
  40516e:	e74d      	b.n	40500c <_malloc_r+0x374>
  405170:	4b20      	ldr	r3, [pc, #128]	; (4051f4 <_malloc_r+0x55c>)
  405172:	6819      	ldr	r1, [r3, #0]
  405174:	4459      	add	r1, fp
  405176:	6019      	str	r1, [r3, #0]
  405178:	e6b2      	b.n	404ee0 <_malloc_r+0x248>
  40517a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40517e:	2800      	cmp	r0, #0
  405180:	f47f aeae 	bne.w	404ee0 <_malloc_r+0x248>
  405184:	eb08 030b 	add.w	r3, r8, fp
  405188:	68ba      	ldr	r2, [r7, #8]
  40518a:	f043 0301 	orr.w	r3, r3, #1
  40518e:	6053      	str	r3, [r2, #4]
  405190:	e6ee      	b.n	404f70 <_malloc_r+0x2d8>
  405192:	207f      	movs	r0, #127	; 0x7f
  405194:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  405198:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40519c:	e59e      	b.n	404cdc <_malloc_r+0x44>
  40519e:	f104 0108 	add.w	r1, r4, #8
  4051a2:	4628      	mov	r0, r5
  4051a4:	9300      	str	r3, [sp, #0]
  4051a6:	f7ff fc7f 	bl	404aa8 <_free_r>
  4051aa:	9b00      	ldr	r3, [sp, #0]
  4051ac:	6819      	ldr	r1, [r3, #0]
  4051ae:	e6df      	b.n	404f70 <_malloc_r+0x2d8>
  4051b0:	2001      	movs	r0, #1
  4051b2:	f04f 0900 	mov.w	r9, #0
  4051b6:	e6bc      	b.n	404f32 <_malloc_r+0x29a>
  4051b8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4051bc:	d805      	bhi.n	4051ca <_malloc_r+0x532>
  4051be:	0bda      	lsrs	r2, r3, #15
  4051c0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4051c4:	00c9      	lsls	r1, r1, #3
  4051c6:	3277      	adds	r2, #119	; 0x77
  4051c8:	e720      	b.n	40500c <_malloc_r+0x374>
  4051ca:	f240 5154 	movw	r1, #1364	; 0x554
  4051ce:	428a      	cmp	r2, r1
  4051d0:	d805      	bhi.n	4051de <_malloc_r+0x546>
  4051d2:	0c9a      	lsrs	r2, r3, #18
  4051d4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4051d8:	00c9      	lsls	r1, r1, #3
  4051da:	327c      	adds	r2, #124	; 0x7c
  4051dc:	e716      	b.n	40500c <_malloc_r+0x374>
  4051de:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4051e2:	227e      	movs	r2, #126	; 0x7e
  4051e4:	e712      	b.n	40500c <_malloc_r+0x374>
  4051e6:	687b      	ldr	r3, [r7, #4]
  4051e8:	e780      	b.n	4050ec <_malloc_r+0x454>
  4051ea:	08f0      	lsrs	r0, r6, #3
  4051ec:	f106 0308 	add.w	r3, r6, #8
  4051f0:	e600      	b.n	404df4 <_malloc_r+0x15c>
  4051f2:	bf00      	nop
  4051f4:	20400cfc 	.word	0x20400cfc

004051f8 <__ascii_mbtowc>:
  4051f8:	b082      	sub	sp, #8
  4051fa:	b149      	cbz	r1, 405210 <__ascii_mbtowc+0x18>
  4051fc:	b15a      	cbz	r2, 405216 <__ascii_mbtowc+0x1e>
  4051fe:	b16b      	cbz	r3, 40521c <__ascii_mbtowc+0x24>
  405200:	7813      	ldrb	r3, [r2, #0]
  405202:	600b      	str	r3, [r1, #0]
  405204:	7812      	ldrb	r2, [r2, #0]
  405206:	1c10      	adds	r0, r2, #0
  405208:	bf18      	it	ne
  40520a:	2001      	movne	r0, #1
  40520c:	b002      	add	sp, #8
  40520e:	4770      	bx	lr
  405210:	a901      	add	r1, sp, #4
  405212:	2a00      	cmp	r2, #0
  405214:	d1f3      	bne.n	4051fe <__ascii_mbtowc+0x6>
  405216:	4610      	mov	r0, r2
  405218:	b002      	add	sp, #8
  40521a:	4770      	bx	lr
  40521c:	f06f 0001 	mvn.w	r0, #1
  405220:	e7f4      	b.n	40520c <__ascii_mbtowc+0x14>
  405222:	bf00      	nop
	...

00405230 <memchr>:
  405230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405234:	2a10      	cmp	r2, #16
  405236:	db2b      	blt.n	405290 <memchr+0x60>
  405238:	f010 0f07 	tst.w	r0, #7
  40523c:	d008      	beq.n	405250 <memchr+0x20>
  40523e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405242:	3a01      	subs	r2, #1
  405244:	428b      	cmp	r3, r1
  405246:	d02d      	beq.n	4052a4 <memchr+0x74>
  405248:	f010 0f07 	tst.w	r0, #7
  40524c:	b342      	cbz	r2, 4052a0 <memchr+0x70>
  40524e:	d1f6      	bne.n	40523e <memchr+0xe>
  405250:	b4f0      	push	{r4, r5, r6, r7}
  405252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40525a:	f022 0407 	bic.w	r4, r2, #7
  40525e:	f07f 0700 	mvns.w	r7, #0
  405262:	2300      	movs	r3, #0
  405264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405268:	3c08      	subs	r4, #8
  40526a:	ea85 0501 	eor.w	r5, r5, r1
  40526e:	ea86 0601 	eor.w	r6, r6, r1
  405272:	fa85 f547 	uadd8	r5, r5, r7
  405276:	faa3 f587 	sel	r5, r3, r7
  40527a:	fa86 f647 	uadd8	r6, r6, r7
  40527e:	faa5 f687 	sel	r6, r5, r7
  405282:	b98e      	cbnz	r6, 4052a8 <memchr+0x78>
  405284:	d1ee      	bne.n	405264 <memchr+0x34>
  405286:	bcf0      	pop	{r4, r5, r6, r7}
  405288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40528c:	f002 0207 	and.w	r2, r2, #7
  405290:	b132      	cbz	r2, 4052a0 <memchr+0x70>
  405292:	f810 3b01 	ldrb.w	r3, [r0], #1
  405296:	3a01      	subs	r2, #1
  405298:	ea83 0301 	eor.w	r3, r3, r1
  40529c:	b113      	cbz	r3, 4052a4 <memchr+0x74>
  40529e:	d1f8      	bne.n	405292 <memchr+0x62>
  4052a0:	2000      	movs	r0, #0
  4052a2:	4770      	bx	lr
  4052a4:	3801      	subs	r0, #1
  4052a6:	4770      	bx	lr
  4052a8:	2d00      	cmp	r5, #0
  4052aa:	bf06      	itte	eq
  4052ac:	4635      	moveq	r5, r6
  4052ae:	3803      	subeq	r0, #3
  4052b0:	3807      	subne	r0, #7
  4052b2:	f015 0f01 	tst.w	r5, #1
  4052b6:	d107      	bne.n	4052c8 <memchr+0x98>
  4052b8:	3001      	adds	r0, #1
  4052ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4052be:	bf02      	ittt	eq
  4052c0:	3001      	addeq	r0, #1
  4052c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4052c6:	3001      	addeq	r0, #1
  4052c8:	bcf0      	pop	{r4, r5, r6, r7}
  4052ca:	3801      	subs	r0, #1
  4052cc:	4770      	bx	lr
  4052ce:	bf00      	nop

004052d0 <memmove>:
  4052d0:	4288      	cmp	r0, r1
  4052d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4052d4:	d90d      	bls.n	4052f2 <memmove+0x22>
  4052d6:	188b      	adds	r3, r1, r2
  4052d8:	4298      	cmp	r0, r3
  4052da:	d20a      	bcs.n	4052f2 <memmove+0x22>
  4052dc:	1884      	adds	r4, r0, r2
  4052de:	2a00      	cmp	r2, #0
  4052e0:	d051      	beq.n	405386 <memmove+0xb6>
  4052e2:	4622      	mov	r2, r4
  4052e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4052e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4052ec:	4299      	cmp	r1, r3
  4052ee:	d1f9      	bne.n	4052e4 <memmove+0x14>
  4052f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4052f2:	2a0f      	cmp	r2, #15
  4052f4:	d948      	bls.n	405388 <memmove+0xb8>
  4052f6:	ea41 0300 	orr.w	r3, r1, r0
  4052fa:	079b      	lsls	r3, r3, #30
  4052fc:	d146      	bne.n	40538c <memmove+0xbc>
  4052fe:	f100 0410 	add.w	r4, r0, #16
  405302:	f101 0310 	add.w	r3, r1, #16
  405306:	4615      	mov	r5, r2
  405308:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40530c:	f844 6c10 	str.w	r6, [r4, #-16]
  405310:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405314:	f844 6c0c 	str.w	r6, [r4, #-12]
  405318:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40531c:	f844 6c08 	str.w	r6, [r4, #-8]
  405320:	3d10      	subs	r5, #16
  405322:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405326:	f844 6c04 	str.w	r6, [r4, #-4]
  40532a:	2d0f      	cmp	r5, #15
  40532c:	f103 0310 	add.w	r3, r3, #16
  405330:	f104 0410 	add.w	r4, r4, #16
  405334:	d8e8      	bhi.n	405308 <memmove+0x38>
  405336:	f1a2 0310 	sub.w	r3, r2, #16
  40533a:	f023 030f 	bic.w	r3, r3, #15
  40533e:	f002 0e0f 	and.w	lr, r2, #15
  405342:	3310      	adds	r3, #16
  405344:	f1be 0f03 	cmp.w	lr, #3
  405348:	4419      	add	r1, r3
  40534a:	4403      	add	r3, r0
  40534c:	d921      	bls.n	405392 <memmove+0xc2>
  40534e:	1f1e      	subs	r6, r3, #4
  405350:	460d      	mov	r5, r1
  405352:	4674      	mov	r4, lr
  405354:	3c04      	subs	r4, #4
  405356:	f855 7b04 	ldr.w	r7, [r5], #4
  40535a:	f846 7f04 	str.w	r7, [r6, #4]!
  40535e:	2c03      	cmp	r4, #3
  405360:	d8f8      	bhi.n	405354 <memmove+0x84>
  405362:	f1ae 0404 	sub.w	r4, lr, #4
  405366:	f024 0403 	bic.w	r4, r4, #3
  40536a:	3404      	adds	r4, #4
  40536c:	4421      	add	r1, r4
  40536e:	4423      	add	r3, r4
  405370:	f002 0203 	and.w	r2, r2, #3
  405374:	b162      	cbz	r2, 405390 <memmove+0xc0>
  405376:	3b01      	subs	r3, #1
  405378:	440a      	add	r2, r1
  40537a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40537e:	f803 4f01 	strb.w	r4, [r3, #1]!
  405382:	428a      	cmp	r2, r1
  405384:	d1f9      	bne.n	40537a <memmove+0xaa>
  405386:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405388:	4603      	mov	r3, r0
  40538a:	e7f3      	b.n	405374 <memmove+0xa4>
  40538c:	4603      	mov	r3, r0
  40538e:	e7f2      	b.n	405376 <memmove+0xa6>
  405390:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405392:	4672      	mov	r2, lr
  405394:	e7ee      	b.n	405374 <memmove+0xa4>
  405396:	bf00      	nop

00405398 <__malloc_lock>:
  405398:	4801      	ldr	r0, [pc, #4]	; (4053a0 <__malloc_lock+0x8>)
  40539a:	f7ff bc79 	b.w	404c90 <__retarget_lock_acquire_recursive>
  40539e:	bf00      	nop
  4053a0:	20400d40 	.word	0x20400d40

004053a4 <__malloc_unlock>:
  4053a4:	4801      	ldr	r0, [pc, #4]	; (4053ac <__malloc_unlock+0x8>)
  4053a6:	f7ff bc75 	b.w	404c94 <__retarget_lock_release_recursive>
  4053aa:	bf00      	nop
  4053ac:	20400d40 	.word	0x20400d40

004053b0 <_Balloc>:
  4053b0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4053b2:	b570      	push	{r4, r5, r6, lr}
  4053b4:	4605      	mov	r5, r0
  4053b6:	460c      	mov	r4, r1
  4053b8:	b14b      	cbz	r3, 4053ce <_Balloc+0x1e>
  4053ba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4053be:	b180      	cbz	r0, 4053e2 <_Balloc+0x32>
  4053c0:	6802      	ldr	r2, [r0, #0]
  4053c2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4053c6:	2300      	movs	r3, #0
  4053c8:	6103      	str	r3, [r0, #16]
  4053ca:	60c3      	str	r3, [r0, #12]
  4053cc:	bd70      	pop	{r4, r5, r6, pc}
  4053ce:	2221      	movs	r2, #33	; 0x21
  4053d0:	2104      	movs	r1, #4
  4053d2:	f000 fd8d 	bl	405ef0 <_calloc_r>
  4053d6:	64e8      	str	r0, [r5, #76]	; 0x4c
  4053d8:	4603      	mov	r3, r0
  4053da:	2800      	cmp	r0, #0
  4053dc:	d1ed      	bne.n	4053ba <_Balloc+0xa>
  4053de:	2000      	movs	r0, #0
  4053e0:	bd70      	pop	{r4, r5, r6, pc}
  4053e2:	2101      	movs	r1, #1
  4053e4:	fa01 f604 	lsl.w	r6, r1, r4
  4053e8:	1d72      	adds	r2, r6, #5
  4053ea:	4628      	mov	r0, r5
  4053ec:	0092      	lsls	r2, r2, #2
  4053ee:	f000 fd7f 	bl	405ef0 <_calloc_r>
  4053f2:	2800      	cmp	r0, #0
  4053f4:	d0f3      	beq.n	4053de <_Balloc+0x2e>
  4053f6:	6044      	str	r4, [r0, #4]
  4053f8:	6086      	str	r6, [r0, #8]
  4053fa:	e7e4      	b.n	4053c6 <_Balloc+0x16>

004053fc <_Bfree>:
  4053fc:	b131      	cbz	r1, 40540c <_Bfree+0x10>
  4053fe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  405400:	684a      	ldr	r2, [r1, #4]
  405402:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  405406:	6008      	str	r0, [r1, #0]
  405408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40540c:	4770      	bx	lr
  40540e:	bf00      	nop

00405410 <__multadd>:
  405410:	b5f0      	push	{r4, r5, r6, r7, lr}
  405412:	690c      	ldr	r4, [r1, #16]
  405414:	b083      	sub	sp, #12
  405416:	460d      	mov	r5, r1
  405418:	4606      	mov	r6, r0
  40541a:	f101 0e14 	add.w	lr, r1, #20
  40541e:	2700      	movs	r7, #0
  405420:	f8de 0000 	ldr.w	r0, [lr]
  405424:	b281      	uxth	r1, r0
  405426:	fb02 3301 	mla	r3, r2, r1, r3
  40542a:	0c01      	lsrs	r1, r0, #16
  40542c:	0c18      	lsrs	r0, r3, #16
  40542e:	fb02 0101 	mla	r1, r2, r1, r0
  405432:	b29b      	uxth	r3, r3
  405434:	3701      	adds	r7, #1
  405436:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40543a:	42bc      	cmp	r4, r7
  40543c:	f84e 3b04 	str.w	r3, [lr], #4
  405440:	ea4f 4311 	mov.w	r3, r1, lsr #16
  405444:	dcec      	bgt.n	405420 <__multadd+0x10>
  405446:	b13b      	cbz	r3, 405458 <__multadd+0x48>
  405448:	68aa      	ldr	r2, [r5, #8]
  40544a:	4294      	cmp	r4, r2
  40544c:	da07      	bge.n	40545e <__multadd+0x4e>
  40544e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  405452:	3401      	adds	r4, #1
  405454:	6153      	str	r3, [r2, #20]
  405456:	612c      	str	r4, [r5, #16]
  405458:	4628      	mov	r0, r5
  40545a:	b003      	add	sp, #12
  40545c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40545e:	6869      	ldr	r1, [r5, #4]
  405460:	9301      	str	r3, [sp, #4]
  405462:	3101      	adds	r1, #1
  405464:	4630      	mov	r0, r6
  405466:	f7ff ffa3 	bl	4053b0 <_Balloc>
  40546a:	692a      	ldr	r2, [r5, #16]
  40546c:	3202      	adds	r2, #2
  40546e:	f105 010c 	add.w	r1, r5, #12
  405472:	4607      	mov	r7, r0
  405474:	0092      	lsls	r2, r2, #2
  405476:	300c      	adds	r0, #12
  405478:	f7fc ff1e 	bl	4022b8 <memcpy>
  40547c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40547e:	6869      	ldr	r1, [r5, #4]
  405480:	9b01      	ldr	r3, [sp, #4]
  405482:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  405486:	6028      	str	r0, [r5, #0]
  405488:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40548c:	463d      	mov	r5, r7
  40548e:	e7de      	b.n	40544e <__multadd+0x3e>

00405490 <__hi0bits>:
  405490:	0c02      	lsrs	r2, r0, #16
  405492:	0412      	lsls	r2, r2, #16
  405494:	4603      	mov	r3, r0
  405496:	b9b2      	cbnz	r2, 4054c6 <__hi0bits+0x36>
  405498:	0403      	lsls	r3, r0, #16
  40549a:	2010      	movs	r0, #16
  40549c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  4054a0:	bf04      	itt	eq
  4054a2:	021b      	lsleq	r3, r3, #8
  4054a4:	3008      	addeq	r0, #8
  4054a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4054aa:	bf04      	itt	eq
  4054ac:	011b      	lsleq	r3, r3, #4
  4054ae:	3004      	addeq	r0, #4
  4054b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4054b4:	bf04      	itt	eq
  4054b6:	009b      	lsleq	r3, r3, #2
  4054b8:	3002      	addeq	r0, #2
  4054ba:	2b00      	cmp	r3, #0
  4054bc:	db02      	blt.n	4054c4 <__hi0bits+0x34>
  4054be:	005b      	lsls	r3, r3, #1
  4054c0:	d403      	bmi.n	4054ca <__hi0bits+0x3a>
  4054c2:	2020      	movs	r0, #32
  4054c4:	4770      	bx	lr
  4054c6:	2000      	movs	r0, #0
  4054c8:	e7e8      	b.n	40549c <__hi0bits+0xc>
  4054ca:	3001      	adds	r0, #1
  4054cc:	4770      	bx	lr
  4054ce:	bf00      	nop

004054d0 <__lo0bits>:
  4054d0:	6803      	ldr	r3, [r0, #0]
  4054d2:	f013 0207 	ands.w	r2, r3, #7
  4054d6:	4601      	mov	r1, r0
  4054d8:	d007      	beq.n	4054ea <__lo0bits+0x1a>
  4054da:	07da      	lsls	r2, r3, #31
  4054dc:	d421      	bmi.n	405522 <__lo0bits+0x52>
  4054de:	0798      	lsls	r0, r3, #30
  4054e0:	d421      	bmi.n	405526 <__lo0bits+0x56>
  4054e2:	089b      	lsrs	r3, r3, #2
  4054e4:	600b      	str	r3, [r1, #0]
  4054e6:	2002      	movs	r0, #2
  4054e8:	4770      	bx	lr
  4054ea:	b298      	uxth	r0, r3
  4054ec:	b198      	cbz	r0, 405516 <__lo0bits+0x46>
  4054ee:	4610      	mov	r0, r2
  4054f0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4054f4:	bf04      	itt	eq
  4054f6:	0a1b      	lsreq	r3, r3, #8
  4054f8:	3008      	addeq	r0, #8
  4054fa:	071a      	lsls	r2, r3, #28
  4054fc:	bf04      	itt	eq
  4054fe:	091b      	lsreq	r3, r3, #4
  405500:	3004      	addeq	r0, #4
  405502:	079a      	lsls	r2, r3, #30
  405504:	bf04      	itt	eq
  405506:	089b      	lsreq	r3, r3, #2
  405508:	3002      	addeq	r0, #2
  40550a:	07da      	lsls	r2, r3, #31
  40550c:	d407      	bmi.n	40551e <__lo0bits+0x4e>
  40550e:	085b      	lsrs	r3, r3, #1
  405510:	d104      	bne.n	40551c <__lo0bits+0x4c>
  405512:	2020      	movs	r0, #32
  405514:	4770      	bx	lr
  405516:	0c1b      	lsrs	r3, r3, #16
  405518:	2010      	movs	r0, #16
  40551a:	e7e9      	b.n	4054f0 <__lo0bits+0x20>
  40551c:	3001      	adds	r0, #1
  40551e:	600b      	str	r3, [r1, #0]
  405520:	4770      	bx	lr
  405522:	2000      	movs	r0, #0
  405524:	4770      	bx	lr
  405526:	085b      	lsrs	r3, r3, #1
  405528:	600b      	str	r3, [r1, #0]
  40552a:	2001      	movs	r0, #1
  40552c:	4770      	bx	lr
  40552e:	bf00      	nop

00405530 <__i2b>:
  405530:	b510      	push	{r4, lr}
  405532:	460c      	mov	r4, r1
  405534:	2101      	movs	r1, #1
  405536:	f7ff ff3b 	bl	4053b0 <_Balloc>
  40553a:	2201      	movs	r2, #1
  40553c:	6144      	str	r4, [r0, #20]
  40553e:	6102      	str	r2, [r0, #16]
  405540:	bd10      	pop	{r4, pc}
  405542:	bf00      	nop

00405544 <__multiply>:
  405544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405548:	690c      	ldr	r4, [r1, #16]
  40554a:	6915      	ldr	r5, [r2, #16]
  40554c:	42ac      	cmp	r4, r5
  40554e:	b083      	sub	sp, #12
  405550:	468b      	mov	fp, r1
  405552:	4616      	mov	r6, r2
  405554:	da04      	bge.n	405560 <__multiply+0x1c>
  405556:	4622      	mov	r2, r4
  405558:	46b3      	mov	fp, r6
  40555a:	462c      	mov	r4, r5
  40555c:	460e      	mov	r6, r1
  40555e:	4615      	mov	r5, r2
  405560:	f8db 3008 	ldr.w	r3, [fp, #8]
  405564:	f8db 1004 	ldr.w	r1, [fp, #4]
  405568:	eb04 0805 	add.w	r8, r4, r5
  40556c:	4598      	cmp	r8, r3
  40556e:	bfc8      	it	gt
  405570:	3101      	addgt	r1, #1
  405572:	f7ff ff1d 	bl	4053b0 <_Balloc>
  405576:	f100 0914 	add.w	r9, r0, #20
  40557a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40557e:	45d1      	cmp	r9, sl
  405580:	9000      	str	r0, [sp, #0]
  405582:	d205      	bcs.n	405590 <__multiply+0x4c>
  405584:	464b      	mov	r3, r9
  405586:	2100      	movs	r1, #0
  405588:	f843 1b04 	str.w	r1, [r3], #4
  40558c:	459a      	cmp	sl, r3
  40558e:	d8fb      	bhi.n	405588 <__multiply+0x44>
  405590:	f106 0c14 	add.w	ip, r6, #20
  405594:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  405598:	f10b 0b14 	add.w	fp, fp, #20
  40559c:	459c      	cmp	ip, r3
  40559e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  4055a2:	d24c      	bcs.n	40563e <__multiply+0xfa>
  4055a4:	f8cd a004 	str.w	sl, [sp, #4]
  4055a8:	469a      	mov	sl, r3
  4055aa:	f8dc 5000 	ldr.w	r5, [ip]
  4055ae:	b2af      	uxth	r7, r5
  4055b0:	b1ef      	cbz	r7, 4055ee <__multiply+0xaa>
  4055b2:	2100      	movs	r1, #0
  4055b4:	464d      	mov	r5, r9
  4055b6:	465e      	mov	r6, fp
  4055b8:	460c      	mov	r4, r1
  4055ba:	f856 2b04 	ldr.w	r2, [r6], #4
  4055be:	6828      	ldr	r0, [r5, #0]
  4055c0:	b293      	uxth	r3, r2
  4055c2:	b281      	uxth	r1, r0
  4055c4:	fb07 1303 	mla	r3, r7, r3, r1
  4055c8:	0c12      	lsrs	r2, r2, #16
  4055ca:	0c01      	lsrs	r1, r0, #16
  4055cc:	4423      	add	r3, r4
  4055ce:	fb07 1102 	mla	r1, r7, r2, r1
  4055d2:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4055d6:	b29b      	uxth	r3, r3
  4055d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4055dc:	45b6      	cmp	lr, r6
  4055de:	f845 3b04 	str.w	r3, [r5], #4
  4055e2:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4055e6:	d8e8      	bhi.n	4055ba <__multiply+0x76>
  4055e8:	602c      	str	r4, [r5, #0]
  4055ea:	f8dc 5000 	ldr.w	r5, [ip]
  4055ee:	0c2d      	lsrs	r5, r5, #16
  4055f0:	d01d      	beq.n	40562e <__multiply+0xea>
  4055f2:	f8d9 3000 	ldr.w	r3, [r9]
  4055f6:	4648      	mov	r0, r9
  4055f8:	461c      	mov	r4, r3
  4055fa:	4659      	mov	r1, fp
  4055fc:	2200      	movs	r2, #0
  4055fe:	880e      	ldrh	r6, [r1, #0]
  405600:	0c24      	lsrs	r4, r4, #16
  405602:	fb05 4406 	mla	r4, r5, r6, r4
  405606:	4422      	add	r2, r4
  405608:	b29b      	uxth	r3, r3
  40560a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40560e:	f840 3b04 	str.w	r3, [r0], #4
  405612:	f851 3b04 	ldr.w	r3, [r1], #4
  405616:	6804      	ldr	r4, [r0, #0]
  405618:	0c1b      	lsrs	r3, r3, #16
  40561a:	b2a6      	uxth	r6, r4
  40561c:	fb05 6303 	mla	r3, r5, r3, r6
  405620:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  405624:	458e      	cmp	lr, r1
  405626:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40562a:	d8e8      	bhi.n	4055fe <__multiply+0xba>
  40562c:	6003      	str	r3, [r0, #0]
  40562e:	f10c 0c04 	add.w	ip, ip, #4
  405632:	45e2      	cmp	sl, ip
  405634:	f109 0904 	add.w	r9, r9, #4
  405638:	d8b7      	bhi.n	4055aa <__multiply+0x66>
  40563a:	f8dd a004 	ldr.w	sl, [sp, #4]
  40563e:	f1b8 0f00 	cmp.w	r8, #0
  405642:	dd0b      	ble.n	40565c <__multiply+0x118>
  405644:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  405648:	f1aa 0a04 	sub.w	sl, sl, #4
  40564c:	b11b      	cbz	r3, 405656 <__multiply+0x112>
  40564e:	e005      	b.n	40565c <__multiply+0x118>
  405650:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  405654:	b913      	cbnz	r3, 40565c <__multiply+0x118>
  405656:	f1b8 0801 	subs.w	r8, r8, #1
  40565a:	d1f9      	bne.n	405650 <__multiply+0x10c>
  40565c:	9800      	ldr	r0, [sp, #0]
  40565e:	f8c0 8010 	str.w	r8, [r0, #16]
  405662:	b003      	add	sp, #12
  405664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405668 <__pow5mult>:
  405668:	f012 0303 	ands.w	r3, r2, #3
  40566c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405670:	4614      	mov	r4, r2
  405672:	4607      	mov	r7, r0
  405674:	d12e      	bne.n	4056d4 <__pow5mult+0x6c>
  405676:	460d      	mov	r5, r1
  405678:	10a4      	asrs	r4, r4, #2
  40567a:	d01c      	beq.n	4056b6 <__pow5mult+0x4e>
  40567c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40567e:	b396      	cbz	r6, 4056e6 <__pow5mult+0x7e>
  405680:	07e3      	lsls	r3, r4, #31
  405682:	f04f 0800 	mov.w	r8, #0
  405686:	d406      	bmi.n	405696 <__pow5mult+0x2e>
  405688:	1064      	asrs	r4, r4, #1
  40568a:	d014      	beq.n	4056b6 <__pow5mult+0x4e>
  40568c:	6830      	ldr	r0, [r6, #0]
  40568e:	b1a8      	cbz	r0, 4056bc <__pow5mult+0x54>
  405690:	4606      	mov	r6, r0
  405692:	07e3      	lsls	r3, r4, #31
  405694:	d5f8      	bpl.n	405688 <__pow5mult+0x20>
  405696:	4632      	mov	r2, r6
  405698:	4629      	mov	r1, r5
  40569a:	4638      	mov	r0, r7
  40569c:	f7ff ff52 	bl	405544 <__multiply>
  4056a0:	b1b5      	cbz	r5, 4056d0 <__pow5mult+0x68>
  4056a2:	686a      	ldr	r2, [r5, #4]
  4056a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4056a6:	1064      	asrs	r4, r4, #1
  4056a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4056ac:	6029      	str	r1, [r5, #0]
  4056ae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4056b2:	4605      	mov	r5, r0
  4056b4:	d1ea      	bne.n	40568c <__pow5mult+0x24>
  4056b6:	4628      	mov	r0, r5
  4056b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4056bc:	4632      	mov	r2, r6
  4056be:	4631      	mov	r1, r6
  4056c0:	4638      	mov	r0, r7
  4056c2:	f7ff ff3f 	bl	405544 <__multiply>
  4056c6:	6030      	str	r0, [r6, #0]
  4056c8:	f8c0 8000 	str.w	r8, [r0]
  4056cc:	4606      	mov	r6, r0
  4056ce:	e7e0      	b.n	405692 <__pow5mult+0x2a>
  4056d0:	4605      	mov	r5, r0
  4056d2:	e7d9      	b.n	405688 <__pow5mult+0x20>
  4056d4:	1e5a      	subs	r2, r3, #1
  4056d6:	4d0b      	ldr	r5, [pc, #44]	; (405704 <__pow5mult+0x9c>)
  4056d8:	2300      	movs	r3, #0
  4056da:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4056de:	f7ff fe97 	bl	405410 <__multadd>
  4056e2:	4605      	mov	r5, r0
  4056e4:	e7c8      	b.n	405678 <__pow5mult+0x10>
  4056e6:	2101      	movs	r1, #1
  4056e8:	4638      	mov	r0, r7
  4056ea:	f7ff fe61 	bl	4053b0 <_Balloc>
  4056ee:	f240 2171 	movw	r1, #625	; 0x271
  4056f2:	2201      	movs	r2, #1
  4056f4:	2300      	movs	r3, #0
  4056f6:	6141      	str	r1, [r0, #20]
  4056f8:	6102      	str	r2, [r0, #16]
  4056fa:	4606      	mov	r6, r0
  4056fc:	64b8      	str	r0, [r7, #72]	; 0x48
  4056fe:	6003      	str	r3, [r0, #0]
  405700:	e7be      	b.n	405680 <__pow5mult+0x18>
  405702:	bf00      	nop
  405704:	00407770 	.word	0x00407770

00405708 <__lshift>:
  405708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40570c:	4691      	mov	r9, r2
  40570e:	690a      	ldr	r2, [r1, #16]
  405710:	688b      	ldr	r3, [r1, #8]
  405712:	ea4f 1469 	mov.w	r4, r9, asr #5
  405716:	eb04 0802 	add.w	r8, r4, r2
  40571a:	f108 0501 	add.w	r5, r8, #1
  40571e:	429d      	cmp	r5, r3
  405720:	460e      	mov	r6, r1
  405722:	4607      	mov	r7, r0
  405724:	6849      	ldr	r1, [r1, #4]
  405726:	dd04      	ble.n	405732 <__lshift+0x2a>
  405728:	005b      	lsls	r3, r3, #1
  40572a:	429d      	cmp	r5, r3
  40572c:	f101 0101 	add.w	r1, r1, #1
  405730:	dcfa      	bgt.n	405728 <__lshift+0x20>
  405732:	4638      	mov	r0, r7
  405734:	f7ff fe3c 	bl	4053b0 <_Balloc>
  405738:	2c00      	cmp	r4, #0
  40573a:	f100 0314 	add.w	r3, r0, #20
  40573e:	dd06      	ble.n	40574e <__lshift+0x46>
  405740:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  405744:	2100      	movs	r1, #0
  405746:	f843 1b04 	str.w	r1, [r3], #4
  40574a:	429a      	cmp	r2, r3
  40574c:	d1fb      	bne.n	405746 <__lshift+0x3e>
  40574e:	6934      	ldr	r4, [r6, #16]
  405750:	f106 0114 	add.w	r1, r6, #20
  405754:	f019 091f 	ands.w	r9, r9, #31
  405758:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40575c:	d01d      	beq.n	40579a <__lshift+0x92>
  40575e:	f1c9 0c20 	rsb	ip, r9, #32
  405762:	2200      	movs	r2, #0
  405764:	680c      	ldr	r4, [r1, #0]
  405766:	fa04 f409 	lsl.w	r4, r4, r9
  40576a:	4314      	orrs	r4, r2
  40576c:	f843 4b04 	str.w	r4, [r3], #4
  405770:	f851 2b04 	ldr.w	r2, [r1], #4
  405774:	458e      	cmp	lr, r1
  405776:	fa22 f20c 	lsr.w	r2, r2, ip
  40577a:	d8f3      	bhi.n	405764 <__lshift+0x5c>
  40577c:	601a      	str	r2, [r3, #0]
  40577e:	b10a      	cbz	r2, 405784 <__lshift+0x7c>
  405780:	f108 0502 	add.w	r5, r8, #2
  405784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  405786:	6872      	ldr	r2, [r6, #4]
  405788:	3d01      	subs	r5, #1
  40578a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40578e:	6105      	str	r5, [r0, #16]
  405790:	6031      	str	r1, [r6, #0]
  405792:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  405796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40579a:	3b04      	subs	r3, #4
  40579c:	f851 2b04 	ldr.w	r2, [r1], #4
  4057a0:	f843 2f04 	str.w	r2, [r3, #4]!
  4057a4:	458e      	cmp	lr, r1
  4057a6:	d8f9      	bhi.n	40579c <__lshift+0x94>
  4057a8:	e7ec      	b.n	405784 <__lshift+0x7c>
  4057aa:	bf00      	nop

004057ac <__mcmp>:
  4057ac:	b430      	push	{r4, r5}
  4057ae:	690b      	ldr	r3, [r1, #16]
  4057b0:	4605      	mov	r5, r0
  4057b2:	6900      	ldr	r0, [r0, #16]
  4057b4:	1ac0      	subs	r0, r0, r3
  4057b6:	d10f      	bne.n	4057d8 <__mcmp+0x2c>
  4057b8:	009b      	lsls	r3, r3, #2
  4057ba:	3514      	adds	r5, #20
  4057bc:	3114      	adds	r1, #20
  4057be:	4419      	add	r1, r3
  4057c0:	442b      	add	r3, r5
  4057c2:	e001      	b.n	4057c8 <__mcmp+0x1c>
  4057c4:	429d      	cmp	r5, r3
  4057c6:	d207      	bcs.n	4057d8 <__mcmp+0x2c>
  4057c8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4057cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4057d0:	4294      	cmp	r4, r2
  4057d2:	d0f7      	beq.n	4057c4 <__mcmp+0x18>
  4057d4:	d302      	bcc.n	4057dc <__mcmp+0x30>
  4057d6:	2001      	movs	r0, #1
  4057d8:	bc30      	pop	{r4, r5}
  4057da:	4770      	bx	lr
  4057dc:	f04f 30ff 	mov.w	r0, #4294967295
  4057e0:	e7fa      	b.n	4057d8 <__mcmp+0x2c>
  4057e2:	bf00      	nop

004057e4 <__mdiff>:
  4057e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4057e8:	690f      	ldr	r7, [r1, #16]
  4057ea:	460e      	mov	r6, r1
  4057ec:	6911      	ldr	r1, [r2, #16]
  4057ee:	1a7f      	subs	r7, r7, r1
  4057f0:	2f00      	cmp	r7, #0
  4057f2:	4690      	mov	r8, r2
  4057f4:	d117      	bne.n	405826 <__mdiff+0x42>
  4057f6:	0089      	lsls	r1, r1, #2
  4057f8:	f106 0514 	add.w	r5, r6, #20
  4057fc:	f102 0e14 	add.w	lr, r2, #20
  405800:	186b      	adds	r3, r5, r1
  405802:	4471      	add	r1, lr
  405804:	e001      	b.n	40580a <__mdiff+0x26>
  405806:	429d      	cmp	r5, r3
  405808:	d25c      	bcs.n	4058c4 <__mdiff+0xe0>
  40580a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40580e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  405812:	42a2      	cmp	r2, r4
  405814:	d0f7      	beq.n	405806 <__mdiff+0x22>
  405816:	d25e      	bcs.n	4058d6 <__mdiff+0xf2>
  405818:	4633      	mov	r3, r6
  40581a:	462c      	mov	r4, r5
  40581c:	4646      	mov	r6, r8
  40581e:	4675      	mov	r5, lr
  405820:	4698      	mov	r8, r3
  405822:	2701      	movs	r7, #1
  405824:	e005      	b.n	405832 <__mdiff+0x4e>
  405826:	db58      	blt.n	4058da <__mdiff+0xf6>
  405828:	f106 0514 	add.w	r5, r6, #20
  40582c:	f108 0414 	add.w	r4, r8, #20
  405830:	2700      	movs	r7, #0
  405832:	6871      	ldr	r1, [r6, #4]
  405834:	f7ff fdbc 	bl	4053b0 <_Balloc>
  405838:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40583c:	6936      	ldr	r6, [r6, #16]
  40583e:	60c7      	str	r7, [r0, #12]
  405840:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  405844:	46a6      	mov	lr, r4
  405846:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40584a:	f100 0414 	add.w	r4, r0, #20
  40584e:	2300      	movs	r3, #0
  405850:	f85e 1b04 	ldr.w	r1, [lr], #4
  405854:	f855 8b04 	ldr.w	r8, [r5], #4
  405858:	b28a      	uxth	r2, r1
  40585a:	fa13 f388 	uxtah	r3, r3, r8
  40585e:	0c09      	lsrs	r1, r1, #16
  405860:	1a9a      	subs	r2, r3, r2
  405862:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  405866:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40586a:	b292      	uxth	r2, r2
  40586c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405870:	45f4      	cmp	ip, lr
  405872:	f844 2b04 	str.w	r2, [r4], #4
  405876:	ea4f 4323 	mov.w	r3, r3, asr #16
  40587a:	d8e9      	bhi.n	405850 <__mdiff+0x6c>
  40587c:	42af      	cmp	r7, r5
  40587e:	d917      	bls.n	4058b0 <__mdiff+0xcc>
  405880:	46a4      	mov	ip, r4
  405882:	46ae      	mov	lr, r5
  405884:	f85e 2b04 	ldr.w	r2, [lr], #4
  405888:	fa13 f382 	uxtah	r3, r3, r2
  40588c:	1419      	asrs	r1, r3, #16
  40588e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  405892:	b29b      	uxth	r3, r3
  405894:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  405898:	4577      	cmp	r7, lr
  40589a:	f84c 2b04 	str.w	r2, [ip], #4
  40589e:	ea4f 4321 	mov.w	r3, r1, asr #16
  4058a2:	d8ef      	bhi.n	405884 <__mdiff+0xa0>
  4058a4:	43ed      	mvns	r5, r5
  4058a6:	442f      	add	r7, r5
  4058a8:	f027 0703 	bic.w	r7, r7, #3
  4058ac:	3704      	adds	r7, #4
  4058ae:	443c      	add	r4, r7
  4058b0:	3c04      	subs	r4, #4
  4058b2:	b922      	cbnz	r2, 4058be <__mdiff+0xda>
  4058b4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4058b8:	3e01      	subs	r6, #1
  4058ba:	2b00      	cmp	r3, #0
  4058bc:	d0fa      	beq.n	4058b4 <__mdiff+0xd0>
  4058be:	6106      	str	r6, [r0, #16]
  4058c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4058c4:	2100      	movs	r1, #0
  4058c6:	f7ff fd73 	bl	4053b0 <_Balloc>
  4058ca:	2201      	movs	r2, #1
  4058cc:	2300      	movs	r3, #0
  4058ce:	6102      	str	r2, [r0, #16]
  4058d0:	6143      	str	r3, [r0, #20]
  4058d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4058d6:	4674      	mov	r4, lr
  4058d8:	e7ab      	b.n	405832 <__mdiff+0x4e>
  4058da:	4633      	mov	r3, r6
  4058dc:	f106 0414 	add.w	r4, r6, #20
  4058e0:	f102 0514 	add.w	r5, r2, #20
  4058e4:	4616      	mov	r6, r2
  4058e6:	2701      	movs	r7, #1
  4058e8:	4698      	mov	r8, r3
  4058ea:	e7a2      	b.n	405832 <__mdiff+0x4e>

004058ec <__d2b>:
  4058ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4058f0:	b082      	sub	sp, #8
  4058f2:	2101      	movs	r1, #1
  4058f4:	461c      	mov	r4, r3
  4058f6:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4058fa:	4615      	mov	r5, r2
  4058fc:	9e08      	ldr	r6, [sp, #32]
  4058fe:	f7ff fd57 	bl	4053b0 <_Balloc>
  405902:	f3c4 0413 	ubfx	r4, r4, #0, #20
  405906:	4680      	mov	r8, r0
  405908:	b10f      	cbz	r7, 40590e <__d2b+0x22>
  40590a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40590e:	9401      	str	r4, [sp, #4]
  405910:	b31d      	cbz	r5, 40595a <__d2b+0x6e>
  405912:	a802      	add	r0, sp, #8
  405914:	f840 5d08 	str.w	r5, [r0, #-8]!
  405918:	f7ff fdda 	bl	4054d0 <__lo0bits>
  40591c:	2800      	cmp	r0, #0
  40591e:	d134      	bne.n	40598a <__d2b+0x9e>
  405920:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405924:	f8c8 2014 	str.w	r2, [r8, #20]
  405928:	2b00      	cmp	r3, #0
  40592a:	bf0c      	ite	eq
  40592c:	2101      	moveq	r1, #1
  40592e:	2102      	movne	r1, #2
  405930:	f8c8 3018 	str.w	r3, [r8, #24]
  405934:	f8c8 1010 	str.w	r1, [r8, #16]
  405938:	b9df      	cbnz	r7, 405972 <__d2b+0x86>
  40593a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40593e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  405942:	6030      	str	r0, [r6, #0]
  405944:	6918      	ldr	r0, [r3, #16]
  405946:	f7ff fda3 	bl	405490 <__hi0bits>
  40594a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40594c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  405950:	6018      	str	r0, [r3, #0]
  405952:	4640      	mov	r0, r8
  405954:	b002      	add	sp, #8
  405956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40595a:	a801      	add	r0, sp, #4
  40595c:	f7ff fdb8 	bl	4054d0 <__lo0bits>
  405960:	9b01      	ldr	r3, [sp, #4]
  405962:	f8c8 3014 	str.w	r3, [r8, #20]
  405966:	2101      	movs	r1, #1
  405968:	3020      	adds	r0, #32
  40596a:	f8c8 1010 	str.w	r1, [r8, #16]
  40596e:	2f00      	cmp	r7, #0
  405970:	d0e3      	beq.n	40593a <__d2b+0x4e>
  405972:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405974:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  405978:	4407      	add	r7, r0
  40597a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40597e:	6037      	str	r7, [r6, #0]
  405980:	6018      	str	r0, [r3, #0]
  405982:	4640      	mov	r0, r8
  405984:	b002      	add	sp, #8
  405986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40598a:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40598e:	f1c0 0220 	rsb	r2, r0, #32
  405992:	fa03 f202 	lsl.w	r2, r3, r2
  405996:	430a      	orrs	r2, r1
  405998:	40c3      	lsrs	r3, r0
  40599a:	9301      	str	r3, [sp, #4]
  40599c:	f8c8 2014 	str.w	r2, [r8, #20]
  4059a0:	e7c2      	b.n	405928 <__d2b+0x3c>
  4059a2:	bf00      	nop

004059a4 <_realloc_r>:
  4059a4:	2900      	cmp	r1, #0
  4059a6:	f000 8095 	beq.w	405ad4 <_realloc_r+0x130>
  4059aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4059ae:	460d      	mov	r5, r1
  4059b0:	4616      	mov	r6, r2
  4059b2:	b083      	sub	sp, #12
  4059b4:	4680      	mov	r8, r0
  4059b6:	f106 070b 	add.w	r7, r6, #11
  4059ba:	f7ff fced 	bl	405398 <__malloc_lock>
  4059be:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4059c2:	2f16      	cmp	r7, #22
  4059c4:	f02e 0403 	bic.w	r4, lr, #3
  4059c8:	f1a5 0908 	sub.w	r9, r5, #8
  4059cc:	d83c      	bhi.n	405a48 <_realloc_r+0xa4>
  4059ce:	2210      	movs	r2, #16
  4059d0:	4617      	mov	r7, r2
  4059d2:	42be      	cmp	r6, r7
  4059d4:	d83d      	bhi.n	405a52 <_realloc_r+0xae>
  4059d6:	4294      	cmp	r4, r2
  4059d8:	da43      	bge.n	405a62 <_realloc_r+0xbe>
  4059da:	4bc4      	ldr	r3, [pc, #784]	; (405cec <_realloc_r+0x348>)
  4059dc:	6899      	ldr	r1, [r3, #8]
  4059de:	eb09 0004 	add.w	r0, r9, r4
  4059e2:	4288      	cmp	r0, r1
  4059e4:	f000 80b4 	beq.w	405b50 <_realloc_r+0x1ac>
  4059e8:	6843      	ldr	r3, [r0, #4]
  4059ea:	f023 0101 	bic.w	r1, r3, #1
  4059ee:	4401      	add	r1, r0
  4059f0:	6849      	ldr	r1, [r1, #4]
  4059f2:	07c9      	lsls	r1, r1, #31
  4059f4:	d54c      	bpl.n	405a90 <_realloc_r+0xec>
  4059f6:	f01e 0f01 	tst.w	lr, #1
  4059fa:	f000 809b 	beq.w	405b34 <_realloc_r+0x190>
  4059fe:	4631      	mov	r1, r6
  405a00:	4640      	mov	r0, r8
  405a02:	f7ff f949 	bl	404c98 <_malloc_r>
  405a06:	4606      	mov	r6, r0
  405a08:	2800      	cmp	r0, #0
  405a0a:	d03a      	beq.n	405a82 <_realloc_r+0xde>
  405a0c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405a10:	f023 0301 	bic.w	r3, r3, #1
  405a14:	444b      	add	r3, r9
  405a16:	f1a0 0208 	sub.w	r2, r0, #8
  405a1a:	429a      	cmp	r2, r3
  405a1c:	f000 8121 	beq.w	405c62 <_realloc_r+0x2be>
  405a20:	1f22      	subs	r2, r4, #4
  405a22:	2a24      	cmp	r2, #36	; 0x24
  405a24:	f200 8107 	bhi.w	405c36 <_realloc_r+0x292>
  405a28:	2a13      	cmp	r2, #19
  405a2a:	f200 80db 	bhi.w	405be4 <_realloc_r+0x240>
  405a2e:	4603      	mov	r3, r0
  405a30:	462a      	mov	r2, r5
  405a32:	6811      	ldr	r1, [r2, #0]
  405a34:	6019      	str	r1, [r3, #0]
  405a36:	6851      	ldr	r1, [r2, #4]
  405a38:	6059      	str	r1, [r3, #4]
  405a3a:	6892      	ldr	r2, [r2, #8]
  405a3c:	609a      	str	r2, [r3, #8]
  405a3e:	4629      	mov	r1, r5
  405a40:	4640      	mov	r0, r8
  405a42:	f7ff f831 	bl	404aa8 <_free_r>
  405a46:	e01c      	b.n	405a82 <_realloc_r+0xde>
  405a48:	f027 0707 	bic.w	r7, r7, #7
  405a4c:	2f00      	cmp	r7, #0
  405a4e:	463a      	mov	r2, r7
  405a50:	dabf      	bge.n	4059d2 <_realloc_r+0x2e>
  405a52:	2600      	movs	r6, #0
  405a54:	230c      	movs	r3, #12
  405a56:	4630      	mov	r0, r6
  405a58:	f8c8 3000 	str.w	r3, [r8]
  405a5c:	b003      	add	sp, #12
  405a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a62:	462e      	mov	r6, r5
  405a64:	1be3      	subs	r3, r4, r7
  405a66:	2b0f      	cmp	r3, #15
  405a68:	d81e      	bhi.n	405aa8 <_realloc_r+0x104>
  405a6a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405a6e:	f003 0301 	and.w	r3, r3, #1
  405a72:	4323      	orrs	r3, r4
  405a74:	444c      	add	r4, r9
  405a76:	f8c9 3004 	str.w	r3, [r9, #4]
  405a7a:	6863      	ldr	r3, [r4, #4]
  405a7c:	f043 0301 	orr.w	r3, r3, #1
  405a80:	6063      	str	r3, [r4, #4]
  405a82:	4640      	mov	r0, r8
  405a84:	f7ff fc8e 	bl	4053a4 <__malloc_unlock>
  405a88:	4630      	mov	r0, r6
  405a8a:	b003      	add	sp, #12
  405a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a90:	f023 0303 	bic.w	r3, r3, #3
  405a94:	18e1      	adds	r1, r4, r3
  405a96:	4291      	cmp	r1, r2
  405a98:	db1f      	blt.n	405ada <_realloc_r+0x136>
  405a9a:	68c3      	ldr	r3, [r0, #12]
  405a9c:	6882      	ldr	r2, [r0, #8]
  405a9e:	462e      	mov	r6, r5
  405aa0:	60d3      	str	r3, [r2, #12]
  405aa2:	460c      	mov	r4, r1
  405aa4:	609a      	str	r2, [r3, #8]
  405aa6:	e7dd      	b.n	405a64 <_realloc_r+0xc0>
  405aa8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405aac:	eb09 0107 	add.w	r1, r9, r7
  405ab0:	f002 0201 	and.w	r2, r2, #1
  405ab4:	444c      	add	r4, r9
  405ab6:	f043 0301 	orr.w	r3, r3, #1
  405aba:	4317      	orrs	r7, r2
  405abc:	f8c9 7004 	str.w	r7, [r9, #4]
  405ac0:	604b      	str	r3, [r1, #4]
  405ac2:	6863      	ldr	r3, [r4, #4]
  405ac4:	f043 0301 	orr.w	r3, r3, #1
  405ac8:	3108      	adds	r1, #8
  405aca:	6063      	str	r3, [r4, #4]
  405acc:	4640      	mov	r0, r8
  405ace:	f7fe ffeb 	bl	404aa8 <_free_r>
  405ad2:	e7d6      	b.n	405a82 <_realloc_r+0xde>
  405ad4:	4611      	mov	r1, r2
  405ad6:	f7ff b8df 	b.w	404c98 <_malloc_r>
  405ada:	f01e 0f01 	tst.w	lr, #1
  405ade:	d18e      	bne.n	4059fe <_realloc_r+0x5a>
  405ae0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405ae4:	eba9 0a01 	sub.w	sl, r9, r1
  405ae8:	f8da 1004 	ldr.w	r1, [sl, #4]
  405aec:	f021 0103 	bic.w	r1, r1, #3
  405af0:	440b      	add	r3, r1
  405af2:	4423      	add	r3, r4
  405af4:	4293      	cmp	r3, r2
  405af6:	db25      	blt.n	405b44 <_realloc_r+0x1a0>
  405af8:	68c2      	ldr	r2, [r0, #12]
  405afa:	6881      	ldr	r1, [r0, #8]
  405afc:	4656      	mov	r6, sl
  405afe:	60ca      	str	r2, [r1, #12]
  405b00:	6091      	str	r1, [r2, #8]
  405b02:	f8da 100c 	ldr.w	r1, [sl, #12]
  405b06:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405b0a:	1f22      	subs	r2, r4, #4
  405b0c:	2a24      	cmp	r2, #36	; 0x24
  405b0e:	60c1      	str	r1, [r0, #12]
  405b10:	6088      	str	r0, [r1, #8]
  405b12:	f200 8094 	bhi.w	405c3e <_realloc_r+0x29a>
  405b16:	2a13      	cmp	r2, #19
  405b18:	d96f      	bls.n	405bfa <_realloc_r+0x256>
  405b1a:	6829      	ldr	r1, [r5, #0]
  405b1c:	f8ca 1008 	str.w	r1, [sl, #8]
  405b20:	6869      	ldr	r1, [r5, #4]
  405b22:	f8ca 100c 	str.w	r1, [sl, #12]
  405b26:	2a1b      	cmp	r2, #27
  405b28:	f200 80a2 	bhi.w	405c70 <_realloc_r+0x2cc>
  405b2c:	3508      	adds	r5, #8
  405b2e:	f10a 0210 	add.w	r2, sl, #16
  405b32:	e063      	b.n	405bfc <_realloc_r+0x258>
  405b34:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405b38:	eba9 0a03 	sub.w	sl, r9, r3
  405b3c:	f8da 1004 	ldr.w	r1, [sl, #4]
  405b40:	f021 0103 	bic.w	r1, r1, #3
  405b44:	1863      	adds	r3, r4, r1
  405b46:	4293      	cmp	r3, r2
  405b48:	f6ff af59 	blt.w	4059fe <_realloc_r+0x5a>
  405b4c:	4656      	mov	r6, sl
  405b4e:	e7d8      	b.n	405b02 <_realloc_r+0x15e>
  405b50:	6841      	ldr	r1, [r0, #4]
  405b52:	f021 0b03 	bic.w	fp, r1, #3
  405b56:	44a3      	add	fp, r4
  405b58:	f107 0010 	add.w	r0, r7, #16
  405b5c:	4583      	cmp	fp, r0
  405b5e:	da56      	bge.n	405c0e <_realloc_r+0x26a>
  405b60:	f01e 0f01 	tst.w	lr, #1
  405b64:	f47f af4b 	bne.w	4059fe <_realloc_r+0x5a>
  405b68:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405b6c:	eba9 0a01 	sub.w	sl, r9, r1
  405b70:	f8da 1004 	ldr.w	r1, [sl, #4]
  405b74:	f021 0103 	bic.w	r1, r1, #3
  405b78:	448b      	add	fp, r1
  405b7a:	4558      	cmp	r0, fp
  405b7c:	dce2      	bgt.n	405b44 <_realloc_r+0x1a0>
  405b7e:	4656      	mov	r6, sl
  405b80:	f8da 100c 	ldr.w	r1, [sl, #12]
  405b84:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405b88:	1f22      	subs	r2, r4, #4
  405b8a:	2a24      	cmp	r2, #36	; 0x24
  405b8c:	60c1      	str	r1, [r0, #12]
  405b8e:	6088      	str	r0, [r1, #8]
  405b90:	f200 808f 	bhi.w	405cb2 <_realloc_r+0x30e>
  405b94:	2a13      	cmp	r2, #19
  405b96:	f240 808a 	bls.w	405cae <_realloc_r+0x30a>
  405b9a:	6829      	ldr	r1, [r5, #0]
  405b9c:	f8ca 1008 	str.w	r1, [sl, #8]
  405ba0:	6869      	ldr	r1, [r5, #4]
  405ba2:	f8ca 100c 	str.w	r1, [sl, #12]
  405ba6:	2a1b      	cmp	r2, #27
  405ba8:	f200 808a 	bhi.w	405cc0 <_realloc_r+0x31c>
  405bac:	3508      	adds	r5, #8
  405bae:	f10a 0210 	add.w	r2, sl, #16
  405bb2:	6829      	ldr	r1, [r5, #0]
  405bb4:	6011      	str	r1, [r2, #0]
  405bb6:	6869      	ldr	r1, [r5, #4]
  405bb8:	6051      	str	r1, [r2, #4]
  405bba:	68a9      	ldr	r1, [r5, #8]
  405bbc:	6091      	str	r1, [r2, #8]
  405bbe:	eb0a 0107 	add.w	r1, sl, r7
  405bc2:	ebab 0207 	sub.w	r2, fp, r7
  405bc6:	f042 0201 	orr.w	r2, r2, #1
  405bca:	6099      	str	r1, [r3, #8]
  405bcc:	604a      	str	r2, [r1, #4]
  405bce:	f8da 3004 	ldr.w	r3, [sl, #4]
  405bd2:	f003 0301 	and.w	r3, r3, #1
  405bd6:	431f      	orrs	r7, r3
  405bd8:	4640      	mov	r0, r8
  405bda:	f8ca 7004 	str.w	r7, [sl, #4]
  405bde:	f7ff fbe1 	bl	4053a4 <__malloc_unlock>
  405be2:	e751      	b.n	405a88 <_realloc_r+0xe4>
  405be4:	682b      	ldr	r3, [r5, #0]
  405be6:	6003      	str	r3, [r0, #0]
  405be8:	686b      	ldr	r3, [r5, #4]
  405bea:	6043      	str	r3, [r0, #4]
  405bec:	2a1b      	cmp	r2, #27
  405bee:	d82d      	bhi.n	405c4c <_realloc_r+0x2a8>
  405bf0:	f100 0308 	add.w	r3, r0, #8
  405bf4:	f105 0208 	add.w	r2, r5, #8
  405bf8:	e71b      	b.n	405a32 <_realloc_r+0x8e>
  405bfa:	4632      	mov	r2, r6
  405bfc:	6829      	ldr	r1, [r5, #0]
  405bfe:	6011      	str	r1, [r2, #0]
  405c00:	6869      	ldr	r1, [r5, #4]
  405c02:	6051      	str	r1, [r2, #4]
  405c04:	68a9      	ldr	r1, [r5, #8]
  405c06:	6091      	str	r1, [r2, #8]
  405c08:	461c      	mov	r4, r3
  405c0a:	46d1      	mov	r9, sl
  405c0c:	e72a      	b.n	405a64 <_realloc_r+0xc0>
  405c0e:	eb09 0107 	add.w	r1, r9, r7
  405c12:	ebab 0b07 	sub.w	fp, fp, r7
  405c16:	f04b 0201 	orr.w	r2, fp, #1
  405c1a:	6099      	str	r1, [r3, #8]
  405c1c:	604a      	str	r2, [r1, #4]
  405c1e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405c22:	f003 0301 	and.w	r3, r3, #1
  405c26:	431f      	orrs	r7, r3
  405c28:	4640      	mov	r0, r8
  405c2a:	f845 7c04 	str.w	r7, [r5, #-4]
  405c2e:	f7ff fbb9 	bl	4053a4 <__malloc_unlock>
  405c32:	462e      	mov	r6, r5
  405c34:	e728      	b.n	405a88 <_realloc_r+0xe4>
  405c36:	4629      	mov	r1, r5
  405c38:	f7ff fb4a 	bl	4052d0 <memmove>
  405c3c:	e6ff      	b.n	405a3e <_realloc_r+0x9a>
  405c3e:	4629      	mov	r1, r5
  405c40:	4630      	mov	r0, r6
  405c42:	461c      	mov	r4, r3
  405c44:	46d1      	mov	r9, sl
  405c46:	f7ff fb43 	bl	4052d0 <memmove>
  405c4a:	e70b      	b.n	405a64 <_realloc_r+0xc0>
  405c4c:	68ab      	ldr	r3, [r5, #8]
  405c4e:	6083      	str	r3, [r0, #8]
  405c50:	68eb      	ldr	r3, [r5, #12]
  405c52:	60c3      	str	r3, [r0, #12]
  405c54:	2a24      	cmp	r2, #36	; 0x24
  405c56:	d017      	beq.n	405c88 <_realloc_r+0x2e4>
  405c58:	f100 0310 	add.w	r3, r0, #16
  405c5c:	f105 0210 	add.w	r2, r5, #16
  405c60:	e6e7      	b.n	405a32 <_realloc_r+0x8e>
  405c62:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405c66:	f023 0303 	bic.w	r3, r3, #3
  405c6a:	441c      	add	r4, r3
  405c6c:	462e      	mov	r6, r5
  405c6e:	e6f9      	b.n	405a64 <_realloc_r+0xc0>
  405c70:	68a9      	ldr	r1, [r5, #8]
  405c72:	f8ca 1010 	str.w	r1, [sl, #16]
  405c76:	68e9      	ldr	r1, [r5, #12]
  405c78:	f8ca 1014 	str.w	r1, [sl, #20]
  405c7c:	2a24      	cmp	r2, #36	; 0x24
  405c7e:	d00c      	beq.n	405c9a <_realloc_r+0x2f6>
  405c80:	3510      	adds	r5, #16
  405c82:	f10a 0218 	add.w	r2, sl, #24
  405c86:	e7b9      	b.n	405bfc <_realloc_r+0x258>
  405c88:	692b      	ldr	r3, [r5, #16]
  405c8a:	6103      	str	r3, [r0, #16]
  405c8c:	696b      	ldr	r3, [r5, #20]
  405c8e:	6143      	str	r3, [r0, #20]
  405c90:	f105 0218 	add.w	r2, r5, #24
  405c94:	f100 0318 	add.w	r3, r0, #24
  405c98:	e6cb      	b.n	405a32 <_realloc_r+0x8e>
  405c9a:	692a      	ldr	r2, [r5, #16]
  405c9c:	f8ca 2018 	str.w	r2, [sl, #24]
  405ca0:	696a      	ldr	r2, [r5, #20]
  405ca2:	f8ca 201c 	str.w	r2, [sl, #28]
  405ca6:	3518      	adds	r5, #24
  405ca8:	f10a 0220 	add.w	r2, sl, #32
  405cac:	e7a6      	b.n	405bfc <_realloc_r+0x258>
  405cae:	4632      	mov	r2, r6
  405cb0:	e77f      	b.n	405bb2 <_realloc_r+0x20e>
  405cb2:	4629      	mov	r1, r5
  405cb4:	4630      	mov	r0, r6
  405cb6:	9301      	str	r3, [sp, #4]
  405cb8:	f7ff fb0a 	bl	4052d0 <memmove>
  405cbc:	9b01      	ldr	r3, [sp, #4]
  405cbe:	e77e      	b.n	405bbe <_realloc_r+0x21a>
  405cc0:	68a9      	ldr	r1, [r5, #8]
  405cc2:	f8ca 1010 	str.w	r1, [sl, #16]
  405cc6:	68e9      	ldr	r1, [r5, #12]
  405cc8:	f8ca 1014 	str.w	r1, [sl, #20]
  405ccc:	2a24      	cmp	r2, #36	; 0x24
  405cce:	d003      	beq.n	405cd8 <_realloc_r+0x334>
  405cd0:	3510      	adds	r5, #16
  405cd2:	f10a 0218 	add.w	r2, sl, #24
  405cd6:	e76c      	b.n	405bb2 <_realloc_r+0x20e>
  405cd8:	692a      	ldr	r2, [r5, #16]
  405cda:	f8ca 2018 	str.w	r2, [sl, #24]
  405cde:	696a      	ldr	r2, [r5, #20]
  405ce0:	f8ca 201c 	str.w	r2, [sl, #28]
  405ce4:	3518      	adds	r5, #24
  405ce6:	f10a 0220 	add.w	r2, sl, #32
  405cea:	e762      	b.n	405bb2 <_realloc_r+0x20e>
  405cec:	204005c0 	.word	0x204005c0

00405cf0 <_sbrk_r>:
  405cf0:	b538      	push	{r3, r4, r5, lr}
  405cf2:	4c07      	ldr	r4, [pc, #28]	; (405d10 <_sbrk_r+0x20>)
  405cf4:	2300      	movs	r3, #0
  405cf6:	4605      	mov	r5, r0
  405cf8:	4608      	mov	r0, r1
  405cfa:	6023      	str	r3, [r4, #0]
  405cfc:	f7fb ffb4 	bl	401c68 <_sbrk>
  405d00:	1c43      	adds	r3, r0, #1
  405d02:	d000      	beq.n	405d06 <_sbrk_r+0x16>
  405d04:	bd38      	pop	{r3, r4, r5, pc}
  405d06:	6823      	ldr	r3, [r4, #0]
  405d08:	2b00      	cmp	r3, #0
  405d0a:	d0fb      	beq.n	405d04 <_sbrk_r+0x14>
  405d0c:	602b      	str	r3, [r5, #0]
  405d0e:	bd38      	pop	{r3, r4, r5, pc}
  405d10:	20400d54 	.word	0x20400d54

00405d14 <__ssprint_r>:
  405d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d18:	6893      	ldr	r3, [r2, #8]
  405d1a:	b083      	sub	sp, #12
  405d1c:	4690      	mov	r8, r2
  405d1e:	2b00      	cmp	r3, #0
  405d20:	d070      	beq.n	405e04 <__ssprint_r+0xf0>
  405d22:	4682      	mov	sl, r0
  405d24:	460c      	mov	r4, r1
  405d26:	6817      	ldr	r7, [r2, #0]
  405d28:	688d      	ldr	r5, [r1, #8]
  405d2a:	6808      	ldr	r0, [r1, #0]
  405d2c:	e042      	b.n	405db4 <__ssprint_r+0xa0>
  405d2e:	89a3      	ldrh	r3, [r4, #12]
  405d30:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405d34:	d02e      	beq.n	405d94 <__ssprint_r+0x80>
  405d36:	6965      	ldr	r5, [r4, #20]
  405d38:	6921      	ldr	r1, [r4, #16]
  405d3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  405d3e:	eba0 0b01 	sub.w	fp, r0, r1
  405d42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  405d46:	f10b 0001 	add.w	r0, fp, #1
  405d4a:	106d      	asrs	r5, r5, #1
  405d4c:	4430      	add	r0, r6
  405d4e:	42a8      	cmp	r0, r5
  405d50:	462a      	mov	r2, r5
  405d52:	bf84      	itt	hi
  405d54:	4605      	movhi	r5, r0
  405d56:	462a      	movhi	r2, r5
  405d58:	055b      	lsls	r3, r3, #21
  405d5a:	d538      	bpl.n	405dce <__ssprint_r+0xba>
  405d5c:	4611      	mov	r1, r2
  405d5e:	4650      	mov	r0, sl
  405d60:	f7fe ff9a 	bl	404c98 <_malloc_r>
  405d64:	2800      	cmp	r0, #0
  405d66:	d03c      	beq.n	405de2 <__ssprint_r+0xce>
  405d68:	465a      	mov	r2, fp
  405d6a:	6921      	ldr	r1, [r4, #16]
  405d6c:	9001      	str	r0, [sp, #4]
  405d6e:	f7fc faa3 	bl	4022b8 <memcpy>
  405d72:	89a2      	ldrh	r2, [r4, #12]
  405d74:	9b01      	ldr	r3, [sp, #4]
  405d76:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  405d7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  405d7e:	81a2      	strh	r2, [r4, #12]
  405d80:	eba5 020b 	sub.w	r2, r5, fp
  405d84:	eb03 000b 	add.w	r0, r3, fp
  405d88:	6165      	str	r5, [r4, #20]
  405d8a:	6123      	str	r3, [r4, #16]
  405d8c:	6020      	str	r0, [r4, #0]
  405d8e:	60a2      	str	r2, [r4, #8]
  405d90:	4635      	mov	r5, r6
  405d92:	46b3      	mov	fp, r6
  405d94:	465a      	mov	r2, fp
  405d96:	4649      	mov	r1, r9
  405d98:	f7ff fa9a 	bl	4052d0 <memmove>
  405d9c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  405da0:	68a2      	ldr	r2, [r4, #8]
  405da2:	6820      	ldr	r0, [r4, #0]
  405da4:	1b55      	subs	r5, r2, r5
  405da6:	4458      	add	r0, fp
  405da8:	1b9e      	subs	r6, r3, r6
  405daa:	60a5      	str	r5, [r4, #8]
  405dac:	6020      	str	r0, [r4, #0]
  405dae:	f8c8 6008 	str.w	r6, [r8, #8]
  405db2:	b33e      	cbz	r6, 405e04 <__ssprint_r+0xf0>
  405db4:	687e      	ldr	r6, [r7, #4]
  405db6:	463b      	mov	r3, r7
  405db8:	3708      	adds	r7, #8
  405dba:	2e00      	cmp	r6, #0
  405dbc:	d0fa      	beq.n	405db4 <__ssprint_r+0xa0>
  405dbe:	42ae      	cmp	r6, r5
  405dc0:	f8d3 9000 	ldr.w	r9, [r3]
  405dc4:	46ab      	mov	fp, r5
  405dc6:	d2b2      	bcs.n	405d2e <__ssprint_r+0x1a>
  405dc8:	4635      	mov	r5, r6
  405dca:	46b3      	mov	fp, r6
  405dcc:	e7e2      	b.n	405d94 <__ssprint_r+0x80>
  405dce:	4650      	mov	r0, sl
  405dd0:	f7ff fde8 	bl	4059a4 <_realloc_r>
  405dd4:	4603      	mov	r3, r0
  405dd6:	2800      	cmp	r0, #0
  405dd8:	d1d2      	bne.n	405d80 <__ssprint_r+0x6c>
  405dda:	6921      	ldr	r1, [r4, #16]
  405ddc:	4650      	mov	r0, sl
  405dde:	f7fe fe63 	bl	404aa8 <_free_r>
  405de2:	230c      	movs	r3, #12
  405de4:	f8ca 3000 	str.w	r3, [sl]
  405de8:	89a3      	ldrh	r3, [r4, #12]
  405dea:	2200      	movs	r2, #0
  405dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405df0:	f04f 30ff 	mov.w	r0, #4294967295
  405df4:	81a3      	strh	r3, [r4, #12]
  405df6:	f8c8 2008 	str.w	r2, [r8, #8]
  405dfa:	f8c8 2004 	str.w	r2, [r8, #4]
  405dfe:	b003      	add	sp, #12
  405e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e04:	2000      	movs	r0, #0
  405e06:	f8c8 0004 	str.w	r0, [r8, #4]
  405e0a:	b003      	add	sp, #12
  405e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405e10 <__ascii_wctomb>:
  405e10:	b121      	cbz	r1, 405e1c <__ascii_wctomb+0xc>
  405e12:	2aff      	cmp	r2, #255	; 0xff
  405e14:	d804      	bhi.n	405e20 <__ascii_wctomb+0x10>
  405e16:	700a      	strb	r2, [r1, #0]
  405e18:	2001      	movs	r0, #1
  405e1a:	4770      	bx	lr
  405e1c:	4608      	mov	r0, r1
  405e1e:	4770      	bx	lr
  405e20:	238a      	movs	r3, #138	; 0x8a
  405e22:	6003      	str	r3, [r0, #0]
  405e24:	f04f 30ff 	mov.w	r0, #4294967295
  405e28:	4770      	bx	lr
  405e2a:	bf00      	nop

00405e2c <__register_exitproc>:
  405e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405e30:	4d2c      	ldr	r5, [pc, #176]	; (405ee4 <__register_exitproc+0xb8>)
  405e32:	4606      	mov	r6, r0
  405e34:	6828      	ldr	r0, [r5, #0]
  405e36:	4698      	mov	r8, r3
  405e38:	460f      	mov	r7, r1
  405e3a:	4691      	mov	r9, r2
  405e3c:	f7fe ff28 	bl	404c90 <__retarget_lock_acquire_recursive>
  405e40:	4b29      	ldr	r3, [pc, #164]	; (405ee8 <__register_exitproc+0xbc>)
  405e42:	681c      	ldr	r4, [r3, #0]
  405e44:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405e48:	2b00      	cmp	r3, #0
  405e4a:	d03e      	beq.n	405eca <__register_exitproc+0x9e>
  405e4c:	685a      	ldr	r2, [r3, #4]
  405e4e:	2a1f      	cmp	r2, #31
  405e50:	dc1c      	bgt.n	405e8c <__register_exitproc+0x60>
  405e52:	f102 0e01 	add.w	lr, r2, #1
  405e56:	b176      	cbz	r6, 405e76 <__register_exitproc+0x4a>
  405e58:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405e5c:	2401      	movs	r4, #1
  405e5e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  405e62:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  405e66:	4094      	lsls	r4, r2
  405e68:	4320      	orrs	r0, r4
  405e6a:	2e02      	cmp	r6, #2
  405e6c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  405e70:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  405e74:	d023      	beq.n	405ebe <__register_exitproc+0x92>
  405e76:	3202      	adds	r2, #2
  405e78:	f8c3 e004 	str.w	lr, [r3, #4]
  405e7c:	6828      	ldr	r0, [r5, #0]
  405e7e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  405e82:	f7fe ff07 	bl	404c94 <__retarget_lock_release_recursive>
  405e86:	2000      	movs	r0, #0
  405e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405e8c:	4b17      	ldr	r3, [pc, #92]	; (405eec <__register_exitproc+0xc0>)
  405e8e:	b30b      	cbz	r3, 405ed4 <__register_exitproc+0xa8>
  405e90:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405e94:	f3af 8000 	nop.w
  405e98:	4603      	mov	r3, r0
  405e9a:	b1d8      	cbz	r0, 405ed4 <__register_exitproc+0xa8>
  405e9c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  405ea0:	6002      	str	r2, [r0, #0]
  405ea2:	2100      	movs	r1, #0
  405ea4:	6041      	str	r1, [r0, #4]
  405ea6:	460a      	mov	r2, r1
  405ea8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405eac:	f04f 0e01 	mov.w	lr, #1
  405eb0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  405eb4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405eb8:	2e00      	cmp	r6, #0
  405eba:	d0dc      	beq.n	405e76 <__register_exitproc+0x4a>
  405ebc:	e7cc      	b.n	405e58 <__register_exitproc+0x2c>
  405ebe:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  405ec2:	430c      	orrs	r4, r1
  405ec4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405ec8:	e7d5      	b.n	405e76 <__register_exitproc+0x4a>
  405eca:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  405ece:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  405ed2:	e7bb      	b.n	405e4c <__register_exitproc+0x20>
  405ed4:	6828      	ldr	r0, [r5, #0]
  405ed6:	f7fe fedd 	bl	404c94 <__retarget_lock_release_recursive>
  405eda:	f04f 30ff 	mov.w	r0, #4294967295
  405ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405ee2:	bf00      	nop
  405ee4:	20400450 	.word	0x20400450
  405ee8:	004075f4 	.word	0x004075f4
  405eec:	00000000 	.word	0x00000000

00405ef0 <_calloc_r>:
  405ef0:	b510      	push	{r4, lr}
  405ef2:	fb02 f101 	mul.w	r1, r2, r1
  405ef6:	f7fe fecf 	bl	404c98 <_malloc_r>
  405efa:	4604      	mov	r4, r0
  405efc:	b1d8      	cbz	r0, 405f36 <_calloc_r+0x46>
  405efe:	f850 2c04 	ldr.w	r2, [r0, #-4]
  405f02:	f022 0203 	bic.w	r2, r2, #3
  405f06:	3a04      	subs	r2, #4
  405f08:	2a24      	cmp	r2, #36	; 0x24
  405f0a:	d818      	bhi.n	405f3e <_calloc_r+0x4e>
  405f0c:	2a13      	cmp	r2, #19
  405f0e:	d914      	bls.n	405f3a <_calloc_r+0x4a>
  405f10:	2300      	movs	r3, #0
  405f12:	2a1b      	cmp	r2, #27
  405f14:	6003      	str	r3, [r0, #0]
  405f16:	6043      	str	r3, [r0, #4]
  405f18:	d916      	bls.n	405f48 <_calloc_r+0x58>
  405f1a:	2a24      	cmp	r2, #36	; 0x24
  405f1c:	6083      	str	r3, [r0, #8]
  405f1e:	60c3      	str	r3, [r0, #12]
  405f20:	bf11      	iteee	ne
  405f22:	f100 0210 	addne.w	r2, r0, #16
  405f26:	6103      	streq	r3, [r0, #16]
  405f28:	6143      	streq	r3, [r0, #20]
  405f2a:	f100 0218 	addeq.w	r2, r0, #24
  405f2e:	2300      	movs	r3, #0
  405f30:	6013      	str	r3, [r2, #0]
  405f32:	6053      	str	r3, [r2, #4]
  405f34:	6093      	str	r3, [r2, #8]
  405f36:	4620      	mov	r0, r4
  405f38:	bd10      	pop	{r4, pc}
  405f3a:	4602      	mov	r2, r0
  405f3c:	e7f7      	b.n	405f2e <_calloc_r+0x3e>
  405f3e:	2100      	movs	r1, #0
  405f40:	f7fc fa54 	bl	4023ec <memset>
  405f44:	4620      	mov	r0, r4
  405f46:	bd10      	pop	{r4, pc}
  405f48:	f100 0208 	add.w	r2, r0, #8
  405f4c:	e7ef      	b.n	405f2e <_calloc_r+0x3e>
  405f4e:	bf00      	nop

00405f50 <__aeabi_drsub>:
  405f50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405f54:	e002      	b.n	405f5c <__adddf3>
  405f56:	bf00      	nop

00405f58 <__aeabi_dsub>:
  405f58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00405f5c <__adddf3>:
  405f5c:	b530      	push	{r4, r5, lr}
  405f5e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  405f62:	ea4f 0543 	mov.w	r5, r3, lsl #1
  405f66:	ea94 0f05 	teq	r4, r5
  405f6a:	bf08      	it	eq
  405f6c:	ea90 0f02 	teqeq	r0, r2
  405f70:	bf1f      	itttt	ne
  405f72:	ea54 0c00 	orrsne.w	ip, r4, r0
  405f76:	ea55 0c02 	orrsne.w	ip, r5, r2
  405f7a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  405f7e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405f82:	f000 80e2 	beq.w	40614a <__adddf3+0x1ee>
  405f86:	ea4f 5454 	mov.w	r4, r4, lsr #21
  405f8a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405f8e:	bfb8      	it	lt
  405f90:	426d      	neglt	r5, r5
  405f92:	dd0c      	ble.n	405fae <__adddf3+0x52>
  405f94:	442c      	add	r4, r5
  405f96:	ea80 0202 	eor.w	r2, r0, r2
  405f9a:	ea81 0303 	eor.w	r3, r1, r3
  405f9e:	ea82 0000 	eor.w	r0, r2, r0
  405fa2:	ea83 0101 	eor.w	r1, r3, r1
  405fa6:	ea80 0202 	eor.w	r2, r0, r2
  405faa:	ea81 0303 	eor.w	r3, r1, r3
  405fae:	2d36      	cmp	r5, #54	; 0x36
  405fb0:	bf88      	it	hi
  405fb2:	bd30      	pophi	{r4, r5, pc}
  405fb4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405fb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405fbc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405fc0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405fc4:	d002      	beq.n	405fcc <__adddf3+0x70>
  405fc6:	4240      	negs	r0, r0
  405fc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405fcc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405fd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405fd4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405fd8:	d002      	beq.n	405fe0 <__adddf3+0x84>
  405fda:	4252      	negs	r2, r2
  405fdc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405fe0:	ea94 0f05 	teq	r4, r5
  405fe4:	f000 80a7 	beq.w	406136 <__adddf3+0x1da>
  405fe8:	f1a4 0401 	sub.w	r4, r4, #1
  405fec:	f1d5 0e20 	rsbs	lr, r5, #32
  405ff0:	db0d      	blt.n	40600e <__adddf3+0xb2>
  405ff2:	fa02 fc0e 	lsl.w	ip, r2, lr
  405ff6:	fa22 f205 	lsr.w	r2, r2, r5
  405ffa:	1880      	adds	r0, r0, r2
  405ffc:	f141 0100 	adc.w	r1, r1, #0
  406000:	fa03 f20e 	lsl.w	r2, r3, lr
  406004:	1880      	adds	r0, r0, r2
  406006:	fa43 f305 	asr.w	r3, r3, r5
  40600a:	4159      	adcs	r1, r3
  40600c:	e00e      	b.n	40602c <__adddf3+0xd0>
  40600e:	f1a5 0520 	sub.w	r5, r5, #32
  406012:	f10e 0e20 	add.w	lr, lr, #32
  406016:	2a01      	cmp	r2, #1
  406018:	fa03 fc0e 	lsl.w	ip, r3, lr
  40601c:	bf28      	it	cs
  40601e:	f04c 0c02 	orrcs.w	ip, ip, #2
  406022:	fa43 f305 	asr.w	r3, r3, r5
  406026:	18c0      	adds	r0, r0, r3
  406028:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40602c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406030:	d507      	bpl.n	406042 <__adddf3+0xe6>
  406032:	f04f 0e00 	mov.w	lr, #0
  406036:	f1dc 0c00 	rsbs	ip, ip, #0
  40603a:	eb7e 0000 	sbcs.w	r0, lr, r0
  40603e:	eb6e 0101 	sbc.w	r1, lr, r1
  406042:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  406046:	d31b      	bcc.n	406080 <__adddf3+0x124>
  406048:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40604c:	d30c      	bcc.n	406068 <__adddf3+0x10c>
  40604e:	0849      	lsrs	r1, r1, #1
  406050:	ea5f 0030 	movs.w	r0, r0, rrx
  406054:	ea4f 0c3c 	mov.w	ip, ip, rrx
  406058:	f104 0401 	add.w	r4, r4, #1
  40605c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  406060:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  406064:	f080 809a 	bcs.w	40619c <__adddf3+0x240>
  406068:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40606c:	bf08      	it	eq
  40606e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406072:	f150 0000 	adcs.w	r0, r0, #0
  406076:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40607a:	ea41 0105 	orr.w	r1, r1, r5
  40607e:	bd30      	pop	{r4, r5, pc}
  406080:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  406084:	4140      	adcs	r0, r0
  406086:	eb41 0101 	adc.w	r1, r1, r1
  40608a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40608e:	f1a4 0401 	sub.w	r4, r4, #1
  406092:	d1e9      	bne.n	406068 <__adddf3+0x10c>
  406094:	f091 0f00 	teq	r1, #0
  406098:	bf04      	itt	eq
  40609a:	4601      	moveq	r1, r0
  40609c:	2000      	moveq	r0, #0
  40609e:	fab1 f381 	clz	r3, r1
  4060a2:	bf08      	it	eq
  4060a4:	3320      	addeq	r3, #32
  4060a6:	f1a3 030b 	sub.w	r3, r3, #11
  4060aa:	f1b3 0220 	subs.w	r2, r3, #32
  4060ae:	da0c      	bge.n	4060ca <__adddf3+0x16e>
  4060b0:	320c      	adds	r2, #12
  4060b2:	dd08      	ble.n	4060c6 <__adddf3+0x16a>
  4060b4:	f102 0c14 	add.w	ip, r2, #20
  4060b8:	f1c2 020c 	rsb	r2, r2, #12
  4060bc:	fa01 f00c 	lsl.w	r0, r1, ip
  4060c0:	fa21 f102 	lsr.w	r1, r1, r2
  4060c4:	e00c      	b.n	4060e0 <__adddf3+0x184>
  4060c6:	f102 0214 	add.w	r2, r2, #20
  4060ca:	bfd8      	it	le
  4060cc:	f1c2 0c20 	rsble	ip, r2, #32
  4060d0:	fa01 f102 	lsl.w	r1, r1, r2
  4060d4:	fa20 fc0c 	lsr.w	ip, r0, ip
  4060d8:	bfdc      	itt	le
  4060da:	ea41 010c 	orrle.w	r1, r1, ip
  4060de:	4090      	lslle	r0, r2
  4060e0:	1ae4      	subs	r4, r4, r3
  4060e2:	bfa2      	ittt	ge
  4060e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4060e8:	4329      	orrge	r1, r5
  4060ea:	bd30      	popge	{r4, r5, pc}
  4060ec:	ea6f 0404 	mvn.w	r4, r4
  4060f0:	3c1f      	subs	r4, #31
  4060f2:	da1c      	bge.n	40612e <__adddf3+0x1d2>
  4060f4:	340c      	adds	r4, #12
  4060f6:	dc0e      	bgt.n	406116 <__adddf3+0x1ba>
  4060f8:	f104 0414 	add.w	r4, r4, #20
  4060fc:	f1c4 0220 	rsb	r2, r4, #32
  406100:	fa20 f004 	lsr.w	r0, r0, r4
  406104:	fa01 f302 	lsl.w	r3, r1, r2
  406108:	ea40 0003 	orr.w	r0, r0, r3
  40610c:	fa21 f304 	lsr.w	r3, r1, r4
  406110:	ea45 0103 	orr.w	r1, r5, r3
  406114:	bd30      	pop	{r4, r5, pc}
  406116:	f1c4 040c 	rsb	r4, r4, #12
  40611a:	f1c4 0220 	rsb	r2, r4, #32
  40611e:	fa20 f002 	lsr.w	r0, r0, r2
  406122:	fa01 f304 	lsl.w	r3, r1, r4
  406126:	ea40 0003 	orr.w	r0, r0, r3
  40612a:	4629      	mov	r1, r5
  40612c:	bd30      	pop	{r4, r5, pc}
  40612e:	fa21 f004 	lsr.w	r0, r1, r4
  406132:	4629      	mov	r1, r5
  406134:	bd30      	pop	{r4, r5, pc}
  406136:	f094 0f00 	teq	r4, #0
  40613a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40613e:	bf06      	itte	eq
  406140:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  406144:	3401      	addeq	r4, #1
  406146:	3d01      	subne	r5, #1
  406148:	e74e      	b.n	405fe8 <__adddf3+0x8c>
  40614a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40614e:	bf18      	it	ne
  406150:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406154:	d029      	beq.n	4061aa <__adddf3+0x24e>
  406156:	ea94 0f05 	teq	r4, r5
  40615a:	bf08      	it	eq
  40615c:	ea90 0f02 	teqeq	r0, r2
  406160:	d005      	beq.n	40616e <__adddf3+0x212>
  406162:	ea54 0c00 	orrs.w	ip, r4, r0
  406166:	bf04      	itt	eq
  406168:	4619      	moveq	r1, r3
  40616a:	4610      	moveq	r0, r2
  40616c:	bd30      	pop	{r4, r5, pc}
  40616e:	ea91 0f03 	teq	r1, r3
  406172:	bf1e      	ittt	ne
  406174:	2100      	movne	r1, #0
  406176:	2000      	movne	r0, #0
  406178:	bd30      	popne	{r4, r5, pc}
  40617a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40617e:	d105      	bne.n	40618c <__adddf3+0x230>
  406180:	0040      	lsls	r0, r0, #1
  406182:	4149      	adcs	r1, r1
  406184:	bf28      	it	cs
  406186:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40618a:	bd30      	pop	{r4, r5, pc}
  40618c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  406190:	bf3c      	itt	cc
  406192:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  406196:	bd30      	popcc	{r4, r5, pc}
  406198:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40619c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4061a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4061a4:	f04f 0000 	mov.w	r0, #0
  4061a8:	bd30      	pop	{r4, r5, pc}
  4061aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4061ae:	bf1a      	itte	ne
  4061b0:	4619      	movne	r1, r3
  4061b2:	4610      	movne	r0, r2
  4061b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4061b8:	bf1c      	itt	ne
  4061ba:	460b      	movne	r3, r1
  4061bc:	4602      	movne	r2, r0
  4061be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4061c2:	bf06      	itte	eq
  4061c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4061c8:	ea91 0f03 	teqeq	r1, r3
  4061cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4061d0:	bd30      	pop	{r4, r5, pc}
  4061d2:	bf00      	nop

004061d4 <__aeabi_ui2d>:
  4061d4:	f090 0f00 	teq	r0, #0
  4061d8:	bf04      	itt	eq
  4061da:	2100      	moveq	r1, #0
  4061dc:	4770      	bxeq	lr
  4061de:	b530      	push	{r4, r5, lr}
  4061e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4061e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4061e8:	f04f 0500 	mov.w	r5, #0
  4061ec:	f04f 0100 	mov.w	r1, #0
  4061f0:	e750      	b.n	406094 <__adddf3+0x138>
  4061f2:	bf00      	nop

004061f4 <__aeabi_i2d>:
  4061f4:	f090 0f00 	teq	r0, #0
  4061f8:	bf04      	itt	eq
  4061fa:	2100      	moveq	r1, #0
  4061fc:	4770      	bxeq	lr
  4061fe:	b530      	push	{r4, r5, lr}
  406200:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406204:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406208:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40620c:	bf48      	it	mi
  40620e:	4240      	negmi	r0, r0
  406210:	f04f 0100 	mov.w	r1, #0
  406214:	e73e      	b.n	406094 <__adddf3+0x138>
  406216:	bf00      	nop

00406218 <__aeabi_f2d>:
  406218:	0042      	lsls	r2, r0, #1
  40621a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40621e:	ea4f 0131 	mov.w	r1, r1, rrx
  406222:	ea4f 7002 	mov.w	r0, r2, lsl #28
  406226:	bf1f      	itttt	ne
  406228:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40622c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  406230:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  406234:	4770      	bxne	lr
  406236:	f092 0f00 	teq	r2, #0
  40623a:	bf14      	ite	ne
  40623c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  406240:	4770      	bxeq	lr
  406242:	b530      	push	{r4, r5, lr}
  406244:	f44f 7460 	mov.w	r4, #896	; 0x380
  406248:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40624c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406250:	e720      	b.n	406094 <__adddf3+0x138>
  406252:	bf00      	nop

00406254 <__aeabi_ul2d>:
  406254:	ea50 0201 	orrs.w	r2, r0, r1
  406258:	bf08      	it	eq
  40625a:	4770      	bxeq	lr
  40625c:	b530      	push	{r4, r5, lr}
  40625e:	f04f 0500 	mov.w	r5, #0
  406262:	e00a      	b.n	40627a <__aeabi_l2d+0x16>

00406264 <__aeabi_l2d>:
  406264:	ea50 0201 	orrs.w	r2, r0, r1
  406268:	bf08      	it	eq
  40626a:	4770      	bxeq	lr
  40626c:	b530      	push	{r4, r5, lr}
  40626e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  406272:	d502      	bpl.n	40627a <__aeabi_l2d+0x16>
  406274:	4240      	negs	r0, r0
  406276:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40627a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40627e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406282:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  406286:	f43f aedc 	beq.w	406042 <__adddf3+0xe6>
  40628a:	f04f 0203 	mov.w	r2, #3
  40628e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  406292:	bf18      	it	ne
  406294:	3203      	addne	r2, #3
  406296:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40629a:	bf18      	it	ne
  40629c:	3203      	addne	r2, #3
  40629e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4062a2:	f1c2 0320 	rsb	r3, r2, #32
  4062a6:	fa00 fc03 	lsl.w	ip, r0, r3
  4062aa:	fa20 f002 	lsr.w	r0, r0, r2
  4062ae:	fa01 fe03 	lsl.w	lr, r1, r3
  4062b2:	ea40 000e 	orr.w	r0, r0, lr
  4062b6:	fa21 f102 	lsr.w	r1, r1, r2
  4062ba:	4414      	add	r4, r2
  4062bc:	e6c1      	b.n	406042 <__adddf3+0xe6>
  4062be:	bf00      	nop

004062c0 <__aeabi_dmul>:
  4062c0:	b570      	push	{r4, r5, r6, lr}
  4062c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4062c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4062ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4062ce:	bf1d      	ittte	ne
  4062d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4062d4:	ea94 0f0c 	teqne	r4, ip
  4062d8:	ea95 0f0c 	teqne	r5, ip
  4062dc:	f000 f8de 	bleq	40649c <__aeabi_dmul+0x1dc>
  4062e0:	442c      	add	r4, r5
  4062e2:	ea81 0603 	eor.w	r6, r1, r3
  4062e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4062ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4062ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4062f2:	bf18      	it	ne
  4062f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4062f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4062fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  406300:	d038      	beq.n	406374 <__aeabi_dmul+0xb4>
  406302:	fba0 ce02 	umull	ip, lr, r0, r2
  406306:	f04f 0500 	mov.w	r5, #0
  40630a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40630e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  406312:	fbe0 e503 	umlal	lr, r5, r0, r3
  406316:	f04f 0600 	mov.w	r6, #0
  40631a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40631e:	f09c 0f00 	teq	ip, #0
  406322:	bf18      	it	ne
  406324:	f04e 0e01 	orrne.w	lr, lr, #1
  406328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40632c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  406330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  406334:	d204      	bcs.n	406340 <__aeabi_dmul+0x80>
  406336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40633a:	416d      	adcs	r5, r5
  40633c:	eb46 0606 	adc.w	r6, r6, r6
  406340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  406344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  406348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40634c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  406350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  406354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  406358:	bf88      	it	hi
  40635a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40635e:	d81e      	bhi.n	40639e <__aeabi_dmul+0xde>
  406360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  406364:	bf08      	it	eq
  406366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40636a:	f150 0000 	adcs.w	r0, r0, #0
  40636e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406372:	bd70      	pop	{r4, r5, r6, pc}
  406374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  406378:	ea46 0101 	orr.w	r1, r6, r1
  40637c:	ea40 0002 	orr.w	r0, r0, r2
  406380:	ea81 0103 	eor.w	r1, r1, r3
  406384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  406388:	bfc2      	ittt	gt
  40638a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40638e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  406392:	bd70      	popgt	{r4, r5, r6, pc}
  406394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406398:	f04f 0e00 	mov.w	lr, #0
  40639c:	3c01      	subs	r4, #1
  40639e:	f300 80ab 	bgt.w	4064f8 <__aeabi_dmul+0x238>
  4063a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4063a6:	bfde      	ittt	le
  4063a8:	2000      	movle	r0, #0
  4063aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4063ae:	bd70      	pople	{r4, r5, r6, pc}
  4063b0:	f1c4 0400 	rsb	r4, r4, #0
  4063b4:	3c20      	subs	r4, #32
  4063b6:	da35      	bge.n	406424 <__aeabi_dmul+0x164>
  4063b8:	340c      	adds	r4, #12
  4063ba:	dc1b      	bgt.n	4063f4 <__aeabi_dmul+0x134>
  4063bc:	f104 0414 	add.w	r4, r4, #20
  4063c0:	f1c4 0520 	rsb	r5, r4, #32
  4063c4:	fa00 f305 	lsl.w	r3, r0, r5
  4063c8:	fa20 f004 	lsr.w	r0, r0, r4
  4063cc:	fa01 f205 	lsl.w	r2, r1, r5
  4063d0:	ea40 0002 	orr.w	r0, r0, r2
  4063d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4063d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4063dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4063e0:	fa21 f604 	lsr.w	r6, r1, r4
  4063e4:	eb42 0106 	adc.w	r1, r2, r6
  4063e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4063ec:	bf08      	it	eq
  4063ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4063f2:	bd70      	pop	{r4, r5, r6, pc}
  4063f4:	f1c4 040c 	rsb	r4, r4, #12
  4063f8:	f1c4 0520 	rsb	r5, r4, #32
  4063fc:	fa00 f304 	lsl.w	r3, r0, r4
  406400:	fa20 f005 	lsr.w	r0, r0, r5
  406404:	fa01 f204 	lsl.w	r2, r1, r4
  406408:	ea40 0002 	orr.w	r0, r0, r2
  40640c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406414:	f141 0100 	adc.w	r1, r1, #0
  406418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40641c:	bf08      	it	eq
  40641e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406422:	bd70      	pop	{r4, r5, r6, pc}
  406424:	f1c4 0520 	rsb	r5, r4, #32
  406428:	fa00 f205 	lsl.w	r2, r0, r5
  40642c:	ea4e 0e02 	orr.w	lr, lr, r2
  406430:	fa20 f304 	lsr.w	r3, r0, r4
  406434:	fa01 f205 	lsl.w	r2, r1, r5
  406438:	ea43 0302 	orr.w	r3, r3, r2
  40643c:	fa21 f004 	lsr.w	r0, r1, r4
  406440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406444:	fa21 f204 	lsr.w	r2, r1, r4
  406448:	ea20 0002 	bic.w	r0, r0, r2
  40644c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  406450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406454:	bf08      	it	eq
  406456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40645a:	bd70      	pop	{r4, r5, r6, pc}
  40645c:	f094 0f00 	teq	r4, #0
  406460:	d10f      	bne.n	406482 <__aeabi_dmul+0x1c2>
  406462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  406466:	0040      	lsls	r0, r0, #1
  406468:	eb41 0101 	adc.w	r1, r1, r1
  40646c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406470:	bf08      	it	eq
  406472:	3c01      	subeq	r4, #1
  406474:	d0f7      	beq.n	406466 <__aeabi_dmul+0x1a6>
  406476:	ea41 0106 	orr.w	r1, r1, r6
  40647a:	f095 0f00 	teq	r5, #0
  40647e:	bf18      	it	ne
  406480:	4770      	bxne	lr
  406482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  406486:	0052      	lsls	r2, r2, #1
  406488:	eb43 0303 	adc.w	r3, r3, r3
  40648c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  406490:	bf08      	it	eq
  406492:	3d01      	subeq	r5, #1
  406494:	d0f7      	beq.n	406486 <__aeabi_dmul+0x1c6>
  406496:	ea43 0306 	orr.w	r3, r3, r6
  40649a:	4770      	bx	lr
  40649c:	ea94 0f0c 	teq	r4, ip
  4064a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4064a4:	bf18      	it	ne
  4064a6:	ea95 0f0c 	teqne	r5, ip
  4064aa:	d00c      	beq.n	4064c6 <__aeabi_dmul+0x206>
  4064ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4064b0:	bf18      	it	ne
  4064b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4064b6:	d1d1      	bne.n	40645c <__aeabi_dmul+0x19c>
  4064b8:	ea81 0103 	eor.w	r1, r1, r3
  4064bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4064c0:	f04f 0000 	mov.w	r0, #0
  4064c4:	bd70      	pop	{r4, r5, r6, pc}
  4064c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4064ca:	bf06      	itte	eq
  4064cc:	4610      	moveq	r0, r2
  4064ce:	4619      	moveq	r1, r3
  4064d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4064d4:	d019      	beq.n	40650a <__aeabi_dmul+0x24a>
  4064d6:	ea94 0f0c 	teq	r4, ip
  4064da:	d102      	bne.n	4064e2 <__aeabi_dmul+0x222>
  4064dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4064e0:	d113      	bne.n	40650a <__aeabi_dmul+0x24a>
  4064e2:	ea95 0f0c 	teq	r5, ip
  4064e6:	d105      	bne.n	4064f4 <__aeabi_dmul+0x234>
  4064e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4064ec:	bf1c      	itt	ne
  4064ee:	4610      	movne	r0, r2
  4064f0:	4619      	movne	r1, r3
  4064f2:	d10a      	bne.n	40650a <__aeabi_dmul+0x24a>
  4064f4:	ea81 0103 	eor.w	r1, r1, r3
  4064f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4064fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406504:	f04f 0000 	mov.w	r0, #0
  406508:	bd70      	pop	{r4, r5, r6, pc}
  40650a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40650e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  406512:	bd70      	pop	{r4, r5, r6, pc}

00406514 <__aeabi_ddiv>:
  406514:	b570      	push	{r4, r5, r6, lr}
  406516:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40651a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40651e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  406522:	bf1d      	ittte	ne
  406524:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  406528:	ea94 0f0c 	teqne	r4, ip
  40652c:	ea95 0f0c 	teqne	r5, ip
  406530:	f000 f8a7 	bleq	406682 <__aeabi_ddiv+0x16e>
  406534:	eba4 0405 	sub.w	r4, r4, r5
  406538:	ea81 0e03 	eor.w	lr, r1, r3
  40653c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  406540:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406544:	f000 8088 	beq.w	406658 <__aeabi_ddiv+0x144>
  406548:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40654c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  406550:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  406554:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  406558:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40655c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  406560:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  406564:	ea4f 2600 	mov.w	r6, r0, lsl #8
  406568:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40656c:	429d      	cmp	r5, r3
  40656e:	bf08      	it	eq
  406570:	4296      	cmpeq	r6, r2
  406572:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  406576:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40657a:	d202      	bcs.n	406582 <__aeabi_ddiv+0x6e>
  40657c:	085b      	lsrs	r3, r3, #1
  40657e:	ea4f 0232 	mov.w	r2, r2, rrx
  406582:	1ab6      	subs	r6, r6, r2
  406584:	eb65 0503 	sbc.w	r5, r5, r3
  406588:	085b      	lsrs	r3, r3, #1
  40658a:	ea4f 0232 	mov.w	r2, r2, rrx
  40658e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  406592:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  406596:	ebb6 0e02 	subs.w	lr, r6, r2
  40659a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40659e:	bf22      	ittt	cs
  4065a0:	1ab6      	subcs	r6, r6, r2
  4065a2:	4675      	movcs	r5, lr
  4065a4:	ea40 000c 	orrcs.w	r0, r0, ip
  4065a8:	085b      	lsrs	r3, r3, #1
  4065aa:	ea4f 0232 	mov.w	r2, r2, rrx
  4065ae:	ebb6 0e02 	subs.w	lr, r6, r2
  4065b2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4065b6:	bf22      	ittt	cs
  4065b8:	1ab6      	subcs	r6, r6, r2
  4065ba:	4675      	movcs	r5, lr
  4065bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4065c0:	085b      	lsrs	r3, r3, #1
  4065c2:	ea4f 0232 	mov.w	r2, r2, rrx
  4065c6:	ebb6 0e02 	subs.w	lr, r6, r2
  4065ca:	eb75 0e03 	sbcs.w	lr, r5, r3
  4065ce:	bf22      	ittt	cs
  4065d0:	1ab6      	subcs	r6, r6, r2
  4065d2:	4675      	movcs	r5, lr
  4065d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4065d8:	085b      	lsrs	r3, r3, #1
  4065da:	ea4f 0232 	mov.w	r2, r2, rrx
  4065de:	ebb6 0e02 	subs.w	lr, r6, r2
  4065e2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4065e6:	bf22      	ittt	cs
  4065e8:	1ab6      	subcs	r6, r6, r2
  4065ea:	4675      	movcs	r5, lr
  4065ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4065f0:	ea55 0e06 	orrs.w	lr, r5, r6
  4065f4:	d018      	beq.n	406628 <__aeabi_ddiv+0x114>
  4065f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4065fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4065fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
  406602:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  406606:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40660a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40660e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  406612:	d1c0      	bne.n	406596 <__aeabi_ddiv+0x82>
  406614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406618:	d10b      	bne.n	406632 <__aeabi_ddiv+0x11e>
  40661a:	ea41 0100 	orr.w	r1, r1, r0
  40661e:	f04f 0000 	mov.w	r0, #0
  406622:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  406626:	e7b6      	b.n	406596 <__aeabi_ddiv+0x82>
  406628:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40662c:	bf04      	itt	eq
  40662e:	4301      	orreq	r1, r0
  406630:	2000      	moveq	r0, #0
  406632:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  406636:	bf88      	it	hi
  406638:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40663c:	f63f aeaf 	bhi.w	40639e <__aeabi_dmul+0xde>
  406640:	ebb5 0c03 	subs.w	ip, r5, r3
  406644:	bf04      	itt	eq
  406646:	ebb6 0c02 	subseq.w	ip, r6, r2
  40664a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40664e:	f150 0000 	adcs.w	r0, r0, #0
  406652:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406656:	bd70      	pop	{r4, r5, r6, pc}
  406658:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40665c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  406660:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  406664:	bfc2      	ittt	gt
  406666:	ebd4 050c 	rsbsgt	r5, r4, ip
  40666a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40666e:	bd70      	popgt	{r4, r5, r6, pc}
  406670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406674:	f04f 0e00 	mov.w	lr, #0
  406678:	3c01      	subs	r4, #1
  40667a:	e690      	b.n	40639e <__aeabi_dmul+0xde>
  40667c:	ea45 0e06 	orr.w	lr, r5, r6
  406680:	e68d      	b.n	40639e <__aeabi_dmul+0xde>
  406682:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  406686:	ea94 0f0c 	teq	r4, ip
  40668a:	bf08      	it	eq
  40668c:	ea95 0f0c 	teqeq	r5, ip
  406690:	f43f af3b 	beq.w	40650a <__aeabi_dmul+0x24a>
  406694:	ea94 0f0c 	teq	r4, ip
  406698:	d10a      	bne.n	4066b0 <__aeabi_ddiv+0x19c>
  40669a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40669e:	f47f af34 	bne.w	40650a <__aeabi_dmul+0x24a>
  4066a2:	ea95 0f0c 	teq	r5, ip
  4066a6:	f47f af25 	bne.w	4064f4 <__aeabi_dmul+0x234>
  4066aa:	4610      	mov	r0, r2
  4066ac:	4619      	mov	r1, r3
  4066ae:	e72c      	b.n	40650a <__aeabi_dmul+0x24a>
  4066b0:	ea95 0f0c 	teq	r5, ip
  4066b4:	d106      	bne.n	4066c4 <__aeabi_ddiv+0x1b0>
  4066b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4066ba:	f43f aefd 	beq.w	4064b8 <__aeabi_dmul+0x1f8>
  4066be:	4610      	mov	r0, r2
  4066c0:	4619      	mov	r1, r3
  4066c2:	e722      	b.n	40650a <__aeabi_dmul+0x24a>
  4066c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4066c8:	bf18      	it	ne
  4066ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4066ce:	f47f aec5 	bne.w	40645c <__aeabi_dmul+0x19c>
  4066d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4066d6:	f47f af0d 	bne.w	4064f4 <__aeabi_dmul+0x234>
  4066da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4066de:	f47f aeeb 	bne.w	4064b8 <__aeabi_dmul+0x1f8>
  4066e2:	e712      	b.n	40650a <__aeabi_dmul+0x24a>

004066e4 <__gedf2>:
  4066e4:	f04f 3cff 	mov.w	ip, #4294967295
  4066e8:	e006      	b.n	4066f8 <__cmpdf2+0x4>
  4066ea:	bf00      	nop

004066ec <__ledf2>:
  4066ec:	f04f 0c01 	mov.w	ip, #1
  4066f0:	e002      	b.n	4066f8 <__cmpdf2+0x4>
  4066f2:	bf00      	nop

004066f4 <__cmpdf2>:
  4066f4:	f04f 0c01 	mov.w	ip, #1
  4066f8:	f84d cd04 	str.w	ip, [sp, #-4]!
  4066fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406700:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406704:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406708:	bf18      	it	ne
  40670a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40670e:	d01b      	beq.n	406748 <__cmpdf2+0x54>
  406710:	b001      	add	sp, #4
  406712:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  406716:	bf0c      	ite	eq
  406718:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40671c:	ea91 0f03 	teqne	r1, r3
  406720:	bf02      	ittt	eq
  406722:	ea90 0f02 	teqeq	r0, r2
  406726:	2000      	moveq	r0, #0
  406728:	4770      	bxeq	lr
  40672a:	f110 0f00 	cmn.w	r0, #0
  40672e:	ea91 0f03 	teq	r1, r3
  406732:	bf58      	it	pl
  406734:	4299      	cmppl	r1, r3
  406736:	bf08      	it	eq
  406738:	4290      	cmpeq	r0, r2
  40673a:	bf2c      	ite	cs
  40673c:	17d8      	asrcs	r0, r3, #31
  40673e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  406742:	f040 0001 	orr.w	r0, r0, #1
  406746:	4770      	bx	lr
  406748:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40674c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406750:	d102      	bne.n	406758 <__cmpdf2+0x64>
  406752:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406756:	d107      	bne.n	406768 <__cmpdf2+0x74>
  406758:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40675c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406760:	d1d6      	bne.n	406710 <__cmpdf2+0x1c>
  406762:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406766:	d0d3      	beq.n	406710 <__cmpdf2+0x1c>
  406768:	f85d 0b04 	ldr.w	r0, [sp], #4
  40676c:	4770      	bx	lr
  40676e:	bf00      	nop

00406770 <__aeabi_cdrcmple>:
  406770:	4684      	mov	ip, r0
  406772:	4610      	mov	r0, r2
  406774:	4662      	mov	r2, ip
  406776:	468c      	mov	ip, r1
  406778:	4619      	mov	r1, r3
  40677a:	4663      	mov	r3, ip
  40677c:	e000      	b.n	406780 <__aeabi_cdcmpeq>
  40677e:	bf00      	nop

00406780 <__aeabi_cdcmpeq>:
  406780:	b501      	push	{r0, lr}
  406782:	f7ff ffb7 	bl	4066f4 <__cmpdf2>
  406786:	2800      	cmp	r0, #0
  406788:	bf48      	it	mi
  40678a:	f110 0f00 	cmnmi.w	r0, #0
  40678e:	bd01      	pop	{r0, pc}

00406790 <__aeabi_dcmpeq>:
  406790:	f84d ed08 	str.w	lr, [sp, #-8]!
  406794:	f7ff fff4 	bl	406780 <__aeabi_cdcmpeq>
  406798:	bf0c      	ite	eq
  40679a:	2001      	moveq	r0, #1
  40679c:	2000      	movne	r0, #0
  40679e:	f85d fb08 	ldr.w	pc, [sp], #8
  4067a2:	bf00      	nop

004067a4 <__aeabi_dcmplt>:
  4067a4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4067a8:	f7ff ffea 	bl	406780 <__aeabi_cdcmpeq>
  4067ac:	bf34      	ite	cc
  4067ae:	2001      	movcc	r0, #1
  4067b0:	2000      	movcs	r0, #0
  4067b2:	f85d fb08 	ldr.w	pc, [sp], #8
  4067b6:	bf00      	nop

004067b8 <__aeabi_dcmple>:
  4067b8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4067bc:	f7ff ffe0 	bl	406780 <__aeabi_cdcmpeq>
  4067c0:	bf94      	ite	ls
  4067c2:	2001      	movls	r0, #1
  4067c4:	2000      	movhi	r0, #0
  4067c6:	f85d fb08 	ldr.w	pc, [sp], #8
  4067ca:	bf00      	nop

004067cc <__aeabi_dcmpge>:
  4067cc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4067d0:	f7ff ffce 	bl	406770 <__aeabi_cdrcmple>
  4067d4:	bf94      	ite	ls
  4067d6:	2001      	movls	r0, #1
  4067d8:	2000      	movhi	r0, #0
  4067da:	f85d fb08 	ldr.w	pc, [sp], #8
  4067de:	bf00      	nop

004067e0 <__aeabi_dcmpgt>:
  4067e0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4067e4:	f7ff ffc4 	bl	406770 <__aeabi_cdrcmple>
  4067e8:	bf34      	ite	cc
  4067ea:	2001      	movcc	r0, #1
  4067ec:	2000      	movcs	r0, #0
  4067ee:	f85d fb08 	ldr.w	pc, [sp], #8
  4067f2:	bf00      	nop

004067f4 <__aeabi_dcmpun>:
  4067f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4067f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4067fc:	d102      	bne.n	406804 <__aeabi_dcmpun+0x10>
  4067fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406802:	d10a      	bne.n	40681a <__aeabi_dcmpun+0x26>
  406804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40680c:	d102      	bne.n	406814 <__aeabi_dcmpun+0x20>
  40680e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406812:	d102      	bne.n	40681a <__aeabi_dcmpun+0x26>
  406814:	f04f 0000 	mov.w	r0, #0
  406818:	4770      	bx	lr
  40681a:	f04f 0001 	mov.w	r0, #1
  40681e:	4770      	bx	lr

00406820 <__aeabi_d2iz>:
  406820:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406824:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  406828:	d215      	bcs.n	406856 <__aeabi_d2iz+0x36>
  40682a:	d511      	bpl.n	406850 <__aeabi_d2iz+0x30>
  40682c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  406830:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  406834:	d912      	bls.n	40685c <__aeabi_d2iz+0x3c>
  406836:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40683a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40683e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  406842:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406846:	fa23 f002 	lsr.w	r0, r3, r2
  40684a:	bf18      	it	ne
  40684c:	4240      	negne	r0, r0
  40684e:	4770      	bx	lr
  406850:	f04f 0000 	mov.w	r0, #0
  406854:	4770      	bx	lr
  406856:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40685a:	d105      	bne.n	406868 <__aeabi_d2iz+0x48>
  40685c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  406860:	bf08      	it	eq
  406862:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  406866:	4770      	bx	lr
  406868:	f04f 0000 	mov.w	r0, #0
  40686c:	4770      	bx	lr
  40686e:	bf00      	nop

00406870 <__aeabi_uldivmod>:
  406870:	b953      	cbnz	r3, 406888 <__aeabi_uldivmod+0x18>
  406872:	b94a      	cbnz	r2, 406888 <__aeabi_uldivmod+0x18>
  406874:	2900      	cmp	r1, #0
  406876:	bf08      	it	eq
  406878:	2800      	cmpeq	r0, #0
  40687a:	bf1c      	itt	ne
  40687c:	f04f 31ff 	movne.w	r1, #4294967295
  406880:	f04f 30ff 	movne.w	r0, #4294967295
  406884:	f000 b97a 	b.w	406b7c <__aeabi_idiv0>
  406888:	f1ad 0c08 	sub.w	ip, sp, #8
  40688c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406890:	f000 f806 	bl	4068a0 <__udivmoddi4>
  406894:	f8dd e004 	ldr.w	lr, [sp, #4]
  406898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40689c:	b004      	add	sp, #16
  40689e:	4770      	bx	lr

004068a0 <__udivmoddi4>:
  4068a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4068a4:	468c      	mov	ip, r1
  4068a6:	460d      	mov	r5, r1
  4068a8:	4604      	mov	r4, r0
  4068aa:	9e08      	ldr	r6, [sp, #32]
  4068ac:	2b00      	cmp	r3, #0
  4068ae:	d151      	bne.n	406954 <__udivmoddi4+0xb4>
  4068b0:	428a      	cmp	r2, r1
  4068b2:	4617      	mov	r7, r2
  4068b4:	d96d      	bls.n	406992 <__udivmoddi4+0xf2>
  4068b6:	fab2 fe82 	clz	lr, r2
  4068ba:	f1be 0f00 	cmp.w	lr, #0
  4068be:	d00b      	beq.n	4068d8 <__udivmoddi4+0x38>
  4068c0:	f1ce 0c20 	rsb	ip, lr, #32
  4068c4:	fa01 f50e 	lsl.w	r5, r1, lr
  4068c8:	fa20 fc0c 	lsr.w	ip, r0, ip
  4068cc:	fa02 f70e 	lsl.w	r7, r2, lr
  4068d0:	ea4c 0c05 	orr.w	ip, ip, r5
  4068d4:	fa00 f40e 	lsl.w	r4, r0, lr
  4068d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4068dc:	0c25      	lsrs	r5, r4, #16
  4068de:	fbbc f8fa 	udiv	r8, ip, sl
  4068e2:	fa1f f987 	uxth.w	r9, r7
  4068e6:	fb0a cc18 	mls	ip, sl, r8, ip
  4068ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4068ee:	fb08 f309 	mul.w	r3, r8, r9
  4068f2:	42ab      	cmp	r3, r5
  4068f4:	d90a      	bls.n	40690c <__udivmoddi4+0x6c>
  4068f6:	19ed      	adds	r5, r5, r7
  4068f8:	f108 32ff 	add.w	r2, r8, #4294967295
  4068fc:	f080 8123 	bcs.w	406b46 <__udivmoddi4+0x2a6>
  406900:	42ab      	cmp	r3, r5
  406902:	f240 8120 	bls.w	406b46 <__udivmoddi4+0x2a6>
  406906:	f1a8 0802 	sub.w	r8, r8, #2
  40690a:	443d      	add	r5, r7
  40690c:	1aed      	subs	r5, r5, r3
  40690e:	b2a4      	uxth	r4, r4
  406910:	fbb5 f0fa 	udiv	r0, r5, sl
  406914:	fb0a 5510 	mls	r5, sl, r0, r5
  406918:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40691c:	fb00 f909 	mul.w	r9, r0, r9
  406920:	45a1      	cmp	r9, r4
  406922:	d909      	bls.n	406938 <__udivmoddi4+0x98>
  406924:	19e4      	adds	r4, r4, r7
  406926:	f100 33ff 	add.w	r3, r0, #4294967295
  40692a:	f080 810a 	bcs.w	406b42 <__udivmoddi4+0x2a2>
  40692e:	45a1      	cmp	r9, r4
  406930:	f240 8107 	bls.w	406b42 <__udivmoddi4+0x2a2>
  406934:	3802      	subs	r0, #2
  406936:	443c      	add	r4, r7
  406938:	eba4 0409 	sub.w	r4, r4, r9
  40693c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406940:	2100      	movs	r1, #0
  406942:	2e00      	cmp	r6, #0
  406944:	d061      	beq.n	406a0a <__udivmoddi4+0x16a>
  406946:	fa24 f40e 	lsr.w	r4, r4, lr
  40694a:	2300      	movs	r3, #0
  40694c:	6034      	str	r4, [r6, #0]
  40694e:	6073      	str	r3, [r6, #4]
  406950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406954:	428b      	cmp	r3, r1
  406956:	d907      	bls.n	406968 <__udivmoddi4+0xc8>
  406958:	2e00      	cmp	r6, #0
  40695a:	d054      	beq.n	406a06 <__udivmoddi4+0x166>
  40695c:	2100      	movs	r1, #0
  40695e:	e886 0021 	stmia.w	r6, {r0, r5}
  406962:	4608      	mov	r0, r1
  406964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406968:	fab3 f183 	clz	r1, r3
  40696c:	2900      	cmp	r1, #0
  40696e:	f040 808e 	bne.w	406a8e <__udivmoddi4+0x1ee>
  406972:	42ab      	cmp	r3, r5
  406974:	d302      	bcc.n	40697c <__udivmoddi4+0xdc>
  406976:	4282      	cmp	r2, r0
  406978:	f200 80fa 	bhi.w	406b70 <__udivmoddi4+0x2d0>
  40697c:	1a84      	subs	r4, r0, r2
  40697e:	eb65 0503 	sbc.w	r5, r5, r3
  406982:	2001      	movs	r0, #1
  406984:	46ac      	mov	ip, r5
  406986:	2e00      	cmp	r6, #0
  406988:	d03f      	beq.n	406a0a <__udivmoddi4+0x16a>
  40698a:	e886 1010 	stmia.w	r6, {r4, ip}
  40698e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406992:	b912      	cbnz	r2, 40699a <__udivmoddi4+0xfa>
  406994:	2701      	movs	r7, #1
  406996:	fbb7 f7f2 	udiv	r7, r7, r2
  40699a:	fab7 fe87 	clz	lr, r7
  40699e:	f1be 0f00 	cmp.w	lr, #0
  4069a2:	d134      	bne.n	406a0e <__udivmoddi4+0x16e>
  4069a4:	1beb      	subs	r3, r5, r7
  4069a6:	0c3a      	lsrs	r2, r7, #16
  4069a8:	fa1f fc87 	uxth.w	ip, r7
  4069ac:	2101      	movs	r1, #1
  4069ae:	fbb3 f8f2 	udiv	r8, r3, r2
  4069b2:	0c25      	lsrs	r5, r4, #16
  4069b4:	fb02 3318 	mls	r3, r2, r8, r3
  4069b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4069bc:	fb0c f308 	mul.w	r3, ip, r8
  4069c0:	42ab      	cmp	r3, r5
  4069c2:	d907      	bls.n	4069d4 <__udivmoddi4+0x134>
  4069c4:	19ed      	adds	r5, r5, r7
  4069c6:	f108 30ff 	add.w	r0, r8, #4294967295
  4069ca:	d202      	bcs.n	4069d2 <__udivmoddi4+0x132>
  4069cc:	42ab      	cmp	r3, r5
  4069ce:	f200 80d1 	bhi.w	406b74 <__udivmoddi4+0x2d4>
  4069d2:	4680      	mov	r8, r0
  4069d4:	1aed      	subs	r5, r5, r3
  4069d6:	b2a3      	uxth	r3, r4
  4069d8:	fbb5 f0f2 	udiv	r0, r5, r2
  4069dc:	fb02 5510 	mls	r5, r2, r0, r5
  4069e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4069e4:	fb0c fc00 	mul.w	ip, ip, r0
  4069e8:	45a4      	cmp	ip, r4
  4069ea:	d907      	bls.n	4069fc <__udivmoddi4+0x15c>
  4069ec:	19e4      	adds	r4, r4, r7
  4069ee:	f100 33ff 	add.w	r3, r0, #4294967295
  4069f2:	d202      	bcs.n	4069fa <__udivmoddi4+0x15a>
  4069f4:	45a4      	cmp	ip, r4
  4069f6:	f200 80b8 	bhi.w	406b6a <__udivmoddi4+0x2ca>
  4069fa:	4618      	mov	r0, r3
  4069fc:	eba4 040c 	sub.w	r4, r4, ip
  406a00:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406a04:	e79d      	b.n	406942 <__udivmoddi4+0xa2>
  406a06:	4631      	mov	r1, r6
  406a08:	4630      	mov	r0, r6
  406a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406a0e:	f1ce 0420 	rsb	r4, lr, #32
  406a12:	fa05 f30e 	lsl.w	r3, r5, lr
  406a16:	fa07 f70e 	lsl.w	r7, r7, lr
  406a1a:	fa20 f804 	lsr.w	r8, r0, r4
  406a1e:	0c3a      	lsrs	r2, r7, #16
  406a20:	fa25 f404 	lsr.w	r4, r5, r4
  406a24:	ea48 0803 	orr.w	r8, r8, r3
  406a28:	fbb4 f1f2 	udiv	r1, r4, r2
  406a2c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406a30:	fb02 4411 	mls	r4, r2, r1, r4
  406a34:	fa1f fc87 	uxth.w	ip, r7
  406a38:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406a3c:	fb01 f30c 	mul.w	r3, r1, ip
  406a40:	42ab      	cmp	r3, r5
  406a42:	fa00 f40e 	lsl.w	r4, r0, lr
  406a46:	d909      	bls.n	406a5c <__udivmoddi4+0x1bc>
  406a48:	19ed      	adds	r5, r5, r7
  406a4a:	f101 30ff 	add.w	r0, r1, #4294967295
  406a4e:	f080 808a 	bcs.w	406b66 <__udivmoddi4+0x2c6>
  406a52:	42ab      	cmp	r3, r5
  406a54:	f240 8087 	bls.w	406b66 <__udivmoddi4+0x2c6>
  406a58:	3902      	subs	r1, #2
  406a5a:	443d      	add	r5, r7
  406a5c:	1aeb      	subs	r3, r5, r3
  406a5e:	fa1f f588 	uxth.w	r5, r8
  406a62:	fbb3 f0f2 	udiv	r0, r3, r2
  406a66:	fb02 3310 	mls	r3, r2, r0, r3
  406a6a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406a6e:	fb00 f30c 	mul.w	r3, r0, ip
  406a72:	42ab      	cmp	r3, r5
  406a74:	d907      	bls.n	406a86 <__udivmoddi4+0x1e6>
  406a76:	19ed      	adds	r5, r5, r7
  406a78:	f100 38ff 	add.w	r8, r0, #4294967295
  406a7c:	d26f      	bcs.n	406b5e <__udivmoddi4+0x2be>
  406a7e:	42ab      	cmp	r3, r5
  406a80:	d96d      	bls.n	406b5e <__udivmoddi4+0x2be>
  406a82:	3802      	subs	r0, #2
  406a84:	443d      	add	r5, r7
  406a86:	1aeb      	subs	r3, r5, r3
  406a88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406a8c:	e78f      	b.n	4069ae <__udivmoddi4+0x10e>
  406a8e:	f1c1 0720 	rsb	r7, r1, #32
  406a92:	fa22 f807 	lsr.w	r8, r2, r7
  406a96:	408b      	lsls	r3, r1
  406a98:	fa05 f401 	lsl.w	r4, r5, r1
  406a9c:	ea48 0303 	orr.w	r3, r8, r3
  406aa0:	fa20 fe07 	lsr.w	lr, r0, r7
  406aa4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406aa8:	40fd      	lsrs	r5, r7
  406aaa:	ea4e 0e04 	orr.w	lr, lr, r4
  406aae:	fbb5 f9fc 	udiv	r9, r5, ip
  406ab2:	ea4f 441e 	mov.w	r4, lr, lsr #16
  406ab6:	fb0c 5519 	mls	r5, ip, r9, r5
  406aba:	fa1f f883 	uxth.w	r8, r3
  406abe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406ac2:	fb09 f408 	mul.w	r4, r9, r8
  406ac6:	42ac      	cmp	r4, r5
  406ac8:	fa02 f201 	lsl.w	r2, r2, r1
  406acc:	fa00 fa01 	lsl.w	sl, r0, r1
  406ad0:	d908      	bls.n	406ae4 <__udivmoddi4+0x244>
  406ad2:	18ed      	adds	r5, r5, r3
  406ad4:	f109 30ff 	add.w	r0, r9, #4294967295
  406ad8:	d243      	bcs.n	406b62 <__udivmoddi4+0x2c2>
  406ada:	42ac      	cmp	r4, r5
  406adc:	d941      	bls.n	406b62 <__udivmoddi4+0x2c2>
  406ade:	f1a9 0902 	sub.w	r9, r9, #2
  406ae2:	441d      	add	r5, r3
  406ae4:	1b2d      	subs	r5, r5, r4
  406ae6:	fa1f fe8e 	uxth.w	lr, lr
  406aea:	fbb5 f0fc 	udiv	r0, r5, ip
  406aee:	fb0c 5510 	mls	r5, ip, r0, r5
  406af2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  406af6:	fb00 f808 	mul.w	r8, r0, r8
  406afa:	45a0      	cmp	r8, r4
  406afc:	d907      	bls.n	406b0e <__udivmoddi4+0x26e>
  406afe:	18e4      	adds	r4, r4, r3
  406b00:	f100 35ff 	add.w	r5, r0, #4294967295
  406b04:	d229      	bcs.n	406b5a <__udivmoddi4+0x2ba>
  406b06:	45a0      	cmp	r8, r4
  406b08:	d927      	bls.n	406b5a <__udivmoddi4+0x2ba>
  406b0a:	3802      	subs	r0, #2
  406b0c:	441c      	add	r4, r3
  406b0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406b12:	eba4 0408 	sub.w	r4, r4, r8
  406b16:	fba0 8902 	umull	r8, r9, r0, r2
  406b1a:	454c      	cmp	r4, r9
  406b1c:	46c6      	mov	lr, r8
  406b1e:	464d      	mov	r5, r9
  406b20:	d315      	bcc.n	406b4e <__udivmoddi4+0x2ae>
  406b22:	d012      	beq.n	406b4a <__udivmoddi4+0x2aa>
  406b24:	b156      	cbz	r6, 406b3c <__udivmoddi4+0x29c>
  406b26:	ebba 030e 	subs.w	r3, sl, lr
  406b2a:	eb64 0405 	sbc.w	r4, r4, r5
  406b2e:	fa04 f707 	lsl.w	r7, r4, r7
  406b32:	40cb      	lsrs	r3, r1
  406b34:	431f      	orrs	r7, r3
  406b36:	40cc      	lsrs	r4, r1
  406b38:	6037      	str	r7, [r6, #0]
  406b3a:	6074      	str	r4, [r6, #4]
  406b3c:	2100      	movs	r1, #0
  406b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406b42:	4618      	mov	r0, r3
  406b44:	e6f8      	b.n	406938 <__udivmoddi4+0x98>
  406b46:	4690      	mov	r8, r2
  406b48:	e6e0      	b.n	40690c <__udivmoddi4+0x6c>
  406b4a:	45c2      	cmp	sl, r8
  406b4c:	d2ea      	bcs.n	406b24 <__udivmoddi4+0x284>
  406b4e:	ebb8 0e02 	subs.w	lr, r8, r2
  406b52:	eb69 0503 	sbc.w	r5, r9, r3
  406b56:	3801      	subs	r0, #1
  406b58:	e7e4      	b.n	406b24 <__udivmoddi4+0x284>
  406b5a:	4628      	mov	r0, r5
  406b5c:	e7d7      	b.n	406b0e <__udivmoddi4+0x26e>
  406b5e:	4640      	mov	r0, r8
  406b60:	e791      	b.n	406a86 <__udivmoddi4+0x1e6>
  406b62:	4681      	mov	r9, r0
  406b64:	e7be      	b.n	406ae4 <__udivmoddi4+0x244>
  406b66:	4601      	mov	r1, r0
  406b68:	e778      	b.n	406a5c <__udivmoddi4+0x1bc>
  406b6a:	3802      	subs	r0, #2
  406b6c:	443c      	add	r4, r7
  406b6e:	e745      	b.n	4069fc <__udivmoddi4+0x15c>
  406b70:	4608      	mov	r0, r1
  406b72:	e708      	b.n	406986 <__udivmoddi4+0xe6>
  406b74:	f1a8 0802 	sub.w	r8, r8, #2
  406b78:	443d      	add	r5, r7
  406b7a:	e72b      	b.n	4069d4 <__udivmoddi4+0x134>

00406b7c <__aeabi_idiv0>:
  406b7c:	4770      	bx	lr
  406b7e:	bf00      	nop

00406b80 <sysfont_glyphs>:
	...
  406ba0:	0030 0030 0030 0030 0030 0030 0000 0030     0.0.0.0.0.0...0.
  406bb0:	0030 0000 0000 0000 0000 0000 006c 006c     0...........l.l.
  406bc0:	006c 006c 0000 0000 0000 0000 0000 0000     l.l.............
	...
  406bd8:	0000 0028 0028 007c 0028 0028 007c 0028     ..(.(.|.(.(.|.(.
  406be8:	0028 0000 0000 0000 0000 0000 0010 003c     (.............<.
  406bf8:	0040 0020 0010 0008 0004 0078 0010 0000     @. .......x.....
	...
  406c10:	0000 007c 00a4 00a8 0050 0028 0054 0094     ..|.....P.(.T...
  406c20:	0088 0000 0000 0000 0000 0000 0060 0090     ............`...
  406c30:	0090 0090 0060 0094 0088 0088 0070 0000     ....`.......p...
	...
  406c48:	0010 0010 0010 0000 0000 0000 0000 0000     ................
	...
  406c64:	0008 0010 0020 0020 0020 0020 0020 0020     .... . . . . . .
  406c74:	0010 0008 0000 0000 0000 0000 0020 0010     ............ ...
  406c84:	0008 0008 0008 0008 0008 0008 0010 0020     .............. .
  406c94:	0000 0000 0000 0028 0010 007c 0010 0028     ......(...|...(.
	...
  406cbc:	0010 0010 0010 00fe 0010 0010 0010 0000     ................
	...
  406ce4:	0010 0030 0020 0000 0000 0000 0000 0000     ..0. ...........
  406cf4:	0000 0000 0000 007c 0000 0000 0000 0000     ......|.........
	...
  406d18:	0000 0030 0030 0000 0000 0000 0000 0000     ..0.0...........
  406d28:	0000 0008 0008 0010 0010 0020 0020 0040     .......... . .@.
  406d38:	0040 0000 0000 0000 0000 0000 0000 0078     @.............x.
  406d48:	0084 008c 0094 00a4 00c4 0084 0078 0000     ............x...
	...
  406d60:	0000 0010 0030 0050 0010 0010 0010 0010     ....0.P.........
  406d70:	007c 0000 0000 0000 0000 0000 0000 0070     |.............p.
  406d80:	0088 0008 0010 0020 0040 0080 00f8 0000     ...... .@.......
	...
  406d98:	0000 0070 0088 0008 0030 0008 0008 0088     ..p.....0.......
  406da8:	0070 0000 0000 0000 0000 0000 0000 0008     p...............
  406db8:	0018 0028 0048 0088 00fc 0008 0008 0000     ..(.H...........
	...
  406dd0:	0000 0078 0080 0080 00f0 0008 0008 0008     ..x.............
  406de0:	00f0 0000 0000 0000 0000 0000 0000 0030     ..............0.
  406df0:	0040 0080 00f0 0088 0088 0088 0070 0000     @...........p...
	...
  406e08:	0000 00f8 0008 0010 0010 0020 0020 0040     .......... . .@.
  406e18:	0040 0000 0000 0000 0000 0000 0000 0070     @.............p.
  406e28:	0088 0088 0070 0088 0088 0088 0070 0000     ....p.......p...
	...
  406e40:	0000 0070 0088 0088 0088 0078 0008 0010     ..p.......x.....
  406e50:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
  406e60:	0000 0030 0030 0000 0000 0030 0030 0000     ..0.0.....0.0...
	...
  406e7c:	0000 0030 0030 0000 0000 0030 0030 0060     ..0.0.....0.0.`.
  406e8c:	0040 0000 0000 0000 0000 0000 0008 0010     @...............
  406e9c:	0020 0040 0020 0010 0008 0000 0000 0000      .@. ...........
	...
  406eb8:	007c 0000 007c 0000 0000 0000 0000 0000     |...|...........
	...
  406ed0:	0040 0020 0010 0008 0010 0020 0040 0000     @. ....... .@...
	...
  406ee8:	0000 0030 0048 0008 0010 0020 0000 0000     ..0.H..... .....
  406ef8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
  406f08:	003c 0042 009a 00aa 00aa 00be 0080 0078     <.B...........x.
	...
  406f20:	0000 0010 0028 0028 0044 007c 0044 0044     ....(.(.D.|.D.D.
  406f30:	0044 0000 0000 0000 0000 0000 0000 00f8     D...............
  406f40:	0084 0084 00f8 0084 0084 0084 00f8 0000     ................
	...
  406f58:	0000 003c 0040 0080 0080 0080 0080 0040     ..<.@.........@.
  406f68:	003c 0000 0000 0000 0000 0000 0000 00f0     <...............
  406f78:	0088 0084 0084 0084 0084 0088 00f0 0000     ................
	...
  406f90:	0000 00f8 0080 0080 00f0 0080 0080 0080     ................
  406fa0:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406fb0:	0080 0080 00f8 0080 0080 0080 0080 0000     ................
	...
  406fc8:	0000 003c 0040 0080 0080 009c 0084 0044     ..<.@.........D.
  406fd8:	0038 0000 0000 0000 0000 0000 0000 0088     8...............
  406fe8:	0088 0088 00f8 0088 0088 0088 0088 0000     ................
	...
  407000:	0000 00f8 0020 0020 0020 0020 0020 0020     .... . . . . . .
  407010:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  407020:	0008 0008 0008 0008 0008 0008 00f0 0000     ................
	...
  407038:	0000 0084 0088 0090 00a0 00d0 0088 0084     ................
  407048:	0084 0000 0000 0000 0000 0000 0000 0080     ................
  407058:	0080 0080 0080 0080 0080 0080 00fc 0000     ................
	...
  407070:	0000 0084 00cc 00cc 00b4 00b4 0084 0084     ................
  407080:	0084 0000 0000 0000 0000 0000 0000 0084     ................
  407090:	00c4 00c4 00a4 00a4 0094 0094 008c 0000     ................
	...
  4070a8:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  4070b8:	0078 0000 0000 0000 0000 0000 0000 00f8     x...............
  4070c8:	0084 0084 0084 00f8 0080 0080 0080 0000     ................
	...
  4070e0:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  4070f0:	0078 0020 0018 0000 0000 0000 0000 00f8     x. .............
  407100:	0084 0084 0084 00f8 0088 0084 0084 0000     ................
	...
  407118:	0000 007c 0080 0080 0060 0018 0004 0004     ..|.....`.......
  407128:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  407138:	0020 0020 0020 0020 0020 0020 0020 0000      . . . . . . ...
	...
  407150:	0000 0084 0084 0084 0084 0084 0084 0084     ................
  407160:	0078 0000 0000 0000 0000 0000 0000 0084     x...............
  407170:	0084 0084 0048 0048 0048 0030 0030 0000     ....H.H.H.0.0...
	...
  407188:	0000 0088 00a8 00a8 00a8 00a8 00a8 0050     ..............P.
  407198:	0050 0000 0000 0000 0000 0000 0000 0088     P...............
  4071a8:	0088 0050 0020 0020 0050 0088 0088 0000     ..P. . .P.......
	...
  4071c0:	0000 0088 0088 0088 0050 0050 0020 0020     ........P.P. . .
  4071d0:	0020 0000 0000 0000 0000 0000 0000 00fc      ...............
  4071e0:	0004 0008 0010 0020 0040 0080 00fc 0000     ...... .@.......
	...
  4071f8:	0070 0040 0040 0040 0040 0040 0040 0040     p.@.@.@.@.@.@.@.
  407208:	0040 0040 0070 0000 0000 0000 0040 0040     @.@.p.......@.@.
  407218:	0020 0020 0020 0010 0010 0010 0008 0008      . . ...........
	...
  407230:	0038 0008 0008 0008 0008 0008 0008 0008     8...............
  407240:	0008 0008 0038 0000 0000 0000 0010 0028     ....8.........(.
  407250:	0044 0000 0000 0000 0000 0000 0000 0000     D...............
	...
  407278:	0038 0000 0000 0000 0000 0000 0000 0020     8............. .
  407288:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...
  4072a4:	0000 0070 0008 0008 0078 0088 007c 0000     ..p.....x...|...
	...
  4072bc:	0080 0080 0080 00f8 0084 0084 0084 0084     ................
  4072cc:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  4072dc:	0000 0078 0080 0080 0080 0080 0078 0000     ..x.........x...
	...
  4072f4:	0004 0004 0004 007c 0084 0084 0084 008c     ......|.........
  407304:	0074 0000 0000 0000 0000 0000 0000 0000     t...............
  407314:	0000 0078 0084 00fc 0080 0080 007c 0000     ..x.........|...
	...
  40732c:	001c 0020 0020 00fc 0020 0020 0020 0020     .. . ... . . . .
  40733c:	00fc 0000 0000 0000 0000 0000 0000 0000     ................
  40734c:	0000 007c 0084 0084 0084 0084 007c 0004     ..|.........|...
  40735c:	0078 0000 0000 0000 0080 0080 0080 00b8     x...............
  40736c:	00c4 0084 0084 0084 0084 0000 0000 0000     ................
  40737c:	0000 0000 0000 0010 0000 0070 0010 0010     ..........p.....
  40738c:	0010 0010 007c 0000 0000 0000 0000 0000     ....|...........
  40739c:	0000 0008 0000 0078 0008 0008 0008 0008     ......x.........
  4073ac:	0008 0008 0008 0070 0000 0000 0080 0080     ......p.........
  4073bc:	0080 0088 0090 00a0 00d0 0088 0088 0000     ................
	...
  4073d4:	00e0 0020 0020 0020 0020 0020 0020 0020     .. . . . . . . .
  4073e4:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  4073f4:	0000 00a4 00fc 00a4 00a4 00a4 00a4 0000     ................
	...
  407410:	0000 00b8 00c4 0084 0084 0084 0084 0000     ................
	...
  40742c:	0000 0078 0084 0084 0084 0084 0078 0000     ..x.........x...
	...
  407448:	0000 00b8 00c4 0084 0084 0084 00f8 0080     ................
  407458:	0080 0000 0000 0000 0000 0000 0000 007c     ..............|.
  407468:	0084 0084 0084 0084 007c 0004 0004 0000     ........|.......
	...
  407480:	0000 00d8 0060 0040 0040 0040 00f0 0000     ....`.@.@.@.....
	...
  40749c:	0000 0078 0080 0040 0030 0008 00f0 0000     ..x...@.0.......
	...
  4074b8:	0020 00fc 0020 0020 0020 0020 001c 0000      ... . . . .....
	...
  4074d4:	0000 0088 0088 0088 0088 0088 007c 0000     ............|...
	...
  4074f0:	0000 0084 0084 0084 0048 0048 0030 0000     ........H.H.0...
	...
  40750c:	0000 0088 00a8 00a8 00a8 00a8 0050 0000     ............P...
	...
  407528:	0000 0088 0050 0020 0020 0050 0088 0000     ....P. . .P.....
	...
  407544:	0000 0084 0084 0048 0048 0030 0010 0020     ......H.H.0... .
  407554:	0040 0000 0000 0000 0000 0000 0000 00f8     @...............
  407564:	0008 0010 0020 0040 00f8 0000 0000 0000     .... .@.........
  407574:	0000 0000 0010 0020 0020 0010 0020 0020     ...... . ... . .
  407584:	0010 0020 0020 0010 0000 0000 0000 0000     .. . ...........
  407594:	0010 0010 0010 0010 0000 0000 0010 0010     ................
  4075a4:	0010 0010 0000 0000 0000 0000 0020 0010     ............ ...
  4075b4:	0010 0020 0010 0010 0020 0010 0010 0020     .. ..... ..... .
  4075c4:	0000 0000 07e2 0000 0003 0000 0013 0000     ................
  4075d4:	000c 0000 000f 0000 002d 0000 0001 0000     ........-.......
  4075e4:	3025 6432 253a 3230 3a64 3025 6432 0000     %02d:%02d:%02d..

004075f4 <_global_impure_ptr>:
  4075f4:	0028 2040 4e49 0046 6e69 0066 414e 004e     (.@ INF.inf.NAN.
  407604:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  407614:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  407624:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  407634:	296c 0000 0030 0000                         l)..0...

0040763c <blanks.7223>:
  40763c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040764c <zeroes.7224>:
  40764c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40765c:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  40766c:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......
  40767c:	0000 0000                                   ....

00407680 <__mprec_bigtens>:
  407680:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  407690:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  4076a0:	bf3c 7f73 4fdd 7515                         <.s..O.u

004076a8 <__mprec_tens>:
  4076a8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  4076b8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  4076c8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  4076d8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  4076e8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  4076f8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  407708:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  407718:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  407728:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  407738:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  407748:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  407758:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  407768:	9db4 79d9 7843 44ea                         ...yCx.D

00407770 <p05.6055>:
  407770:	0005 0000 0019 0000 007d 0000               ........}...

0040777c <_ctype_>:
  40777c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40778c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40779c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  4077ac:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  4077bc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  4077cc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  4077dc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  4077ec:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  4077fc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00407880 <_init>:
  407880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407882:	bf00      	nop
  407884:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407886:	bc08      	pop	{r3}
  407888:	469e      	mov	lr, r3
  40788a:	4770      	bx	lr

0040788c <__init_array_start>:
  40788c:	00403a39 	.word	0x00403a39

00407890 <__frame_dummy_init_array_entry>:
  407890:	00400165                                e.@.

00407894 <_fini>:
  407894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407896:	bf00      	nop
  407898:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40789a:	bc08      	pop	{r3}
  40789c:	469e      	mov	lr, r3
  40789e:	4770      	bx	lr

004078a0 <__fini_array_start>:
  4078a0:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <xNextTaskUnblockTime>:
2040000c:	ffff ffff                                   ....

20400010 <sysfont>:
20400010:	0000 0000 6b80 0040 0e0a 7d20               .....k@... }

2040001c <g_interrupt_enabled>:
2040001c:	0001 0000                                   ....

20400020 <SystemCoreClock>:
20400020:	0900 003d                                   ..=.

20400024 <_impure_ptr>:
20400024:	0028 2040                                   (.@ 

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	0d30 2040                                   0.@ 

20400454 <__global_locale>:
20400454:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400474:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400494:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400514:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400534:	5e11 0040 51f9 0040 0000 0000 777c 0040     .^@..Q@.....|w@.
20400544:	7678 0040 7618 0040 7618 0040 7618 0040     xv@..v@..v@..v@.
20400554:	7618 0040 7618 0040 7618 0040 7618 0040     .v@..v@..v@..v@.
20400564:	7618 0040 7618 0040 ffff ffff ffff ffff     .v@..v@.........
20400574:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040059c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005c0 <__malloc_av_>:
	...
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 
204009b8:	09b0 2040 09b0 2040 09b8 2040 09b8 2040     ..@ ..@ ..@ ..@ 

204009c8 <__malloc_sbrk_base>:
204009c8:	ffff ffff                                   ....

204009cc <__malloc_trim_threshold>:
204009cc:	0000 0002                                   ....
