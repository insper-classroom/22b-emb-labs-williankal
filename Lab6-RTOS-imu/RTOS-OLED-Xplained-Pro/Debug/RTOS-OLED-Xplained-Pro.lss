
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a88c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040a88c  0040a88c  0001a88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d8  20400000  0040a894  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000bc98  204009d8  0040b26c  000209d8  2**2
                  ALLOC
  4 .stack        00002000  2040c670  00416f04  000209d8  2**0
                  ALLOC
  5 .heap         00000200  2040e670  00418f04  000209d8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a06  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002b133  00000000  00000000  00020a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005e26  00000000  00000000  0004bb92  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00011cf9  00000000  00000000  000519b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001258  00000000  00000000  000636b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001838  00000000  00000000  00064909  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002725e  00000000  00000000  00066141  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00019128  00000000  00000000  0008d39f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009b911  00000000  00000000  000a64c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000041f0  00000000  00000000  00141dd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	70 e6 40 20 25 39 40 00 23 39 40 00 23 39 40 00     p.@ %9@.#9@.#9@.
  400010:	23 39 40 00 23 39 40 00 23 39 40 00 00 00 00 00     #9@.#9@.#9@.....
	...
  40002c:	23 39 40 00 23 39 40 00 00 00 00 00 23 39 40 00     #9@.#9@.....#9@.
  40003c:	23 39 40 00 23 39 40 00 23 39 40 00 23 39 40 00     #9@.#9@.#9@.#9@.
  40004c:	23 39 40 00 23 39 40 00 23 39 40 00 23 39 40 00     #9@.#9@.#9@.#9@.
  40005c:	23 39 40 00 23 39 40 00 00 00 00 00 15 36 40 00     #9@.#9@......6@.
  40006c:	29 36 40 00 3d 36 40 00 23 39 40 00 23 39 40 00     )6@.=6@.#9@.#9@.
  40007c:	23 39 40 00 51 36 40 00 65 36 40 00 23 39 40 00     #9@.Q6@.e6@.#9@.
  40008c:	23 39 40 00 23 39 40 00 23 39 40 00 23 39 40 00     #9@.#9@.#9@.#9@.
  40009c:	23 39 40 00 23 39 40 00 23 39 40 00 23 39 40 00     #9@.#9@.#9@.#9@.
  4000ac:	23 39 40 00 23 39 40 00 23 39 40 00 23 39 40 00     #9@.#9@.#9@.#9@.
  4000bc:	23 39 40 00 23 39 40 00 23 39 40 00 23 39 40 00     #9@.#9@.#9@.#9@.
  4000cc:	23 39 40 00 00 00 00 00 23 39 40 00 00 00 00 00     #9@.....#9@.....
  4000dc:	23 39 40 00 23 39 40 00 23 39 40 00 23 39 40 00     #9@.#9@.#9@.#9@.
  4000ec:	23 39 40 00 23 39 40 00 23 39 40 00 23 39 40 00     #9@.#9@.#9@.#9@.
  4000fc:	23 39 40 00 23 39 40 00 23 39 40 00 23 39 40 00     #9@.#9@.#9@.#9@.
  40010c:	23 39 40 00 23 39 40 00 00 00 00 00 00 00 00 00     #9@.#9@.........
  40011c:	00 00 00 00 23 39 40 00 23 39 40 00 23 39 40 00     ....#9@.#9@.#9@.
  40012c:	23 39 40 00 23 39 40 00 00 00 00 00 23 39 40 00     #9@.#9@.....#9@.
  40013c:	23 39 40 00                                         #9@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d8 	.word	0x204009d8
  40015c:	00000000 	.word	0x00000000
  400160:	0040a894 	.word	0x0040a894

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040a894 	.word	0x0040a894
  4001a0:	204009dc 	.word	0x204009dc
  4001a4:	0040a894 	.word	0x0040a894
  4001a8:	00000000 	.word	0x00000000

004001ac <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4001ac:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4001ae:	4b07      	ldr	r3, [pc, #28]	; (4001cc <spi_enable_clock+0x20>)
  4001b0:	4298      	cmp	r0, r3
  4001b2:	d003      	beq.n	4001bc <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4001b4:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <spi_enable_clock+0x24>)
  4001b6:	4298      	cmp	r0, r3
  4001b8:	d004      	beq.n	4001c4 <spi_enable_clock+0x18>
  4001ba:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4001bc:	2015      	movs	r0, #21
  4001be:	4b05      	ldr	r3, [pc, #20]	; (4001d4 <spi_enable_clock+0x28>)
  4001c0:	4798      	blx	r3
  4001c2:	bd08      	pop	{r3, pc}
  4001c4:	202a      	movs	r0, #42	; 0x2a
  4001c6:	4b03      	ldr	r3, [pc, #12]	; (4001d4 <spi_enable_clock+0x28>)
  4001c8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4001ca:	e7f6      	b.n	4001ba <spi_enable_clock+0xe>
  4001cc:	40008000 	.word	0x40008000
  4001d0:	40058000 	.word	0x40058000
  4001d4:	00403799 	.word	0x00403799

004001d8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4001d8:	6843      	ldr	r3, [r0, #4]
  4001da:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4001de:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4001e0:	6843      	ldr	r3, [r0, #4]
  4001e2:	0409      	lsls	r1, r1, #16
  4001e4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4001e8:	4319      	orrs	r1, r3
  4001ea:	6041      	str	r1, [r0, #4]
  4001ec:	4770      	bx	lr

004001ee <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4001ee:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4001f0:	f643 2499 	movw	r4, #15001	; 0x3a99
  4001f4:	6905      	ldr	r5, [r0, #16]
  4001f6:	f015 0f02 	tst.w	r5, #2
  4001fa:	d103      	bne.n	400204 <spi_write+0x16>
		if (!timeout--) {
  4001fc:	3c01      	subs	r4, #1
  4001fe:	d1f9      	bne.n	4001f4 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400200:	2001      	movs	r0, #1
  400202:	e00c      	b.n	40021e <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400204:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400206:	f014 0f02 	tst.w	r4, #2
  40020a:	d006      	beq.n	40021a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40020c:	0412      	lsls	r2, r2, #16
  40020e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400212:	4311      	orrs	r1, r2
		if (uc_last) {
  400214:	b10b      	cbz	r3, 40021a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400216:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40021a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40021c:	2000      	movs	r0, #0
}
  40021e:	bc30      	pop	{r4, r5}
  400220:	4770      	bx	lr

00400222 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400222:	b932      	cbnz	r2, 400232 <spi_set_clock_polarity+0x10>
  400224:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400228:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40022a:	f023 0301 	bic.w	r3, r3, #1
  40022e:	6303      	str	r3, [r0, #48]	; 0x30
  400230:	4770      	bx	lr
  400232:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400236:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400238:	f043 0301 	orr.w	r3, r3, #1
  40023c:	6303      	str	r3, [r0, #48]	; 0x30
  40023e:	4770      	bx	lr

00400240 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400240:	b932      	cbnz	r2, 400250 <spi_set_clock_phase+0x10>
  400242:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400246:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400248:	f023 0302 	bic.w	r3, r3, #2
  40024c:	6303      	str	r3, [r0, #48]	; 0x30
  40024e:	4770      	bx	lr
  400250:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400254:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400256:	f043 0302 	orr.w	r3, r3, #2
  40025a:	6303      	str	r3, [r0, #48]	; 0x30
  40025c:	4770      	bx	lr

0040025e <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40025e:	2a04      	cmp	r2, #4
  400260:	d003      	beq.n	40026a <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400262:	b16a      	cbz	r2, 400280 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400264:	2a08      	cmp	r2, #8
  400266:	d016      	beq.n	400296 <spi_configure_cs_behavior+0x38>
  400268:	4770      	bx	lr
  40026a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40026e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400270:	f023 0308 	bic.w	r3, r3, #8
  400274:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400276:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400278:	f043 0304 	orr.w	r3, r3, #4
  40027c:	6303      	str	r3, [r0, #48]	; 0x30
  40027e:	4770      	bx	lr
  400280:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400284:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400286:	f023 0308 	bic.w	r3, r3, #8
  40028a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40028c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40028e:	f023 0304 	bic.w	r3, r3, #4
  400292:	6303      	str	r3, [r0, #48]	; 0x30
  400294:	4770      	bx	lr
  400296:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40029a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40029c:	f043 0308 	orr.w	r3, r3, #8
  4002a0:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4002a2:	e7e1      	b.n	400268 <spi_configure_cs_behavior+0xa>

004002a4 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4002a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4002a8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4002ae:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4002b0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002b2:	431a      	orrs	r2, r3
  4002b4:	630a      	str	r2, [r1, #48]	; 0x30
  4002b6:	4770      	bx	lr

004002b8 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4002b8:	1e43      	subs	r3, r0, #1
  4002ba:	4419      	add	r1, r3
  4002bc:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4002c0:	1e43      	subs	r3, r0, #1
  4002c2:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4002c4:	bf94      	ite	ls
  4002c6:	b200      	sxthls	r0, r0
		return -1;
  4002c8:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4002cc:	4770      	bx	lr

004002ce <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  4002ce:	b17a      	cbz	r2, 4002f0 <spi_set_baudrate_div+0x22>
{
  4002d0:	b410      	push	{r4}
  4002d2:	4614      	mov	r4, r2
  4002d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4002d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4002de:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4002e0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4002e2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4002e6:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4002e8:	2000      	movs	r0, #0
}
  4002ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  4002ee:	4770      	bx	lr
        return -1;
  4002f0:	f04f 30ff 	mov.w	r0, #4294967295
  4002f4:	4770      	bx	lr
	...

004002f8 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4002f8:	4b28      	ldr	r3, [pc, #160]	; (40039c <twihs_set_speed+0xa4>)
  4002fa:	4299      	cmp	r1, r3
  4002fc:	d84b      	bhi.n	400396 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4002fe:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  400302:	4299      	cmp	r1, r3
  400304:	d92d      	bls.n	400362 <twihs_set_speed+0x6a>
{
  400306:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400308:	4c25      	ldr	r4, [pc, #148]	; (4003a0 <twihs_set_speed+0xa8>)
  40030a:	fba4 3402 	umull	r3, r4, r4, r2
  40030e:	0ba4      	lsrs	r4, r4, #14
  400310:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400312:	4b24      	ldr	r3, [pc, #144]	; (4003a4 <twihs_set_speed+0xac>)
  400314:	440b      	add	r3, r1
  400316:	009b      	lsls	r3, r3, #2
  400318:	fbb2 f2f3 	udiv	r2, r2, r3
  40031c:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40031e:	2cff      	cmp	r4, #255	; 0xff
  400320:	d91d      	bls.n	40035e <twihs_set_speed+0x66>
  400322:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  400324:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  400326:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400328:	2cff      	cmp	r4, #255	; 0xff
  40032a:	d901      	bls.n	400330 <twihs_set_speed+0x38>
  40032c:	2906      	cmp	r1, #6
  40032e:	d9f9      	bls.n	400324 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400330:	2aff      	cmp	r2, #255	; 0xff
  400332:	d907      	bls.n	400344 <twihs_set_speed+0x4c>
  400334:	2906      	cmp	r1, #6
  400336:	d805      	bhi.n	400344 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  400338:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  40033a:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40033c:	2aff      	cmp	r2, #255	; 0xff
  40033e:	d901      	bls.n	400344 <twihs_set_speed+0x4c>
  400340:	2906      	cmp	r1, #6
  400342:	d9f9      	bls.n	400338 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  400344:	0213      	lsls	r3, r2, #8
  400346:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  400348:	0409      	lsls	r1, r1, #16
  40034a:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  40034e:	430b      	orrs	r3, r1
  400350:	b2e4      	uxtb	r4, r4
  400352:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  400354:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400356:	2000      	movs	r0, #0
}
  400358:	f85d 4b04 	ldr.w	r4, [sp], #4
  40035c:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40035e:	2100      	movs	r1, #0
  400360:	e7e6      	b.n	400330 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400362:	0049      	lsls	r1, r1, #1
  400364:	fbb2 f2f1 	udiv	r2, r2, r1
  400368:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40036a:	2aff      	cmp	r2, #255	; 0xff
  40036c:	d911      	bls.n	400392 <twihs_set_speed+0x9a>
  40036e:	2300      	movs	r3, #0
			ckdiv++;
  400370:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  400372:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400374:	2aff      	cmp	r2, #255	; 0xff
  400376:	d901      	bls.n	40037c <twihs_set_speed+0x84>
  400378:	2b06      	cmp	r3, #6
  40037a:	d9f9      	bls.n	400370 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  40037c:	0211      	lsls	r1, r2, #8
  40037e:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  400380:	041b      	lsls	r3, r3, #16
  400382:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  400386:	430b      	orrs	r3, r1
  400388:	b2d2      	uxtb	r2, r2
  40038a:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  40038c:	6102      	str	r2, [r0, #16]
	return PASS;
  40038e:	2000      	movs	r0, #0
  400390:	4770      	bx	lr
	uint32_t ckdiv = 0;
  400392:	2300      	movs	r3, #0
  400394:	e7f2      	b.n	40037c <twihs_set_speed+0x84>
		return FAIL;
  400396:	2001      	movs	r0, #1
  400398:	4770      	bx	lr
  40039a:	bf00      	nop
  40039c:	00061a80 	.word	0x00061a80
  4003a0:	057619f1 	.word	0x057619f1
  4003a4:	3ffd1200 	.word	0x3ffd1200

004003a8 <twihs_master_init>:
{
  4003a8:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  4003aa:	f04f 32ff 	mov.w	r2, #4294967295
  4003ae:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  4003b0:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  4003b2:	2280      	movs	r2, #128	; 0x80
  4003b4:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  4003b6:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4003b8:	2208      	movs	r2, #8
  4003ba:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4003bc:	2220      	movs	r2, #32
  4003be:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  4003c0:	2204      	movs	r2, #4
  4003c2:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  4003c4:	680a      	ldr	r2, [r1, #0]
  4003c6:	6849      	ldr	r1, [r1, #4]
  4003c8:	4b03      	ldr	r3, [pc, #12]	; (4003d8 <twihs_master_init+0x30>)
  4003ca:	4798      	blx	r3
}
  4003cc:	2801      	cmp	r0, #1
  4003ce:	bf14      	ite	ne
  4003d0:	2000      	movne	r0, #0
  4003d2:	2001      	moveq	r0, #1
  4003d4:	bd08      	pop	{r3, pc}
  4003d6:	bf00      	nop
  4003d8:	004002f9 	.word	0x004002f9

004003dc <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  4003dc:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  4003de:	2a00      	cmp	r2, #0
  4003e0:	d04c      	beq.n	40047c <twihs_master_read+0xa0>
{
  4003e2:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  4003e4:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  4003e6:	2600      	movs	r6, #0
  4003e8:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4003ea:	684b      	ldr	r3, [r1, #4]
  4003ec:	021b      	lsls	r3, r3, #8
  4003ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4003f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4003f6:	7c0d      	ldrb	r5, [r1, #16]
  4003f8:	042d      	lsls	r5, r5, #16
  4003fa:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  4003fe:	432b      	orrs	r3, r5
  400400:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  400402:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400404:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  400406:	b15d      	cbz	r5, 400420 <twihs_master_read+0x44>
	val = addr[0];
  400408:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  40040a:	2d01      	cmp	r5, #1
  40040c:	dd02      	ble.n	400414 <twihs_master_read+0x38>
		val |= addr[1];
  40040e:	784e      	ldrb	r6, [r1, #1]
  400410:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  400414:	2d02      	cmp	r5, #2
  400416:	dd04      	ble.n	400422 <twihs_master_read+0x46>
		val |= addr[2];
  400418:	7889      	ldrb	r1, [r1, #2]
  40041a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  40041e:	e000      	b.n	400422 <twihs_master_read+0x46>
		return 0;
  400420:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400422:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  400424:	2301      	movs	r3, #1
  400426:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  400428:	2502      	movs	r5, #2
  40042a:	e012      	b.n	400452 <twihs_master_read+0x76>
  40042c:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  40042e:	f013 0f02 	tst.w	r3, #2
  400432:	d01b      	beq.n	40046c <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  400434:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400436:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  400438:	6a03      	ldr	r3, [r0, #32]
  40043a:	f013 0f01 	tst.w	r3, #1
  40043e:	d0fb      	beq.n	400438 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  400440:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  400442:	2000      	movs	r0, #0
}
  400444:	bc70      	pop	{r4, r5, r6}
  400446:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  400448:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40044a:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  40044e:	3a01      	subs	r2, #1
  400450:	d0f2      	beq.n	400438 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  400452:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400454:	f413 7f80 	tst.w	r3, #256	; 0x100
  400458:	d114      	bne.n	400484 <twihs_master_read+0xa8>
  40045a:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  40045e:	2a01      	cmp	r2, #1
  400460:	d0e4      	beq.n	40042c <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  400462:	f013 0f02 	tst.w	r3, #2
  400466:	d1ef      	bne.n	400448 <twihs_master_read+0x6c>
	while (cnt > 0) {
  400468:	2a00      	cmp	r2, #0
  40046a:	d0e5      	beq.n	400438 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  40046c:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40046e:	f413 7f80 	tst.w	r3, #256	; 0x100
  400472:	d105      	bne.n	400480 <twihs_master_read+0xa4>
		if (!timeout--) {
  400474:	3901      	subs	r1, #1
  400476:	d1f2      	bne.n	40045e <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  400478:	2009      	movs	r0, #9
  40047a:	e7e3      	b.n	400444 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  40047c:	2001      	movs	r0, #1
  40047e:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  400480:	2005      	movs	r0, #5
  400482:	e7df      	b.n	400444 <twihs_master_read+0x68>
  400484:	2005      	movs	r0, #5
  400486:	e7dd      	b.n	400444 <twihs_master_read+0x68>

00400488 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  400488:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  40048a:	2b00      	cmp	r3, #0
  40048c:	d043      	beq.n	400516 <twihs_master_write+0x8e>
{
  40048e:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  400490:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  400492:	2600      	movs	r6, #0
  400494:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  400496:	7c0a      	ldrb	r2, [r1, #16]
  400498:	0412      	lsls	r2, r2, #16
  40049a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40049e:	684d      	ldr	r5, [r1, #4]
  4004a0:	022d      	lsls	r5, r5, #8
  4004a2:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4004a6:	432a      	orrs	r2, r5
  4004a8:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4004aa:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4004ac:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  4004ae:	b15d      	cbz	r5, 4004c8 <twihs_master_write+0x40>
	val = addr[0];
  4004b0:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  4004b2:	2d01      	cmp	r5, #1
  4004b4:	dd02      	ble.n	4004bc <twihs_master_write+0x34>
		val |= addr[1];
  4004b6:	784e      	ldrb	r6, [r1, #1]
  4004b8:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  4004bc:	2d02      	cmp	r5, #2
  4004be:	dd04      	ble.n	4004ca <twihs_master_write+0x42>
		val |= addr[2];
  4004c0:	7889      	ldrb	r1, [r1, #2]
  4004c2:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  4004c6:	e000      	b.n	4004ca <twihs_master_write+0x42>
		return 0;
  4004c8:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4004ca:	60c2      	str	r2, [r0, #12]
  4004cc:	e004      	b.n	4004d8 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  4004ce:	f814 2b01 	ldrb.w	r2, [r4], #1
  4004d2:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  4004d4:	3b01      	subs	r3, #1
  4004d6:	d00f      	beq.n	4004f8 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  4004d8:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4004da:	f412 7f80 	tst.w	r2, #256	; 0x100
  4004de:	d11e      	bne.n	40051e <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  4004e0:	f012 0f04 	tst.w	r2, #4
  4004e4:	d1f3      	bne.n	4004ce <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  4004e6:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4004e8:	f412 7f80 	tst.w	r2, #256	; 0x100
  4004ec:	d115      	bne.n	40051a <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  4004ee:	f012 0f04 	tst.w	r2, #4
  4004f2:	d1ec      	bne.n	4004ce <twihs_master_write+0x46>
	while (cnt > 0) {
  4004f4:	2b00      	cmp	r3, #0
  4004f6:	d1f6      	bne.n	4004e6 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  4004f8:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4004fa:	f413 7f80 	tst.w	r3, #256	; 0x100
  4004fe:	d111      	bne.n	400524 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  400500:	f013 0f04 	tst.w	r3, #4
  400504:	d0f8      	beq.n	4004f8 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  400506:	2302      	movs	r3, #2
  400508:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  40050a:	6a03      	ldr	r3, [r0, #32]
  40050c:	f013 0f01 	tst.w	r3, #1
  400510:	d0fb      	beq.n	40050a <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  400512:	2000      	movs	r0, #0
  400514:	e004      	b.n	400520 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  400516:	2001      	movs	r0, #1
  400518:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  40051a:	2005      	movs	r0, #5
  40051c:	e000      	b.n	400520 <twihs_master_write+0x98>
  40051e:	2005      	movs	r0, #5
}
  400520:	bc70      	pop	{r4, r5, r6}
  400522:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  400524:	2005      	movs	r0, #5
  400526:	e7fb      	b.n	400520 <twihs_master_write+0x98>

00400528 <twihs_probe>:
{
  400528:	b500      	push	{lr}
  40052a:	b087      	sub	sp, #28
	uint8_t data = 0;
  40052c:	2300      	movs	r3, #0
  40052e:	aa06      	add	r2, sp, #24
  400530:	f802 3d15 	strb.w	r3, [r2, #-21]!
	packet.buffer = &data;
  400534:	9203      	str	r2, [sp, #12]
	packet.length = 1;
  400536:	2201      	movs	r2, #1
  400538:	9204      	str	r2, [sp, #16]
	packet.chip = (uint32_t) uc_slave_addr;
  40053a:	f88d 1014 	strb.w	r1, [sp, #20]
	packet.addr[0] = 0;
  40053e:	f88d 3004 	strb.w	r3, [sp, #4]
	packet.addr_length = 0;
  400542:	9302      	str	r3, [sp, #8]
	return (twihs_master_write(p_twihs, &packet));
  400544:	a901      	add	r1, sp, #4
  400546:	4b02      	ldr	r3, [pc, #8]	; (400550 <twihs_probe+0x28>)
  400548:	4798      	blx	r3
}
  40054a:	b007      	add	sp, #28
  40054c:	f85d fb04 	ldr.w	pc, [sp], #4
  400550:	00400489 	.word	0x00400489

00400554 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400554:	f100 0308 	add.w	r3, r0, #8
  400558:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40055a:	f04f 32ff 	mov.w	r2, #4294967295
  40055e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400560:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400562:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400564:	2300      	movs	r3, #0
  400566:	6003      	str	r3, [r0, #0]
  400568:	4770      	bx	lr

0040056a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40056a:	2300      	movs	r3, #0
  40056c:	6103      	str	r3, [r0, #16]
  40056e:	4770      	bx	lr

00400570 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400570:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400572:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400574:	689a      	ldr	r2, [r3, #8]
  400576:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400578:	689a      	ldr	r2, [r3, #8]
  40057a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  40057c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40057e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400580:	6803      	ldr	r3, [r0, #0]
  400582:	3301      	adds	r3, #1
  400584:	6003      	str	r3, [r0, #0]
  400586:	4770      	bx	lr

00400588 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400588:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40058a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40058c:	f1b5 3fff 	cmp.w	r5, #4294967295
  400590:	d002      	beq.n	400598 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400592:	f100 0208 	add.w	r2, r0, #8
  400596:	e002      	b.n	40059e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  400598:	6902      	ldr	r2, [r0, #16]
  40059a:	e004      	b.n	4005a6 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40059c:	461a      	mov	r2, r3
  40059e:	6853      	ldr	r3, [r2, #4]
  4005a0:	681c      	ldr	r4, [r3, #0]
  4005a2:	42a5      	cmp	r5, r4
  4005a4:	d2fa      	bcs.n	40059c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4005a6:	6853      	ldr	r3, [r2, #4]
  4005a8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4005aa:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4005ac:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4005ae:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4005b0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4005b2:	6803      	ldr	r3, [r0, #0]
  4005b4:	3301      	adds	r3, #1
  4005b6:	6003      	str	r3, [r0, #0]
}
  4005b8:	bc30      	pop	{r4, r5}
  4005ba:	4770      	bx	lr

004005bc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4005bc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4005be:	6842      	ldr	r2, [r0, #4]
  4005c0:	6881      	ldr	r1, [r0, #8]
  4005c2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4005c4:	6882      	ldr	r2, [r0, #8]
  4005c6:	6841      	ldr	r1, [r0, #4]
  4005c8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4005ca:	685a      	ldr	r2, [r3, #4]
  4005cc:	4290      	cmp	r0, r2
  4005ce:	d006      	beq.n	4005de <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4005d0:	2200      	movs	r2, #0
  4005d2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4005d4:	681a      	ldr	r2, [r3, #0]
  4005d6:	3a01      	subs	r2, #1
  4005d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  4005da:	6818      	ldr	r0, [r3, #0]
}
  4005dc:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4005de:	6882      	ldr	r2, [r0, #8]
  4005e0:	605a      	str	r2, [r3, #4]
  4005e2:	e7f5      	b.n	4005d0 <uxListRemove+0x14>

004005e4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  4005e4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
  4005e6:	2300      	movs	r3, #0
  4005e8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4005ea:	4b0f      	ldr	r3, [pc, #60]	; (400628 <prvTaskExitError+0x44>)
  4005ec:	681b      	ldr	r3, [r3, #0]
  4005ee:	f1b3 3fff 	cmp.w	r3, #4294967295
  4005f2:	d00a      	beq.n	40060a <prvTaskExitError+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4005f4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4005f8:	b672      	cpsid	i
  4005fa:	f383 8811 	msr	BASEPRI, r3
  4005fe:	f3bf 8f6f 	isb	sy
  400602:	f3bf 8f4f 	dsb	sy
  400606:	b662      	cpsie	i
  400608:	e7fe      	b.n	400608 <prvTaskExitError+0x24>
  40060a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40060e:	b672      	cpsid	i
  400610:	f383 8811 	msr	BASEPRI, r3
  400614:	f3bf 8f6f 	isb	sy
  400618:	f3bf 8f4f 	dsb	sy
  40061c:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
  40061e:	9b01      	ldr	r3, [sp, #4]
  400620:	2b00      	cmp	r3, #0
  400622:	d0fc      	beq.n	40061e <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
  400624:	b002      	add	sp, #8
  400626:	4770      	bx	lr
  400628:	2040000c 	.word	0x2040000c

0040062c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
  40062c:	4808      	ldr	r0, [pc, #32]	; (400650 <prvPortStartFirstTask+0x24>)
  40062e:	6800      	ldr	r0, [r0, #0]
  400630:	6800      	ldr	r0, [r0, #0]
  400632:	f380 8808 	msr	MSP, r0
  400636:	f04f 0000 	mov.w	r0, #0
  40063a:	f380 8814 	msr	CONTROL, r0
  40063e:	b662      	cpsie	i
  400640:	b661      	cpsie	f
  400642:	f3bf 8f4f 	dsb	sy
  400646:	f3bf 8f6f 	isb	sy
  40064a:	df00      	svc	0
  40064c:	bf00      	nop
  40064e:	0000      	.short	0x0000
  400650:	e000ed08 	.word	0xe000ed08

00400654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400654:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400664 <vPortEnableVFP+0x10>
  400658:	6801      	ldr	r1, [r0, #0]
  40065a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40065e:	6001      	str	r1, [r0, #0]
  400660:	4770      	bx	lr
  400662:	0000      	.short	0x0000
  400664:	e000ed88 	.word	0xe000ed88

00400668 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400668:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40066c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  400670:	f021 0101 	bic.w	r1, r1, #1
  400674:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400678:	4b05      	ldr	r3, [pc, #20]	; (400690 <pxPortInitialiseStack+0x28>)
  40067a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40067e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  400682:	f06f 0302 	mvn.w	r3, #2
  400686:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40068a:	3844      	subs	r0, #68	; 0x44
  40068c:	4770      	bx	lr
  40068e:	bf00      	nop
  400690:	004005e5 	.word	0x004005e5

00400694 <vPortEnterCritical>:
  400694:	f04f 0380 	mov.w	r3, #128	; 0x80
  400698:	b672      	cpsid	i
  40069a:	f383 8811 	msr	BASEPRI, r3
  40069e:	f3bf 8f6f 	isb	sy
  4006a2:	f3bf 8f4f 	dsb	sy
  4006a6:	b662      	cpsie	i
	uxCriticalNesting++;
  4006a8:	4a0b      	ldr	r2, [pc, #44]	; (4006d8 <vPortEnterCritical+0x44>)
  4006aa:	6813      	ldr	r3, [r2, #0]
  4006ac:	3301      	adds	r3, #1
  4006ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4006b0:	2b01      	cmp	r3, #1
  4006b2:	d10f      	bne.n	4006d4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4006b4:	4b09      	ldr	r3, [pc, #36]	; (4006dc <vPortEnterCritical+0x48>)
  4006b6:	681b      	ldr	r3, [r3, #0]
  4006b8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4006bc:	d00a      	beq.n	4006d4 <vPortEnterCritical+0x40>
  4006be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4006c2:	b672      	cpsid	i
  4006c4:	f383 8811 	msr	BASEPRI, r3
  4006c8:	f3bf 8f6f 	isb	sy
  4006cc:	f3bf 8f4f 	dsb	sy
  4006d0:	b662      	cpsie	i
  4006d2:	e7fe      	b.n	4006d2 <vPortEnterCritical+0x3e>
  4006d4:	4770      	bx	lr
  4006d6:	bf00      	nop
  4006d8:	2040000c 	.word	0x2040000c
  4006dc:	e000ed04 	.word	0xe000ed04

004006e0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4006e0:	4b0a      	ldr	r3, [pc, #40]	; (40070c <vPortExitCritical+0x2c>)
  4006e2:	681b      	ldr	r3, [r3, #0]
  4006e4:	b953      	cbnz	r3, 4006fc <vPortExitCritical+0x1c>
  4006e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4006ea:	b672      	cpsid	i
  4006ec:	f383 8811 	msr	BASEPRI, r3
  4006f0:	f3bf 8f6f 	isb	sy
  4006f4:	f3bf 8f4f 	dsb	sy
  4006f8:	b662      	cpsie	i
  4006fa:	e7fe      	b.n	4006fa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4006fc:	3b01      	subs	r3, #1
  4006fe:	4a03      	ldr	r2, [pc, #12]	; (40070c <vPortExitCritical+0x2c>)
  400700:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400702:	b90b      	cbnz	r3, 400708 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400704:	f383 8811 	msr	BASEPRI, r3
  400708:	4770      	bx	lr
  40070a:	bf00      	nop
  40070c:	2040000c 	.word	0x2040000c

00400710 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  400710:	4b05      	ldr	r3, [pc, #20]	; (400728 <vPortSetupTimerInterrupt+0x18>)
  400712:	2200      	movs	r2, #0
  400714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  400716:	4905      	ldr	r1, [pc, #20]	; (40072c <vPortSetupTimerInterrupt+0x1c>)
  400718:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  40071a:	f641 713f 	movw	r1, #7999	; 0x1f3f
  40071e:	4a04      	ldr	r2, [pc, #16]	; (400730 <vPortSetupTimerInterrupt+0x20>)
  400720:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400722:	2207      	movs	r2, #7
  400724:	601a      	str	r2, [r3, #0]
  400726:	4770      	bx	lr
  400728:	e000e010 	.word	0xe000e010
  40072c:	e000e018 	.word	0xe000e018
  400730:	e000e014 	.word	0xe000e014

00400734 <xPortStartScheduler>:
{
  400734:	b510      	push	{r4, lr}
  400736:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400738:	4b2e      	ldr	r3, [pc, #184]	; (4007f4 <xPortStartScheduler+0xc0>)
  40073a:	781a      	ldrb	r2, [r3, #0]
  40073c:	b2d2      	uxtb	r2, r2
  40073e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400740:	22ff      	movs	r2, #255	; 0xff
  400742:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400744:	781b      	ldrb	r3, [r3, #0]
  400746:	b2db      	uxtb	r3, r3
  400748:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  40074c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400750:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400754:	4a28      	ldr	r2, [pc, #160]	; (4007f8 <xPortStartScheduler+0xc4>)
  400756:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400758:	2207      	movs	r2, #7
  40075a:	4b28      	ldr	r3, [pc, #160]	; (4007fc <xPortStartScheduler+0xc8>)
  40075c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40075e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400762:	f013 0f80 	tst.w	r3, #128	; 0x80
  400766:	d012      	beq.n	40078e <xPortStartScheduler+0x5a>
  400768:	2306      	movs	r3, #6
  40076a:	e000      	b.n	40076e <xPortStartScheduler+0x3a>
  40076c:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40076e:	f89d 2003 	ldrb.w	r2, [sp, #3]
  400772:	0052      	lsls	r2, r2, #1
  400774:	b2d2      	uxtb	r2, r2
  400776:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40077a:	f89d 2003 	ldrb.w	r2, [sp, #3]
  40077e:	1e59      	subs	r1, r3, #1
  400780:	f012 0f80 	tst.w	r2, #128	; 0x80
  400784:	d1f2      	bne.n	40076c <xPortStartScheduler+0x38>
  400786:	4a1d      	ldr	r2, [pc, #116]	; (4007fc <xPortStartScheduler+0xc8>)
  400788:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
  40078a:	2b04      	cmp	r3, #4
  40078c:	d00a      	beq.n	4007a4 <xPortStartScheduler+0x70>
	__asm volatile
  40078e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400792:	b672      	cpsid	i
  400794:	f383 8811 	msr	BASEPRI, r3
  400798:	f3bf 8f6f 	isb	sy
  40079c:	f3bf 8f4f 	dsb	sy
  4007a0:	b662      	cpsie	i
  4007a2:	e7fe      	b.n	4007a2 <xPortStartScheduler+0x6e>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4007a4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4007a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4007aa:	4a14      	ldr	r2, [pc, #80]	; (4007fc <xPortStartScheduler+0xc8>)
  4007ac:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4007ae:	9b01      	ldr	r3, [sp, #4]
  4007b0:	b2db      	uxtb	r3, r3
  4007b2:	4a10      	ldr	r2, [pc, #64]	; (4007f4 <xPortStartScheduler+0xc0>)
  4007b4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4007b6:	4b12      	ldr	r3, [pc, #72]	; (400800 <xPortStartScheduler+0xcc>)
  4007b8:	681a      	ldr	r2, [r3, #0]
  4007ba:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4007be:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4007c0:	681a      	ldr	r2, [r3, #0]
  4007c2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4007c6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4007c8:	4b0e      	ldr	r3, [pc, #56]	; (400804 <xPortStartScheduler+0xd0>)
  4007ca:	4798      	blx	r3
	uxCriticalNesting = 0;
  4007cc:	2400      	movs	r4, #0
  4007ce:	4b0e      	ldr	r3, [pc, #56]	; (400808 <xPortStartScheduler+0xd4>)
  4007d0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  4007d2:	4b0e      	ldr	r3, [pc, #56]	; (40080c <xPortStartScheduler+0xd8>)
  4007d4:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4007d6:	4a0e      	ldr	r2, [pc, #56]	; (400810 <xPortStartScheduler+0xdc>)
  4007d8:	6813      	ldr	r3, [r2, #0]
  4007da:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4007de:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4007e0:	4b0c      	ldr	r3, [pc, #48]	; (400814 <xPortStartScheduler+0xe0>)
  4007e2:	4798      	blx	r3
	vTaskSwitchContext();
  4007e4:	4b0c      	ldr	r3, [pc, #48]	; (400818 <xPortStartScheduler+0xe4>)
  4007e6:	4798      	blx	r3
	prvTaskExitError();
  4007e8:	4b0c      	ldr	r3, [pc, #48]	; (40081c <xPortStartScheduler+0xe8>)
  4007ea:	4798      	blx	r3
}
  4007ec:	4620      	mov	r0, r4
  4007ee:	b002      	add	sp, #8
  4007f0:	bd10      	pop	{r4, pc}
  4007f2:	bf00      	nop
  4007f4:	e000e400 	.word	0xe000e400
  4007f8:	204009f4 	.word	0x204009f4
  4007fc:	204009f8 	.word	0x204009f8
  400800:	e000ed20 	.word	0xe000ed20
  400804:	00400711 	.word	0x00400711
  400808:	2040000c 	.word	0x2040000c
  40080c:	00400655 	.word	0x00400655
  400810:	e000ef34 	.word	0xe000ef34
  400814:	0040062d 	.word	0x0040062d
  400818:	004019cd 	.word	0x004019cd
  40081c:	004005e5 	.word	0x004005e5

00400820 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
  400820:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400824:	2b0f      	cmp	r3, #15
  400826:	d911      	bls.n	40084c <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400828:	4a12      	ldr	r2, [pc, #72]	; (400874 <vPortValidateInterruptPriority+0x54>)
  40082a:	5c9b      	ldrb	r3, [r3, r2]
  40082c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40082e:	4a12      	ldr	r2, [pc, #72]	; (400878 <vPortValidateInterruptPriority+0x58>)
  400830:	7812      	ldrb	r2, [r2, #0]
  400832:	429a      	cmp	r2, r3
  400834:	d90a      	bls.n	40084c <vPortValidateInterruptPriority+0x2c>
  400836:	f04f 0380 	mov.w	r3, #128	; 0x80
  40083a:	b672      	cpsid	i
  40083c:	f383 8811 	msr	BASEPRI, r3
  400840:	f3bf 8f6f 	isb	sy
  400844:	f3bf 8f4f 	dsb	sy
  400848:	b662      	cpsie	i
  40084a:	e7fe      	b.n	40084a <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40084c:	4b0b      	ldr	r3, [pc, #44]	; (40087c <vPortValidateInterruptPriority+0x5c>)
  40084e:	681b      	ldr	r3, [r3, #0]
  400850:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400854:	4a0a      	ldr	r2, [pc, #40]	; (400880 <vPortValidateInterruptPriority+0x60>)
  400856:	6812      	ldr	r2, [r2, #0]
  400858:	4293      	cmp	r3, r2
  40085a:	d90a      	bls.n	400872 <vPortValidateInterruptPriority+0x52>
  40085c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400860:	b672      	cpsid	i
  400862:	f383 8811 	msr	BASEPRI, r3
  400866:	f3bf 8f6f 	isb	sy
  40086a:	f3bf 8f4f 	dsb	sy
  40086e:	b662      	cpsie	i
  400870:	e7fe      	b.n	400870 <vPortValidateInterruptPriority+0x50>
  400872:	4770      	bx	lr
  400874:	e000e3f0 	.word	0xe000e3f0
  400878:	204009f4 	.word	0x204009f4
  40087c:	e000ed0c 	.word	0xe000ed0c
  400880:	204009f8 	.word	0x204009f8

00400884 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400884:	b538      	push	{r3, r4, r5, lr}
  400886:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  400888:	f010 0f07 	tst.w	r0, #7
  40088c:	d002      	beq.n	400894 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40088e:	f020 0407 	bic.w	r4, r0, #7
  400892:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
  400894:	4b11      	ldr	r3, [pc, #68]	; (4008dc <pvPortMalloc+0x58>)
  400896:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  400898:	4b11      	ldr	r3, [pc, #68]	; (4008e0 <pvPortMalloc+0x5c>)
  40089a:	681b      	ldr	r3, [r3, #0]
  40089c:	b193      	cbz	r3, 4008c4 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  40089e:	4b11      	ldr	r3, [pc, #68]	; (4008e4 <pvPortMalloc+0x60>)
  4008a0:	681b      	ldr	r3, [r3, #0]
  4008a2:	441c      	add	r4, r3
  4008a4:	42a3      	cmp	r3, r4
  4008a6:	d213      	bcs.n	4008d0 <pvPortMalloc+0x4c>
  4008a8:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  4008ac:	4294      	cmp	r4, r2
  4008ae:	d80f      	bhi.n	4008d0 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  4008b0:	4a0b      	ldr	r2, [pc, #44]	; (4008e0 <pvPortMalloc+0x5c>)
  4008b2:	6815      	ldr	r5, [r2, #0]
  4008b4:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  4008b6:	4b0b      	ldr	r3, [pc, #44]	; (4008e4 <pvPortMalloc+0x60>)
  4008b8:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4008ba:	4b0b      	ldr	r3, [pc, #44]	; (4008e8 <pvPortMalloc+0x64>)
  4008bc:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4008be:	b14d      	cbz	r5, 4008d4 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  4008c0:	4628      	mov	r0, r5
  4008c2:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  4008c4:	4b09      	ldr	r3, [pc, #36]	; (4008ec <pvPortMalloc+0x68>)
  4008c6:	f023 0307 	bic.w	r3, r3, #7
  4008ca:	4a05      	ldr	r2, [pc, #20]	; (4008e0 <pvPortMalloc+0x5c>)
  4008cc:	6013      	str	r3, [r2, #0]
  4008ce:	e7e6      	b.n	40089e <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  4008d0:	4b05      	ldr	r3, [pc, #20]	; (4008e8 <pvPortMalloc+0x64>)
  4008d2:	4798      	blx	r3
			vApplicationMallocFailedHook();
  4008d4:	4b06      	ldr	r3, [pc, #24]	; (4008f0 <pvPortMalloc+0x6c>)
  4008d6:	4798      	blx	r3
  4008d8:	2500      	movs	r5, #0
	return pvReturn;
  4008da:	e7f1      	b.n	4008c0 <pvPortMalloc+0x3c>
  4008dc:	004016f5 	.word	0x004016f5
  4008e0:	204009fc 	.word	0x204009fc
  4008e4:	2040c200 	.word	0x2040c200
  4008e8:	00401859 	.word	0x00401859
  4008ec:	20400a08 	.word	0x20400a08
  4008f0:	00403d9f 	.word	0x00403d9f

004008f4 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  4008f4:	b150      	cbz	r0, 40090c <vPortFree+0x18>
  4008f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4008fa:	b672      	cpsid	i
  4008fc:	f383 8811 	msr	BASEPRI, r3
  400900:	f3bf 8f6f 	isb	sy
  400904:	f3bf 8f4f 	dsb	sy
  400908:	b662      	cpsie	i
  40090a:	e7fe      	b.n	40090a <vPortFree+0x16>
  40090c:	4770      	bx	lr
	...

00400910 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
  400910:	b510      	push	{r4, lr}
  400912:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  400914:	4b04      	ldr	r3, [pc, #16]	; (400928 <prvIsQueueEmpty+0x18>)
  400916:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  400918:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  40091a:	4b04      	ldr	r3, [pc, #16]	; (40092c <prvIsQueueEmpty+0x1c>)
  40091c:	4798      	blx	r3

	return xReturn;
}
  40091e:	fab4 f084 	clz	r0, r4
  400922:	0940      	lsrs	r0, r0, #5
  400924:	bd10      	pop	{r4, pc}
  400926:	bf00      	nop
  400928:	00400695 	.word	0x00400695
  40092c:	004006e1 	.word	0x004006e1

00400930 <prvCopyDataToQueue>:
{
  400930:	b570      	push	{r4, r5, r6, lr}
  400932:	4604      	mov	r4, r0
  400934:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400936:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400938:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40093a:	b952      	cbnz	r2, 400952 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40093c:	6803      	ldr	r3, [r0, #0]
  40093e:	2b00      	cmp	r3, #0
  400940:	d12a      	bne.n	400998 <prvCopyDataToQueue+0x68>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400942:	6840      	ldr	r0, [r0, #4]
  400944:	4b17      	ldr	r3, [pc, #92]	; (4009a4 <prvCopyDataToQueue+0x74>)
  400946:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400948:	2300      	movs	r3, #0
  40094a:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  40094c:	3501      	adds	r5, #1
  40094e:	63a5      	str	r5, [r4, #56]	; 0x38
}
  400950:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
  400952:	b96e      	cbnz	r6, 400970 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400954:	6880      	ldr	r0, [r0, #8]
  400956:	4b14      	ldr	r3, [pc, #80]	; (4009a8 <prvCopyDataToQueue+0x78>)
  400958:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40095a:	68a3      	ldr	r3, [r4, #8]
  40095c:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40095e:	4413      	add	r3, r2
  400960:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400962:	6862      	ldr	r2, [r4, #4]
  400964:	4293      	cmp	r3, r2
  400966:	d319      	bcc.n	40099c <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400968:	6823      	ldr	r3, [r4, #0]
  40096a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  40096c:	2000      	movs	r0, #0
  40096e:	e7ed      	b.n	40094c <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400970:	68c0      	ldr	r0, [r0, #12]
  400972:	4b0d      	ldr	r3, [pc, #52]	; (4009a8 <prvCopyDataToQueue+0x78>)
  400974:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400976:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400978:	425b      	negs	r3, r3
  40097a:	68e2      	ldr	r2, [r4, #12]
  40097c:	441a      	add	r2, r3
  40097e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400980:	6821      	ldr	r1, [r4, #0]
  400982:	428a      	cmp	r2, r1
  400984:	d202      	bcs.n	40098c <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400986:	6862      	ldr	r2, [r4, #4]
  400988:	4413      	add	r3, r2
  40098a:	60e3      	str	r3, [r4, #12]
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  40098c:	b145      	cbz	r5, 4009a0 <prvCopyDataToQueue+0x70>
  40098e:	2e02      	cmp	r6, #2
  400990:	d106      	bne.n	4009a0 <prvCopyDataToQueue+0x70>
				--uxMessagesWaiting;
  400992:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  400994:	2000      	movs	r0, #0
  400996:	e7d9      	b.n	40094c <prvCopyDataToQueue+0x1c>
  400998:	2000      	movs	r0, #0
  40099a:	e7d7      	b.n	40094c <prvCopyDataToQueue+0x1c>
  40099c:	2000      	movs	r0, #0
  40099e:	e7d5      	b.n	40094c <prvCopyDataToQueue+0x1c>
  4009a0:	2000      	movs	r0, #0
  4009a2:	e7d3      	b.n	40094c <prvCopyDataToQueue+0x1c>
  4009a4:	00401d51 	.word	0x00401d51
  4009a8:	00407011 	.word	0x00407011

004009ac <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4009ac:	b570      	push	{r4, r5, r6, lr}
  4009ae:	b082      	sub	sp, #8
  4009b0:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4009b2:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4009b4:	b174      	cbz	r4, 4009d4 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4009b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4009b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4009ba:	429a      	cmp	r2, r3
  4009bc:	d315      	bcc.n	4009ea <prvNotifyQueueSetContainer+0x3e>
  4009be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4009c2:	b672      	cpsid	i
  4009c4:	f383 8811 	msr	BASEPRI, r3
  4009c8:	f3bf 8f6f 	isb	sy
  4009cc:	f3bf 8f4f 	dsb	sy
  4009d0:	b662      	cpsie	i
  4009d2:	e7fe      	b.n	4009d2 <prvNotifyQueueSetContainer+0x26>
  4009d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4009d8:	b672      	cpsid	i
  4009da:	f383 8811 	msr	BASEPRI, r3
  4009de:	f3bf 8f6f 	isb	sy
  4009e2:	f3bf 8f4f 	dsb	sy
  4009e6:	b662      	cpsie	i
  4009e8:	e7fe      	b.n	4009e8 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4009ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4009ec:	4293      	cmp	r3, r2
  4009ee:	d803      	bhi.n	4009f8 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  4009f0:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4009f2:	4630      	mov	r0, r6
  4009f4:	b002      	add	sp, #8
  4009f6:	bd70      	pop	{r4, r5, r6, pc}
  4009f8:	460a      	mov	r2, r1
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  4009fa:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  4009fe:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400a00:	a901      	add	r1, sp, #4
  400a02:	4620      	mov	r0, r4
  400a04:	4b0a      	ldr	r3, [pc, #40]	; (400a30 <prvNotifyQueueSetContainer+0x84>)
  400a06:	4798      	blx	r3
  400a08:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
  400a0a:	f1b5 3fff 	cmp.w	r5, #4294967295
  400a0e:	d10a      	bne.n	400a26 <prvNotifyQueueSetContainer+0x7a>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400a10:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400a12:	2b00      	cmp	r3, #0
  400a14:	d0ed      	beq.n	4009f2 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400a16:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400a1a:	4b06      	ldr	r3, [pc, #24]	; (400a34 <prvNotifyQueueSetContainer+0x88>)
  400a1c:	4798      	blx	r3
  400a1e:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  400a20:	bf18      	it	ne
  400a22:	2601      	movne	r6, #1
  400a24:	e7e5      	b.n	4009f2 <prvNotifyQueueSetContainer+0x46>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  400a26:	1c6b      	adds	r3, r5, #1
  400a28:	b25b      	sxtb	r3, r3
  400a2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  400a2e:	e7e0      	b.n	4009f2 <prvNotifyQueueSetContainer+0x46>
  400a30:	00400931 	.word	0x00400931
  400a34:	00401b21 	.word	0x00401b21

00400a38 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400a38:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400a3a:	b172      	cbz	r2, 400a5a <prvCopyDataFromQueue+0x22>
{
  400a3c:	b510      	push	{r4, lr}
  400a3e:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400a40:	68c4      	ldr	r4, [r0, #12]
  400a42:	4414      	add	r4, r2
  400a44:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400a46:	6840      	ldr	r0, [r0, #4]
  400a48:	4284      	cmp	r4, r0
  400a4a:	d301      	bcc.n	400a50 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400a4c:	6818      	ldr	r0, [r3, #0]
  400a4e:	60d8      	str	r0, [r3, #12]
  400a50:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400a52:	68d9      	ldr	r1, [r3, #12]
  400a54:	4b01      	ldr	r3, [pc, #4]	; (400a5c <prvCopyDataFromQueue+0x24>)
  400a56:	4798      	blx	r3
  400a58:	bd10      	pop	{r4, pc}
  400a5a:	4770      	bx	lr
  400a5c:	00407011 	.word	0x00407011

00400a60 <prvUnlockQueue>:
{
  400a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a64:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  400a66:	4b23      	ldr	r3, [pc, #140]	; (400af4 <prvUnlockQueue+0x94>)
  400a68:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
  400a6a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  400a6e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  400a70:	2c00      	cmp	r4, #0
  400a72:	dd19      	ble.n	400aa8 <prvUnlockQueue+0x48>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  400a74:	4e20      	ldr	r6, [pc, #128]	; (400af8 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
  400a76:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400b04 <prvUnlockQueue+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400a7a:	4f20      	ldr	r7, [pc, #128]	; (400afc <prvUnlockQueue+0x9c>)
  400a7c:	e008      	b.n	400a90 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400a7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  400a80:	b193      	cbz	r3, 400aa8 <prvUnlockQueue+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400a82:	f105 0024 	add.w	r0, r5, #36	; 0x24
  400a86:	47b8      	blx	r7
  400a88:	b960      	cbnz	r0, 400aa4 <prvUnlockQueue+0x44>
  400a8a:	3c01      	subs	r4, #1
  400a8c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  400a8e:	b15c      	cbz	r4, 400aa8 <prvUnlockQueue+0x48>
				if( pxQueue->pxQueueSetContainer != NULL )
  400a90:	6cab      	ldr	r3, [r5, #72]	; 0x48
  400a92:	2b00      	cmp	r3, #0
  400a94:	d0f3      	beq.n	400a7e <prvUnlockQueue+0x1e>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  400a96:	2100      	movs	r1, #0
  400a98:	4628      	mov	r0, r5
  400a9a:	47b0      	blx	r6
  400a9c:	2800      	cmp	r0, #0
  400a9e:	d0f4      	beq.n	400a8a <prvUnlockQueue+0x2a>
						vTaskMissedYield();
  400aa0:	47c0      	blx	r8
  400aa2:	e7f2      	b.n	400a8a <prvUnlockQueue+0x2a>
							vTaskMissedYield();
  400aa4:	47c0      	blx	r8
  400aa6:	e7f0      	b.n	400a8a <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
  400aa8:	23ff      	movs	r3, #255	; 0xff
  400aaa:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
  400aae:	4b14      	ldr	r3, [pc, #80]	; (400b00 <prvUnlockQueue+0xa0>)
  400ab0:	4798      	blx	r3
	taskENTER_CRITICAL();
  400ab2:	4b10      	ldr	r3, [pc, #64]	; (400af4 <prvUnlockQueue+0x94>)
  400ab4:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
  400ab6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  400aba:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  400abc:	2c00      	cmp	r4, #0
  400abe:	dd12      	ble.n	400ae6 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400ac0:	692b      	ldr	r3, [r5, #16]
  400ac2:	b183      	cbz	r3, 400ae6 <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400ac4:	f105 0710 	add.w	r7, r5, #16
  400ac8:	4e0c      	ldr	r6, [pc, #48]	; (400afc <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  400aca:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400b04 <prvUnlockQueue+0xa4>
  400ace:	e004      	b.n	400ada <prvUnlockQueue+0x7a>
  400ad0:	3c01      	subs	r4, #1
  400ad2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  400ad4:	b13c      	cbz	r4, 400ae6 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400ad6:	692b      	ldr	r3, [r5, #16]
  400ad8:	b12b      	cbz	r3, 400ae6 <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400ada:	4638      	mov	r0, r7
  400adc:	47b0      	blx	r6
  400ade:	2800      	cmp	r0, #0
  400ae0:	d0f6      	beq.n	400ad0 <prvUnlockQueue+0x70>
					vTaskMissedYield();
  400ae2:	47c0      	blx	r8
  400ae4:	e7f4      	b.n	400ad0 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
  400ae6:	23ff      	movs	r3, #255	; 0xff
  400ae8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
  400aec:	4b04      	ldr	r3, [pc, #16]	; (400b00 <prvUnlockQueue+0xa0>)
  400aee:	4798      	blx	r3
  400af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400af4:	00400695 	.word	0x00400695
  400af8:	004009ad 	.word	0x004009ad
  400afc:	00401b21 	.word	0x00401b21
  400b00:	004006e1 	.word	0x004006e1
  400b04:	00401c65 	.word	0x00401c65

00400b08 <xQueueGenericReset>:
{
  400b08:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  400b0a:	b330      	cbz	r0, 400b5a <xQueueGenericReset+0x52>
  400b0c:	4604      	mov	r4, r0
  400b0e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  400b10:	4b1d      	ldr	r3, [pc, #116]	; (400b88 <xQueueGenericReset+0x80>)
  400b12:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400b14:	6822      	ldr	r2, [r4, #0]
  400b16:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400b18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400b1a:	fb03 f301 	mul.w	r3, r3, r1
  400b1e:	18d0      	adds	r0, r2, r3
  400b20:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400b22:	2000      	movs	r0, #0
  400b24:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400b26:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  400b28:	1a5b      	subs	r3, r3, r1
  400b2a:	4413      	add	r3, r2
  400b2c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  400b2e:	23ff      	movs	r3, #255	; 0xff
  400b30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  400b34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  400b38:	b9d5      	cbnz	r5, 400b70 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400b3a:	6923      	ldr	r3, [r4, #16]
  400b3c:	b1fb      	cbz	r3, 400b7e <xQueueGenericReset+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400b3e:	f104 0010 	add.w	r0, r4, #16
  400b42:	4b12      	ldr	r3, [pc, #72]	; (400b8c <xQueueGenericReset+0x84>)
  400b44:	4798      	blx	r3
  400b46:	b1d0      	cbz	r0, 400b7e <xQueueGenericReset+0x76>
					queueYIELD_IF_USING_PREEMPTION();
  400b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400b4c:	4b10      	ldr	r3, [pc, #64]	; (400b90 <xQueueGenericReset+0x88>)
  400b4e:	601a      	str	r2, [r3, #0]
  400b50:	f3bf 8f4f 	dsb	sy
  400b54:	f3bf 8f6f 	isb	sy
  400b58:	e011      	b.n	400b7e <xQueueGenericReset+0x76>
  400b5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b5e:	b672      	cpsid	i
  400b60:	f383 8811 	msr	BASEPRI, r3
  400b64:	f3bf 8f6f 	isb	sy
  400b68:	f3bf 8f4f 	dsb	sy
  400b6c:	b662      	cpsie	i
  400b6e:	e7fe      	b.n	400b6e <xQueueGenericReset+0x66>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400b70:	f104 0010 	add.w	r0, r4, #16
  400b74:	4d07      	ldr	r5, [pc, #28]	; (400b94 <xQueueGenericReset+0x8c>)
  400b76:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400b78:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400b7c:	47a8      	blx	r5
	taskEXIT_CRITICAL();
  400b7e:	4b06      	ldr	r3, [pc, #24]	; (400b98 <xQueueGenericReset+0x90>)
  400b80:	4798      	blx	r3
}
  400b82:	2001      	movs	r0, #1
  400b84:	bd38      	pop	{r3, r4, r5, pc}
  400b86:	bf00      	nop
  400b88:	00400695 	.word	0x00400695
  400b8c:	00401b21 	.word	0x00401b21
  400b90:	e000ed04 	.word	0xe000ed04
  400b94:	00400555 	.word	0x00400555
  400b98:	004006e1 	.word	0x004006e1

00400b9c <xQueueGenericCreate>:
	{
  400b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400b9e:	b950      	cbnz	r0, 400bb6 <xQueueGenericCreate+0x1a>
  400ba0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ba4:	b672      	cpsid	i
  400ba6:	f383 8811 	msr	BASEPRI, r3
  400baa:	f3bf 8f6f 	isb	sy
  400bae:	f3bf 8f4f 	dsb	sy
  400bb2:	b662      	cpsie	i
  400bb4:	e7fe      	b.n	400bb4 <xQueueGenericCreate+0x18>
  400bb6:	4606      	mov	r6, r0
  400bb8:	4617      	mov	r7, r2
  400bba:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400bbc:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400bc0:	3054      	adds	r0, #84	; 0x54
  400bc2:	4b0b      	ldr	r3, [pc, #44]	; (400bf0 <xQueueGenericCreate+0x54>)
  400bc4:	4798      	blx	r3
		if( pxNewQueue != NULL )
  400bc6:	4604      	mov	r4, r0
  400bc8:	b178      	cbz	r0, 400bea <xQueueGenericCreate+0x4e>
	if( uxItemSize == ( UBaseType_t ) 0 )
  400bca:	b11d      	cbz	r5, 400bd4 <xQueueGenericCreate+0x38>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
  400bcc:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  400bd0:	6003      	str	r3, [r0, #0]
  400bd2:	e000      	b.n	400bd6 <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400bd4:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
  400bd6:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  400bd8:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400bda:	2101      	movs	r1, #1
  400bdc:	4620      	mov	r0, r4
  400bde:	4b05      	ldr	r3, [pc, #20]	; (400bf4 <xQueueGenericCreate+0x58>)
  400be0:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
  400be2:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
  400be6:	2300      	movs	r3, #0
  400be8:	64a3      	str	r3, [r4, #72]	; 0x48
	}
  400bea:	4620      	mov	r0, r4
  400bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400bee:	bf00      	nop
  400bf0:	00400885 	.word	0x00400885
  400bf4:	00400b09 	.word	0x00400b09

00400bf8 <xQueueGenericSend>:
{
  400bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400bfc:	b085      	sub	sp, #20
  400bfe:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  400c00:	b1b8      	cbz	r0, 400c32 <xQueueGenericSend+0x3a>
  400c02:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400c04:	b301      	cbz	r1, 400c48 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400c06:	2b02      	cmp	r3, #2
  400c08:	d02c      	beq.n	400c64 <xQueueGenericSend+0x6c>
  400c0a:	461e      	mov	r6, r3
  400c0c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400c0e:	4b69      	ldr	r3, [pc, #420]	; (400db4 <xQueueGenericSend+0x1bc>)
  400c10:	4798      	blx	r3
  400c12:	2800      	cmp	r0, #0
  400c14:	d134      	bne.n	400c80 <xQueueGenericSend+0x88>
  400c16:	9b01      	ldr	r3, [sp, #4]
  400c18:	2b00      	cmp	r3, #0
  400c1a:	d039      	beq.n	400c90 <xQueueGenericSend+0x98>
  400c1c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c20:	b672      	cpsid	i
  400c22:	f383 8811 	msr	BASEPRI, r3
  400c26:	f3bf 8f6f 	isb	sy
  400c2a:	f3bf 8f4f 	dsb	sy
  400c2e:	b662      	cpsie	i
  400c30:	e7fe      	b.n	400c30 <xQueueGenericSend+0x38>
  400c32:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c36:	b672      	cpsid	i
  400c38:	f383 8811 	msr	BASEPRI, r3
  400c3c:	f3bf 8f6f 	isb	sy
  400c40:	f3bf 8f4f 	dsb	sy
  400c44:	b662      	cpsie	i
  400c46:	e7fe      	b.n	400c46 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400c48:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400c4a:	2a00      	cmp	r2, #0
  400c4c:	d0db      	beq.n	400c06 <xQueueGenericSend+0xe>
  400c4e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c52:	b672      	cpsid	i
  400c54:	f383 8811 	msr	BASEPRI, r3
  400c58:	f3bf 8f6f 	isb	sy
  400c5c:	f3bf 8f4f 	dsb	sy
  400c60:	b662      	cpsie	i
  400c62:	e7fe      	b.n	400c62 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400c64:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  400c66:	2a01      	cmp	r2, #1
  400c68:	d0cf      	beq.n	400c0a <xQueueGenericSend+0x12>
  400c6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c6e:	b672      	cpsid	i
  400c70:	f383 8811 	msr	BASEPRI, r3
  400c74:	f3bf 8f6f 	isb	sy
  400c78:	f3bf 8f4f 	dsb	sy
  400c7c:	b662      	cpsie	i
  400c7e:	e7fe      	b.n	400c7e <xQueueGenericSend+0x86>
  400c80:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
  400c82:	f8df 815c 	ldr.w	r8, [pc, #348]	; 400de0 <xQueueGenericSend+0x1e8>
					vTaskInternalSetTimeOutState( &xTimeOut );
  400c86:	f8df a15c 	ldr.w	sl, [pc, #348]	; 400de4 <xQueueGenericSend+0x1ec>
					portYIELD_WITHIN_API();
  400c8a:	f8df 9134 	ldr.w	r9, [pc, #308]	; 400dc0 <xQueueGenericSend+0x1c8>
  400c8e:	e041      	b.n	400d14 <xQueueGenericSend+0x11c>
  400c90:	2500      	movs	r5, #0
  400c92:	e7f6      	b.n	400c82 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400c94:	4632      	mov	r2, r6
  400c96:	4639      	mov	r1, r7
  400c98:	4620      	mov	r0, r4
  400c9a:	4b47      	ldr	r3, [pc, #284]	; (400db8 <xQueueGenericSend+0x1c0>)
  400c9c:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  400c9e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ca0:	b193      	cbz	r3, 400cc8 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  400ca2:	4631      	mov	r1, r6
  400ca4:	4620      	mov	r0, r4
  400ca6:	4b45      	ldr	r3, [pc, #276]	; (400dbc <xQueueGenericSend+0x1c4>)
  400ca8:	4798      	blx	r3
  400caa:	b138      	cbz	r0, 400cbc <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  400cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400cb0:	4b43      	ldr	r3, [pc, #268]	; (400dc0 <xQueueGenericSend+0x1c8>)
  400cb2:	601a      	str	r2, [r3, #0]
  400cb4:	f3bf 8f4f 	dsb	sy
  400cb8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  400cbc:	4b41      	ldr	r3, [pc, #260]	; (400dc4 <xQueueGenericSend+0x1cc>)
  400cbe:	4798      	blx	r3
				return pdPASS;
  400cc0:	2001      	movs	r0, #1
}
  400cc2:	b005      	add	sp, #20
  400cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400cca:	b173      	cbz	r3, 400cea <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ccc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400cd0:	4b3d      	ldr	r3, [pc, #244]	; (400dc8 <xQueueGenericSend+0x1d0>)
  400cd2:	4798      	blx	r3
  400cd4:	2800      	cmp	r0, #0
  400cd6:	d0f1      	beq.n	400cbc <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  400cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400cdc:	4b38      	ldr	r3, [pc, #224]	; (400dc0 <xQueueGenericSend+0x1c8>)
  400cde:	601a      	str	r2, [r3, #0]
  400ce0:	f3bf 8f4f 	dsb	sy
  400ce4:	f3bf 8f6f 	isb	sy
  400ce8:	e7e8      	b.n	400cbc <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  400cea:	2800      	cmp	r0, #0
  400cec:	d0e6      	beq.n	400cbc <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  400cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400cf2:	4b33      	ldr	r3, [pc, #204]	; (400dc0 <xQueueGenericSend+0x1c8>)
  400cf4:	601a      	str	r2, [r3, #0]
  400cf6:	f3bf 8f4f 	dsb	sy
  400cfa:	f3bf 8f6f 	isb	sy
  400cfe:	e7dd      	b.n	400cbc <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  400d00:	4b30      	ldr	r3, [pc, #192]	; (400dc4 <xQueueGenericSend+0x1cc>)
  400d02:	4798      	blx	r3
					return errQUEUE_FULL;
  400d04:	2000      	movs	r0, #0
  400d06:	e7dc      	b.n	400cc2 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  400d08:	4620      	mov	r0, r4
  400d0a:	4b30      	ldr	r3, [pc, #192]	; (400dcc <xQueueGenericSend+0x1d4>)
  400d0c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400d0e:	4b30      	ldr	r3, [pc, #192]	; (400dd0 <xQueueGenericSend+0x1d8>)
  400d10:	4798      	blx	r3
  400d12:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
  400d14:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400d16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400d18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d1a:	429a      	cmp	r2, r3
  400d1c:	d3ba      	bcc.n	400c94 <xQueueGenericSend+0x9c>
  400d1e:	2e02      	cmp	r6, #2
  400d20:	d0b8      	beq.n	400c94 <xQueueGenericSend+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
  400d22:	9b01      	ldr	r3, [sp, #4]
  400d24:	2b00      	cmp	r3, #0
  400d26:	d0eb      	beq.n	400d00 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  400d28:	b90d      	cbnz	r5, 400d2e <xQueueGenericSend+0x136>
					vTaskInternalSetTimeOutState( &xTimeOut );
  400d2a:	a802      	add	r0, sp, #8
  400d2c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  400d2e:	4b25      	ldr	r3, [pc, #148]	; (400dc4 <xQueueGenericSend+0x1cc>)
  400d30:	4798      	blx	r3
		vTaskSuspendAll();
  400d32:	4b28      	ldr	r3, [pc, #160]	; (400dd4 <xQueueGenericSend+0x1dc>)
  400d34:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400d36:	47c0      	blx	r8
  400d38:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400d3c:	b25b      	sxtb	r3, r3
  400d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d42:	d102      	bne.n	400d4a <xQueueGenericSend+0x152>
  400d44:	2300      	movs	r3, #0
  400d46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  400d4a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400d4e:	b25b      	sxtb	r3, r3
  400d50:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d54:	d102      	bne.n	400d5c <xQueueGenericSend+0x164>
  400d56:	2300      	movs	r3, #0
  400d58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  400d5c:	4b19      	ldr	r3, [pc, #100]	; (400dc4 <xQueueGenericSend+0x1cc>)
  400d5e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400d60:	a901      	add	r1, sp, #4
  400d62:	a802      	add	r0, sp, #8
  400d64:	4b1c      	ldr	r3, [pc, #112]	; (400dd8 <xQueueGenericSend+0x1e0>)
  400d66:	4798      	blx	r3
  400d68:	b9e0      	cbnz	r0, 400da4 <xQueueGenericSend+0x1ac>
	taskENTER_CRITICAL();
  400d6a:	47c0      	blx	r8
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400d6c:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400d70:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  400d72:	4b14      	ldr	r3, [pc, #80]	; (400dc4 <xQueueGenericSend+0x1cc>)
  400d74:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400d76:	45ab      	cmp	fp, r5
  400d78:	d1c6      	bne.n	400d08 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400d7a:	9901      	ldr	r1, [sp, #4]
  400d7c:	f104 0010 	add.w	r0, r4, #16
  400d80:	4b16      	ldr	r3, [pc, #88]	; (400ddc <xQueueGenericSend+0x1e4>)
  400d82:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400d84:	4620      	mov	r0, r4
  400d86:	4b11      	ldr	r3, [pc, #68]	; (400dcc <xQueueGenericSend+0x1d4>)
  400d88:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400d8a:	4b11      	ldr	r3, [pc, #68]	; (400dd0 <xQueueGenericSend+0x1d8>)
  400d8c:	4798      	blx	r3
  400d8e:	2800      	cmp	r0, #0
  400d90:	d1bf      	bne.n	400d12 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  400d92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400d96:	f8c9 3000 	str.w	r3, [r9]
  400d9a:	f3bf 8f4f 	dsb	sy
  400d9e:	f3bf 8f6f 	isb	sy
  400da2:	e7b6      	b.n	400d12 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  400da4:	4620      	mov	r0, r4
  400da6:	4b09      	ldr	r3, [pc, #36]	; (400dcc <xQueueGenericSend+0x1d4>)
  400da8:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400daa:	4b09      	ldr	r3, [pc, #36]	; (400dd0 <xQueueGenericSend+0x1d8>)
  400dac:	4798      	blx	r3
			return errQUEUE_FULL;
  400dae:	2000      	movs	r0, #0
  400db0:	e787      	b.n	400cc2 <xQueueGenericSend+0xca>
  400db2:	bf00      	nop
  400db4:	00401c71 	.word	0x00401c71
  400db8:	00400931 	.word	0x00400931
  400dbc:	004009ad 	.word	0x004009ad
  400dc0:	e000ed04 	.word	0xe000ed04
  400dc4:	004006e1 	.word	0x004006e1
  400dc8:	00401b21 	.word	0x00401b21
  400dcc:	00400a61 	.word	0x00400a61
  400dd0:	00401859 	.word	0x00401859
  400dd4:	004016f5 	.word	0x004016f5
  400dd8:	00401bd1 	.word	0x00401bd1
  400ddc:	00401a9d 	.word	0x00401a9d
  400de0:	00400695 	.word	0x00400695
  400de4:	00401bb9 	.word	0x00401bb9

00400de8 <xQueueGenericSendFromISR>:
{
  400de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
  400dec:	2800      	cmp	r0, #0
  400dee:	d039      	beq.n	400e64 <xQueueGenericSendFromISR+0x7c>
  400df0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400df2:	2900      	cmp	r1, #0
  400df4:	d041      	beq.n	400e7a <xQueueGenericSendFromISR+0x92>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400df6:	2b02      	cmp	r3, #2
  400df8:	d04d      	beq.n	400e96 <xQueueGenericSendFromISR+0xae>
  400dfa:	461f      	mov	r7, r3
  400dfc:	4690      	mov	r8, r2
  400dfe:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400e00:	4b3a      	ldr	r3, [pc, #232]	; (400eec <xQueueGenericSendFromISR+0x104>)
  400e02:	4798      	blx	r3
	__asm volatile
  400e04:	f3ef 8611 	mrs	r6, BASEPRI
  400e08:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e0c:	b672      	cpsid	i
  400e0e:	f383 8811 	msr	BASEPRI, r3
  400e12:	f3bf 8f6f 	isb	sy
  400e16:	f3bf 8f4f 	dsb	sy
  400e1a:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400e1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400e1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400e20:	429a      	cmp	r2, r3
  400e22:	d301      	bcc.n	400e28 <xQueueGenericSendFromISR+0x40>
  400e24:	2f02      	cmp	r7, #2
  400e26:	d158      	bne.n	400eda <xQueueGenericSendFromISR+0xf2>
			const int8_t cTxLock = pxQueue->cTxLock;
  400e28:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  400e2c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400e2e:	463a      	mov	r2, r7
  400e30:	4649      	mov	r1, r9
  400e32:	4620      	mov	r0, r4
  400e34:	4b2e      	ldr	r3, [pc, #184]	; (400ef0 <xQueueGenericSendFromISR+0x108>)
  400e36:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
  400e38:	f1b5 3fff 	cmp.w	r5, #4294967295
  400e3c:	d147      	bne.n	400ece <xQueueGenericSendFromISR+0xe6>
					if( pxQueue->pxQueueSetContainer != NULL )
  400e3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400e40:	2b00      	cmp	r3, #0
  400e42:	d036      	beq.n	400eb2 <xQueueGenericSendFromISR+0xca>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  400e44:	4639      	mov	r1, r7
  400e46:	4620      	mov	r0, r4
  400e48:	4b2a      	ldr	r3, [pc, #168]	; (400ef4 <xQueueGenericSendFromISR+0x10c>)
  400e4a:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  400e4c:	f1b8 0f00 	cmp.w	r8, #0
  400e50:	d045      	beq.n	400ede <xQueueGenericSendFromISR+0xf6>
  400e52:	2800      	cmp	r0, #0
  400e54:	d043      	beq.n	400ede <xQueueGenericSendFromISR+0xf6>
								*pxHigherPriorityTaskWoken = pdTRUE;
  400e56:	2001      	movs	r0, #1
  400e58:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
  400e5c:	f386 8811 	msr	BASEPRI, r6
}
  400e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
  400e64:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e68:	b672      	cpsid	i
  400e6a:	f383 8811 	msr	BASEPRI, r3
  400e6e:	f3bf 8f6f 	isb	sy
  400e72:	f3bf 8f4f 	dsb	sy
  400e76:	b662      	cpsie	i
  400e78:	e7fe      	b.n	400e78 <xQueueGenericSendFromISR+0x90>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e7a:	6c00      	ldr	r0, [r0, #64]	; 0x40
  400e7c:	2800      	cmp	r0, #0
  400e7e:	d0ba      	beq.n	400df6 <xQueueGenericSendFromISR+0xe>
  400e80:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e84:	b672      	cpsid	i
  400e86:	f383 8811 	msr	BASEPRI, r3
  400e8a:	f3bf 8f6f 	isb	sy
  400e8e:	f3bf 8f4f 	dsb	sy
  400e92:	b662      	cpsie	i
  400e94:	e7fe      	b.n	400e94 <xQueueGenericSendFromISR+0xac>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400e96:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  400e98:	2801      	cmp	r0, #1
  400e9a:	d0ae      	beq.n	400dfa <xQueueGenericSendFromISR+0x12>
  400e9c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ea0:	b672      	cpsid	i
  400ea2:	f383 8811 	msr	BASEPRI, r3
  400ea6:	f3bf 8f6f 	isb	sy
  400eaa:	f3bf 8f4f 	dsb	sy
  400eae:	b662      	cpsie	i
  400eb0:	e7fe      	b.n	400eb0 <xQueueGenericSendFromISR+0xc8>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400eb4:	b1ab      	cbz	r3, 400ee2 <xQueueGenericSendFromISR+0xfa>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400eb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400eba:	4b0f      	ldr	r3, [pc, #60]	; (400ef8 <xQueueGenericSendFromISR+0x110>)
  400ebc:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  400ebe:	f1b8 0f00 	cmp.w	r8, #0
  400ec2:	d010      	beq.n	400ee6 <xQueueGenericSendFromISR+0xfe>
  400ec4:	b178      	cbz	r0, 400ee6 <xQueueGenericSendFromISR+0xfe>
									*pxHigherPriorityTaskWoken = pdTRUE;
  400ec6:	2001      	movs	r0, #1
  400ec8:	f8c8 0000 	str.w	r0, [r8]
  400ecc:	e7c6      	b.n	400e5c <xQueueGenericSendFromISR+0x74>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  400ece:	1c6b      	adds	r3, r5, #1
  400ed0:	b25b      	sxtb	r3, r3
  400ed2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
  400ed6:	2001      	movs	r0, #1
  400ed8:	e7c0      	b.n	400e5c <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
  400eda:	2000      	movs	r0, #0
  400edc:	e7be      	b.n	400e5c <xQueueGenericSendFromISR+0x74>
			xReturn = pdPASS;
  400ede:	2001      	movs	r0, #1
  400ee0:	e7bc      	b.n	400e5c <xQueueGenericSendFromISR+0x74>
  400ee2:	2001      	movs	r0, #1
  400ee4:	e7ba      	b.n	400e5c <xQueueGenericSendFromISR+0x74>
  400ee6:	2001      	movs	r0, #1
  400ee8:	e7b8      	b.n	400e5c <xQueueGenericSendFromISR+0x74>
  400eea:	bf00      	nop
  400eec:	00400821 	.word	0x00400821
  400ef0:	00400931 	.word	0x00400931
  400ef4:	004009ad 	.word	0x004009ad
  400ef8:	00401b21 	.word	0x00401b21

00400efc <xQueueReceive>:
{
  400efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400f00:	b084      	sub	sp, #16
  400f02:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
  400f04:	b190      	cbz	r0, 400f2c <xQueueReceive+0x30>
  400f06:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400f08:	b1d9      	cbz	r1, 400f42 <xQueueReceive+0x46>
  400f0a:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400f0c:	4b54      	ldr	r3, [pc, #336]	; (401060 <xQueueReceive+0x164>)
  400f0e:	4798      	blx	r3
  400f10:	bb28      	cbnz	r0, 400f5e <xQueueReceive+0x62>
  400f12:	9b01      	ldr	r3, [sp, #4]
  400f14:	b35b      	cbz	r3, 400f6e <xQueueReceive+0x72>
  400f16:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f1a:	b672      	cpsid	i
  400f1c:	f383 8811 	msr	BASEPRI, r3
  400f20:	f3bf 8f6f 	isb	sy
  400f24:	f3bf 8f4f 	dsb	sy
  400f28:	b662      	cpsie	i
  400f2a:	e7fe      	b.n	400f2a <xQueueReceive+0x2e>
  400f2c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f30:	b672      	cpsid	i
  400f32:	f383 8811 	msr	BASEPRI, r3
  400f36:	f3bf 8f6f 	isb	sy
  400f3a:	f3bf 8f4f 	dsb	sy
  400f3e:	b662      	cpsie	i
  400f40:	e7fe      	b.n	400f40 <xQueueReceive+0x44>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400f42:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400f44:	2b00      	cmp	r3, #0
  400f46:	d0e0      	beq.n	400f0a <xQueueReceive+0xe>
  400f48:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f4c:	b672      	cpsid	i
  400f4e:	f383 8811 	msr	BASEPRI, r3
  400f52:	f3bf 8f6f 	isb	sy
  400f56:	f3bf 8f4f 	dsb	sy
  400f5a:	b662      	cpsie	i
  400f5c:	e7fe      	b.n	400f5c <xQueueReceive+0x60>
  400f5e:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  400f60:	f8df 8128 	ldr.w	r8, [pc, #296]	; 40108c <xQueueReceive+0x190>
					vTaskInternalSetTimeOutState( &xTimeOut );
  400f64:	f8df a128 	ldr.w	sl, [pc, #296]	; 401090 <xQueueReceive+0x194>
					portYIELD_WITHIN_API();
  400f68:	f8df 9100 	ldr.w	r9, [pc, #256]	; 40106c <xQueueReceive+0x170>
  400f6c:	e031      	b.n	400fd2 <xQueueReceive+0xd6>
  400f6e:	2700      	movs	r7, #0
  400f70:	e7f6      	b.n	400f60 <xQueueReceive+0x64>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400f72:	4631      	mov	r1, r6
  400f74:	4620      	mov	r0, r4
  400f76:	4b3b      	ldr	r3, [pc, #236]	; (401064 <xQueueReceive+0x168>)
  400f78:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  400f7a:	3d01      	subs	r5, #1
  400f7c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400f7e:	6923      	ldr	r3, [r4, #16]
  400f80:	b163      	cbz	r3, 400f9c <xQueueReceive+0xa0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400f82:	f104 0010 	add.w	r0, r4, #16
  400f86:	4b38      	ldr	r3, [pc, #224]	; (401068 <xQueueReceive+0x16c>)
  400f88:	4798      	blx	r3
  400f8a:	b138      	cbz	r0, 400f9c <xQueueReceive+0xa0>
						queueYIELD_IF_USING_PREEMPTION();
  400f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f90:	4b36      	ldr	r3, [pc, #216]	; (40106c <xQueueReceive+0x170>)
  400f92:	601a      	str	r2, [r3, #0]
  400f94:	f3bf 8f4f 	dsb	sy
  400f98:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  400f9c:	4b34      	ldr	r3, [pc, #208]	; (401070 <xQueueReceive+0x174>)
  400f9e:	4798      	blx	r3
				return pdPASS;
  400fa0:	2001      	movs	r0, #1
}
  400fa2:	b004      	add	sp, #16
  400fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
  400fa8:	4b31      	ldr	r3, [pc, #196]	; (401070 <xQueueReceive+0x174>)
  400faa:	4798      	blx	r3
					return errQUEUE_EMPTY;
  400fac:	2000      	movs	r0, #0
  400fae:	e7f8      	b.n	400fa2 <xQueueReceive+0xa6>
					vTaskInternalSetTimeOutState( &xTimeOut );
  400fb0:	a802      	add	r0, sp, #8
  400fb2:	47d0      	blx	sl
  400fb4:	e016      	b.n	400fe4 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
  400fb6:	2300      	movs	r3, #0
  400fb8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  400fbc:	e01d      	b.n	400ffa <xQueueReceive+0xfe>
  400fbe:	2300      	movs	r3, #0
  400fc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  400fc4:	e01f      	b.n	401006 <xQueueReceive+0x10a>
				prvUnlockQueue( pxQueue );
  400fc6:	4620      	mov	r0, r4
  400fc8:	4b2a      	ldr	r3, [pc, #168]	; (401074 <xQueueReceive+0x178>)
  400fca:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400fcc:	4b2a      	ldr	r3, [pc, #168]	; (401078 <xQueueReceive+0x17c>)
  400fce:	4798      	blx	r3
  400fd0:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  400fd2:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400fd4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  400fd6:	2d00      	cmp	r5, #0
  400fd8:	d1cb      	bne.n	400f72 <xQueueReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  400fda:	9b01      	ldr	r3, [sp, #4]
  400fdc:	2b00      	cmp	r3, #0
  400fde:	d0e3      	beq.n	400fa8 <xQueueReceive+0xac>
				else if( xEntryTimeSet == pdFALSE )
  400fe0:	2f00      	cmp	r7, #0
  400fe2:	d0e5      	beq.n	400fb0 <xQueueReceive+0xb4>
		taskEXIT_CRITICAL();
  400fe4:	4b22      	ldr	r3, [pc, #136]	; (401070 <xQueueReceive+0x174>)
  400fe6:	4798      	blx	r3
		vTaskSuspendAll();
  400fe8:	4b24      	ldr	r3, [pc, #144]	; (40107c <xQueueReceive+0x180>)
  400fea:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400fec:	47c0      	blx	r8
  400fee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400ff2:	b25b      	sxtb	r3, r3
  400ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ff8:	d0dd      	beq.n	400fb6 <xQueueReceive+0xba>
  400ffa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400ffe:	b25b      	sxtb	r3, r3
  401000:	f1b3 3fff 	cmp.w	r3, #4294967295
  401004:	d0db      	beq.n	400fbe <xQueueReceive+0xc2>
  401006:	4b1a      	ldr	r3, [pc, #104]	; (401070 <xQueueReceive+0x174>)
  401008:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40100a:	a901      	add	r1, sp, #4
  40100c:	a802      	add	r0, sp, #8
  40100e:	4b1c      	ldr	r3, [pc, #112]	; (401080 <xQueueReceive+0x184>)
  401010:	4798      	blx	r3
  401012:	b9c8      	cbnz	r0, 401048 <xQueueReceive+0x14c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401014:	4620      	mov	r0, r4
  401016:	4b1b      	ldr	r3, [pc, #108]	; (401084 <xQueueReceive+0x188>)
  401018:	4798      	blx	r3
  40101a:	2800      	cmp	r0, #0
  40101c:	d0d3      	beq.n	400fc6 <xQueueReceive+0xca>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40101e:	9901      	ldr	r1, [sp, #4]
  401020:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401024:	4b18      	ldr	r3, [pc, #96]	; (401088 <xQueueReceive+0x18c>)
  401026:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401028:	4620      	mov	r0, r4
  40102a:	4b12      	ldr	r3, [pc, #72]	; (401074 <xQueueReceive+0x178>)
  40102c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40102e:	4b12      	ldr	r3, [pc, #72]	; (401078 <xQueueReceive+0x17c>)
  401030:	4798      	blx	r3
  401032:	2800      	cmp	r0, #0
  401034:	d1cc      	bne.n	400fd0 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
  401036:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40103a:	f8c9 3000 	str.w	r3, [r9]
  40103e:	f3bf 8f4f 	dsb	sy
  401042:	f3bf 8f6f 	isb	sy
  401046:	e7c3      	b.n	400fd0 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
  401048:	4620      	mov	r0, r4
  40104a:	4b0a      	ldr	r3, [pc, #40]	; (401074 <xQueueReceive+0x178>)
  40104c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40104e:	4b0a      	ldr	r3, [pc, #40]	; (401078 <xQueueReceive+0x17c>)
  401050:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401052:	4620      	mov	r0, r4
  401054:	4b0b      	ldr	r3, [pc, #44]	; (401084 <xQueueReceive+0x188>)
  401056:	4798      	blx	r3
  401058:	2800      	cmp	r0, #0
  40105a:	d0b9      	beq.n	400fd0 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
  40105c:	2000      	movs	r0, #0
  40105e:	e7a0      	b.n	400fa2 <xQueueReceive+0xa6>
  401060:	00401c71 	.word	0x00401c71
  401064:	00400a39 	.word	0x00400a39
  401068:	00401b21 	.word	0x00401b21
  40106c:	e000ed04 	.word	0xe000ed04
  401070:	004006e1 	.word	0x004006e1
  401074:	00400a61 	.word	0x00400a61
  401078:	00401859 	.word	0x00401859
  40107c:	004016f5 	.word	0x004016f5
  401080:	00401bd1 	.word	0x00401bd1
  401084:	00400911 	.word	0x00400911
  401088:	00401a9d 	.word	0x00401a9d
  40108c:	00400695 	.word	0x00400695
  401090:	00401bb9 	.word	0x00401bb9

00401094 <xQueueSemaphoreTake>:
{
  401094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401098:	b085      	sub	sp, #20
  40109a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
  40109c:	b168      	cbz	r0, 4010ba <xQueueSemaphoreTake+0x26>
  40109e:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  4010a0:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4010a2:	b1ab      	cbz	r3, 4010d0 <xQueueSemaphoreTake+0x3c>
  4010a4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010a8:	b672      	cpsid	i
  4010aa:	f383 8811 	msr	BASEPRI, r3
  4010ae:	f3bf 8f6f 	isb	sy
  4010b2:	f3bf 8f4f 	dsb	sy
  4010b6:	b662      	cpsie	i
  4010b8:	e7fe      	b.n	4010b8 <xQueueSemaphoreTake+0x24>
  4010ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010be:	b672      	cpsid	i
  4010c0:	f383 8811 	msr	BASEPRI, r3
  4010c4:	f3bf 8f6f 	isb	sy
  4010c8:	f3bf 8f4f 	dsb	sy
  4010cc:	b662      	cpsie	i
  4010ce:	e7fe      	b.n	4010ce <xQueueSemaphoreTake+0x3a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4010d0:	4b5e      	ldr	r3, [pc, #376]	; (40124c <xQueueSemaphoreTake+0x1b8>)
  4010d2:	4798      	blx	r3
  4010d4:	b960      	cbnz	r0, 4010f0 <xQueueSemaphoreTake+0x5c>
  4010d6:	9b01      	ldr	r3, [sp, #4]
  4010d8:	b193      	cbz	r3, 401100 <xQueueSemaphoreTake+0x6c>
  4010da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010de:	b672      	cpsid	i
  4010e0:	f383 8811 	msr	BASEPRI, r3
  4010e4:	f3bf 8f6f 	isb	sy
  4010e8:	f3bf 8f4f 	dsb	sy
  4010ec:	b662      	cpsie	i
  4010ee:	e7fe      	b.n	4010ee <xQueueSemaphoreTake+0x5a>
  4010f0:	2500      	movs	r5, #0
  4010f2:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
  4010f4:	4e56      	ldr	r6, [pc, #344]	; (401250 <xQueueSemaphoreTake+0x1bc>)
					vTaskInternalSetTimeOutState( &xTimeOut );
  4010f6:	f8df 918c 	ldr.w	r9, [pc, #396]	; 401284 <xQueueSemaphoreTake+0x1f0>
					portYIELD_WITHIN_API();
  4010fa:	f8df 8160 	ldr.w	r8, [pc, #352]	; 40125c <xQueueSemaphoreTake+0x1c8>
  4010fe:	e052      	b.n	4011a6 <xQueueSemaphoreTake+0x112>
  401100:	2500      	movs	r5, #0
  401102:	462f      	mov	r7, r5
  401104:	e7f6      	b.n	4010f4 <xQueueSemaphoreTake+0x60>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
  401106:	3b01      	subs	r3, #1
  401108:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40110a:	6823      	ldr	r3, [r4, #0]
  40110c:	b913      	cbnz	r3, 401114 <xQueueSemaphoreTake+0x80>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  40110e:	4b51      	ldr	r3, [pc, #324]	; (401254 <xQueueSemaphoreTake+0x1c0>)
  401110:	4798      	blx	r3
  401112:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401114:	6923      	ldr	r3, [r4, #16]
  401116:	b163      	cbz	r3, 401132 <xQueueSemaphoreTake+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401118:	f104 0010 	add.w	r0, r4, #16
  40111c:	4b4e      	ldr	r3, [pc, #312]	; (401258 <xQueueSemaphoreTake+0x1c4>)
  40111e:	4798      	blx	r3
  401120:	b138      	cbz	r0, 401132 <xQueueSemaphoreTake+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
  401122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401126:	4b4d      	ldr	r3, [pc, #308]	; (40125c <xQueueSemaphoreTake+0x1c8>)
  401128:	601a      	str	r2, [r3, #0]
  40112a:	f3bf 8f4f 	dsb	sy
  40112e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401132:	4b4b      	ldr	r3, [pc, #300]	; (401260 <xQueueSemaphoreTake+0x1cc>)
  401134:	4798      	blx	r3
				return pdPASS;
  401136:	2501      	movs	r5, #1
}
  401138:	4628      	mov	r0, r5
  40113a:	b005      	add	sp, #20
  40113c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
  401140:	b155      	cbz	r5, 401158 <xQueueSemaphoreTake+0xc4>
  401142:	f04f 0380 	mov.w	r3, #128	; 0x80
  401146:	b672      	cpsid	i
  401148:	f383 8811 	msr	BASEPRI, r3
  40114c:	f3bf 8f6f 	isb	sy
  401150:	f3bf 8f4f 	dsb	sy
  401154:	b662      	cpsie	i
  401156:	e7fe      	b.n	401156 <xQueueSemaphoreTake+0xc2>
					taskEXIT_CRITICAL();
  401158:	4b41      	ldr	r3, [pc, #260]	; (401260 <xQueueSemaphoreTake+0x1cc>)
  40115a:	4798      	blx	r3
					return errQUEUE_EMPTY;
  40115c:	e7ec      	b.n	401138 <xQueueSemaphoreTake+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
  40115e:	a802      	add	r0, sp, #8
  401160:	47c8      	blx	r9
  401162:	e029      	b.n	4011b8 <xQueueSemaphoreTake+0x124>
		prvLockQueue( pxQueue );
  401164:	2300      	movs	r3, #0
  401166:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  40116a:	e030      	b.n	4011ce <xQueueSemaphoreTake+0x13a>
  40116c:	2300      	movs	r3, #0
  40116e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401172:	e032      	b.n	4011da <xQueueSemaphoreTake+0x146>
						taskENTER_CRITICAL();
  401174:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401176:	6860      	ldr	r0, [r4, #4]
  401178:	4b3a      	ldr	r3, [pc, #232]	; (401264 <xQueueSemaphoreTake+0x1d0>)
  40117a:	4798      	blx	r3
  40117c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
  40117e:	4b38      	ldr	r3, [pc, #224]	; (401260 <xQueueSemaphoreTake+0x1cc>)
  401180:	4798      	blx	r3
  401182:	e03a      	b.n	4011fa <xQueueSemaphoreTake+0x166>
				prvUnlockQueue( pxQueue );
  401184:	4620      	mov	r0, r4
  401186:	4b38      	ldr	r3, [pc, #224]	; (401268 <xQueueSemaphoreTake+0x1d4>)
  401188:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40118a:	4b38      	ldr	r3, [pc, #224]	; (40126c <xQueueSemaphoreTake+0x1d8>)
  40118c:	4798      	blx	r3
  40118e:	e009      	b.n	4011a4 <xQueueSemaphoreTake+0x110>
			prvUnlockQueue( pxQueue );
  401190:	4620      	mov	r0, r4
  401192:	4b35      	ldr	r3, [pc, #212]	; (401268 <xQueueSemaphoreTake+0x1d4>)
  401194:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401196:	4b35      	ldr	r3, [pc, #212]	; (40126c <xQueueSemaphoreTake+0x1d8>)
  401198:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40119a:	4620      	mov	r0, r4
  40119c:	4b34      	ldr	r3, [pc, #208]	; (401270 <xQueueSemaphoreTake+0x1dc>)
  40119e:	4798      	blx	r3
  4011a0:	2800      	cmp	r0, #0
  4011a2:	d13f      	bne.n	401224 <xQueueSemaphoreTake+0x190>
  4011a4:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  4011a6:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
  4011a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
  4011aa:	2b00      	cmp	r3, #0
  4011ac:	d1ab      	bne.n	401106 <xQueueSemaphoreTake+0x72>
				if( xTicksToWait == ( TickType_t ) 0 )
  4011ae:	9b01      	ldr	r3, [sp, #4]
  4011b0:	2b00      	cmp	r3, #0
  4011b2:	d0c5      	beq.n	401140 <xQueueSemaphoreTake+0xac>
				else if( xEntryTimeSet == pdFALSE )
  4011b4:	2f00      	cmp	r7, #0
  4011b6:	d0d2      	beq.n	40115e <xQueueSemaphoreTake+0xca>
		taskEXIT_CRITICAL();
  4011b8:	4b29      	ldr	r3, [pc, #164]	; (401260 <xQueueSemaphoreTake+0x1cc>)
  4011ba:	4798      	blx	r3
		vTaskSuspendAll();
  4011bc:	4b2d      	ldr	r3, [pc, #180]	; (401274 <xQueueSemaphoreTake+0x1e0>)
  4011be:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4011c0:	47b0      	blx	r6
  4011c2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4011c6:	b25b      	sxtb	r3, r3
  4011c8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4011cc:	d0ca      	beq.n	401164 <xQueueSemaphoreTake+0xd0>
  4011ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  4011d2:	b25b      	sxtb	r3, r3
  4011d4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4011d8:	d0c8      	beq.n	40116c <xQueueSemaphoreTake+0xd8>
  4011da:	4b21      	ldr	r3, [pc, #132]	; (401260 <xQueueSemaphoreTake+0x1cc>)
  4011dc:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4011de:	a901      	add	r1, sp, #4
  4011e0:	a802      	add	r0, sp, #8
  4011e2:	4b25      	ldr	r3, [pc, #148]	; (401278 <xQueueSemaphoreTake+0x1e4>)
  4011e4:	4798      	blx	r3
  4011e6:	2800      	cmp	r0, #0
  4011e8:	d1d2      	bne.n	401190 <xQueueSemaphoreTake+0xfc>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4011ea:	4620      	mov	r0, r4
  4011ec:	4b20      	ldr	r3, [pc, #128]	; (401270 <xQueueSemaphoreTake+0x1dc>)
  4011ee:	4798      	blx	r3
  4011f0:	2800      	cmp	r0, #0
  4011f2:	d0c7      	beq.n	401184 <xQueueSemaphoreTake+0xf0>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4011f4:	6823      	ldr	r3, [r4, #0]
  4011f6:	2b00      	cmp	r3, #0
  4011f8:	d0bc      	beq.n	401174 <xQueueSemaphoreTake+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4011fa:	9901      	ldr	r1, [sp, #4]
  4011fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401200:	4b1e      	ldr	r3, [pc, #120]	; (40127c <xQueueSemaphoreTake+0x1e8>)
  401202:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401204:	4620      	mov	r0, r4
  401206:	4b18      	ldr	r3, [pc, #96]	; (401268 <xQueueSemaphoreTake+0x1d4>)
  401208:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40120a:	4b18      	ldr	r3, [pc, #96]	; (40126c <xQueueSemaphoreTake+0x1d8>)
  40120c:	4798      	blx	r3
  40120e:	2800      	cmp	r0, #0
  401210:	d1c8      	bne.n	4011a4 <xQueueSemaphoreTake+0x110>
					portYIELD_WITHIN_API();
  401212:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401216:	f8c8 3000 	str.w	r3, [r8]
  40121a:	f3bf 8f4f 	dsb	sy
  40121e:	f3bf 8f6f 	isb	sy
  401222:	e7bf      	b.n	4011a4 <xQueueSemaphoreTake+0x110>
					if( xInheritanceOccurred != pdFALSE )
  401224:	2d00      	cmp	r5, #0
  401226:	d087      	beq.n	401138 <xQueueSemaphoreTake+0xa4>
						taskENTER_CRITICAL();
  401228:	4b09      	ldr	r3, [pc, #36]	; (401250 <xQueueSemaphoreTake+0x1bc>)
  40122a:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
  40122c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40122e:	b153      	cbz	r3, 401246 <xQueueSemaphoreTake+0x1b2>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
  401230:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401232:	6819      	ldr	r1, [r3, #0]
  401234:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
  401238:	6860      	ldr	r0, [r4, #4]
  40123a:	4b11      	ldr	r3, [pc, #68]	; (401280 <xQueueSemaphoreTake+0x1ec>)
  40123c:	4798      	blx	r3
						taskEXIT_CRITICAL();
  40123e:	4b08      	ldr	r3, [pc, #32]	; (401260 <xQueueSemaphoreTake+0x1cc>)
  401240:	4798      	blx	r3
				return errQUEUE_EMPTY;
  401242:	2500      	movs	r5, #0
  401244:	e778      	b.n	401138 <xQueueSemaphoreTake+0xa4>
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  401246:	2100      	movs	r1, #0
  401248:	e7f6      	b.n	401238 <xQueueSemaphoreTake+0x1a4>
  40124a:	bf00      	nop
  40124c:	00401c71 	.word	0x00401c71
  401250:	00400695 	.word	0x00400695
  401254:	00401ed9 	.word	0x00401ed9
  401258:	00401b21 	.word	0x00401b21
  40125c:	e000ed04 	.word	0xe000ed04
  401260:	004006e1 	.word	0x004006e1
  401264:	00401c91 	.word	0x00401c91
  401268:	00400a61 	.word	0x00400a61
  40126c:	00401859 	.word	0x00401859
  401270:	00400911 	.word	0x00400911
  401274:	004016f5 	.word	0x004016f5
  401278:	00401bd1 	.word	0x00401bd1
  40127c:	00401a9d 	.word	0x00401a9d
  401280:	00401e0d 	.word	0x00401e0d
  401284:	00401bb9 	.word	0x00401bb9

00401288 <vQueueAddToRegistry>:
	{
  401288:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  40128a:	4b0b      	ldr	r3, [pc, #44]	; (4012b8 <vQueueAddToRegistry+0x30>)
  40128c:	681b      	ldr	r3, [r3, #0]
  40128e:	b153      	cbz	r3, 4012a6 <vQueueAddToRegistry+0x1e>
  401290:	2301      	movs	r3, #1
  401292:	4c09      	ldr	r4, [pc, #36]	; (4012b8 <vQueueAddToRegistry+0x30>)
  401294:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401298:	b132      	cbz	r2, 4012a8 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40129a:	3301      	adds	r3, #1
  40129c:	2b08      	cmp	r3, #8
  40129e:	d1f9      	bne.n	401294 <vQueueAddToRegistry+0xc>
	}
  4012a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4012a4:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4012a6:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4012a8:	4a03      	ldr	r2, [pc, #12]	; (4012b8 <vQueueAddToRegistry+0x30>)
  4012aa:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4012ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4012b2:	6058      	str	r0, [r3, #4]
				break;
  4012b4:	e7f4      	b.n	4012a0 <vQueueAddToRegistry+0x18>
  4012b6:	bf00      	nop
  4012b8:	2040c5f4 	.word	0x2040c5f4

004012bc <vQueueWaitForMessageRestricted>:
	{
  4012bc:	b570      	push	{r4, r5, r6, lr}
  4012be:	4604      	mov	r4, r0
  4012c0:	460d      	mov	r5, r1
  4012c2:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  4012c4:	4b12      	ldr	r3, [pc, #72]	; (401310 <vQueueWaitForMessageRestricted+0x54>)
  4012c6:	4798      	blx	r3
  4012c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4012cc:	b25b      	sxtb	r3, r3
  4012ce:	f1b3 3fff 	cmp.w	r3, #4294967295
  4012d2:	d00d      	beq.n	4012f0 <vQueueWaitForMessageRestricted+0x34>
  4012d4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  4012d8:	b25b      	sxtb	r3, r3
  4012da:	f1b3 3fff 	cmp.w	r3, #4294967295
  4012de:	d00b      	beq.n	4012f8 <vQueueWaitForMessageRestricted+0x3c>
  4012e0:	4b0c      	ldr	r3, [pc, #48]	; (401314 <vQueueWaitForMessageRestricted+0x58>)
  4012e2:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  4012e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4012e6:	b15b      	cbz	r3, 401300 <vQueueWaitForMessageRestricted+0x44>
		prvUnlockQueue( pxQueue );
  4012e8:	4620      	mov	r0, r4
  4012ea:	4b0b      	ldr	r3, [pc, #44]	; (401318 <vQueueWaitForMessageRestricted+0x5c>)
  4012ec:	4798      	blx	r3
  4012ee:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  4012f0:	2300      	movs	r3, #0
  4012f2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  4012f6:	e7ed      	b.n	4012d4 <vQueueWaitForMessageRestricted+0x18>
  4012f8:	2300      	movs	r3, #0
  4012fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  4012fe:	e7ef      	b.n	4012e0 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401300:	4632      	mov	r2, r6
  401302:	4629      	mov	r1, r5
  401304:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401308:	4b04      	ldr	r3, [pc, #16]	; (40131c <vQueueWaitForMessageRestricted+0x60>)
  40130a:	4798      	blx	r3
  40130c:	e7ec      	b.n	4012e8 <vQueueWaitForMessageRestricted+0x2c>
  40130e:	bf00      	nop
  401310:	00400695 	.word	0x00400695
  401314:	004006e1 	.word	0x004006e1
  401318:	00400a61 	.word	0x00400a61
  40131c:	00401ad9 	.word	0x00401ad9

00401320 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401320:	4b08      	ldr	r3, [pc, #32]	; (401344 <prvResetNextTaskUnblockTime+0x24>)
  401322:	681b      	ldr	r3, [r3, #0]
  401324:	681b      	ldr	r3, [r3, #0]
  401326:	b13b      	cbz	r3, 401338 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401328:	4b06      	ldr	r3, [pc, #24]	; (401344 <prvResetNextTaskUnblockTime+0x24>)
  40132a:	681b      	ldr	r3, [r3, #0]
  40132c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  40132e:	68db      	ldr	r3, [r3, #12]
  401330:	685a      	ldr	r2, [r3, #4]
  401332:	4b05      	ldr	r3, [pc, #20]	; (401348 <prvResetNextTaskUnblockTime+0x28>)
  401334:	601a      	str	r2, [r3, #0]
  401336:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401338:	f04f 32ff 	mov.w	r2, #4294967295
  40133c:	4b02      	ldr	r3, [pc, #8]	; (401348 <prvResetNextTaskUnblockTime+0x28>)
  40133e:	601a      	str	r2, [r3, #0]
  401340:	4770      	bx	lr
  401342:	bf00      	nop
  401344:	2040c208 	.word	0x2040c208
  401348:	2040c2b8 	.word	0x2040c2b8

0040134c <prvIdleTask>:
{
  40134c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  40134e:	4d16      	ldr	r5, [pc, #88]	; (4013a8 <prvIdleTask+0x5c>)
			taskENTER_CRITICAL();
  401350:	f8df 806c 	ldr.w	r8, [pc, #108]	; 4013c0 <prvIdleTask+0x74>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401354:	4f15      	ldr	r7, [pc, #84]	; (4013ac <prvIdleTask+0x60>)
				taskYIELD();
  401356:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4013c4 <prvIdleTask+0x78>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  40135a:	682b      	ldr	r3, [r5, #0]
  40135c:	b1bb      	cbz	r3, 40138e <prvIdleTask+0x42>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  40135e:	4e14      	ldr	r6, [pc, #80]	; (4013b0 <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
  401360:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401362:	68fb      	ldr	r3, [r7, #12]
  401364:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401366:	1d20      	adds	r0, r4, #4
  401368:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
  40136a:	4a12      	ldr	r2, [pc, #72]	; (4013b4 <prvIdleTask+0x68>)
  40136c:	6813      	ldr	r3, [r2, #0]
  40136e:	3b01      	subs	r3, #1
  401370:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
  401372:	682b      	ldr	r3, [r5, #0]
  401374:	3b01      	subs	r3, #1
  401376:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
  401378:	4b0f      	ldr	r3, [pc, #60]	; (4013b8 <prvIdleTask+0x6c>)
  40137a:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
  40137c:	6b20      	ldr	r0, [r4, #48]	; 0x30
  40137e:	f8df a048 	ldr.w	sl, [pc, #72]	; 4013c8 <prvIdleTask+0x7c>
  401382:	47d0      	blx	sl
			vPortFree( pxTCB );
  401384:	4620      	mov	r0, r4
  401386:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401388:	682b      	ldr	r3, [r5, #0]
  40138a:	2b00      	cmp	r3, #0
  40138c:	d1e8      	bne.n	401360 <prvIdleTask+0x14>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40138e:	4b0b      	ldr	r3, [pc, #44]	; (4013bc <prvIdleTask+0x70>)
  401390:	681b      	ldr	r3, [r3, #0]
  401392:	2b01      	cmp	r3, #1
  401394:	d9e1      	bls.n	40135a <prvIdleTask+0xe>
				taskYIELD();
  401396:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40139a:	f8c9 3000 	str.w	r3, [r9]
  40139e:	f3bf 8f4f 	dsb	sy
  4013a2:	f3bf 8f6f 	isb	sy
  4013a6:	e7d8      	b.n	40135a <prvIdleTask+0xe>
  4013a8:	2040c278 	.word	0x2040c278
  4013ac:	2040c2ec 	.word	0x2040c2ec
  4013b0:	004005bd 	.word	0x004005bd
  4013b4:	2040c274 	.word	0x2040c274
  4013b8:	004006e1 	.word	0x004006e1
  4013bc:	2040c210 	.word	0x2040c210
  4013c0:	00400695 	.word	0x00400695
  4013c4:	e000ed04 	.word	0xe000ed04
  4013c8:	004008f5 	.word	0x004008f5

004013cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  4013cc:	b570      	push	{r4, r5, r6, lr}
  4013ce:	4604      	mov	r4, r0
  4013d0:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  4013d2:	4b1c      	ldr	r3, [pc, #112]	; (401444 <prvAddCurrentTaskToDelayedList+0x78>)
  4013d4:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  4013d6:	4b1c      	ldr	r3, [pc, #112]	; (401448 <prvAddCurrentTaskToDelayedList+0x7c>)
  4013d8:	6818      	ldr	r0, [r3, #0]
  4013da:	3004      	adds	r0, #4
  4013dc:	4b1b      	ldr	r3, [pc, #108]	; (40144c <prvAddCurrentTaskToDelayedList+0x80>)
  4013de:	4798      	blx	r3
  4013e0:	b948      	cbnz	r0, 4013f6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4013e2:	4b19      	ldr	r3, [pc, #100]	; (401448 <prvAddCurrentTaskToDelayedList+0x7c>)
  4013e4:	681a      	ldr	r2, [r3, #0]
  4013e6:	491a      	ldr	r1, [pc, #104]	; (401450 <prvAddCurrentTaskToDelayedList+0x84>)
  4013e8:	680b      	ldr	r3, [r1, #0]
  4013ea:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4013ec:	2201      	movs	r2, #1
  4013ee:	4082      	lsls	r2, r0
  4013f0:	ea23 0302 	bic.w	r3, r3, r2
  4013f4:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  4013f6:	f1b4 3fff 	cmp.w	r4, #4294967295
  4013fa:	d100      	bne.n	4013fe <prvAddCurrentTaskToDelayedList+0x32>
  4013fc:	b99e      	cbnz	r6, 401426 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  4013fe:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  401400:	4b11      	ldr	r3, [pc, #68]	; (401448 <prvAddCurrentTaskToDelayedList+0x7c>)
  401402:	681b      	ldr	r3, [r3, #0]
  401404:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
  401406:	42a5      	cmp	r5, r4
  401408:	d814      	bhi.n	401434 <prvAddCurrentTaskToDelayedList+0x68>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40140a:	4b12      	ldr	r3, [pc, #72]	; (401454 <prvAddCurrentTaskToDelayedList+0x88>)
  40140c:	6818      	ldr	r0, [r3, #0]
  40140e:	4b0e      	ldr	r3, [pc, #56]	; (401448 <prvAddCurrentTaskToDelayedList+0x7c>)
  401410:	6819      	ldr	r1, [r3, #0]
  401412:	3104      	adds	r1, #4
  401414:	4b10      	ldr	r3, [pc, #64]	; (401458 <prvAddCurrentTaskToDelayedList+0x8c>)
  401416:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  401418:	4b10      	ldr	r3, [pc, #64]	; (40145c <prvAddCurrentTaskToDelayedList+0x90>)
  40141a:	681b      	ldr	r3, [r3, #0]
  40141c:	429c      	cmp	r4, r3
  40141e:	d201      	bcs.n	401424 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
  401420:	4b0e      	ldr	r3, [pc, #56]	; (40145c <prvAddCurrentTaskToDelayedList+0x90>)
  401422:	601c      	str	r4, [r3, #0]
  401424:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401426:	4b08      	ldr	r3, [pc, #32]	; (401448 <prvAddCurrentTaskToDelayedList+0x7c>)
  401428:	6819      	ldr	r1, [r3, #0]
  40142a:	3104      	adds	r1, #4
  40142c:	480c      	ldr	r0, [pc, #48]	; (401460 <prvAddCurrentTaskToDelayedList+0x94>)
  40142e:	4b0d      	ldr	r3, [pc, #52]	; (401464 <prvAddCurrentTaskToDelayedList+0x98>)
  401430:	4798      	blx	r3
  401432:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401434:	4b0c      	ldr	r3, [pc, #48]	; (401468 <prvAddCurrentTaskToDelayedList+0x9c>)
  401436:	6818      	ldr	r0, [r3, #0]
  401438:	4b03      	ldr	r3, [pc, #12]	; (401448 <prvAddCurrentTaskToDelayedList+0x7c>)
  40143a:	6819      	ldr	r1, [r3, #0]
  40143c:	3104      	adds	r1, #4
  40143e:	4b06      	ldr	r3, [pc, #24]	; (401458 <prvAddCurrentTaskToDelayedList+0x8c>)
  401440:	4798      	blx	r3
  401442:	bd70      	pop	{r4, r5, r6, pc}
  401444:	2040c300 	.word	0x2040c300
  401448:	2040c204 	.word	0x2040c204
  40144c:	004005bd 	.word	0x004005bd
  401450:	2040c288 	.word	0x2040c288
  401454:	2040c208 	.word	0x2040c208
  401458:	00400589 	.word	0x00400589
  40145c:	2040c2b8 	.word	0x2040c2b8
  401460:	2040c2d8 	.word	0x2040c2d8
  401464:	00400571 	.word	0x00400571
  401468:	2040c20c 	.word	0x2040c20c

0040146c <xTaskCreate>:
	{
  40146c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401470:	b083      	sub	sp, #12
  401472:	4683      	mov	fp, r0
  401474:	460d      	mov	r5, r1
  401476:	9301      	str	r3, [sp, #4]
  401478:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40147c:	0096      	lsls	r6, r2, #2
  40147e:	4630      	mov	r0, r6
  401480:	4b60      	ldr	r3, [pc, #384]	; (401604 <xTaskCreate+0x198>)
  401482:	4798      	blx	r3
			if( pxStack != NULL )
  401484:	2800      	cmp	r0, #0
  401486:	f000 808d 	beq.w	4015a4 <xTaskCreate+0x138>
  40148a:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
  40148c:	2058      	movs	r0, #88	; 0x58
  40148e:	4b5d      	ldr	r3, [pc, #372]	; (401604 <xTaskCreate+0x198>)
  401490:	4798      	blx	r3
				if( pxNewTCB != NULL )
  401492:	4604      	mov	r4, r0
  401494:	2800      	cmp	r0, #0
  401496:	f000 8082 	beq.w	40159e <xTaskCreate+0x132>
					pxNewTCB->pxStack = pxStack;
  40149a:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  40149c:	4632      	mov	r2, r6
  40149e:	21a5      	movs	r1, #165	; 0xa5
  4014a0:	4638      	mov	r0, r7
  4014a2:	4b59      	ldr	r3, [pc, #356]	; (401608 <xTaskCreate+0x19c>)
  4014a4:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
  4014a6:	3e04      	subs	r6, #4
  4014a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4014aa:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  4014ac:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  4014b0:	782b      	ldrb	r3, [r5, #0]
  4014b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  4014b6:	782b      	ldrb	r3, [r5, #0]
  4014b8:	b163      	cbz	r3, 4014d4 <xTaskCreate+0x68>
  4014ba:	462b      	mov	r3, r5
  4014bc:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4014c0:	f105 0109 	add.w	r1, r5, #9
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  4014c4:	7858      	ldrb	r0, [r3, #1]
  4014c6:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  4014ca:	f813 0f01 	ldrb.w	r0, [r3, #1]!
  4014ce:	b108      	cbz	r0, 4014d4 <xTaskCreate+0x68>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4014d0:	428b      	cmp	r3, r1
  4014d2:	d1f7      	bne.n	4014c4 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4014d4:	2700      	movs	r7, #0
  4014d6:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  4014da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4014dc:	2d04      	cmp	r5, #4
  4014de:	bf28      	it	cs
  4014e0:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
  4014e2:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
  4014e4:	64a5      	str	r5, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
  4014e6:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  4014e8:	f104 0804 	add.w	r8, r4, #4
  4014ec:	4640      	mov	r0, r8
  4014ee:	f8df 916c 	ldr.w	r9, [pc, #364]	; 40165c <xTaskCreate+0x1f0>
  4014f2:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  4014f4:	f104 0018 	add.w	r0, r4, #24
  4014f8:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  4014fa:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4014fc:	f1c5 0505 	rsb	r5, r5, #5
  401500:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  401502:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
  401504:	6527      	str	r7, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  401506:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40150a:	9a01      	ldr	r2, [sp, #4]
  40150c:	4659      	mov	r1, fp
  40150e:	4630      	mov	r0, r6
  401510:	4b3e      	ldr	r3, [pc, #248]	; (40160c <xTaskCreate+0x1a0>)
  401512:	4798      	blx	r3
  401514:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
  401516:	f1ba 0f00 	cmp.w	sl, #0
  40151a:	d001      	beq.n	401520 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40151c:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
  401520:	4b3b      	ldr	r3, [pc, #236]	; (401610 <xTaskCreate+0x1a4>)
  401522:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
  401524:	4a3b      	ldr	r2, [pc, #236]	; (401614 <xTaskCreate+0x1a8>)
  401526:	6813      	ldr	r3, [r2, #0]
  401528:	3301      	adds	r3, #1
  40152a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  40152c:	4b3a      	ldr	r3, [pc, #232]	; (401618 <xTaskCreate+0x1ac>)
  40152e:	681b      	ldr	r3, [r3, #0]
  401530:	2b00      	cmp	r3, #0
  401532:	d03a      	beq.n	4015aa <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
  401534:	4b39      	ldr	r3, [pc, #228]	; (40161c <xTaskCreate+0x1b0>)
  401536:	681b      	ldr	r3, [r3, #0]
  401538:	b93b      	cbnz	r3, 40154a <xTaskCreate+0xde>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  40153a:	4b37      	ldr	r3, [pc, #220]	; (401618 <xTaskCreate+0x1ac>)
  40153c:	681b      	ldr	r3, [r3, #0]
  40153e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401540:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401542:	429a      	cmp	r2, r3
  401544:	d801      	bhi.n	40154a <xTaskCreate+0xde>
					pxCurrentTCB = pxNewTCB;
  401546:	4b34      	ldr	r3, [pc, #208]	; (401618 <xTaskCreate+0x1ac>)
  401548:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
  40154a:	4a35      	ldr	r2, [pc, #212]	; (401620 <xTaskCreate+0x1b4>)
  40154c:	6813      	ldr	r3, [r2, #0]
  40154e:	3301      	adds	r3, #1
  401550:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
  401552:	6423      	str	r3, [r4, #64]	; 0x40
		prvAddTaskToReadyList( pxNewTCB );
  401554:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401556:	4a33      	ldr	r2, [pc, #204]	; (401624 <xTaskCreate+0x1b8>)
  401558:	6811      	ldr	r1, [r2, #0]
  40155a:	2301      	movs	r3, #1
  40155c:	4083      	lsls	r3, r0
  40155e:	430b      	orrs	r3, r1
  401560:	6013      	str	r3, [r2, #0]
  401562:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401566:	4641      	mov	r1, r8
  401568:	4b2f      	ldr	r3, [pc, #188]	; (401628 <xTaskCreate+0x1bc>)
  40156a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40156e:	4b2f      	ldr	r3, [pc, #188]	; (40162c <xTaskCreate+0x1c0>)
  401570:	4798      	blx	r3
	taskEXIT_CRITICAL();
  401572:	4b2f      	ldr	r3, [pc, #188]	; (401630 <xTaskCreate+0x1c4>)
  401574:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
  401576:	4b29      	ldr	r3, [pc, #164]	; (40161c <xTaskCreate+0x1b0>)
  401578:	681b      	ldr	r3, [r3, #0]
  40157a:	2b00      	cmp	r3, #0
  40157c:	d03b      	beq.n	4015f6 <xTaskCreate+0x18a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  40157e:	4b26      	ldr	r3, [pc, #152]	; (401618 <xTaskCreate+0x1ac>)
  401580:	681b      	ldr	r3, [r3, #0]
  401582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401584:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401586:	429a      	cmp	r2, r3
  401588:	d239      	bcs.n	4015fe <xTaskCreate+0x192>
			taskYIELD_IF_USING_PREEMPTION();
  40158a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40158e:	4b29      	ldr	r3, [pc, #164]	; (401634 <xTaskCreate+0x1c8>)
  401590:	601a      	str	r2, [r3, #0]
  401592:	f3bf 8f4f 	dsb	sy
  401596:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  40159a:	2001      	movs	r0, #1
  40159c:	e02c      	b.n	4015f8 <xTaskCreate+0x18c>
					vPortFree( pxStack );
  40159e:	4638      	mov	r0, r7
  4015a0:	4b25      	ldr	r3, [pc, #148]	; (401638 <xTaskCreate+0x1cc>)
  4015a2:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4015a4:	f04f 30ff 	mov.w	r0, #4294967295
  4015a8:	e026      	b.n	4015f8 <xTaskCreate+0x18c>
			pxCurrentTCB = pxNewTCB;
  4015aa:	4b1b      	ldr	r3, [pc, #108]	; (401618 <xTaskCreate+0x1ac>)
  4015ac:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4015ae:	6813      	ldr	r3, [r2, #0]
  4015b0:	2b01      	cmp	r3, #1
  4015b2:	d1ca      	bne.n	40154a <xTaskCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4015b4:	4e1c      	ldr	r6, [pc, #112]	; (401628 <xTaskCreate+0x1bc>)
  4015b6:	4630      	mov	r0, r6
  4015b8:	4d20      	ldr	r5, [pc, #128]	; (40163c <xTaskCreate+0x1d0>)
  4015ba:	47a8      	blx	r5
  4015bc:	f106 0014 	add.w	r0, r6, #20
  4015c0:	47a8      	blx	r5
  4015c2:	f106 0028 	add.w	r0, r6, #40	; 0x28
  4015c6:	47a8      	blx	r5
  4015c8:	f106 003c 	add.w	r0, r6, #60	; 0x3c
  4015cc:	47a8      	blx	r5
  4015ce:	f106 0050 	add.w	r0, r6, #80	; 0x50
  4015d2:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  4015d4:	4f1a      	ldr	r7, [pc, #104]	; (401640 <xTaskCreate+0x1d4>)
  4015d6:	4638      	mov	r0, r7
  4015d8:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  4015da:	4e1a      	ldr	r6, [pc, #104]	; (401644 <xTaskCreate+0x1d8>)
  4015dc:	4630      	mov	r0, r6
  4015de:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  4015e0:	4819      	ldr	r0, [pc, #100]	; (401648 <xTaskCreate+0x1dc>)
  4015e2:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  4015e4:	4819      	ldr	r0, [pc, #100]	; (40164c <xTaskCreate+0x1e0>)
  4015e6:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  4015e8:	4819      	ldr	r0, [pc, #100]	; (401650 <xTaskCreate+0x1e4>)
  4015ea:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  4015ec:	4b19      	ldr	r3, [pc, #100]	; (401654 <xTaskCreate+0x1e8>)
  4015ee:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4015f0:	4b19      	ldr	r3, [pc, #100]	; (401658 <xTaskCreate+0x1ec>)
  4015f2:	601e      	str	r6, [r3, #0]
  4015f4:	e7a9      	b.n	40154a <xTaskCreate+0xde>
			xReturn = pdPASS;
  4015f6:	2001      	movs	r0, #1
	}
  4015f8:	b003      	add	sp, #12
  4015fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  4015fe:	2001      	movs	r0, #1
		return xReturn;
  401600:	e7fa      	b.n	4015f8 <xTaskCreate+0x18c>
  401602:	bf00      	nop
  401604:	00400885 	.word	0x00400885
  401608:	00407145 	.word	0x00407145
  40160c:	00400669 	.word	0x00400669
  401610:	00400695 	.word	0x00400695
  401614:	2040c274 	.word	0x2040c274
  401618:	2040c204 	.word	0x2040c204
  40161c:	2040c2d4 	.word	0x2040c2d4
  401620:	2040c284 	.word	0x2040c284
  401624:	2040c288 	.word	0x2040c288
  401628:	2040c210 	.word	0x2040c210
  40162c:	00400571 	.word	0x00400571
  401630:	004006e1 	.word	0x004006e1
  401634:	e000ed04 	.word	0xe000ed04
  401638:	004008f5 	.word	0x004008f5
  40163c:	00400555 	.word	0x00400555
  401640:	2040c28c 	.word	0x2040c28c
  401644:	2040c2a0 	.word	0x2040c2a0
  401648:	2040c2c0 	.word	0x2040c2c0
  40164c:	2040c2ec 	.word	0x2040c2ec
  401650:	2040c2d8 	.word	0x2040c2d8
  401654:	2040c208 	.word	0x2040c208
  401658:	2040c20c 	.word	0x2040c20c
  40165c:	0040056b 	.word	0x0040056b

00401660 <vTaskStartScheduler>:
{
  401660:	b510      	push	{r4, lr}
  401662:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
  401664:	4b1a      	ldr	r3, [pc, #104]	; (4016d0 <vTaskStartScheduler+0x70>)
  401666:	9301      	str	r3, [sp, #4]
  401668:	2300      	movs	r3, #0
  40166a:	9300      	str	r3, [sp, #0]
  40166c:	2282      	movs	r2, #130	; 0x82
  40166e:	4919      	ldr	r1, [pc, #100]	; (4016d4 <vTaskStartScheduler+0x74>)
  401670:	4819      	ldr	r0, [pc, #100]	; (4016d8 <vTaskStartScheduler+0x78>)
  401672:	4c1a      	ldr	r4, [pc, #104]	; (4016dc <vTaskStartScheduler+0x7c>)
  401674:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401676:	2801      	cmp	r0, #1
  401678:	d004      	beq.n	401684 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  40167a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40167e:	d01c      	beq.n	4016ba <vTaskStartScheduler+0x5a>
}
  401680:	b002      	add	sp, #8
  401682:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  401684:	4b16      	ldr	r3, [pc, #88]	; (4016e0 <vTaskStartScheduler+0x80>)
  401686:	4798      	blx	r3
	if( xReturn == pdPASS )
  401688:	2801      	cmp	r0, #1
  40168a:	d1f6      	bne.n	40167a <vTaskStartScheduler+0x1a>
  40168c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401690:	b672      	cpsid	i
  401692:	f383 8811 	msr	BASEPRI, r3
  401696:	f3bf 8f6f 	isb	sy
  40169a:	f3bf 8f4f 	dsb	sy
  40169e:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  4016a0:	f04f 32ff 	mov.w	r2, #4294967295
  4016a4:	4b0f      	ldr	r3, [pc, #60]	; (4016e4 <vTaskStartScheduler+0x84>)
  4016a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4016a8:	2201      	movs	r2, #1
  4016aa:	4b0f      	ldr	r3, [pc, #60]	; (4016e8 <vTaskStartScheduler+0x88>)
  4016ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4016ae:	2200      	movs	r2, #0
  4016b0:	4b0e      	ldr	r3, [pc, #56]	; (4016ec <vTaskStartScheduler+0x8c>)
  4016b2:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  4016b4:	4b0e      	ldr	r3, [pc, #56]	; (4016f0 <vTaskStartScheduler+0x90>)
  4016b6:	4798      	blx	r3
  4016b8:	e7e2      	b.n	401680 <vTaskStartScheduler+0x20>
  4016ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016be:	b672      	cpsid	i
  4016c0:	f383 8811 	msr	BASEPRI, r3
  4016c4:	f3bf 8f6f 	isb	sy
  4016c8:	f3bf 8f4f 	dsb	sy
  4016cc:	b662      	cpsie	i
  4016ce:	e7fe      	b.n	4016ce <vTaskStartScheduler+0x6e>
  4016d0:	2040c2b4 	.word	0x2040c2b4
  4016d4:	00409f04 	.word	0x00409f04
  4016d8:	0040134d 	.word	0x0040134d
  4016dc:	0040146d 	.word	0x0040146d
  4016e0:	00401fb1 	.word	0x00401fb1
  4016e4:	2040c2b8 	.word	0x2040c2b8
  4016e8:	2040c2d4 	.word	0x2040c2d4
  4016ec:	2040c300 	.word	0x2040c300
  4016f0:	00400735 	.word	0x00400735

004016f4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4016f4:	4a02      	ldr	r2, [pc, #8]	; (401700 <vTaskSuspendAll+0xc>)
  4016f6:	6813      	ldr	r3, [r2, #0]
  4016f8:	3301      	adds	r3, #1
  4016fa:	6013      	str	r3, [r2, #0]
  4016fc:	4770      	bx	lr
  4016fe:	bf00      	nop
  401700:	2040c280 	.word	0x2040c280

00401704 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401704:	4b01      	ldr	r3, [pc, #4]	; (40170c <xTaskGetTickCount+0x8>)
  401706:	6818      	ldr	r0, [r3, #0]
}
  401708:	4770      	bx	lr
  40170a:	bf00      	nop
  40170c:	2040c300 	.word	0x2040c300

00401710 <xTaskIncrementTick>:
{
  401710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401714:	4b41      	ldr	r3, [pc, #260]	; (40181c <xTaskIncrementTick+0x10c>)
  401716:	681b      	ldr	r3, [r3, #0]
  401718:	2b00      	cmp	r3, #0
  40171a:	d177      	bne.n	40180c <xTaskIncrementTick+0xfc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  40171c:	4b40      	ldr	r3, [pc, #256]	; (401820 <xTaskIncrementTick+0x110>)
  40171e:	681d      	ldr	r5, [r3, #0]
  401720:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
  401722:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  401724:	b9d5      	cbnz	r5, 40175c <xTaskIncrementTick+0x4c>
			taskSWITCH_DELAYED_LISTS();
  401726:	4b3f      	ldr	r3, [pc, #252]	; (401824 <xTaskIncrementTick+0x114>)
  401728:	681b      	ldr	r3, [r3, #0]
  40172a:	681b      	ldr	r3, [r3, #0]
  40172c:	b153      	cbz	r3, 401744 <xTaskIncrementTick+0x34>
  40172e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401732:	b672      	cpsid	i
  401734:	f383 8811 	msr	BASEPRI, r3
  401738:	f3bf 8f6f 	isb	sy
  40173c:	f3bf 8f4f 	dsb	sy
  401740:	b662      	cpsie	i
  401742:	e7fe      	b.n	401742 <xTaskIncrementTick+0x32>
  401744:	4a37      	ldr	r2, [pc, #220]	; (401824 <xTaskIncrementTick+0x114>)
  401746:	6811      	ldr	r1, [r2, #0]
  401748:	4b37      	ldr	r3, [pc, #220]	; (401828 <xTaskIncrementTick+0x118>)
  40174a:	6818      	ldr	r0, [r3, #0]
  40174c:	6010      	str	r0, [r2, #0]
  40174e:	6019      	str	r1, [r3, #0]
  401750:	4a36      	ldr	r2, [pc, #216]	; (40182c <xTaskIncrementTick+0x11c>)
  401752:	6813      	ldr	r3, [r2, #0]
  401754:	3301      	adds	r3, #1
  401756:	6013      	str	r3, [r2, #0]
  401758:	4b35      	ldr	r3, [pc, #212]	; (401830 <xTaskIncrementTick+0x120>)
  40175a:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
  40175c:	4b35      	ldr	r3, [pc, #212]	; (401834 <xTaskIncrementTick+0x124>)
  40175e:	681b      	ldr	r3, [r3, #0]
  401760:	429d      	cmp	r5, r3
  401762:	d218      	bcs.n	401796 <xTaskIncrementTick+0x86>
BaseType_t xSwitchRequired = pdFALSE;
  401764:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401766:	4b34      	ldr	r3, [pc, #208]	; (401838 <xTaskIncrementTick+0x128>)
  401768:	681b      	ldr	r3, [r3, #0]
  40176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40176c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401770:	009b      	lsls	r3, r3, #2
  401772:	4a32      	ldr	r2, [pc, #200]	; (40183c <xTaskIncrementTick+0x12c>)
  401774:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
  401776:	2b02      	cmp	r3, #2
  401778:	bf28      	it	cs
  40177a:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  40177c:	4b30      	ldr	r3, [pc, #192]	; (401840 <xTaskIncrementTick+0x130>)
  40177e:	681b      	ldr	r3, [r3, #0]
  401780:	b90b      	cbnz	r3, 401786 <xTaskIncrementTick+0x76>
				vApplicationTickHook();
  401782:	4b30      	ldr	r3, [pc, #192]	; (401844 <xTaskIncrementTick+0x134>)
  401784:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  401786:	4b30      	ldr	r3, [pc, #192]	; (401848 <xTaskIncrementTick+0x138>)
  401788:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  40178a:	2b00      	cmp	r3, #0
}
  40178c:	bf0c      	ite	eq
  40178e:	4620      	moveq	r0, r4
  401790:	2001      	movne	r0, #1
  401792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401796:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401798:	f8df 9088 	ldr.w	r9, [pc, #136]	; 401824 <xTaskIncrementTick+0x114>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  40179c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 401854 <xTaskIncrementTick+0x144>
					prvAddTaskToReadyList( pxTCB );
  4017a0:	4f2a      	ldr	r7, [pc, #168]	; (40184c <xTaskIncrementTick+0x13c>)
  4017a2:	e01f      	b.n	4017e4 <xTaskIncrementTick+0xd4>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4017a4:	f04f 32ff 	mov.w	r2, #4294967295
  4017a8:	4b22      	ldr	r3, [pc, #136]	; (401834 <xTaskIncrementTick+0x124>)
  4017aa:	601a      	str	r2, [r3, #0]
					break;
  4017ac:	e7db      	b.n	401766 <xTaskIncrementTick+0x56>
						xNextTaskUnblockTime = xItemValue;
  4017ae:	4a21      	ldr	r2, [pc, #132]	; (401834 <xTaskIncrementTick+0x124>)
  4017b0:	6013      	str	r3, [r2, #0]
						break;
  4017b2:	e7d8      	b.n	401766 <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4017b4:	f106 0018 	add.w	r0, r6, #24
  4017b8:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  4017ba:	6af0      	ldr	r0, [r6, #44]	; 0x2c
  4017bc:	683a      	ldr	r2, [r7, #0]
  4017be:	2301      	movs	r3, #1
  4017c0:	4083      	lsls	r3, r0
  4017c2:	4313      	orrs	r3, r2
  4017c4:	603b      	str	r3, [r7, #0]
  4017c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4017ca:	4651      	mov	r1, sl
  4017cc:	4b1b      	ldr	r3, [pc, #108]	; (40183c <xTaskIncrementTick+0x12c>)
  4017ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4017d2:	4b1f      	ldr	r3, [pc, #124]	; (401850 <xTaskIncrementTick+0x140>)
  4017d4:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4017d6:	4b18      	ldr	r3, [pc, #96]	; (401838 <xTaskIncrementTick+0x128>)
  4017d8:	681b      	ldr	r3, [r3, #0]
  4017da:	6af2      	ldr	r2, [r6, #44]	; 0x2c
  4017dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
  4017de:	429a      	cmp	r2, r3
  4017e0:	bf28      	it	cs
  4017e2:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4017e4:	f8d9 3000 	ldr.w	r3, [r9]
  4017e8:	681b      	ldr	r3, [r3, #0]
  4017ea:	2b00      	cmp	r3, #0
  4017ec:	d0da      	beq.n	4017a4 <xTaskIncrementTick+0x94>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4017ee:	f8d9 3000 	ldr.w	r3, [r9]
  4017f2:	68db      	ldr	r3, [r3, #12]
  4017f4:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  4017f6:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
  4017f8:	429d      	cmp	r5, r3
  4017fa:	d3d8      	bcc.n	4017ae <xTaskIncrementTick+0x9e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4017fc:	f106 0a04 	add.w	sl, r6, #4
  401800:	4650      	mov	r0, sl
  401802:	47c0      	blx	r8
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401804:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  401806:	2b00      	cmp	r3, #0
  401808:	d1d4      	bne.n	4017b4 <xTaskIncrementTick+0xa4>
  40180a:	e7d6      	b.n	4017ba <xTaskIncrementTick+0xaa>
		++uxPendedTicks;
  40180c:	4a0c      	ldr	r2, [pc, #48]	; (401840 <xTaskIncrementTick+0x130>)
  40180e:	6813      	ldr	r3, [r2, #0]
  401810:	3301      	adds	r3, #1
  401812:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401814:	4b0b      	ldr	r3, [pc, #44]	; (401844 <xTaskIncrementTick+0x134>)
  401816:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  401818:	2400      	movs	r4, #0
  40181a:	e7b4      	b.n	401786 <xTaskIncrementTick+0x76>
  40181c:	2040c280 	.word	0x2040c280
  401820:	2040c300 	.word	0x2040c300
  401824:	2040c208 	.word	0x2040c208
  401828:	2040c20c 	.word	0x2040c20c
  40182c:	2040c2bc 	.word	0x2040c2bc
  401830:	00401321 	.word	0x00401321
  401834:	2040c2b8 	.word	0x2040c2b8
  401838:	2040c204 	.word	0x2040c204
  40183c:	2040c210 	.word	0x2040c210
  401840:	2040c27c 	.word	0x2040c27c
  401844:	00403d9d 	.word	0x00403d9d
  401848:	2040c304 	.word	0x2040c304
  40184c:	2040c288 	.word	0x2040c288
  401850:	00400571 	.word	0x00400571
  401854:	004005bd 	.word	0x004005bd

00401858 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
  401858:	4b36      	ldr	r3, [pc, #216]	; (401934 <xTaskResumeAll+0xdc>)
  40185a:	681b      	ldr	r3, [r3, #0]
  40185c:	b953      	cbnz	r3, 401874 <xTaskResumeAll+0x1c>
  40185e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401862:	b672      	cpsid	i
  401864:	f383 8811 	msr	BASEPRI, r3
  401868:	f3bf 8f6f 	isb	sy
  40186c:	f3bf 8f4f 	dsb	sy
  401870:	b662      	cpsie	i
  401872:	e7fe      	b.n	401872 <xTaskResumeAll+0x1a>
{
  401874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
  401878:	4b2f      	ldr	r3, [pc, #188]	; (401938 <xTaskResumeAll+0xe0>)
  40187a:	4798      	blx	r3
		--uxSchedulerSuspended;
  40187c:	4b2d      	ldr	r3, [pc, #180]	; (401934 <xTaskResumeAll+0xdc>)
  40187e:	681a      	ldr	r2, [r3, #0]
  401880:	3a01      	subs	r2, #1
  401882:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401884:	681b      	ldr	r3, [r3, #0]
  401886:	2b00      	cmp	r3, #0
  401888:	d150      	bne.n	40192c <xTaskResumeAll+0xd4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40188a:	4b2c      	ldr	r3, [pc, #176]	; (40193c <xTaskResumeAll+0xe4>)
  40188c:	681b      	ldr	r3, [r3, #0]
  40188e:	b92b      	cbnz	r3, 40189c <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
  401890:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401892:	4b2b      	ldr	r3, [pc, #172]	; (401940 <xTaskResumeAll+0xe8>)
  401894:	4798      	blx	r3
}
  401896:	4620      	mov	r0, r4
  401898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40189c:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40189e:	4f29      	ldr	r7, [pc, #164]	; (401944 <xTaskResumeAll+0xec>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4018a0:	4e29      	ldr	r6, [pc, #164]	; (401948 <xTaskResumeAll+0xf0>)
					prvAddTaskToReadyList( pxTCB );
  4018a2:	4d2a      	ldr	r5, [pc, #168]	; (40194c <xTaskResumeAll+0xf4>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4018a4:	683b      	ldr	r3, [r7, #0]
  4018a6:	b303      	cbz	r3, 4018ea <xTaskResumeAll+0x92>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4018a8:	68fb      	ldr	r3, [r7, #12]
  4018aa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4018ac:	f104 0018 	add.w	r0, r4, #24
  4018b0:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4018b2:	f104 0804 	add.w	r8, r4, #4
  4018b6:	4640      	mov	r0, r8
  4018b8:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4018ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4018bc:	682a      	ldr	r2, [r5, #0]
  4018be:	2301      	movs	r3, #1
  4018c0:	4083      	lsls	r3, r0
  4018c2:	4313      	orrs	r3, r2
  4018c4:	602b      	str	r3, [r5, #0]
  4018c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4018ca:	4641      	mov	r1, r8
  4018cc:	4b20      	ldr	r3, [pc, #128]	; (401950 <xTaskResumeAll+0xf8>)
  4018ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4018d2:	4b20      	ldr	r3, [pc, #128]	; (401954 <xTaskResumeAll+0xfc>)
  4018d4:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4018d6:	4b20      	ldr	r3, [pc, #128]	; (401958 <xTaskResumeAll+0x100>)
  4018d8:	681b      	ldr	r3, [r3, #0]
  4018da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4018de:	429a      	cmp	r2, r3
  4018e0:	d3e0      	bcc.n	4018a4 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
  4018e2:	2201      	movs	r2, #1
  4018e4:	4b1d      	ldr	r3, [pc, #116]	; (40195c <xTaskResumeAll+0x104>)
  4018e6:	601a      	str	r2, [r3, #0]
  4018e8:	e7dc      	b.n	4018a4 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
  4018ea:	b10c      	cbz	r4, 4018f0 <xTaskResumeAll+0x98>
					prvResetNextTaskUnblockTime();
  4018ec:	4b1c      	ldr	r3, [pc, #112]	; (401960 <xTaskResumeAll+0x108>)
  4018ee:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  4018f0:	4b1c      	ldr	r3, [pc, #112]	; (401964 <xTaskResumeAll+0x10c>)
  4018f2:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  4018f4:	b16c      	cbz	r4, 401912 <xTaskResumeAll+0xba>
							if( xTaskIncrementTick() != pdFALSE )
  4018f6:	4f1c      	ldr	r7, [pc, #112]	; (401968 <xTaskResumeAll+0x110>)
								xYieldPending = pdTRUE;
  4018f8:	4e18      	ldr	r6, [pc, #96]	; (40195c <xTaskResumeAll+0x104>)
  4018fa:	2501      	movs	r5, #1
  4018fc:	e001      	b.n	401902 <xTaskResumeAll+0xaa>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  4018fe:	3c01      	subs	r4, #1
  401900:	d004      	beq.n	40190c <xTaskResumeAll+0xb4>
							if( xTaskIncrementTick() != pdFALSE )
  401902:	47b8      	blx	r7
  401904:	2800      	cmp	r0, #0
  401906:	d0fa      	beq.n	4018fe <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
  401908:	6035      	str	r5, [r6, #0]
  40190a:	e7f8      	b.n	4018fe <xTaskResumeAll+0xa6>
						uxPendedTicks = 0;
  40190c:	2200      	movs	r2, #0
  40190e:	4b15      	ldr	r3, [pc, #84]	; (401964 <xTaskResumeAll+0x10c>)
  401910:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
  401912:	4b12      	ldr	r3, [pc, #72]	; (40195c <xTaskResumeAll+0x104>)
  401914:	681b      	ldr	r3, [r3, #0]
  401916:	b15b      	cbz	r3, 401930 <xTaskResumeAll+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
  401918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40191c:	4b13      	ldr	r3, [pc, #76]	; (40196c <xTaskResumeAll+0x114>)
  40191e:	601a      	str	r2, [r3, #0]
  401920:	f3bf 8f4f 	dsb	sy
  401924:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  401928:	2401      	movs	r4, #1
  40192a:	e7b2      	b.n	401892 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
  40192c:	2400      	movs	r4, #0
  40192e:	e7b0      	b.n	401892 <xTaskResumeAll+0x3a>
  401930:	2400      	movs	r4, #0
  401932:	e7ae      	b.n	401892 <xTaskResumeAll+0x3a>
  401934:	2040c280 	.word	0x2040c280
  401938:	00400695 	.word	0x00400695
  40193c:	2040c274 	.word	0x2040c274
  401940:	004006e1 	.word	0x004006e1
  401944:	2040c2c0 	.word	0x2040c2c0
  401948:	004005bd 	.word	0x004005bd
  40194c:	2040c288 	.word	0x2040c288
  401950:	2040c210 	.word	0x2040c210
  401954:	00400571 	.word	0x00400571
  401958:	2040c204 	.word	0x2040c204
  40195c:	2040c304 	.word	0x2040c304
  401960:	00401321 	.word	0x00401321
  401964:	2040c27c 	.word	0x2040c27c
  401968:	00401711 	.word	0x00401711
  40196c:	e000ed04 	.word	0xe000ed04

00401970 <vTaskDelay>:
	{
  401970:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  401972:	b1b8      	cbz	r0, 4019a4 <vTaskDelay+0x34>
  401974:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  401976:	4b10      	ldr	r3, [pc, #64]	; (4019b8 <vTaskDelay+0x48>)
  401978:	681b      	ldr	r3, [r3, #0]
  40197a:	b153      	cbz	r3, 401992 <vTaskDelay+0x22>
  40197c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401980:	b672      	cpsid	i
  401982:	f383 8811 	msr	BASEPRI, r3
  401986:	f3bf 8f6f 	isb	sy
  40198a:	f3bf 8f4f 	dsb	sy
  40198e:	b662      	cpsie	i
  401990:	e7fe      	b.n	401990 <vTaskDelay+0x20>
			vTaskSuspendAll();
  401992:	4b0a      	ldr	r3, [pc, #40]	; (4019bc <vTaskDelay+0x4c>)
  401994:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  401996:	2100      	movs	r1, #0
  401998:	4620      	mov	r0, r4
  40199a:	4b09      	ldr	r3, [pc, #36]	; (4019c0 <vTaskDelay+0x50>)
  40199c:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  40199e:	4b09      	ldr	r3, [pc, #36]	; (4019c4 <vTaskDelay+0x54>)
  4019a0:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  4019a2:	b938      	cbnz	r0, 4019b4 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
  4019a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019a8:	4b07      	ldr	r3, [pc, #28]	; (4019c8 <vTaskDelay+0x58>)
  4019aa:	601a      	str	r2, [r3, #0]
  4019ac:	f3bf 8f4f 	dsb	sy
  4019b0:	f3bf 8f6f 	isb	sy
  4019b4:	bd10      	pop	{r4, pc}
  4019b6:	bf00      	nop
  4019b8:	2040c280 	.word	0x2040c280
  4019bc:	004016f5 	.word	0x004016f5
  4019c0:	004013cd 	.word	0x004013cd
  4019c4:	00401859 	.word	0x00401859
  4019c8:	e000ed04 	.word	0xe000ed04

004019cc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4019cc:	4b2d      	ldr	r3, [pc, #180]	; (401a84 <vTaskSwitchContext+0xb8>)
  4019ce:	681b      	ldr	r3, [r3, #0]
  4019d0:	2b00      	cmp	r3, #0
  4019d2:	d12c      	bne.n	401a2e <vTaskSwitchContext+0x62>
{
  4019d4:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4019d6:	2200      	movs	r2, #0
  4019d8:	4b2b      	ldr	r3, [pc, #172]	; (401a88 <vTaskSwitchContext+0xbc>)
  4019da:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4019dc:	4b2b      	ldr	r3, [pc, #172]	; (401a8c <vTaskSwitchContext+0xc0>)
  4019de:	681b      	ldr	r3, [r3, #0]
  4019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4019e2:	681a      	ldr	r2, [r3, #0]
  4019e4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4019e8:	d103      	bne.n	4019f2 <vTaskSwitchContext+0x26>
  4019ea:	685a      	ldr	r2, [r3, #4]
  4019ec:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4019f0:	d021      	beq.n	401a36 <vTaskSwitchContext+0x6a>
  4019f2:	4b26      	ldr	r3, [pc, #152]	; (401a8c <vTaskSwitchContext+0xc0>)
  4019f4:	6818      	ldr	r0, [r3, #0]
  4019f6:	6819      	ldr	r1, [r3, #0]
  4019f8:	3134      	adds	r1, #52	; 0x34
  4019fa:	4b25      	ldr	r3, [pc, #148]	; (401a90 <vTaskSwitchContext+0xc4>)
  4019fc:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4019fe:	4b25      	ldr	r3, [pc, #148]	; (401a94 <vTaskSwitchContext+0xc8>)
  401a00:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  401a02:	fab3 f383 	clz	r3, r3
  401a06:	b2db      	uxtb	r3, r3
  401a08:	f1c3 031f 	rsb	r3, r3, #31
  401a0c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  401a10:	0092      	lsls	r2, r2, #2
  401a12:	4921      	ldr	r1, [pc, #132]	; (401a98 <vTaskSwitchContext+0xcc>)
  401a14:	588a      	ldr	r2, [r1, r2]
  401a16:	b9ba      	cbnz	r2, 401a48 <vTaskSwitchContext+0x7c>
	__asm volatile
  401a18:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a1c:	b672      	cpsid	i
  401a1e:	f383 8811 	msr	BASEPRI, r3
  401a22:	f3bf 8f6f 	isb	sy
  401a26:	f3bf 8f4f 	dsb	sy
  401a2a:	b662      	cpsie	i
  401a2c:	e7fe      	b.n	401a2c <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  401a2e:	2201      	movs	r2, #1
  401a30:	4b15      	ldr	r3, [pc, #84]	; (401a88 <vTaskSwitchContext+0xbc>)
  401a32:	601a      	str	r2, [r3, #0]
  401a34:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  401a36:	689a      	ldr	r2, [r3, #8]
  401a38:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401a3c:	d1d9      	bne.n	4019f2 <vTaskSwitchContext+0x26>
  401a3e:	68db      	ldr	r3, [r3, #12]
  401a40:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  401a44:	d1d5      	bne.n	4019f2 <vTaskSwitchContext+0x26>
  401a46:	e7da      	b.n	4019fe <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401a48:	4a13      	ldr	r2, [pc, #76]	; (401a98 <vTaskSwitchContext+0xcc>)
  401a4a:	0099      	lsls	r1, r3, #2
  401a4c:	18c8      	adds	r0, r1, r3
  401a4e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401a52:	6844      	ldr	r4, [r0, #4]
  401a54:	6864      	ldr	r4, [r4, #4]
  401a56:	6044      	str	r4, [r0, #4]
  401a58:	4419      	add	r1, r3
  401a5a:	4602      	mov	r2, r0
  401a5c:	3208      	adds	r2, #8
  401a5e:	4294      	cmp	r4, r2
  401a60:	d009      	beq.n	401a76 <vTaskSwitchContext+0xaa>
  401a62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401a66:	4a0c      	ldr	r2, [pc, #48]	; (401a98 <vTaskSwitchContext+0xcc>)
  401a68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401a6c:	685b      	ldr	r3, [r3, #4]
  401a6e:	68da      	ldr	r2, [r3, #12]
  401a70:	4b06      	ldr	r3, [pc, #24]	; (401a8c <vTaskSwitchContext+0xc0>)
  401a72:	601a      	str	r2, [r3, #0]
  401a74:	bd10      	pop	{r4, pc}
  401a76:	6860      	ldr	r0, [r4, #4]
  401a78:	4a07      	ldr	r2, [pc, #28]	; (401a98 <vTaskSwitchContext+0xcc>)
  401a7a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401a7e:	6050      	str	r0, [r2, #4]
  401a80:	e7ef      	b.n	401a62 <vTaskSwitchContext+0x96>
  401a82:	bf00      	nop
  401a84:	2040c280 	.word	0x2040c280
  401a88:	2040c304 	.word	0x2040c304
  401a8c:	2040c204 	.word	0x2040c204
  401a90:	00403d85 	.word	0x00403d85
  401a94:	2040c288 	.word	0x2040c288
  401a98:	2040c210 	.word	0x2040c210

00401a9c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
  401a9c:	b950      	cbnz	r0, 401ab4 <vTaskPlaceOnEventList+0x18>
  401a9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aa2:	b672      	cpsid	i
  401aa4:	f383 8811 	msr	BASEPRI, r3
  401aa8:	f3bf 8f6f 	isb	sy
  401aac:	f3bf 8f4f 	dsb	sy
  401ab0:	b662      	cpsie	i
  401ab2:	e7fe      	b.n	401ab2 <vTaskPlaceOnEventList+0x16>
{
  401ab4:	b510      	push	{r4, lr}
  401ab6:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401ab8:	4b04      	ldr	r3, [pc, #16]	; (401acc <vTaskPlaceOnEventList+0x30>)
  401aba:	6819      	ldr	r1, [r3, #0]
  401abc:	3118      	adds	r1, #24
  401abe:	4b04      	ldr	r3, [pc, #16]	; (401ad0 <vTaskPlaceOnEventList+0x34>)
  401ac0:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  401ac2:	2101      	movs	r1, #1
  401ac4:	4620      	mov	r0, r4
  401ac6:	4b03      	ldr	r3, [pc, #12]	; (401ad4 <vTaskPlaceOnEventList+0x38>)
  401ac8:	4798      	blx	r3
  401aca:	bd10      	pop	{r4, pc}
  401acc:	2040c204 	.word	0x2040c204
  401ad0:	00400589 	.word	0x00400589
  401ad4:	004013cd 	.word	0x004013cd

00401ad8 <vTaskPlaceOnEventListRestricted>:
	{
  401ad8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
  401ada:	b178      	cbz	r0, 401afc <vTaskPlaceOnEventListRestricted+0x24>
  401adc:	4614      	mov	r4, r2
  401ade:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401ae0:	4b0c      	ldr	r3, [pc, #48]	; (401b14 <vTaskPlaceOnEventListRestricted+0x3c>)
  401ae2:	6819      	ldr	r1, [r3, #0]
  401ae4:	3118      	adds	r1, #24
  401ae6:	4b0c      	ldr	r3, [pc, #48]	; (401b18 <vTaskPlaceOnEventListRestricted+0x40>)
  401ae8:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
  401aea:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  401aec:	4621      	mov	r1, r4
  401aee:	bf0c      	ite	eq
  401af0:	4628      	moveq	r0, r5
  401af2:	f04f 30ff 	movne.w	r0, #4294967295
  401af6:	4b09      	ldr	r3, [pc, #36]	; (401b1c <vTaskPlaceOnEventListRestricted+0x44>)
  401af8:	4798      	blx	r3
  401afa:	bd38      	pop	{r3, r4, r5, pc}
  401afc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b00:	b672      	cpsid	i
  401b02:	f383 8811 	msr	BASEPRI, r3
  401b06:	f3bf 8f6f 	isb	sy
  401b0a:	f3bf 8f4f 	dsb	sy
  401b0e:	b662      	cpsie	i
  401b10:	e7fe      	b.n	401b10 <vTaskPlaceOnEventListRestricted+0x38>
  401b12:	bf00      	nop
  401b14:	2040c204 	.word	0x2040c204
  401b18:	00400571 	.word	0x00400571
  401b1c:	004013cd 	.word	0x004013cd

00401b20 <xTaskRemoveFromEventList>:
{
  401b20:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401b22:	68c3      	ldr	r3, [r0, #12]
  401b24:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401b26:	b324      	cbz	r4, 401b72 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401b28:	f104 0518 	add.w	r5, r4, #24
  401b2c:	4628      	mov	r0, r5
  401b2e:	4b1a      	ldr	r3, [pc, #104]	; (401b98 <xTaskRemoveFromEventList+0x78>)
  401b30:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401b32:	4b1a      	ldr	r3, [pc, #104]	; (401b9c <xTaskRemoveFromEventList+0x7c>)
  401b34:	681b      	ldr	r3, [r3, #0]
  401b36:	bb3b      	cbnz	r3, 401b88 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  401b38:	1d25      	adds	r5, r4, #4
  401b3a:	4628      	mov	r0, r5
  401b3c:	4b16      	ldr	r3, [pc, #88]	; (401b98 <xTaskRemoveFromEventList+0x78>)
  401b3e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401b40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401b42:	4a17      	ldr	r2, [pc, #92]	; (401ba0 <xTaskRemoveFromEventList+0x80>)
  401b44:	6811      	ldr	r1, [r2, #0]
  401b46:	2301      	movs	r3, #1
  401b48:	4083      	lsls	r3, r0
  401b4a:	430b      	orrs	r3, r1
  401b4c:	6013      	str	r3, [r2, #0]
  401b4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401b52:	4629      	mov	r1, r5
  401b54:	4b13      	ldr	r3, [pc, #76]	; (401ba4 <xTaskRemoveFromEventList+0x84>)
  401b56:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401b5a:	4b13      	ldr	r3, [pc, #76]	; (401ba8 <xTaskRemoveFromEventList+0x88>)
  401b5c:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401b5e:	4b13      	ldr	r3, [pc, #76]	; (401bac <xTaskRemoveFromEventList+0x8c>)
  401b60:	681b      	ldr	r3, [r3, #0]
  401b62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401b66:	429a      	cmp	r2, r3
  401b68:	d913      	bls.n	401b92 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  401b6a:	2001      	movs	r0, #1
  401b6c:	4b10      	ldr	r3, [pc, #64]	; (401bb0 <xTaskRemoveFromEventList+0x90>)
  401b6e:	6018      	str	r0, [r3, #0]
  401b70:	bd38      	pop	{r3, r4, r5, pc}
  401b72:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b76:	b672      	cpsid	i
  401b78:	f383 8811 	msr	BASEPRI, r3
  401b7c:	f3bf 8f6f 	isb	sy
  401b80:	f3bf 8f4f 	dsb	sy
  401b84:	b662      	cpsie	i
  401b86:	e7fe      	b.n	401b86 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401b88:	4629      	mov	r1, r5
  401b8a:	480a      	ldr	r0, [pc, #40]	; (401bb4 <xTaskRemoveFromEventList+0x94>)
  401b8c:	4b06      	ldr	r3, [pc, #24]	; (401ba8 <xTaskRemoveFromEventList+0x88>)
  401b8e:	4798      	blx	r3
  401b90:	e7e5      	b.n	401b5e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  401b92:	2000      	movs	r0, #0
}
  401b94:	bd38      	pop	{r3, r4, r5, pc}
  401b96:	bf00      	nop
  401b98:	004005bd 	.word	0x004005bd
  401b9c:	2040c280 	.word	0x2040c280
  401ba0:	2040c288 	.word	0x2040c288
  401ba4:	2040c210 	.word	0x2040c210
  401ba8:	00400571 	.word	0x00400571
  401bac:	2040c204 	.word	0x2040c204
  401bb0:	2040c304 	.word	0x2040c304
  401bb4:	2040c2c0 	.word	0x2040c2c0

00401bb8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401bb8:	4b03      	ldr	r3, [pc, #12]	; (401bc8 <vTaskInternalSetTimeOutState+0x10>)
  401bba:	681b      	ldr	r3, [r3, #0]
  401bbc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401bbe:	4b03      	ldr	r3, [pc, #12]	; (401bcc <vTaskInternalSetTimeOutState+0x14>)
  401bc0:	681b      	ldr	r3, [r3, #0]
  401bc2:	6043      	str	r3, [r0, #4]
  401bc4:	4770      	bx	lr
  401bc6:	bf00      	nop
  401bc8:	2040c2bc 	.word	0x2040c2bc
  401bcc:	2040c300 	.word	0x2040c300

00401bd0 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
  401bd0:	b1a8      	cbz	r0, 401bfe <xTaskCheckForTimeOut+0x2e>
{
  401bd2:	b570      	push	{r4, r5, r6, lr}
  401bd4:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
  401bd6:	b1e9      	cbz	r1, 401c14 <xTaskCheckForTimeOut+0x44>
  401bd8:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
  401bda:	4b1d      	ldr	r3, [pc, #116]	; (401c50 <xTaskCheckForTimeOut+0x80>)
  401bdc:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  401bde:	4b1d      	ldr	r3, [pc, #116]	; (401c54 <xTaskCheckForTimeOut+0x84>)
  401be0:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  401be2:	6869      	ldr	r1, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
  401be4:	6823      	ldr	r3, [r4, #0]
  401be6:	f1b3 3fff 	cmp.w	r3, #4294967295
  401bea:	d02f      	beq.n	401c4c <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401bec:	481a      	ldr	r0, [pc, #104]	; (401c58 <xTaskCheckForTimeOut+0x88>)
  401bee:	6800      	ldr	r0, [r0, #0]
  401bf0:	682e      	ldr	r6, [r5, #0]
  401bf2:	4286      	cmp	r6, r0
  401bf4:	d019      	beq.n	401c2a <xTaskCheckForTimeOut+0x5a>
  401bf6:	428a      	cmp	r2, r1
  401bf8:	d317      	bcc.n	401c2a <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
  401bfa:	2401      	movs	r4, #1
  401bfc:	e01b      	b.n	401c36 <xTaskCheckForTimeOut+0x66>
  401bfe:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c02:	b672      	cpsid	i
  401c04:	f383 8811 	msr	BASEPRI, r3
  401c08:	f3bf 8f6f 	isb	sy
  401c0c:	f3bf 8f4f 	dsb	sy
  401c10:	b662      	cpsie	i
  401c12:	e7fe      	b.n	401c12 <xTaskCheckForTimeOut+0x42>
  401c14:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c18:	b672      	cpsid	i
  401c1a:	f383 8811 	msr	BASEPRI, r3
  401c1e:	f3bf 8f6f 	isb	sy
  401c22:	f3bf 8f4f 	dsb	sy
  401c26:	b662      	cpsie	i
  401c28:	e7fe      	b.n	401c28 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  401c2a:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  401c2c:	429a      	cmp	r2, r3
  401c2e:	d306      	bcc.n	401c3e <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait = 0;
  401c30:	2300      	movs	r3, #0
  401c32:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
  401c34:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  401c36:	4b09      	ldr	r3, [pc, #36]	; (401c5c <xTaskCheckForTimeOut+0x8c>)
  401c38:	4798      	blx	r3
}
  401c3a:	4620      	mov	r0, r4
  401c3c:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= xElapsedTime;
  401c3e:	1a9b      	subs	r3, r3, r2
  401c40:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  401c42:	4628      	mov	r0, r5
  401c44:	4b06      	ldr	r3, [pc, #24]	; (401c60 <xTaskCheckForTimeOut+0x90>)
  401c46:	4798      	blx	r3
			xReturn = pdFALSE;
  401c48:	2400      	movs	r4, #0
  401c4a:	e7f4      	b.n	401c36 <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
  401c4c:	2400      	movs	r4, #0
  401c4e:	e7f2      	b.n	401c36 <xTaskCheckForTimeOut+0x66>
  401c50:	00400695 	.word	0x00400695
  401c54:	2040c300 	.word	0x2040c300
  401c58:	2040c2bc 	.word	0x2040c2bc
  401c5c:	004006e1 	.word	0x004006e1
  401c60:	00401bb9 	.word	0x00401bb9

00401c64 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  401c64:	2201      	movs	r2, #1
  401c66:	4b01      	ldr	r3, [pc, #4]	; (401c6c <vTaskMissedYield+0x8>)
  401c68:	601a      	str	r2, [r3, #0]
  401c6a:	4770      	bx	lr
  401c6c:	2040c304 	.word	0x2040c304

00401c70 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
  401c70:	4b05      	ldr	r3, [pc, #20]	; (401c88 <xTaskGetSchedulerState+0x18>)
  401c72:	681b      	ldr	r3, [r3, #0]
  401c74:	b133      	cbz	r3, 401c84 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c76:	4b05      	ldr	r3, [pc, #20]	; (401c8c <xTaskGetSchedulerState+0x1c>)
  401c78:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
  401c7a:	2b00      	cmp	r3, #0
  401c7c:	bf0c      	ite	eq
  401c7e:	2002      	moveq	r0, #2
  401c80:	2000      	movne	r0, #0
  401c82:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  401c84:	2001      	movs	r0, #1
	}
  401c86:	4770      	bx	lr
  401c88:	2040c2d4 	.word	0x2040c2d4
  401c8c:	2040c280 	.word	0x2040c280

00401c90 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
  401c90:	2800      	cmp	r0, #0
  401c92:	d050      	beq.n	401d36 <xTaskPriorityInherit+0xa6>
	{
  401c94:	b538      	push	{r3, r4, r5, lr}
  401c96:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
  401c98:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401c9a:	4928      	ldr	r1, [pc, #160]	; (401d3c <xTaskPriorityInherit+0xac>)
  401c9c:	6809      	ldr	r1, [r1, #0]
  401c9e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401ca0:	428a      	cmp	r2, r1
  401ca2:	d23f      	bcs.n	401d24 <xTaskPriorityInherit+0x94>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401ca4:	6981      	ldr	r1, [r0, #24]
  401ca6:	2900      	cmp	r1, #0
  401ca8:	db05      	blt.n	401cb6 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401caa:	4924      	ldr	r1, [pc, #144]	; (401d3c <xTaskPriorityInherit+0xac>)
  401cac:	6809      	ldr	r1, [r1, #0]
  401cae:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401cb0:	f1c1 0105 	rsb	r1, r1, #5
  401cb4:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
  401cb6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401cba:	4921      	ldr	r1, [pc, #132]	; (401d40 <xTaskPriorityInherit+0xb0>)
  401cbc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401cc0:	6961      	ldr	r1, [r4, #20]
  401cc2:	4291      	cmp	r1, r2
  401cc4:	d005      	beq.n	401cd2 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  401cc6:	4a1d      	ldr	r2, [pc, #116]	; (401d3c <xTaskPriorityInherit+0xac>)
  401cc8:	6812      	ldr	r2, [r2, #0]
  401cca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401ccc:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
  401cce:	2001      	movs	r0, #1
  401cd0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401cd2:	1d25      	adds	r5, r4, #4
  401cd4:	4628      	mov	r0, r5
  401cd6:	4b1b      	ldr	r3, [pc, #108]	; (401d44 <xTaskPriorityInherit+0xb4>)
  401cd8:	4798      	blx	r3
  401cda:	b970      	cbnz	r0, 401cfa <xTaskPriorityInherit+0x6a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
  401cdc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401cde:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  401ce2:	009b      	lsls	r3, r3, #2
  401ce4:	4916      	ldr	r1, [pc, #88]	; (401d40 <xTaskPriorityInherit+0xb0>)
  401ce6:	58cb      	ldr	r3, [r1, r3]
  401ce8:	b93b      	cbnz	r3, 401cfa <xTaskPriorityInherit+0x6a>
  401cea:	4817      	ldr	r0, [pc, #92]	; (401d48 <xTaskPriorityInherit+0xb8>)
  401cec:	6803      	ldr	r3, [r0, #0]
  401cee:	2101      	movs	r1, #1
  401cf0:	fa01 f202 	lsl.w	r2, r1, r2
  401cf4:	ea23 0202 	bic.w	r2, r3, r2
  401cf8:	6002      	str	r2, [r0, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  401cfa:	4b10      	ldr	r3, [pc, #64]	; (401d3c <xTaskPriorityInherit+0xac>)
  401cfc:	681b      	ldr	r3, [r3, #0]
  401cfe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401d00:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
  401d02:	4a11      	ldr	r2, [pc, #68]	; (401d48 <xTaskPriorityInherit+0xb8>)
  401d04:	6811      	ldr	r1, [r2, #0]
  401d06:	2401      	movs	r4, #1
  401d08:	fa04 f300 	lsl.w	r3, r4, r0
  401d0c:	430b      	orrs	r3, r1
  401d0e:	6013      	str	r3, [r2, #0]
  401d10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401d14:	4629      	mov	r1, r5
  401d16:	4b0a      	ldr	r3, [pc, #40]	; (401d40 <xTaskPriorityInherit+0xb0>)
  401d18:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401d1c:	4b0b      	ldr	r3, [pc, #44]	; (401d4c <xTaskPriorityInherit+0xbc>)
  401d1e:	4798      	blx	r3
				xReturn = pdTRUE;
  401d20:	4620      	mov	r0, r4
  401d22:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
  401d24:	4a05      	ldr	r2, [pc, #20]	; (401d3c <xTaskPriorityInherit+0xac>)
  401d26:	6812      	ldr	r2, [r2, #0]
  401d28:	6c80      	ldr	r0, [r0, #72]	; 0x48
  401d2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  401d2c:	4298      	cmp	r0, r3
  401d2e:	bf2c      	ite	cs
  401d30:	2000      	movcs	r0, #0
  401d32:	2001      	movcc	r0, #1
  401d34:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  401d36:	2000      	movs	r0, #0
		return xReturn;
  401d38:	4770      	bx	lr
  401d3a:	bf00      	nop
  401d3c:	2040c204 	.word	0x2040c204
  401d40:	2040c210 	.word	0x2040c210
  401d44:	004005bd 	.word	0x004005bd
  401d48:	2040c288 	.word	0x2040c288
  401d4c:	00400571 	.word	0x00400571

00401d50 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  401d50:	2800      	cmp	r0, #0
  401d52:	d04d      	beq.n	401df0 <xTaskPriorityDisinherit+0xa0>
	{
  401d54:	b538      	push	{r3, r4, r5, lr}
  401d56:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
  401d58:	4a27      	ldr	r2, [pc, #156]	; (401df8 <xTaskPriorityDisinherit+0xa8>)
  401d5a:	6812      	ldr	r2, [r2, #0]
  401d5c:	4290      	cmp	r0, r2
  401d5e:	d00a      	beq.n	401d76 <xTaskPriorityDisinherit+0x26>
  401d60:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d64:	b672      	cpsid	i
  401d66:	f383 8811 	msr	BASEPRI, r3
  401d6a:	f3bf 8f6f 	isb	sy
  401d6e:	f3bf 8f4f 	dsb	sy
  401d72:	b662      	cpsie	i
  401d74:	e7fe      	b.n	401d74 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
  401d76:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401d78:	b952      	cbnz	r2, 401d90 <xTaskPriorityDisinherit+0x40>
  401d7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d7e:	b672      	cpsid	i
  401d80:	f383 8811 	msr	BASEPRI, r3
  401d84:	f3bf 8f6f 	isb	sy
  401d88:	f3bf 8f4f 	dsb	sy
  401d8c:	b662      	cpsie	i
  401d8e:	e7fe      	b.n	401d8e <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  401d90:	3a01      	subs	r2, #1
  401d92:	64c2      	str	r2, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401d94:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  401d96:	6ca1      	ldr	r1, [r4, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401d98:	4288      	cmp	r0, r1
  401d9a:	d02b      	beq.n	401df4 <xTaskPriorityDisinherit+0xa4>
  401d9c:	bb52      	cbnz	r2, 401df4 <xTaskPriorityDisinherit+0xa4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401d9e:	1d25      	adds	r5, r4, #4
  401da0:	4628      	mov	r0, r5
  401da2:	4b16      	ldr	r3, [pc, #88]	; (401dfc <xTaskPriorityDisinherit+0xac>)
  401da4:	4798      	blx	r3
  401da6:	b968      	cbnz	r0, 401dc4 <xTaskPriorityDisinherit+0x74>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401da8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401daa:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  401dae:	009b      	lsls	r3, r3, #2
  401db0:	4a13      	ldr	r2, [pc, #76]	; (401e00 <xTaskPriorityDisinherit+0xb0>)
  401db2:	58d3      	ldr	r3, [r2, r3]
  401db4:	b933      	cbnz	r3, 401dc4 <xTaskPriorityDisinherit+0x74>
  401db6:	4813      	ldr	r0, [pc, #76]	; (401e04 <xTaskPriorityDisinherit+0xb4>)
  401db8:	6803      	ldr	r3, [r0, #0]
  401dba:	2201      	movs	r2, #1
  401dbc:	408a      	lsls	r2, r1
  401dbe:	ea23 0302 	bic.w	r3, r3, r2
  401dc2:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401dc4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  401dc6:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401dc8:	f1c0 0305 	rsb	r3, r0, #5
  401dcc:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  401dce:	4a0d      	ldr	r2, [pc, #52]	; (401e04 <xTaskPriorityDisinherit+0xb4>)
  401dd0:	6811      	ldr	r1, [r2, #0]
  401dd2:	2401      	movs	r4, #1
  401dd4:	fa04 f300 	lsl.w	r3, r4, r0
  401dd8:	430b      	orrs	r3, r1
  401dda:	6013      	str	r3, [r2, #0]
  401ddc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401de0:	4629      	mov	r1, r5
  401de2:	4b07      	ldr	r3, [pc, #28]	; (401e00 <xTaskPriorityDisinherit+0xb0>)
  401de4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401de8:	4b07      	ldr	r3, [pc, #28]	; (401e08 <xTaskPriorityDisinherit+0xb8>)
  401dea:	4798      	blx	r3
					xReturn = pdTRUE;
  401dec:	4620      	mov	r0, r4
  401dee:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  401df0:	2000      	movs	r0, #0
  401df2:	4770      	bx	lr
  401df4:	2000      	movs	r0, #0
	}
  401df6:	bd38      	pop	{r3, r4, r5, pc}
  401df8:	2040c204 	.word	0x2040c204
  401dfc:	004005bd 	.word	0x004005bd
  401e00:	2040c210 	.word	0x2040c210
  401e04:	2040c288 	.word	0x2040c288
  401e08:	00400571 	.word	0x00400571

00401e0c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
  401e0c:	2800      	cmp	r0, #0
  401e0e:	d058      	beq.n	401ec2 <vTaskPriorityDisinheritAfterTimeout+0xb6>
	{
  401e10:	b538      	push	{r3, r4, r5, lr}
  401e12:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
  401e14:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  401e16:	b950      	cbnz	r0, 401e2e <vTaskPriorityDisinheritAfterTimeout+0x22>
  401e18:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e1c:	b672      	cpsid	i
  401e1e:	f383 8811 	msr	BASEPRI, r3
  401e22:	f3bf 8f6f 	isb	sy
  401e26:	f3bf 8f4f 	dsb	sy
  401e2a:	b662      	cpsie	i
  401e2c:	e7fe      	b.n	401e2c <vTaskPriorityDisinheritAfterTimeout+0x20>
  401e2e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  401e30:	428a      	cmp	r2, r1
  401e32:	bf38      	it	cc
  401e34:	460a      	movcc	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
  401e36:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
  401e38:	2801      	cmp	r0, #1
  401e3a:	d141      	bne.n	401ec0 <vTaskPriorityDisinheritAfterTimeout+0xb4>
  401e3c:	4291      	cmp	r1, r2
  401e3e:	d03f      	beq.n	401ec0 <vTaskPriorityDisinheritAfterTimeout+0xb4>
					configASSERT( pxTCB != pxCurrentTCB );
  401e40:	4820      	ldr	r0, [pc, #128]	; (401ec4 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
  401e42:	6800      	ldr	r0, [r0, #0]
  401e44:	4284      	cmp	r4, r0
  401e46:	d10a      	bne.n	401e5e <vTaskPriorityDisinheritAfterTimeout+0x52>
  401e48:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e4c:	b672      	cpsid	i
  401e4e:	f383 8811 	msr	BASEPRI, r3
  401e52:	f3bf 8f6f 	isb	sy
  401e56:	f3bf 8f4f 	dsb	sy
  401e5a:	b662      	cpsie	i
  401e5c:	e7fe      	b.n	401e5c <vTaskPriorityDisinheritAfterTimeout+0x50>
					pxTCB->uxPriority = uxPriorityToUse;
  401e5e:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401e60:	69a0      	ldr	r0, [r4, #24]
  401e62:	2800      	cmp	r0, #0
  401e64:	db02      	blt.n	401e6c <vTaskPriorityDisinheritAfterTimeout+0x60>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401e66:	f1c2 0205 	rsb	r2, r2, #5
  401e6a:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
  401e6c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401e70:	4a15      	ldr	r2, [pc, #84]	; (401ec8 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  401e72:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  401e76:	6962      	ldr	r2, [r4, #20]
  401e78:	428a      	cmp	r2, r1
  401e7a:	d121      	bne.n	401ec0 <vTaskPriorityDisinheritAfterTimeout+0xb4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401e7c:	1d25      	adds	r5, r4, #4
  401e7e:	4628      	mov	r0, r5
  401e80:	4b12      	ldr	r3, [pc, #72]	; (401ecc <vTaskPriorityDisinheritAfterTimeout+0xc0>)
  401e82:	4798      	blx	r3
  401e84:	b968      	cbnz	r0, 401ea2 <vTaskPriorityDisinheritAfterTimeout+0x96>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401e86:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401e88:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  401e8c:	009b      	lsls	r3, r3, #2
  401e8e:	4a0e      	ldr	r2, [pc, #56]	; (401ec8 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  401e90:	58d3      	ldr	r3, [r2, r3]
  401e92:	b933      	cbnz	r3, 401ea2 <vTaskPriorityDisinheritAfterTimeout+0x96>
  401e94:	480e      	ldr	r0, [pc, #56]	; (401ed0 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
  401e96:	6803      	ldr	r3, [r0, #0]
  401e98:	2201      	movs	r2, #1
  401e9a:	408a      	lsls	r2, r1
  401e9c:	ea23 0302 	bic.w	r3, r3, r2
  401ea0:	6003      	str	r3, [r0, #0]
						prvAddTaskToReadyList( pxTCB );
  401ea2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401ea4:	4a0a      	ldr	r2, [pc, #40]	; (401ed0 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
  401ea6:	6811      	ldr	r1, [r2, #0]
  401ea8:	2301      	movs	r3, #1
  401eaa:	4083      	lsls	r3, r0
  401eac:	430b      	orrs	r3, r1
  401eae:	6013      	str	r3, [r2, #0]
  401eb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401eb4:	4629      	mov	r1, r5
  401eb6:	4b04      	ldr	r3, [pc, #16]	; (401ec8 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  401eb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401ebc:	4b05      	ldr	r3, [pc, #20]	; (401ed4 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
  401ebe:	4798      	blx	r3
  401ec0:	bd38      	pop	{r3, r4, r5, pc}
  401ec2:	4770      	bx	lr
  401ec4:	2040c204 	.word	0x2040c204
  401ec8:	2040c210 	.word	0x2040c210
  401ecc:	004005bd 	.word	0x004005bd
  401ed0:	2040c288 	.word	0x2040c288
  401ed4:	00400571 	.word	0x00400571

00401ed8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
  401ed8:	4b05      	ldr	r3, [pc, #20]	; (401ef0 <pvTaskIncrementMutexHeldCount+0x18>)
  401eda:	681b      	ldr	r3, [r3, #0]
  401edc:	b123      	cbz	r3, 401ee8 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
  401ede:	4b04      	ldr	r3, [pc, #16]	; (401ef0 <pvTaskIncrementMutexHeldCount+0x18>)
  401ee0:	681a      	ldr	r2, [r3, #0]
  401ee2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  401ee4:	3301      	adds	r3, #1
  401ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
		return pxCurrentTCB;
  401ee8:	4b01      	ldr	r3, [pc, #4]	; (401ef0 <pvTaskIncrementMutexHeldCount+0x18>)
  401eea:	6818      	ldr	r0, [r3, #0]
	}
  401eec:	4770      	bx	lr
  401eee:	bf00      	nop
  401ef0:	2040c204 	.word	0x2040c204

00401ef4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  401ef4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401ef6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401ef8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  401efa:	4291      	cmp	r1, r2
  401efc:	d80c      	bhi.n	401f18 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401efe:	1ad2      	subs	r2, r2, r3
  401f00:	6983      	ldr	r3, [r0, #24]
  401f02:	429a      	cmp	r2, r3
  401f04:	d301      	bcc.n	401f0a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401f06:	2001      	movs	r0, #1
  401f08:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401f0a:	1d01      	adds	r1, r0, #4
  401f0c:	4b09      	ldr	r3, [pc, #36]	; (401f34 <prvInsertTimerInActiveList+0x40>)
  401f0e:	6818      	ldr	r0, [r3, #0]
  401f10:	4b09      	ldr	r3, [pc, #36]	; (401f38 <prvInsertTimerInActiveList+0x44>)
  401f12:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401f14:	2000      	movs	r0, #0
  401f16:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401f18:	429a      	cmp	r2, r3
  401f1a:	d203      	bcs.n	401f24 <prvInsertTimerInActiveList+0x30>
  401f1c:	4299      	cmp	r1, r3
  401f1e:	d301      	bcc.n	401f24 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  401f20:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  401f22:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401f24:	1d01      	adds	r1, r0, #4
  401f26:	4b05      	ldr	r3, [pc, #20]	; (401f3c <prvInsertTimerInActiveList+0x48>)
  401f28:	6818      	ldr	r0, [r3, #0]
  401f2a:	4b03      	ldr	r3, [pc, #12]	; (401f38 <prvInsertTimerInActiveList+0x44>)
  401f2c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401f2e:	2000      	movs	r0, #0
  401f30:	bd08      	pop	{r3, pc}
  401f32:	bf00      	nop
  401f34:	2040c30c 	.word	0x2040c30c
  401f38:	00400589 	.word	0x00400589
  401f3c:	2040c308 	.word	0x2040c308

00401f40 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401f40:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401f42:	4b10      	ldr	r3, [pc, #64]	; (401f84 <prvCheckForValidListAndQueue+0x44>)
  401f44:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401f46:	4b10      	ldr	r3, [pc, #64]	; (401f88 <prvCheckForValidListAndQueue+0x48>)
  401f48:	681b      	ldr	r3, [r3, #0]
  401f4a:	b113      	cbz	r3, 401f52 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401f4c:	4b0f      	ldr	r3, [pc, #60]	; (401f8c <prvCheckForValidListAndQueue+0x4c>)
  401f4e:	4798      	blx	r3
  401f50:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  401f52:	4d0f      	ldr	r5, [pc, #60]	; (401f90 <prvCheckForValidListAndQueue+0x50>)
  401f54:	4628      	mov	r0, r5
  401f56:	4e0f      	ldr	r6, [pc, #60]	; (401f94 <prvCheckForValidListAndQueue+0x54>)
  401f58:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401f5a:	4c0f      	ldr	r4, [pc, #60]	; (401f98 <prvCheckForValidListAndQueue+0x58>)
  401f5c:	4620      	mov	r0, r4
  401f5e:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401f60:	4b0e      	ldr	r3, [pc, #56]	; (401f9c <prvCheckForValidListAndQueue+0x5c>)
  401f62:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401f64:	4b0e      	ldr	r3, [pc, #56]	; (401fa0 <prvCheckForValidListAndQueue+0x60>)
  401f66:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401f68:	2200      	movs	r2, #0
  401f6a:	2110      	movs	r1, #16
  401f6c:	2005      	movs	r0, #5
  401f6e:	4b0d      	ldr	r3, [pc, #52]	; (401fa4 <prvCheckForValidListAndQueue+0x64>)
  401f70:	4798      	blx	r3
  401f72:	4b05      	ldr	r3, [pc, #20]	; (401f88 <prvCheckForValidListAndQueue+0x48>)
  401f74:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  401f76:	2800      	cmp	r0, #0
  401f78:	d0e8      	beq.n	401f4c <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401f7a:	490b      	ldr	r1, [pc, #44]	; (401fa8 <prvCheckForValidListAndQueue+0x68>)
  401f7c:	4b0b      	ldr	r3, [pc, #44]	; (401fac <prvCheckForValidListAndQueue+0x6c>)
  401f7e:	4798      	blx	r3
  401f80:	e7e4      	b.n	401f4c <prvCheckForValidListAndQueue+0xc>
  401f82:	bf00      	nop
  401f84:	00400695 	.word	0x00400695
  401f88:	2040c33c 	.word	0x2040c33c
  401f8c:	004006e1 	.word	0x004006e1
  401f90:	2040c310 	.word	0x2040c310
  401f94:	00400555 	.word	0x00400555
  401f98:	2040c324 	.word	0x2040c324
  401f9c:	2040c308 	.word	0x2040c308
  401fa0:	2040c30c 	.word	0x2040c30c
  401fa4:	00400b9d 	.word	0x00400b9d
  401fa8:	00409f0c 	.word	0x00409f0c
  401fac:	00401289 	.word	0x00401289

00401fb0 <xTimerCreateTimerTask>:
{
  401fb0:	b510      	push	{r4, lr}
  401fb2:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
  401fb4:	4b0e      	ldr	r3, [pc, #56]	; (401ff0 <xTimerCreateTimerTask+0x40>)
  401fb6:	4798      	blx	r3
	if( xTimerQueue != NULL )
  401fb8:	4b0e      	ldr	r3, [pc, #56]	; (401ff4 <xTimerCreateTimerTask+0x44>)
  401fba:	681b      	ldr	r3, [r3, #0]
  401fbc:	b16b      	cbz	r3, 401fda <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate(	prvTimerTask,
  401fbe:	4b0e      	ldr	r3, [pc, #56]	; (401ff8 <xTimerCreateTimerTask+0x48>)
  401fc0:	9301      	str	r3, [sp, #4]
  401fc2:	2304      	movs	r3, #4
  401fc4:	9300      	str	r3, [sp, #0]
  401fc6:	2300      	movs	r3, #0
  401fc8:	f44f 7282 	mov.w	r2, #260	; 0x104
  401fcc:	490b      	ldr	r1, [pc, #44]	; (401ffc <xTimerCreateTimerTask+0x4c>)
  401fce:	480c      	ldr	r0, [pc, #48]	; (402000 <xTimerCreateTimerTask+0x50>)
  401fd0:	4c0c      	ldr	r4, [pc, #48]	; (402004 <xTimerCreateTimerTask+0x54>)
  401fd2:	47a0      	blx	r4
	configASSERT( xReturn );
  401fd4:	b108      	cbz	r0, 401fda <xTimerCreateTimerTask+0x2a>
}
  401fd6:	b002      	add	sp, #8
  401fd8:	bd10      	pop	{r4, pc}
  401fda:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fde:	b672      	cpsid	i
  401fe0:	f383 8811 	msr	BASEPRI, r3
  401fe4:	f3bf 8f6f 	isb	sy
  401fe8:	f3bf 8f4f 	dsb	sy
  401fec:	b662      	cpsie	i
  401fee:	e7fe      	b.n	401fee <xTimerCreateTimerTask+0x3e>
  401ff0:	00401f41 	.word	0x00401f41
  401ff4:	2040c33c 	.word	0x2040c33c
  401ff8:	2040c340 	.word	0x2040c340
  401ffc:	00409f14 	.word	0x00409f14
  402000:	00402131 	.word	0x00402131
  402004:	0040146d 	.word	0x0040146d

00402008 <xTimerGenericCommand>:
	configASSERT( xTimer );
  402008:	b1d8      	cbz	r0, 402042 <xTimerGenericCommand+0x3a>
{
  40200a:	b530      	push	{r4, r5, lr}
  40200c:	b085      	sub	sp, #20
  40200e:	4615      	mov	r5, r2
  402010:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402012:	4a15      	ldr	r2, [pc, #84]	; (402068 <xTimerGenericCommand+0x60>)
  402014:	6810      	ldr	r0, [r2, #0]
  402016:	b320      	cbz	r0, 402062 <xTimerGenericCommand+0x5a>
  402018:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  40201a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  40201c:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  40201e:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402020:	2905      	cmp	r1, #5
  402022:	dc19      	bgt.n	402058 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402024:	4b11      	ldr	r3, [pc, #68]	; (40206c <xTimerGenericCommand+0x64>)
  402026:	4798      	blx	r3
  402028:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  40202a:	f04f 0300 	mov.w	r3, #0
  40202e:	bf0c      	ite	eq
  402030:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402032:	461a      	movne	r2, r3
  402034:	4669      	mov	r1, sp
  402036:	480c      	ldr	r0, [pc, #48]	; (402068 <xTimerGenericCommand+0x60>)
  402038:	6800      	ldr	r0, [r0, #0]
  40203a:	4c0d      	ldr	r4, [pc, #52]	; (402070 <xTimerGenericCommand+0x68>)
  40203c:	47a0      	blx	r4
}
  40203e:	b005      	add	sp, #20
  402040:	bd30      	pop	{r4, r5, pc}
  402042:	f04f 0380 	mov.w	r3, #128	; 0x80
  402046:	b672      	cpsid	i
  402048:	f383 8811 	msr	BASEPRI, r3
  40204c:	f3bf 8f6f 	isb	sy
  402050:	f3bf 8f4f 	dsb	sy
  402054:	b662      	cpsie	i
  402056:	e7fe      	b.n	402056 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402058:	2300      	movs	r3, #0
  40205a:	4669      	mov	r1, sp
  40205c:	4c05      	ldr	r4, [pc, #20]	; (402074 <xTimerGenericCommand+0x6c>)
  40205e:	47a0      	blx	r4
  402060:	e7ed      	b.n	40203e <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402062:	2000      	movs	r0, #0
	return xReturn;
  402064:	e7eb      	b.n	40203e <xTimerGenericCommand+0x36>
  402066:	bf00      	nop
  402068:	2040c33c 	.word	0x2040c33c
  40206c:	00401c71 	.word	0x00401c71
  402070:	00400bf9 	.word	0x00400bf9
  402074:	00400de9 	.word	0x00400de9

00402078 <prvSampleTimeNow>:
{
  402078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40207c:	b082      	sub	sp, #8
  40207e:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402080:	4b24      	ldr	r3, [pc, #144]	; (402114 <prvSampleTimeNow+0x9c>)
  402082:	4798      	blx	r3
  402084:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402086:	4b24      	ldr	r3, [pc, #144]	; (402118 <prvSampleTimeNow+0xa0>)
  402088:	681b      	ldr	r3, [r3, #0]
  40208a:	4298      	cmp	r0, r3
  40208c:	d31b      	bcc.n	4020c6 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  40208e:	2300      	movs	r3, #0
  402090:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402094:	4b20      	ldr	r3, [pc, #128]	; (402118 <prvSampleTimeNow+0xa0>)
  402096:	601f      	str	r7, [r3, #0]
}
  402098:	4638      	mov	r0, r7
  40209a:	b002      	add	sp, #8
  40209c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4020a0:	2100      	movs	r1, #0
  4020a2:	9100      	str	r1, [sp, #0]
  4020a4:	460b      	mov	r3, r1
  4020a6:	4652      	mov	r2, sl
  4020a8:	4620      	mov	r0, r4
  4020aa:	4c1c      	ldr	r4, [pc, #112]	; (40211c <prvSampleTimeNow+0xa4>)
  4020ac:	47a0      	blx	r4
				configASSERT( xResult );
  4020ae:	b960      	cbnz	r0, 4020ca <prvSampleTimeNow+0x52>
  4020b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020b4:	b672      	cpsid	i
  4020b6:	f383 8811 	msr	BASEPRI, r3
  4020ba:	f3bf 8f6f 	isb	sy
  4020be:	f3bf 8f4f 	dsb	sy
  4020c2:	b662      	cpsie	i
  4020c4:	e7fe      	b.n	4020c4 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4020c6:	4d16      	ldr	r5, [pc, #88]	; (402120 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4020c8:	4e16      	ldr	r6, [pc, #88]	; (402124 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4020ca:	682b      	ldr	r3, [r5, #0]
  4020cc:	681a      	ldr	r2, [r3, #0]
  4020ce:	b1c2      	cbz	r2, 402102 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4020d0:	68db      	ldr	r3, [r3, #12]
  4020d2:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4020d6:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4020d8:	f104 0904 	add.w	r9, r4, #4
  4020dc:	4648      	mov	r0, r9
  4020de:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4020e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4020e2:	4620      	mov	r0, r4
  4020e4:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4020e6:	69e3      	ldr	r3, [r4, #28]
  4020e8:	2b01      	cmp	r3, #1
  4020ea:	d1ee      	bne.n	4020ca <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4020ec:	69a3      	ldr	r3, [r4, #24]
  4020ee:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  4020f0:	459a      	cmp	sl, r3
  4020f2:	d2d5      	bcs.n	4020a0 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4020f4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4020f6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4020f8:	4649      	mov	r1, r9
  4020fa:	6828      	ldr	r0, [r5, #0]
  4020fc:	4b0a      	ldr	r3, [pc, #40]	; (402128 <prvSampleTimeNow+0xb0>)
  4020fe:	4798      	blx	r3
  402100:	e7e3      	b.n	4020ca <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402102:	4a0a      	ldr	r2, [pc, #40]	; (40212c <prvSampleTimeNow+0xb4>)
  402104:	6810      	ldr	r0, [r2, #0]
  402106:	4906      	ldr	r1, [pc, #24]	; (402120 <prvSampleTimeNow+0xa8>)
  402108:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  40210a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  40210c:	2301      	movs	r3, #1
  40210e:	f8c8 3000 	str.w	r3, [r8]
  402112:	e7bf      	b.n	402094 <prvSampleTimeNow+0x1c>
  402114:	00401705 	.word	0x00401705
  402118:	2040c338 	.word	0x2040c338
  40211c:	00402009 	.word	0x00402009
  402120:	2040c308 	.word	0x2040c308
  402124:	004005bd 	.word	0x004005bd
  402128:	00400589 	.word	0x00400589
  40212c:	2040c30c 	.word	0x2040c30c

00402130 <prvTimerTask>:
{
  402130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402134:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402136:	4e75      	ldr	r6, [pc, #468]	; (40230c <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402138:	4f75      	ldr	r7, [pc, #468]	; (402310 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  40213a:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402338 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40213e:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 40233c <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402142:	6833      	ldr	r3, [r6, #0]
  402144:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  402146:	2a00      	cmp	r2, #0
  402148:	f000 80ce 	beq.w	4022e8 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40214c:	68db      	ldr	r3, [r3, #12]
  40214e:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402150:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402152:	a804      	add	r0, sp, #16
  402154:	4b6f      	ldr	r3, [pc, #444]	; (402314 <prvTimerTask+0x1e4>)
  402156:	4798      	blx	r3
  402158:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40215a:	9b04      	ldr	r3, [sp, #16]
  40215c:	2b00      	cmp	r3, #0
  40215e:	d144      	bne.n	4021ea <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402160:	42a0      	cmp	r0, r4
  402162:	d212      	bcs.n	40218a <prvTimerTask+0x5a>
  402164:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402166:	1b61      	subs	r1, r4, r5
  402168:	4b6b      	ldr	r3, [pc, #428]	; (402318 <prvTimerTask+0x1e8>)
  40216a:	6818      	ldr	r0, [r3, #0]
  40216c:	4b6b      	ldr	r3, [pc, #428]	; (40231c <prvTimerTask+0x1ec>)
  40216e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402170:	4b6b      	ldr	r3, [pc, #428]	; (402320 <prvTimerTask+0x1f0>)
  402172:	4798      	blx	r3
  402174:	2800      	cmp	r0, #0
  402176:	d13a      	bne.n	4021ee <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402178:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40217c:	f8c9 3000 	str.w	r3, [r9]
  402180:	f3bf 8f4f 	dsb	sy
  402184:	f3bf 8f6f 	isb	sy
  402188:	e031      	b.n	4021ee <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  40218a:	4b65      	ldr	r3, [pc, #404]	; (402320 <prvTimerTask+0x1f0>)
  40218c:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40218e:	6833      	ldr	r3, [r6, #0]
  402190:	68db      	ldr	r3, [r3, #12]
  402192:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402196:	f10a 0004 	add.w	r0, sl, #4
  40219a:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40219c:	f8da 301c 	ldr.w	r3, [sl, #28]
  4021a0:	2b01      	cmp	r3, #1
  4021a2:	d004      	beq.n	4021ae <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4021a4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4021a8:	4650      	mov	r0, sl
  4021aa:	4798      	blx	r3
  4021ac:	e01f      	b.n	4021ee <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
  4021ae:	f8da 1018 	ldr.w	r1, [sl, #24]
  4021b2:	4623      	mov	r3, r4
  4021b4:	462a      	mov	r2, r5
  4021b6:	4421      	add	r1, r4
  4021b8:	4650      	mov	r0, sl
  4021ba:	4d5a      	ldr	r5, [pc, #360]	; (402324 <prvTimerTask+0x1f4>)
  4021bc:	47a8      	blx	r5
  4021be:	2800      	cmp	r0, #0
  4021c0:	d0f0      	beq.n	4021a4 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4021c2:	2100      	movs	r1, #0
  4021c4:	9100      	str	r1, [sp, #0]
  4021c6:	460b      	mov	r3, r1
  4021c8:	4622      	mov	r2, r4
  4021ca:	4650      	mov	r0, sl
  4021cc:	4c56      	ldr	r4, [pc, #344]	; (402328 <prvTimerTask+0x1f8>)
  4021ce:	47a0      	blx	r4
			configASSERT( xResult );
  4021d0:	2800      	cmp	r0, #0
  4021d2:	d1e7      	bne.n	4021a4 <prvTimerTask+0x74>
  4021d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021d8:	b672      	cpsid	i
  4021da:	f383 8811 	msr	BASEPRI, r3
  4021de:	f3bf 8f6f 	isb	sy
  4021e2:	f3bf 8f4f 	dsb	sy
  4021e6:	b662      	cpsie	i
  4021e8:	e7fe      	b.n	4021e8 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  4021ea:	4b4d      	ldr	r3, [pc, #308]	; (402320 <prvTimerTask+0x1f0>)
  4021ec:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4021ee:	4d4a      	ldr	r5, [pc, #296]	; (402318 <prvTimerTask+0x1e8>)
  4021f0:	4c4e      	ldr	r4, [pc, #312]	; (40232c <prvTimerTask+0x1fc>)
  4021f2:	e006      	b.n	402202 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4021f4:	9907      	ldr	r1, [sp, #28]
  4021f6:	9806      	ldr	r0, [sp, #24]
  4021f8:	9b05      	ldr	r3, [sp, #20]
  4021fa:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4021fc:	9b04      	ldr	r3, [sp, #16]
  4021fe:	2b00      	cmp	r3, #0
  402200:	da08      	bge.n	402214 <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402202:	2200      	movs	r2, #0
  402204:	a904      	add	r1, sp, #16
  402206:	6828      	ldr	r0, [r5, #0]
  402208:	47a0      	blx	r4
  40220a:	2800      	cmp	r0, #0
  40220c:	d099      	beq.n	402142 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  40220e:	9b04      	ldr	r3, [sp, #16]
  402210:	2b00      	cmp	r3, #0
  402212:	dbef      	blt.n	4021f4 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402214:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  402218:	f8da 3014 	ldr.w	r3, [sl, #20]
  40221c:	b113      	cbz	r3, 402224 <prvTimerTask+0xf4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40221e:	f10a 0004 	add.w	r0, sl, #4
  402222:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402224:	a803      	add	r0, sp, #12
  402226:	4b3b      	ldr	r3, [pc, #236]	; (402314 <prvTimerTask+0x1e4>)
  402228:	4798      	blx	r3
			switch( xMessage.xMessageID )
  40222a:	9b04      	ldr	r3, [sp, #16]
  40222c:	2b09      	cmp	r3, #9
  40222e:	d8e8      	bhi.n	402202 <prvTimerTask+0xd2>
  402230:	a201      	add	r2, pc, #4	; (adr r2, 402238 <prvTimerTask+0x108>)
  402232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402236:	bf00      	nop
  402238:	00402261 	.word	0x00402261
  40223c:	00402261 	.word	0x00402261
  402240:	00402261 	.word	0x00402261
  402244:	00402203 	.word	0x00402203
  402248:	004022b5 	.word	0x004022b5
  40224c:	004022e1 	.word	0x004022e1
  402250:	00402261 	.word	0x00402261
  402254:	00402261 	.word	0x00402261
  402258:	00402203 	.word	0x00402203
  40225c:	004022b5 	.word	0x004022b5
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  402260:	9c05      	ldr	r4, [sp, #20]
  402262:	f8da 1018 	ldr.w	r1, [sl, #24]
  402266:	4623      	mov	r3, r4
  402268:	4602      	mov	r2, r0
  40226a:	4421      	add	r1, r4
  40226c:	4650      	mov	r0, sl
  40226e:	4c2d      	ldr	r4, [pc, #180]	; (402324 <prvTimerTask+0x1f4>)
  402270:	47a0      	blx	r4
  402272:	2800      	cmp	r0, #0
  402274:	d0bc      	beq.n	4021f0 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402276:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40227a:	4650      	mov	r0, sl
  40227c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40227e:	f8da 301c 	ldr.w	r3, [sl, #28]
  402282:	2b01      	cmp	r3, #1
  402284:	d1b4      	bne.n	4021f0 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402286:	f8da 2018 	ldr.w	r2, [sl, #24]
  40228a:	2100      	movs	r1, #0
  40228c:	9100      	str	r1, [sp, #0]
  40228e:	460b      	mov	r3, r1
  402290:	9805      	ldr	r0, [sp, #20]
  402292:	4402      	add	r2, r0
  402294:	4650      	mov	r0, sl
  402296:	4c24      	ldr	r4, [pc, #144]	; (402328 <prvTimerTask+0x1f8>)
  402298:	47a0      	blx	r4
							configASSERT( xResult );
  40229a:	2800      	cmp	r0, #0
  40229c:	d1a8      	bne.n	4021f0 <prvTimerTask+0xc0>
  40229e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022a2:	b672      	cpsid	i
  4022a4:	f383 8811 	msr	BASEPRI, r3
  4022a8:	f3bf 8f6f 	isb	sy
  4022ac:	f3bf 8f4f 	dsb	sy
  4022b0:	b662      	cpsie	i
  4022b2:	e7fe      	b.n	4022b2 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4022b4:	9905      	ldr	r1, [sp, #20]
  4022b6:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4022ba:	b131      	cbz	r1, 4022ca <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4022bc:	4603      	mov	r3, r0
  4022be:	4602      	mov	r2, r0
  4022c0:	4401      	add	r1, r0
  4022c2:	4650      	mov	r0, sl
  4022c4:	4c17      	ldr	r4, [pc, #92]	; (402324 <prvTimerTask+0x1f4>)
  4022c6:	47a0      	blx	r4
  4022c8:	e792      	b.n	4021f0 <prvTimerTask+0xc0>
  4022ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022ce:	b672      	cpsid	i
  4022d0:	f383 8811 	msr	BASEPRI, r3
  4022d4:	f3bf 8f6f 	isb	sy
  4022d8:	f3bf 8f4f 	dsb	sy
  4022dc:	b662      	cpsie	i
  4022de:	e7fe      	b.n	4022de <prvTimerTask+0x1ae>
						vPortFree( pxTimer );
  4022e0:	4650      	mov	r0, sl
  4022e2:	4b13      	ldr	r3, [pc, #76]	; (402330 <prvTimerTask+0x200>)
  4022e4:	4798      	blx	r3
  4022e6:	e783      	b.n	4021f0 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  4022e8:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4022ea:	a804      	add	r0, sp, #16
  4022ec:	4b09      	ldr	r3, [pc, #36]	; (402314 <prvTimerTask+0x1e4>)
  4022ee:	4798      	blx	r3
  4022f0:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4022f2:	9b04      	ldr	r3, [sp, #16]
  4022f4:	2b00      	cmp	r3, #0
  4022f6:	f47f af78 	bne.w	4021ea <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4022fa:	4b0e      	ldr	r3, [pc, #56]	; (402334 <prvTimerTask+0x204>)
  4022fc:	681b      	ldr	r3, [r3, #0]
  4022fe:	681a      	ldr	r2, [r3, #0]
  402300:	fab2 f282 	clz	r2, r2
  402304:	0952      	lsrs	r2, r2, #5
  402306:	2400      	movs	r4, #0
  402308:	e72d      	b.n	402166 <prvTimerTask+0x36>
  40230a:	bf00      	nop
  40230c:	2040c308 	.word	0x2040c308
  402310:	004016f5 	.word	0x004016f5
  402314:	00402079 	.word	0x00402079
  402318:	2040c33c 	.word	0x2040c33c
  40231c:	004012bd 	.word	0x004012bd
  402320:	00401859 	.word	0x00401859
  402324:	00401ef5 	.word	0x00401ef5
  402328:	00402009 	.word	0x00402009
  40232c:	00400efd 	.word	0x00400efd
  402330:	004008f5 	.word	0x004008f5
  402334:	2040c30c 	.word	0x2040c30c
  402338:	e000ed04 	.word	0xe000ed04
  40233c:	004005bd 	.word	0x004005bd

00402340 <FusionAhrsReset>:
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
  402340:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
  402344:	6103      	str	r3, [r0, #16]
  402346:	2300      	movs	r3, #0
  402348:	6143      	str	r3, [r0, #20]
  40234a:	6183      	str	r3, [r0, #24]
  40234c:	61c3      	str	r3, [r0, #28]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
  40234e:	6203      	str	r3, [r0, #32]
  402350:	6243      	str	r3, [r0, #36]	; 0x24
  402352:	6283      	str	r3, [r0, #40]	; 0x28
    ahrs->initialising = true;
  402354:	2201      	movs	r2, #1
  402356:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    ahrs->rampedGain = INITIAL_GAIN;
  40235a:	4a0a      	ldr	r2, [pc, #40]	; (402384 <FusionAhrsReset+0x44>)
  40235c:	6302      	str	r2, [r0, #48]	; 0x30
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  40235e:	6383      	str	r3, [r0, #56]	; 0x38
  402360:	63c3      	str	r3, [r0, #60]	; 0x3c
  402362:	6403      	str	r3, [r0, #64]	; 0x40
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  402364:	6443      	str	r3, [r0, #68]	; 0x44
  402366:	6483      	str	r3, [r0, #72]	; 0x48
  402368:	64c3      	str	r3, [r0, #76]	; 0x4c
    ahrs->accelerometerIgnored = false;
  40236a:	2300      	movs	r3, #0
  40236c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    ahrs->accelerationRejectionTimer = 0;
  402370:	6543      	str	r3, [r0, #84]	; 0x54
    ahrs->accelerationRejectionTimeout = false;
  402372:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    ahrs->magnetometerIgnored = false;
  402376:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
    ahrs->magneticRejectionTimer = 0;
  40237a:	65c3      	str	r3, [r0, #92]	; 0x5c
    ahrs->magneticRejectionTimeout = false;
  40237c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  402380:	4770      	bx	lr
  402382:	bf00      	nop
  402384:	41200000 	.word	0x41200000

00402388 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
  402388:	b538      	push	{r3, r4, r5, lr}
  40238a:	ed2d 8b02 	vpush	{d8}
  40238e:	4604      	mov	r4, r0
  402390:	460d      	mov	r5, r1
    ahrs->settings.gain = settings->gain;
  402392:	ed91 8a00 	vldr	s16, [r1]
  402396:	ed80 8a00 	vstr	s16, [r0]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
  40239a:	edd1 7a01 	vldr	s15, [r1, #4]
  40239e:	eef5 7a40 	vcmp.f32	s15, #0.0
  4023a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4023a6:	d001      	beq.n	4023ac <FusionAhrsSetSettings+0x24>
  4023a8:	68cb      	ldr	r3, [r1, #12]
  4023aa:	bb03      	cbnz	r3, 4023ee <FusionAhrsSetSettings+0x66>
        ahrs->settings.accelerationRejection = FLT_MAX;
  4023ac:	4b23      	ldr	r3, [pc, #140]	; (40243c <FusionAhrsSetSettings+0xb4>)
  4023ae:	6063      	str	r3, [r4, #4]
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
  4023b0:	edd5 7a02 	vldr	s15, [r5, #8]
  4023b4:	eef5 7a40 	vcmp.f32	s15, #0.0
  4023b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4023bc:	d001      	beq.n	4023c2 <FusionAhrsSetSettings+0x3a>
  4023be:	68eb      	ldr	r3, [r5, #12]
  4023c0:	bb43      	cbnz	r3, 402414 <FusionAhrsSetSettings+0x8c>
        ahrs->settings.magneticRejection = FLT_MAX;
  4023c2:	4b1e      	ldr	r3, [pc, #120]	; (40243c <FusionAhrsSetSettings+0xb4>)
  4023c4:	60a3      	str	r3, [r4, #8]
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
  4023c6:	68eb      	ldr	r3, [r5, #12]
  4023c8:	60e3      	str	r3, [r4, #12]
    if (ahrs->initialising == false) {
  4023ca:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  4023ce:	b90b      	cbnz	r3, 4023d4 <FusionAhrsSetSettings+0x4c>
        ahrs->rampedGain = ahrs->settings.gain;
  4023d0:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
  4023d4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
  4023d8:	ee77 7ac8 	vsub.f32	s15, s15, s16
  4023dc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
  4023e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4023e4:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
}
  4023e8:	ecbd 8b02 	vpop	{d8}
  4023ec:	bd38      	pop	{r3, r4, r5, pc}
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
  4023ee:	ed9f 7a14 	vldr	s14, [pc, #80]	; 402440 <FusionAhrsSetSettings+0xb8>
  4023f2:	ee67 7a87 	vmul.f32	s15, s15, s14
  4023f6:	ee17 0a90 	vmov	r0, s15
  4023fa:	4b12      	ldr	r3, [pc, #72]	; (402444 <FusionAhrsSetSettings+0xbc>)
  4023fc:	4798      	blx	r3
  4023fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  402402:	ee07 0a10 	vmov	s14, r0
  402406:	ee67 7a27 	vmul.f32	s15, s14, s15
  40240a:	ee67 7aa7 	vmul.f32	s15, s15, s15
  40240e:	edc4 7a01 	vstr	s15, [r4, #4]
  402412:	e7cd      	b.n	4023b0 <FusionAhrsSetSettings+0x28>
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
  402414:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 402440 <FusionAhrsSetSettings+0xb8>
  402418:	ee67 7a87 	vmul.f32	s15, s15, s14
  40241c:	ee17 0a90 	vmov	r0, s15
  402420:	4b08      	ldr	r3, [pc, #32]	; (402444 <FusionAhrsSetSettings+0xbc>)
  402422:	4798      	blx	r3
  402424:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  402428:	ee07 0a10 	vmov	s14, r0
  40242c:	ee67 7a27 	vmul.f32	s15, s14, s15
  402430:	ee67 7aa7 	vmul.f32	s15, s15, s15
  402434:	edc4 7a02 	vstr	s15, [r4, #8]
  402438:	e7c5      	b.n	4023c6 <FusionAhrsSetSettings+0x3e>
  40243a:	bf00      	nop
  40243c:	7f7fffff 	.word	0x7f7fffff
  402440:	3c8efa35 	.word	0x3c8efa35
  402444:	00404861 	.word	0x00404861

00402448 <FusionAhrsInitialise>:
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
  402448:	b530      	push	{r4, r5, lr}
  40244a:	b085      	sub	sp, #20
  40244c:	4605      	mov	r5, r0
    const FusionAhrsSettings settings = {
  40244e:	4b06      	ldr	r3, [pc, #24]	; (402468 <FusionAhrsInitialise+0x20>)
  402450:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  402452:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    FusionAhrsSetSettings(ahrs, &settings);
  402456:	4669      	mov	r1, sp
  402458:	4628      	mov	r0, r5
  40245a:	4b04      	ldr	r3, [pc, #16]	; (40246c <FusionAhrsInitialise+0x24>)
  40245c:	4798      	blx	r3
    FusionAhrsReset(ahrs);
  40245e:	4628      	mov	r0, r5
  402460:	4b03      	ldr	r3, [pc, #12]	; (402470 <FusionAhrsInitialise+0x28>)
  402462:	4798      	blx	r3
}
  402464:	b005      	add	sp, #20
  402466:	bd30      	pop	{r4, r5, pc}
  402468:	00409f1c 	.word	0x00409f1c
  40246c:	00402389 	.word	0x00402389
  402470:	00402341 	.word	0x00402341

00402474 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
  402474:	b410      	push	{r4}
  402476:	4604      	mov	r4, r0
    return ahrs->quaternion;
  402478:	3110      	adds	r1, #16
  40247a:	c90f      	ldmia	r1, {r0, r1, r2, r3}
  40247c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
  402480:	4620      	mov	r0, r4
  402482:	f85d 4b04 	ldr.w	r4, [sp], #4
  402486:	4770      	bx	lr

00402488 <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
  402488:	b510      	push	{r4, lr}
  40248a:	ed2d 8b04 	vpush	{d8-d9}
  40248e:	4604      	mov	r4, r0
  402490:	ee08 1a10 	vmov	s16, r1
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
  402494:	ed90 7a07 	vldr	s14, [r0, #28]
  402498:	edd0 7a06 	vldr	s15, [r0, #24]
  40249c:	ee67 6aa7 	vmul.f32	s13, s15, s15
  4024a0:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
  4024a4:	ee79 6a66 	vsub.f32	s13, s18, s13
  4024a8:	ee27 6a07 	vmul.f32	s12, s14, s14
  4024ac:	edd0 5a04 	vldr	s11, [r0, #16]
  4024b0:	ee27 7a25 	vmul.f32	s14, s14, s11
  4024b4:	edd0 5a05 	vldr	s11, [r0, #20]
  4024b8:	ee67 7aa5 	vmul.f32	s15, s15, s11
  4024bc:	ee76 6ac6 	vsub.f32	s13, s13, s12
  4024c0:	ee16 1a90 	vmov	r1, s13
  4024c4:	ee77 7a27 	vadd.f32	s15, s14, s15
  4024c8:	ee17 0a90 	vmov	r0, s15
  4024cc:	4b2f      	ldr	r3, [pc, #188]	; (40258c <FusionAhrsSetHeading+0x104>)
  4024ce:	4798      	blx	r3
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
    return degrees * ((float) M_PI / 180.0f);
  4024d0:	eddf 8a2f 	vldr	s17, [pc, #188]	; 402590 <FusionAhrsSetHeading+0x108>
  4024d4:	ee68 8a28 	vmul.f32	s17, s16, s17
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
  4024d8:	ee07 0a90 	vmov	s15, r0
  4024dc:	ee77 8ae8 	vsub.f32	s17, s15, s17
  4024e0:	ee68 8a89 	vmul.f32	s17, s17, s18
    const FusionQuaternion rotation = {
            .element.w = cosf(halfYawMinusHeading),
  4024e4:	ee18 0a90 	vmov	r0, s17
  4024e8:	4b2a      	ldr	r3, [pc, #168]	; (402594 <FusionAhrsSetHeading+0x10c>)
  4024ea:	4798      	blx	r3
  4024ec:	ee08 0a10 	vmov	s16, r0
            .element.x = 0.0f,
            .element.y = 0.0f,
            .element.z = -1.0f * sinf(halfYawMinusHeading),
  4024f0:	ee18 0a90 	vmov	r0, s17
  4024f4:	4b28      	ldr	r3, [pc, #160]	; (402598 <FusionAhrsSetHeading+0x110>)
  4024f6:	4798      	blx	r3
  4024f8:	ee07 0a90 	vmov	s15, r0
  4024fc:	eeb1 5a67 	vneg.f32	s10, s15
  402500:	ed94 6a04 	vldr	s12, [r4, #16]
  402504:	edd4 5a05 	vldr	s11, [r4, #20]
  402508:	edd4 7a06 	vldr	s15, [r4, #24]
  40250c:	edd4 4a07 	vldr	s9, [r4, #28]
 */
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
#define A quaternionA.element
#define B quaternionB.element
    FusionQuaternion result;
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
  402510:	ed9f 7a22 	vldr	s14, [pc, #136]	; 40259c <FusionAhrsSetHeading+0x114>
  402514:	ee25 4a87 	vmul.f32	s8, s11, s14
  402518:	ee67 3a87 	vmul.f32	s7, s15, s14
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
  40251c:	ee26 3a07 	vmul.f32	s6, s12, s14
  402520:	ee24 7a87 	vmul.f32	s14, s9, s14
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
  402524:	ee68 6a06 	vmul.f32	s13, s16, s12
  402528:	ee76 6ac4 	vsub.f32	s13, s13, s8
  40252c:	ee76 6ae3 	vsub.f32	s13, s13, s7
  402530:	ee65 2a24 	vmul.f32	s5, s10, s9
  402534:	ee76 6ae2 	vsub.f32	s13, s13, s5
    };
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
  402538:	edc4 6a04 	vstr	s13, [r4, #16]
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
  40253c:	ee68 6a25 	vmul.f32	s13, s16, s11
  402540:	ee76 6a83 	vadd.f32	s13, s13, s6
  402544:	ee76 6a87 	vadd.f32	s13, s13, s14
  402548:	ee67 2a85 	vmul.f32	s5, s15, s10
  40254c:	ee76 6ae2 	vsub.f32	s13, s13, s5
  402550:	edc4 6a05 	vstr	s13, [r4, #20]
    result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
  402554:	ee68 7a27 	vmul.f32	s15, s16, s15
  402558:	ee77 7ac7 	vsub.f32	s15, s15, s14
  40255c:	ee77 7a83 	vadd.f32	s15, s15, s6
  402560:	ee65 5a85 	vmul.f32	s11, s11, s10
  402564:	ee77 7aa5 	vadd.f32	s15, s15, s11
  402568:	edc4 7a06 	vstr	s15, [r4, #24]
    result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
  40256c:	ee28 8a24 	vmul.f32	s16, s16, s9
  402570:	ee38 8a23 	vadd.f32	s16, s16, s7
  402574:	ee38 8a44 	vsub.f32	s16, s16, s8
  402578:	ee26 6a05 	vmul.f32	s12, s12, s10
  40257c:	ee38 8a06 	vadd.f32	s16, s16, s12
  402580:	ed84 8a07 	vstr	s16, [r4, #28]
#undef Q
}
  402584:	ecbd 8b04 	vpop	{d8-d9}
  402588:	bd10      	pop	{r4, pc}
  40258a:	bf00      	nop
  40258c:	00404a39 	.word	0x00404a39
  402590:	3c8efa35 	.word	0x3c8efa35
  402594:	004047e9 	.word	0x004047e9
  402598:	00404861 	.word	0x00404861
  40259c:	00000000 	.word	0x00000000

004025a0 <FusionAhrsUpdate>:
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
  4025a0:	b570      	push	{r4, r5, r6, lr}
  4025a2:	ed2d 8b0a 	vpush	{d8-d12}
  4025a6:	b08e      	sub	sp, #56	; 0x38
  4025a8:	4604      	mov	r4, r0
  4025aa:	a803      	add	r0, sp, #12
  4025ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  4025b0:	ed9d 9a22 	vldr	s18, [sp, #136]	; 0x88
    ahrs->accelerometer = accelerometer;
  4025b4:	f104 0320 	add.w	r3, r4, #32
  4025b8:	aa1c      	add	r2, sp, #112	; 0x70
  4025ba:	ca07      	ldmia	r2, {r0, r1, r2}
  4025bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (ahrs->initialising == true) {
  4025c0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  4025c4:	b1bb      	cbz	r3, 4025f6 <FusionAhrsUpdate+0x56>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
  4025c6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
  4025ca:	ee29 7a27 	vmul.f32	s14, s18, s15
  4025ce:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
  4025d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
  4025d6:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
        if (ahrs->rampedGain < ahrs->settings.gain) {
  4025da:	ed94 7a00 	vldr	s14, [r4]
  4025de:	eef4 7ac7 	vcmpe.f32	s15, s14
  4025e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4025e6:	d506      	bpl.n	4025f6 <FusionAhrsUpdate+0x56>
            ahrs->rampedGain = ahrs->settings.gain;
  4025e8:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
            ahrs->initialising = false;
  4025ec:	2300      	movs	r3, #0
  4025ee:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            ahrs->accelerationRejectionTimeout = false;
  4025f2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
            .axis.x = Q.x * Q.z - Q.w * Q.y,
  4025f6:	ed94 6a05 	vldr	s12, [r4, #20]
  4025fa:	edd4 9a07 	vldr	s19, [r4, #28]
  4025fe:	ed94 7a04 	vldr	s14, [r4, #16]
  402602:	edd4 aa06 	vldr	s21, [r4, #24]
  402606:	ee66 6a29 	vmul.f32	s13, s12, s19
  40260a:	ee67 7a2a 	vmul.f32	s15, s14, s21
  40260e:	ee36 bae7 	vsub.f32	s22, s13, s15
            .axis.y = Q.y * Q.z + Q.w * Q.x,
  402612:	ee69 aaaa 	vmul.f32	s21, s19, s21
  402616:	ee26 6a07 	vmul.f32	s12, s12, s14
  40261a:	ee7a aa86 	vadd.f32	s21, s21, s12
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
  40261e:	ee27 7a07 	vmul.f32	s14, s14, s14
  402622:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  402626:	ee37 7a67 	vsub.f32	s14, s14, s15
  40262a:	ee69 9aa9 	vmul.f32	s19, s19, s19
  40262e:	ee77 9a29 	vadd.f32	s19, s14, s19
    ahrs->accelerometerIgnored = true;
  402632:	2301      	movs	r3, #1
  402634:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  402638:	ed9d 8a1c 	vldr	s16, [sp, #112]	; 0x70
  40263c:	ed9d aa1d 	vldr	s20, [sp, #116]	; 0x74
  402640:	eddd 8a1e 	vldr	s17, [sp, #120]	; 0x78
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
  402644:	eeb5 aa40 	vcmp.f32	s20, #0.0
  402648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40264c:	bf18      	it	ne
  40264e:	2300      	movne	r3, #0
  402650:	eeb5 8a40 	vcmp.f32	s16, #0.0
  402654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (FusionVectorIsZero(accelerometer) == false) {
  402658:	f003 0301 	and.w	r3, r3, #1
  40265c:	bf18      	it	ne
  40265e:	2300      	movne	r3, #0
  402660:	b38b      	cbz	r3, 4026c6 <FusionAhrsUpdate+0x126>
  402662:	eef5 8a40 	vcmp.f32	s17, #0.0
  402666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40266a:	d12c      	bne.n	4026c6 <FusionAhrsUpdate+0x126>
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  40266c:	ed9f 8ae8 	vldr	s16, [pc, #928]	; 402a10 <FusionAhrsUpdate+0x470>
  402670:	eef0 8a48 	vmov.f32	s17, s16
  402674:	eeb0 aa48 	vmov.f32	s20, s16
    ahrs->magnetometerIgnored = true;
  402678:	2301      	movs	r3, #1
  40267a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  40267e:	eddd ba1f 	vldr	s23, [sp, #124]	; 0x7c
  402682:	ed9d ca20 	vldr	s24, [sp, #128]	; 0x80
  402686:	eddd ca21 	vldr	s25, [sp, #132]	; 0x84
  40268a:	eeb5 ca40 	vcmp.f32	s24, #0.0
  40268e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402692:	bf18      	it	ne
  402694:	2300      	movne	r3, #0
  402696:	eef5 ba40 	vcmp.f32	s23, #0.0
  40269a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (FusionVectorIsZero(magnetometer) == false) {
  40269e:	f003 0301 	and.w	r3, r3, #1
  4026a2:	bf18      	it	ne
  4026a4:	2300      	movne	r3, #0
  4026a6:	2b00      	cmp	r3, #0
  4026a8:	f000 8089 	beq.w	4027be <FusionAhrsUpdate+0x21e>
  4026ac:	eef5 ca40 	vcmp.f32	s25, #0.0
  4026b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4026b4:	f040 8083 	bne.w	4027be <FusionAhrsUpdate+0x21e>
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  4026b8:	eddf 9ad5 	vldr	s19, [pc, #852]	; 402a10 <FusionAhrsUpdate+0x470>
  4026bc:	eef0 6a69 	vmov.f32	s13, s19
  4026c0:	eeb0 7a69 	vmov.f32	s14, s19
  4026c4:	e10d      	b.n	4028e2 <FusionAhrsUpdate+0x342>
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
  4026c6:	6d62      	ldr	r2, [r4, #84]	; 0x54
  4026c8:	68e3      	ldr	r3, [r4, #12]
  4026ca:	429a      	cmp	r2, r3
  4026cc:	d859      	bhi.n	402782 <FusionAhrsUpdate+0x1e2>
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  4026ce:	ee68 7a08 	vmul.f32	s15, s16, s16
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  4026d2:	ee2a 7a0a 	vmul.f32	s14, s20, s20
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4026d6:	ee77 7a87 	vadd.f32	s15, s15, s14
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  4026da:	ee28 7aa8 	vmul.f32	s14, s17, s17
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4026de:	ee77 7a87 	vadd.f32	s15, s15, s14
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  4026e2:	4bcc      	ldr	r3, [pc, #816]	; (402a14 <FusionAhrsUpdate+0x474>)
  4026e4:	ee17 2a90 	vmov	r2, s15
  4026e8:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  4026ec:	ee06 3a90 	vmov	s13, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  4026f0:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 402a18 <FusionAhrsUpdate+0x478>
  4026f4:	ee67 7a87 	vmul.f32	s15, s15, s14
  4026f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
  4026fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
  402700:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 402a1c <FusionAhrsUpdate+0x47c>
  402704:	ee77 7a67 	vsub.f32	s15, s14, s15
  402708:	ee67 7aa6 	vmul.f32	s15, s15, s13
    result.axis.x = vector.axis.x * scalar;
  40270c:	ee28 8a27 	vmul.f32	s16, s16, s15
    result.axis.y = vector.axis.y * scalar;
  402710:	ee2a 6a27 	vmul.f32	s12, s20, s15
    result.axis.z = vector.axis.z * scalar;
  402714:	ee68 8aa7 	vmul.f32	s17, s17, s15
    result.axis.x = A.y * B.z - A.z * B.y;
  402718:	ee29 7a86 	vmul.f32	s14, s19, s12
  40271c:	ee6a 7aa8 	vmul.f32	s15, s21, s17
  402720:	ee37 aa67 	vsub.f32	s20, s14, s15
    result.axis.y = A.z * B.x - A.x * B.z;
  402724:	ee6b 8a28 	vmul.f32	s17, s22, s17
  402728:	ee69 6a88 	vmul.f32	s13, s19, s16
  40272c:	ee78 8ae6 	vsub.f32	s17, s17, s13
    result.axis.z = A.x * B.y - A.y * B.x;
  402730:	ee2a 8a88 	vmul.f32	s16, s21, s16
  402734:	ee2b 6a06 	vmul.f32	s12, s22, s12
  402738:	ee38 8a46 	vsub.f32	s16, s16, s12
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
  40273c:	ed84 aa0e 	vstr	s20, [r4, #56]	; 0x38
  402740:	edc4 8a0f 	vstr	s17, [r4, #60]	; 0x3c
  402744:	ed84 8a10 	vstr	s16, [r4, #64]	; 0x40
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
  402748:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  40274c:	b973      	cbnz	r3, 40276c <FusionAhrsUpdate+0x1cc>
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  40274e:	ee6a 7a0a 	vmul.f32	s15, s20, s20
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  402752:	ee28 7aa8 	vmul.f32	s14, s17, s17
    return vector.axis.x + vector.axis.y + vector.axis.z;
  402756:	ee77 7a87 	vadd.f32	s15, s15, s14
  40275a:	ee48 7a08 	vmla.f32	s15, s16, s16
  40275e:	ed94 7a01 	vldr	s14, [r4, #4]
  402762:	eef4 7ac7 	vcmpe.f32	s15, s14
  402766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40276a:	d81e      	bhi.n	4027aa <FusionAhrsUpdate+0x20a>
            ahrs->accelerometerIgnored = false;
  40276c:	2300      	movs	r3, #0
  40276e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
  402772:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402774:	2b09      	cmp	r3, #9
  402776:	bf8c      	ite	hi
  402778:	220a      	movhi	r2, #10
  40277a:	2200      	movls	r2, #0
  40277c:	1a9b      	subs	r3, r3, r2
  40277e:	6563      	str	r3, [r4, #84]	; 0x54
  402780:	e77a      	b.n	402678 <FusionAhrsUpdate+0xd8>
            const FusionQuaternion quaternion = ahrs->quaternion;
  402782:	ae07      	add	r6, sp, #28
  402784:	f104 0510 	add.w	r5, r4, #16
  402788:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  40278c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
  402790:	4620      	mov	r0, r4
  402792:	4ba3      	ldr	r3, [pc, #652]	; (402a20 <FusionAhrsUpdate+0x480>)
  402794:	4798      	blx	r3
            ahrs->quaternion = quaternion;
  402796:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  40279a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
  40279e:	2300      	movs	r3, #0
  4027a0:	6563      	str	r3, [r4, #84]	; 0x54
            ahrs->accelerationRejectionTimeout = true;
  4027a2:	2301      	movs	r3, #1
  4027a4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  4027a8:	e791      	b.n	4026ce <FusionAhrsUpdate+0x12e>
            ahrs->accelerationRejectionTimer++;
  4027aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4027ac:	3301      	adds	r3, #1
  4027ae:	6563      	str	r3, [r4, #84]	; 0x54
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  4027b0:	ed9f 8a97 	vldr	s16, [pc, #604]	; 402a10 <FusionAhrsUpdate+0x470>
  4027b4:	eef0 8a48 	vmov.f32	s17, s16
  4027b8:	eeb0 aa48 	vmov.f32	s20, s16
  4027bc:	e75c      	b.n	402678 <FusionAhrsUpdate+0xd8>
        ahrs->magneticRejectionTimeout = false;
  4027be:	2300      	movs	r3, #0
  4027c0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
  4027c4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  4027c6:	68e3      	ldr	r3, [r4, #12]
  4027c8:	429a      	cmp	r2, r3
  4027ca:	f200 812d 	bhi.w	402a28 <FusionAhrsUpdate+0x488>
                .axis.x = Q.x * Q.y + Q.w * Q.z,
  4027ce:	edd4 6a05 	vldr	s13, [r4, #20]
  4027d2:	ed94 7a06 	vldr	s14, [r4, #24]
  4027d6:	edd4 4a04 	vldr	s9, [r4, #16]
  4027da:	edd4 5a07 	vldr	s11, [r4, #28]
  4027de:	ee26 5a87 	vmul.f32	s10, s13, s14
  4027e2:	ee64 7aa5 	vmul.f32	s15, s9, s11
  4027e6:	ee35 5a27 	vadd.f32	s10, s10, s15
                .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
  4027ea:	ee64 7aa4 	vmul.f32	s15, s9, s9
  4027ee:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
  4027f2:	ee77 7ac6 	vsub.f32	s15, s15, s12
  4027f6:	ee27 6a07 	vmul.f32	s12, s14, s14
  4027fa:	ee37 6a86 	vadd.f32	s12, s15, s12
                .axis.z = Q.y * Q.z - Q.w * Q.x
  4027fe:	ee27 7a25 	vmul.f32	s14, s14, s11
  402802:	ee66 6aa4 	vmul.f32	s13, s13, s9
  402806:	ee77 4a66 	vsub.f32	s9, s14, s13
    result.axis.x = A.y * B.z - A.z * B.y;
  40280a:	ee6a 5aac 	vmul.f32	s11, s21, s25
  40280e:	ee69 7a8c 	vmul.f32	s15, s19, s24
  402812:	ee75 5ae7 	vsub.f32	s11, s11, s15
    result.axis.y = A.z * B.x - A.x * B.z;
  402816:	ee69 9aab 	vmul.f32	s19, s19, s23
  40281a:	ee6b ca2c 	vmul.f32	s25, s22, s25
  40281e:	ee79 9aec 	vsub.f32	s19, s19, s25
    result.axis.z = A.x * B.y - A.y * B.x;
  402822:	ee6b 6a0c 	vmul.f32	s13, s22, s24
  402826:	ee6a 7aab 	vmul.f32	s15, s21, s23
  40282a:	ee76 6ae7 	vsub.f32	s13, s13, s15
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  40282e:	ee25 7aa5 	vmul.f32	s14, s11, s11
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  402832:	ee69 7aa9 	vmul.f32	s15, s19, s19
    return vector.axis.x + vector.axis.y + vector.axis.z;
  402836:	ee37 7a27 	vadd.f32	s14, s14, s15
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  40283a:	ee66 7aa6 	vmul.f32	s15, s13, s13
    return vector.axis.x + vector.axis.y + vector.axis.z;
  40283e:	ee37 7a27 	vadd.f32	s14, s14, s15
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  402842:	4b74      	ldr	r3, [pc, #464]	; (402a14 <FusionAhrsUpdate+0x474>)
  402844:	ee17 2a10 	vmov	r2, s14
  402848:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  40284c:	ee04 3a10 	vmov	s8, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  402850:	eddf 7a71 	vldr	s15, [pc, #452]	; 402a18 <FusionAhrsUpdate+0x478>
  402854:	ee27 7a27 	vmul.f32	s14, s14, s15
  402858:	ee27 7a04 	vmul.f32	s14, s14, s8
  40285c:	ee27 7a04 	vmul.f32	s14, s14, s8
  402860:	eddf 7a6e 	vldr	s15, [pc, #440]	; 402a1c <FusionAhrsUpdate+0x47c>
  402864:	ee77 7ac7 	vsub.f32	s15, s15, s14
  402868:	ee67 7a84 	vmul.f32	s15, s15, s8
    result.axis.x = vector.axis.x * scalar;
  40286c:	ee67 5aa5 	vmul.f32	s11, s15, s11
    result.axis.y = vector.axis.y * scalar;
  402870:	ee67 9aa9 	vmul.f32	s19, s15, s19
    result.axis.z = vector.axis.z * scalar;
  402874:	ee67 7aa6 	vmul.f32	s15, s15, s13
    result.axis.x = A.y * B.z - A.z * B.y;
  402878:	ee24 7aa9 	vmul.f32	s14, s9, s19
  40287c:	ee66 6a27 	vmul.f32	s13, s12, s15
  402880:	ee37 7a66 	vsub.f32	s14, s14, s13
    result.axis.y = A.z * B.x - A.x * B.z;
  402884:	ee65 7a27 	vmul.f32	s15, s10, s15
  402888:	ee64 6aa5 	vmul.f32	s13, s9, s11
  40288c:	ee77 6ae6 	vsub.f32	s13, s15, s13
    result.axis.z = A.x * B.y - A.y * B.x;
  402890:	ee66 7a25 	vmul.f32	s15, s12, s11
  402894:	ee65 9a29 	vmul.f32	s19, s10, s19
  402898:	ee77 9ae9 	vsub.f32	s19, s15, s19
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfWest);
  40289c:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
  4028a0:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
  4028a4:	edc4 9a13 	vstr	s19, [r4, #76]	; 0x4c
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
  4028a8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  4028ac:	b97b      	cbnz	r3, 4028ce <FusionAhrsUpdate+0x32e>
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  4028ae:	ee67 7a07 	vmul.f32	s15, s14, s14
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  4028b2:	ee26 6aa6 	vmul.f32	s12, s13, s13
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4028b6:	ee77 7a86 	vadd.f32	s15, s15, s12
  4028ba:	ee49 7aa9 	vmla.f32	s15, s19, s19
  4028be:	ed94 6a02 	vldr	s12, [r4, #8]
  4028c2:	eef4 7ac6 	vcmpe.f32	s15, s12
  4028c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4028ca:	f200 80c8 	bhi.w	402a5e <FusionAhrsUpdate+0x4be>
            ahrs->magnetometerIgnored = false;
  4028ce:	2300      	movs	r3, #0
  4028d0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
  4028d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  4028d6:	2b09      	cmp	r3, #9
  4028d8:	bf8c      	ite	hi
  4028da:	220a      	movhi	r2, #10
  4028dc:	2200      	movls	r2, #0
  4028de:	1a9b      	subs	r3, r3, r2
  4028e0:	65e3      	str	r3, [r4, #92]	; 0x5c
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
  4028e2:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
  4028e6:	ee37 7a0a 	vadd.f32	s14, s14, s20
    result.axis.x = vector.axis.x * scalar;
  4028ea:	ee27 7a27 	vmul.f32	s14, s14, s15
  4028ee:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 402a24 <FusionAhrsUpdate+0x484>
  4028f2:	eddd 5a03 	vldr	s11, [sp, #12]
  4028f6:	ee65 5a86 	vmul.f32	s11, s11, s12
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
  4028fa:	ee37 7a25 	vadd.f32	s14, s14, s11
    result.axis.x = vector.axis.x * scalar;
  4028fe:	ee27 7a09 	vmul.f32	s14, s14, s18
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
  402902:	ee78 6aa6 	vadd.f32	s13, s17, s13
    result.axis.y = vector.axis.y * scalar;
  402906:	ee66 6aa7 	vmul.f32	s13, s13, s15
  40290a:	eddd 8a04 	vldr	s17, [sp, #16]
  40290e:	ee68 8a86 	vmul.f32	s17, s17, s12
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
  402912:	ee76 6aa8 	vadd.f32	s13, s13, s17
    result.axis.y = vector.axis.y * scalar;
  402916:	ee66 6a89 	vmul.f32	s13, s13, s18
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
  40291a:	ee38 8a29 	vadd.f32	s16, s16, s19
    result.axis.z = vector.axis.z * scalar;
  40291e:	ee28 8a27 	vmul.f32	s16, s16, s15
  402922:	eddd 7a05 	vldr	s15, [sp, #20]
  402926:	ee67 7a86 	vmul.f32	s15, s15, s12
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
  40292a:	ee38 8a27 	vadd.f32	s16, s16, s15
    result.axis.z = vector.axis.z * scalar;
  40292e:	ee68 7a09 	vmul.f32	s15, s16, s18
  402932:	ed94 3a04 	vldr	s6, [r4, #16]
  402936:	edd4 3a05 	vldr	s7, [r4, #20]
  40293a:	ed94 4a06 	vldr	s8, [r4, #24]
  40293e:	ed94 5a07 	vldr	s10, [r4, #28]
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
#define Q quaternion.element
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
  402942:	ee63 5ac7 	vnmul.f32	s11, s7, s14
  402946:	ee26 6a84 	vmul.f32	s12, s13, s8
  40294a:	ee75 5ac6 	vsub.f32	s11, s11, s12
  40294e:	ee27 6a85 	vmul.f32	s12, s15, s10
  402952:	ee75 5ac6 	vsub.f32	s11, s11, s12
    result.element.w = quaternionA.element.w + quaternionB.element.w;
  402956:	ee75 5a83 	vadd.f32	s11, s11, s6
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
  40295a:	ee67 4a03 	vmul.f32	s9, s14, s6
  40295e:	ee27 6a84 	vmul.f32	s12, s15, s8
  402962:	ee74 4a86 	vadd.f32	s9, s9, s12
  402966:	ee26 6a85 	vmul.f32	s12, s13, s10
  40296a:	ee74 4ac6 	vsub.f32	s9, s9, s12
    result.element.x = quaternionA.element.x + quaternionB.element.x;
  40296e:	ee74 4aa3 	vadd.f32	s9, s9, s7
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
  402972:	ee26 6a83 	vmul.f32	s12, s13, s6
  402976:	ee67 2aa3 	vmul.f32	s5, s15, s7
  40297a:	ee36 6a62 	vsub.f32	s12, s12, s5
  40297e:	ee67 2a05 	vmul.f32	s5, s14, s10
  402982:	ee36 6a22 	vadd.f32	s12, s12, s5
    result.element.y = quaternionA.element.y + quaternionB.element.y;
  402986:	ee36 6a04 	vadd.f32	s12, s12, s8
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
  40298a:	ee67 7a83 	vmul.f32	s15, s15, s6
  40298e:	ee66 6aa3 	vmul.f32	s13, s13, s7
  402992:	ee77 7aa6 	vadd.f32	s15, s15, s13
  402996:	ee27 7a04 	vmul.f32	s14, s14, s8
  40299a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    result.element.z = quaternionA.element.z + quaternionB.element.z;
  40299e:	ee77 7a85 	vadd.f32	s15, s15, s10
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
  4029a2:	ee25 7aa5 	vmul.f32	s14, s11, s11
  4029a6:	ee64 6aa4 	vmul.f32	s13, s9, s9
  4029aa:	ee37 7a26 	vadd.f32	s14, s14, s13
  4029ae:	ee66 6a06 	vmul.f32	s13, s12, s12
  4029b2:	ee37 7a26 	vadd.f32	s14, s14, s13
  4029b6:	ee67 6aa7 	vmul.f32	s13, s15, s15
  4029ba:	ee37 7a26 	vadd.f32	s14, s14, s13
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  4029be:	4b15      	ldr	r3, [pc, #84]	; (402a14 <FusionAhrsUpdate+0x474>)
  4029c0:	ee17 2a10 	vmov	r2, s14
  4029c4:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  4029c8:	ee05 3a10 	vmov	s10, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  4029cc:	eddf 6a12 	vldr	s13, [pc, #72]	; 402a18 <FusionAhrsUpdate+0x478>
  4029d0:	ee27 7a26 	vmul.f32	s14, s14, s13
  4029d4:	ee27 7a05 	vmul.f32	s14, s14, s10
  4029d8:	ee27 7a05 	vmul.f32	s14, s14, s10
  4029dc:	eddf 6a0f 	vldr	s13, [pc, #60]	; 402a1c <FusionAhrsUpdate+0x47c>
  4029e0:	ee36 7ac7 	vsub.f32	s14, s13, s14
  4029e4:	ee27 7a05 	vmul.f32	s14, s14, s10
#endif
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
  4029e8:	ee67 5a25 	vmul.f32	s11, s14, s11
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
  4029ec:	edc4 5a04 	vstr	s11, [r4, #16]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
  4029f0:	ee67 6a24 	vmul.f32	s13, s14, s9
  4029f4:	edc4 6a05 	vstr	s13, [r4, #20]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
  4029f8:	ee27 6a06 	vmul.f32	s12, s14, s12
  4029fc:	ed84 6a06 	vstr	s12, [r4, #24]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
  402a00:	ee27 7a27 	vmul.f32	s14, s14, s15
  402a04:	ed84 7a07 	vstr	s14, [r4, #28]
}
  402a08:	b00e      	add	sp, #56	; 0x38
  402a0a:	ecbd 8b0a 	vpop	{d8-d12}
  402a0e:	bd70      	pop	{r4, r5, r6, pc}
  402a10:	00000000 	.word	0x00000000
  402a14:	5f1f1412 	.word	0x5f1f1412
  402a18:	3f36d312 	.word	0x3f36d312
  402a1c:	3fd851ff 	.word	0x3fd851ff
  402a20:	00402341 	.word	0x00402341
  402a24:	3c0efa35 	.word	0x3c0efa35
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(halfGravity, magnetometer));
  402a28:	ed8d ba0b 	vstr	s22, [sp, #44]	; 0x2c
  402a2c:	edcd aa0c 	vstr	s21, [sp, #48]	; 0x30
  402a30:	edcd 9a0d 	vstr	s19, [sp, #52]	; 0x34
  402a34:	ab20      	add	r3, sp, #128	; 0x80
  402a36:	e893 0003 	ldmia.w	r3, {r0, r1}
  402a3a:	e88d 0003 	stmia.w	sp, {r0, r1}
  402a3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402a40:	aa0e      	add	r2, sp, #56	; 0x38
  402a42:	e912 0007 	ldmdb	r2, {r0, r1, r2}
  402a46:	4d0b      	ldr	r5, [pc, #44]	; (402a74 <FusionAhrsUpdate+0x4d4>)
  402a48:	47a8      	blx	r5
  402a4a:	4601      	mov	r1, r0
  402a4c:	4620      	mov	r0, r4
  402a4e:	4b0a      	ldr	r3, [pc, #40]	; (402a78 <FusionAhrsUpdate+0x4d8>)
  402a50:	4798      	blx	r3
            ahrs->magneticRejectionTimer = 0;
  402a52:	2300      	movs	r3, #0
  402a54:	65e3      	str	r3, [r4, #92]	; 0x5c
            ahrs->magneticRejectionTimeout = true;
  402a56:	2301      	movs	r3, #1
  402a58:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  402a5c:	e6b7      	b.n	4027ce <FusionAhrsUpdate+0x22e>
            ahrs->magneticRejectionTimer++;
  402a5e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402a60:	3301      	adds	r3, #1
  402a62:	65e3      	str	r3, [r4, #92]	; 0x5c
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  402a64:	eddf 9a05 	vldr	s19, [pc, #20]	; 402a7c <FusionAhrsUpdate+0x4dc>
  402a68:	eef0 6a69 	vmov.f32	s13, s19
  402a6c:	eeb0 7a69 	vmov.f32	s14, s19
  402a70:	e737      	b.n	4028e2 <FusionAhrsUpdate+0x342>
  402a72:	bf00      	nop
  402a74:	00402add 	.word	0x00402add
  402a78:	00402489 	.word	0x00402489
  402a7c:	00000000 	.word	0x00000000

00402a80 <FusionAhrsUpdateNoMagnetometer>:
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
  402a80:	b530      	push	{r4, r5, lr}
  402a82:	b091      	sub	sp, #68	; 0x44
  402a84:	4605      	mov	r5, r0
  402a86:	ac09      	add	r4, sp, #36	; 0x24
  402a88:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
  402a8c:	2300      	movs	r3, #0
  402a8e:	930d      	str	r3, [sp, #52]	; 0x34
  402a90:	930e      	str	r3, [sp, #56]	; 0x38
  402a92:	930f      	str	r3, [sp, #60]	; 0x3c
  402a94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  402a96:	9306      	str	r3, [sp, #24]
  402a98:	ab03      	add	r3, sp, #12
  402a9a:	aa10      	add	r2, sp, #64	; 0x40
  402a9c:	e912 0007 	ldmdb	r2, {r0, r1, r2}
  402aa0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  402aa4:	ab14      	add	r3, sp, #80	; 0x50
  402aa6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  402aaa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  402aae:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
  402ab2:	4628      	mov	r0, r5
  402ab4:	4c07      	ldr	r4, [pc, #28]	; (402ad4 <FusionAhrsUpdateNoMagnetometer+0x54>)
  402ab6:	47a0      	blx	r4
    if ((ahrs->initialising == true) && (ahrs->accelerationRejectionTimeout == false)) {
  402ab8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
  402abc:	b113      	cbz	r3, 402ac4 <FusionAhrsUpdateNoMagnetometer+0x44>
  402abe:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
  402ac2:	b10b      	cbz	r3, 402ac8 <FusionAhrsUpdateNoMagnetometer+0x48>
}
  402ac4:	b011      	add	sp, #68	; 0x44
  402ac6:	bd30      	pop	{r4, r5, pc}
        FusionAhrsSetHeading(ahrs, 0.0f);
  402ac8:	2100      	movs	r1, #0
  402aca:	4628      	mov	r0, r5
  402acc:	4b02      	ldr	r3, [pc, #8]	; (402ad8 <FusionAhrsUpdateNoMagnetometer+0x58>)
  402ace:	4798      	blx	r3
}
  402ad0:	e7f8      	b.n	402ac4 <FusionAhrsUpdateNoMagnetometer+0x44>
  402ad2:	bf00      	nop
  402ad4:	004025a1 	.word	0x004025a1
  402ad8:	00402489 	.word	0x00402489

00402adc <FusionCompassCalculateHeading>:
 * @brief Calculates the heading relative to magnetic north.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionVector accelerometer, const FusionVector magnetometer) {
  402adc:	b082      	sub	sp, #8
  402ade:	b500      	push	{lr}
  402ae0:	b085      	sub	sp, #20
  402ae2:	f10d 0e10 	add.w	lr, sp, #16
  402ae6:	e90e 0007 	stmdb	lr, {r0, r1, r2}
  402aea:	9307      	str	r3, [sp, #28]
  402aec:	eddd 3a01 	vldr	s7, [sp, #4]
  402af0:	eddd 6a02 	vldr	s13, [sp, #8]
  402af4:	ed9d 4a03 	vldr	s8, [sp, #12]
  402af8:	eddd 7a07 	vldr	s15, [sp, #28]
  402afc:	ed9d 5a08 	vldr	s10, [sp, #32]
  402b00:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
    result.axis.x = A.y * B.z - A.z * B.y;
  402b04:	ee66 5a26 	vmul.f32	s11, s12, s13
  402b08:	ee24 7a05 	vmul.f32	s14, s8, s10
  402b0c:	ee75 5ac7 	vsub.f32	s11, s11, s14
    result.axis.y = A.z * B.x - A.x * B.z;
  402b10:	ee24 7a27 	vmul.f32	s14, s8, s15
  402b14:	ee26 6a23 	vmul.f32	s12, s12, s7
  402b18:	ee37 6a46 	vsub.f32	s12, s14, s12
    result.axis.z = A.x * B.y - A.y * B.x;
  402b1c:	ee25 5a23 	vmul.f32	s10, s10, s7
  402b20:	ee67 7aa6 	vmul.f32	s15, s15, s13
  402b24:	ee35 5a67 	vsub.f32	s10, s10, s15
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  402b28:	ee25 7aa5 	vmul.f32	s14, s11, s11
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  402b2c:	ee66 7a06 	vmul.f32	s15, s12, s12
    return vector.axis.x + vector.axis.y + vector.axis.z;
  402b30:	ee37 7a27 	vadd.f32	s14, s14, s15
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  402b34:	ee65 7a05 	vmul.f32	s15, s10, s10
    return vector.axis.x + vector.axis.y + vector.axis.z;
  402b38:	ee37 7a27 	vadd.f32	s14, s14, s15
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  402b3c:	4b2d      	ldr	r3, [pc, #180]	; (402bf4 <FusionCompassCalculateHeading+0x118>)
  402b3e:	ee17 2a10 	vmov	r2, s14
  402b42:	eba3 0262 	sub.w	r2, r3, r2, asr #1
  402b46:	ee03 2a10 	vmov	s6, r2
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  402b4a:	eddf 2a2b 	vldr	s5, [pc, #172]	; 402bf8 <FusionCompassCalculateHeading+0x11c>
  402b4e:	ee27 7a22 	vmul.f32	s14, s14, s5
  402b52:	ee27 7a03 	vmul.f32	s14, s14, s6
  402b56:	ee27 7a03 	vmul.f32	s14, s14, s6
  402b5a:	eddf 4a28 	vldr	s9, [pc, #160]	; 402bfc <FusionCompassCalculateHeading+0x120>
  402b5e:	ee34 7ac7 	vsub.f32	s14, s9, s14
  402b62:	ee67 7a03 	vmul.f32	s15, s14, s6
    result.axis.x = vector.axis.x * scalar;
  402b66:	ee67 5aa5 	vmul.f32	s11, s15, s11
    result.axis.y = vector.axis.y * scalar;
  402b6a:	ee27 6a86 	vmul.f32	s12, s15, s12
    result.axis.z = vector.axis.z * scalar;
  402b6e:	ee67 7a85 	vmul.f32	s15, s15, s10
    result.axis.x = A.y * B.z - A.z * B.y;
  402b72:	ee24 5a06 	vmul.f32	s10, s8, s12
  402b76:	ee26 7aa7 	vmul.f32	s14, s13, s15
  402b7a:	ee35 5a47 	vsub.f32	s10, s10, s14
    result.axis.y = A.z * B.x - A.x * B.z;
  402b7e:	ee67 7aa3 	vmul.f32	s15, s15, s7
  402b82:	ee24 4a25 	vmul.f32	s8, s8, s11
  402b86:	ee77 7ac4 	vsub.f32	s15, s15, s8
    result.axis.z = A.x * B.y - A.y * B.x;
  402b8a:	ee66 6aa5 	vmul.f32	s13, s13, s11
  402b8e:	ee26 6a23 	vmul.f32	s12, s12, s7
  402b92:	ee76 6ac6 	vsub.f32	s13, s13, s12
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  402b96:	ee25 7a05 	vmul.f32	s14, s10, s10
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  402b9a:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return vector.axis.x + vector.axis.y + vector.axis.z;
  402b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  402ba2:	ee66 6aa6 	vmul.f32	s13, s13, s13
    return vector.axis.x + vector.axis.y + vector.axis.z;
  402ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  402baa:	ee17 2a90 	vmov	r2, s15
  402bae:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  402bb2:	ee07 3a10 	vmov	s14, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  402bb6:	ee67 7aa2 	vmul.f32	s15, s15, s5
  402bba:	ee67 7a87 	vmul.f32	s15, s15, s14
  402bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
  402bc2:	ee74 7ae7 	vsub.f32	s15, s9, s15
  402bc6:	ee67 7a87 	vmul.f32	s15, s15, s14

    // Compute direction of magnetic north (Earth's x axis)
    const FusionVector magneticNorth = FusionVectorNormalise(FusionVectorCrossProduct(magneticWest, accelerometer));

    // Calculate angular heading relative to magnetic north
    return FusionRadiansToDegrees(atan2f(magneticWest.axis.x, magneticNorth.axis.x));
  402bca:	ee67 7a85 	vmul.f32	s15, s15, s10
  402bce:	ee17 1a90 	vmov	r1, s15
  402bd2:	ee15 0a90 	vmov	r0, s11
  402bd6:	4b0a      	ldr	r3, [pc, #40]	; (402c00 <FusionCompassCalculateHeading+0x124>)
  402bd8:	4798      	blx	r3
}
  402bda:	eddf 7a0a 	vldr	s15, [pc, #40]	; 402c04 <FusionCompassCalculateHeading+0x128>
  402bde:	ee07 0a10 	vmov	s14, r0
  402be2:	ee67 7a27 	vmul.f32	s15, s14, s15
  402be6:	ee17 0a90 	vmov	r0, s15
  402bea:	b005      	add	sp, #20
  402bec:	f85d eb04 	ldr.w	lr, [sp], #4
  402bf0:	b002      	add	sp, #8
  402bf2:	4770      	bx	lr
  402bf4:	5f1f1412 	.word	0x5f1f1412
  402bf8:	3f36d312 	.word	0x3f36d312
  402bfc:	3fd851ff 	.word	0x3fd851ff
  402c00:	00404a39 	.word	0x00404a39
  402c04:	42652ee0 	.word	0x42652ee0

00402c08 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  402c08:	4b01      	ldr	r3, [pc, #4]	; (402c10 <gfx_mono_set_framebuffer+0x8>)
  402c0a:	6018      	str	r0, [r3, #0]
  402c0c:	4770      	bx	lr
  402c0e:	bf00      	nop
  402c10:	2040c344 	.word	0x2040c344

00402c14 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  402c14:	4b02      	ldr	r3, [pc, #8]	; (402c20 <gfx_mono_framebuffer_put_byte+0xc>)
  402c16:	681b      	ldr	r3, [r3, #0]
  402c18:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  402c1c:	5442      	strb	r2, [r0, r1]
  402c1e:	4770      	bx	lr
  402c20:	2040c344 	.word	0x2040c344

00402c24 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  402c24:	4b02      	ldr	r3, [pc, #8]	; (402c30 <gfx_mono_framebuffer_get_byte+0xc>)
  402c26:	681b      	ldr	r3, [r3, #0]
  402c28:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  402c2c:	5c40      	ldrb	r0, [r0, r1]
  402c2e:	4770      	bx	lr
  402c30:	2040c344 	.word	0x2040c344

00402c34 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  402c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  402c38:	1884      	adds	r4, r0, r2
  402c3a:	2c80      	cmp	r4, #128	; 0x80
  402c3c:	dd02      	ble.n	402c44 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  402c3e:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  402c42:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  402c44:	b322      	cbz	r2, 402c90 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  402c46:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  402c48:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  402c4c:	2601      	movs	r6, #1
  402c4e:	fa06 f101 	lsl.w	r1, r6, r1
  402c52:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  402c54:	2b01      	cmp	r3, #1
  402c56:	d01d      	beq.n	402c94 <gfx_mono_generic_draw_horizontal_line+0x60>
  402c58:	2b00      	cmp	r3, #0
  402c5a:	d035      	beq.n	402cc8 <gfx_mono_generic_draw_horizontal_line+0x94>
  402c5c:	2b02      	cmp	r3, #2
  402c5e:	d117      	bne.n	402c90 <gfx_mono_generic_draw_horizontal_line+0x5c>
  402c60:	3801      	subs	r0, #1
  402c62:	b2c7      	uxtb	r7, r0
  402c64:	19d4      	adds	r4, r2, r7
  402c66:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  402c68:	f8df a090 	ldr.w	sl, [pc, #144]	; 402cfc <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  402c6c:	f04f 0900 	mov.w	r9, #0
  402c70:	f8df 808c 	ldr.w	r8, [pc, #140]	; 402d00 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  402c74:	4621      	mov	r1, r4
  402c76:	4628      	mov	r0, r5
  402c78:	47d0      	blx	sl
			temp ^= pixelmask;
  402c7a:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  402c7e:	464b      	mov	r3, r9
  402c80:	b2d2      	uxtb	r2, r2
  402c82:	4621      	mov	r1, r4
  402c84:	4628      	mov	r0, r5
  402c86:	47c0      	blx	r8
  402c88:	3c01      	subs	r4, #1
  402c8a:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  402c8c:	42bc      	cmp	r4, r7
  402c8e:	d1f1      	bne.n	402c74 <gfx_mono_generic_draw_horizontal_line+0x40>
  402c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c94:	3801      	subs	r0, #1
  402c96:	b2c7      	uxtb	r7, r0
  402c98:	19d4      	adds	r4, r2, r7
  402c9a:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  402c9c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 402cfc <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  402ca0:	f04f 0900 	mov.w	r9, #0
  402ca4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 402d00 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  402ca8:	4621      	mov	r1, r4
  402caa:	4628      	mov	r0, r5
  402cac:	47d0      	blx	sl
			temp |= pixelmask;
  402cae:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  402cb2:	464b      	mov	r3, r9
  402cb4:	b2d2      	uxtb	r2, r2
  402cb6:	4621      	mov	r1, r4
  402cb8:	4628      	mov	r0, r5
  402cba:	47c0      	blx	r8
  402cbc:	3c01      	subs	r4, #1
  402cbe:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  402cc0:	42bc      	cmp	r4, r7
  402cc2:	d1f1      	bne.n	402ca8 <gfx_mono_generic_draw_horizontal_line+0x74>
  402cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402cc8:	3801      	subs	r0, #1
  402cca:	b2c7      	uxtb	r7, r0
  402ccc:	19d4      	adds	r4, r2, r7
  402cce:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  402cd0:	f8df 8028 	ldr.w	r8, [pc, #40]	; 402cfc <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  402cd4:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  402cd6:	f8df 9028 	ldr.w	r9, [pc, #40]	; 402d00 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  402cda:	4621      	mov	r1, r4
  402cdc:	4628      	mov	r0, r5
  402cde:	47c0      	blx	r8
			temp &= ~pixelmask;
  402ce0:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  402ce4:	2300      	movs	r3, #0
  402ce6:	b2d2      	uxtb	r2, r2
  402ce8:	4621      	mov	r1, r4
  402cea:	4628      	mov	r0, r5
  402cec:	47c8      	blx	r9
  402cee:	3c01      	subs	r4, #1
  402cf0:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  402cf2:	42bc      	cmp	r4, r7
  402cf4:	d1f1      	bne.n	402cda <gfx_mono_generic_draw_horizontal_line+0xa6>
  402cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402cfa:	bf00      	nop
  402cfc:	00402f35 	.word	0x00402f35
  402d00:	00402e31 	.word	0x00402e31

00402d04 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  402d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402d08:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  402d0c:	b18b      	cbz	r3, 402d32 <gfx_mono_generic_draw_filled_rect+0x2e>
  402d0e:	461c      	mov	r4, r3
  402d10:	4690      	mov	r8, r2
  402d12:	4606      	mov	r6, r0
  402d14:	1e4d      	subs	r5, r1, #1
  402d16:	b2ed      	uxtb	r5, r5
  402d18:	442c      	add	r4, r5
  402d1a:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  402d1c:	f8df 9018 	ldr.w	r9, [pc, #24]	; 402d38 <gfx_mono_generic_draw_filled_rect+0x34>
  402d20:	463b      	mov	r3, r7
  402d22:	4642      	mov	r2, r8
  402d24:	4621      	mov	r1, r4
  402d26:	4630      	mov	r0, r6
  402d28:	47c8      	blx	r9
  402d2a:	3c01      	subs	r4, #1
  402d2c:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  402d2e:	42ac      	cmp	r4, r5
  402d30:	d1f6      	bne.n	402d20 <gfx_mono_generic_draw_filled_rect+0x1c>
  402d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402d36:	bf00      	nop
  402d38:	00402c35 	.word	0x00402c35

00402d3c <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  402d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402d40:	b083      	sub	sp, #12
  402d42:	4604      	mov	r4, r0
  402d44:	4688      	mov	r8, r1
  402d46:	4691      	mov	r9, r2
  402d48:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  402d4a:	7a5b      	ldrb	r3, [r3, #9]
  402d4c:	f89b 2008 	ldrb.w	r2, [fp, #8]
  402d50:	2100      	movs	r1, #0
  402d52:	9100      	str	r1, [sp, #0]
  402d54:	4649      	mov	r1, r9
  402d56:	4640      	mov	r0, r8
  402d58:	4d21      	ldr	r5, [pc, #132]	; (402de0 <gfx_mono_draw_char+0xa4>)
  402d5a:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  402d5c:	f89b 3000 	ldrb.w	r3, [fp]
  402d60:	b113      	cbz	r3, 402d68 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  402d62:	b003      	add	sp, #12
  402d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  402d68:	f89b 2008 	ldrb.w	r2, [fp, #8]
  402d6c:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  402d6e:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  402d72:	bf18      	it	ne
  402d74:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  402d76:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  402d7a:	f89b 700a 	ldrb.w	r7, [fp, #10]
  402d7e:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  402d80:	fb17 f70a 	smulbb	r7, r7, sl
  402d84:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  402d88:	f8db 3004 	ldr.w	r3, [fp, #4]
  402d8c:	fa13 f787 	uxtah	r7, r3, r7
  402d90:	e01f      	b.n	402dd2 <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  402d92:	0064      	lsls	r4, r4, #1
  402d94:	b2e4      	uxtb	r4, r4
  402d96:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  402d98:	b2eb      	uxtb	r3, r5
  402d9a:	429e      	cmp	r6, r3
  402d9c:	d910      	bls.n	402dc0 <gfx_mono_draw_char+0x84>
  402d9e:	b2eb      	uxtb	r3, r5
  402da0:	eb08 0003 	add.w	r0, r8, r3
  402da4:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  402da6:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  402daa:	bf08      	it	eq
  402dac:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  402db0:	f014 0f80 	tst.w	r4, #128	; 0x80
  402db4:	d0ed      	beq.n	402d92 <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  402db6:	2201      	movs	r2, #1
  402db8:	4649      	mov	r1, r9
  402dba:	4b0a      	ldr	r3, [pc, #40]	; (402de4 <gfx_mono_draw_char+0xa8>)
  402dbc:	4798      	blx	r3
  402dbe:	e7e8      	b.n	402d92 <gfx_mono_draw_char+0x56>
		inc_y += 1;
  402dc0:	f109 0901 	add.w	r9, r9, #1
  402dc4:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  402dc8:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  402dcc:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  402dd0:	d0c7      	beq.n	402d62 <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  402dd2:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  402dd6:	2e00      	cmp	r6, #0
  402dd8:	d0f2      	beq.n	402dc0 <gfx_mono_draw_char+0x84>
  402dda:	2500      	movs	r5, #0
  402ddc:	462c      	mov	r4, r5
  402dde:	e7de      	b.n	402d9e <gfx_mono_draw_char+0x62>
  402de0:	00402d05 	.word	0x00402d05
  402de4:	00402ed1 	.word	0x00402ed1

00402de8 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  402de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402dec:	4604      	mov	r4, r0
  402dee:	4690      	mov	r8, r2
  402df0:	461d      	mov	r5, r3
  402df2:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  402df4:	4f0d      	ldr	r7, [pc, #52]	; (402e2c <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  402df6:	460e      	mov	r6, r1
  402df8:	e008      	b.n	402e0c <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  402dfa:	7a6a      	ldrb	r2, [r5, #9]
  402dfc:	3201      	adds	r2, #1
  402dfe:	4442      	add	r2, r8
  402e00:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  402e04:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  402e06:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402e0a:	b16b      	cbz	r3, 402e28 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  402e0c:	7820      	ldrb	r0, [r4, #0]
  402e0e:	280a      	cmp	r0, #10
  402e10:	d0f3      	beq.n	402dfa <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  402e12:	280d      	cmp	r0, #13
  402e14:	d0f7      	beq.n	402e06 <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  402e16:	462b      	mov	r3, r5
  402e18:	4642      	mov	r2, r8
  402e1a:	4649      	mov	r1, r9
  402e1c:	47b8      	blx	r7
			x += font->width;
  402e1e:	7a2b      	ldrb	r3, [r5, #8]
  402e20:	4499      	add	r9, r3
  402e22:	fa5f f989 	uxtb.w	r9, r9
  402e26:	e7ee      	b.n	402e06 <gfx_mono_draw_string+0x1e>
}
  402e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402e2c:	00402d3d 	.word	0x00402d3d

00402e30 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  402e30:	b570      	push	{r4, r5, r6, lr}
  402e32:	4604      	mov	r4, r0
  402e34:	460d      	mov	r5, r1
  402e36:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  402e38:	b91b      	cbnz	r3, 402e42 <gfx_mono_ssd1306_put_byte+0x12>
  402e3a:	4b0d      	ldr	r3, [pc, #52]	; (402e70 <gfx_mono_ssd1306_put_byte+0x40>)
  402e3c:	4798      	blx	r3
  402e3e:	42b0      	cmp	r0, r6
  402e40:	d015      	beq.n	402e6e <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  402e42:	4632      	mov	r2, r6
  402e44:	4629      	mov	r1, r5
  402e46:	4620      	mov	r0, r4
  402e48:	4b0a      	ldr	r3, [pc, #40]	; (402e74 <gfx_mono_ssd1306_put_byte+0x44>)
  402e4a:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  402e4c:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  402e50:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  402e54:	4c08      	ldr	r4, [pc, #32]	; (402e78 <gfx_mono_ssd1306_put_byte+0x48>)
  402e56:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  402e58:	f3c5 1002 	ubfx	r0, r5, #4, #3
  402e5c:	f040 0010 	orr.w	r0, r0, #16
  402e60:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  402e62:	f005 000f 	and.w	r0, r5, #15
  402e66:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  402e68:	4630      	mov	r0, r6
  402e6a:	4b04      	ldr	r3, [pc, #16]	; (402e7c <gfx_mono_ssd1306_put_byte+0x4c>)
  402e6c:	4798      	blx	r3
  402e6e:	bd70      	pop	{r4, r5, r6, pc}
  402e70:	00402c25 	.word	0x00402c25
  402e74:	00402c15 	.word	0x00402c15
  402e78:	00402f41 	.word	0x00402f41
  402e7c:	00403161 	.word	0x00403161

00402e80 <gfx_mono_ssd1306_init>:
{
  402e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  402e84:	480d      	ldr	r0, [pc, #52]	; (402ebc <gfx_mono_ssd1306_init+0x3c>)
  402e86:	4b0e      	ldr	r3, [pc, #56]	; (402ec0 <gfx_mono_ssd1306_init+0x40>)
  402e88:	4798      	blx	r3
	ssd1306_init();
  402e8a:	4b0e      	ldr	r3, [pc, #56]	; (402ec4 <gfx_mono_ssd1306_init+0x44>)
  402e8c:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  402e8e:	2040      	movs	r0, #64	; 0x40
  402e90:	4b0d      	ldr	r3, [pc, #52]	; (402ec8 <gfx_mono_ssd1306_init+0x48>)
  402e92:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  402e94:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  402e96:	f04f 0801 	mov.w	r8, #1
  402e9a:	462f      	mov	r7, r5
  402e9c:	4e0b      	ldr	r6, [pc, #44]	; (402ecc <gfx_mono_ssd1306_init+0x4c>)
{
  402e9e:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  402ea0:	4643      	mov	r3, r8
  402ea2:	463a      	mov	r2, r7
  402ea4:	b2e1      	uxtb	r1, r4
  402ea6:	4628      	mov	r0, r5
  402ea8:	47b0      	blx	r6
  402eaa:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  402eac:	2c80      	cmp	r4, #128	; 0x80
  402eae:	d1f7      	bne.n	402ea0 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  402eb0:	3501      	adds	r5, #1
  402eb2:	b2ed      	uxtb	r5, r5
  402eb4:	2d04      	cmp	r5, #4
  402eb6:	d1f2      	bne.n	402e9e <gfx_mono_ssd1306_init+0x1e>
  402eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402ebc:	2040c348 	.word	0x2040c348
  402ec0:	00402c09 	.word	0x00402c09
  402ec4:	00402f81 	.word	0x00402f81
  402ec8:	00402f41 	.word	0x00402f41
  402ecc:	00402e31 	.word	0x00402e31

00402ed0 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  402ed0:	09c3      	lsrs	r3, r0, #7
  402ed2:	d12a      	bne.n	402f2a <gfx_mono_ssd1306_draw_pixel+0x5a>
  402ed4:	291f      	cmp	r1, #31
  402ed6:	d828      	bhi.n	402f2a <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  402ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402edc:	4614      	mov	r4, r2
  402ede:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  402ee0:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  402ee2:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  402ee6:	2201      	movs	r2, #1
  402ee8:	fa02 f701 	lsl.w	r7, r2, r1
  402eec:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  402ef0:	4601      	mov	r1, r0
  402ef2:	4630      	mov	r0, r6
  402ef4:	4b0d      	ldr	r3, [pc, #52]	; (402f2c <gfx_mono_ssd1306_draw_pixel+0x5c>)
  402ef6:	4798      	blx	r3
  402ef8:	4602      	mov	r2, r0
	switch (color) {
  402efa:	2c01      	cmp	r4, #1
  402efc:	d009      	beq.n	402f12 <gfx_mono_ssd1306_draw_pixel+0x42>
  402efe:	b164      	cbz	r4, 402f1a <gfx_mono_ssd1306_draw_pixel+0x4a>
  402f00:	2c02      	cmp	r4, #2
  402f02:	d00e      	beq.n	402f22 <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  402f04:	2300      	movs	r3, #0
  402f06:	4629      	mov	r1, r5
  402f08:	4630      	mov	r0, r6
  402f0a:	4c09      	ldr	r4, [pc, #36]	; (402f30 <gfx_mono_ssd1306_draw_pixel+0x60>)
  402f0c:	47a0      	blx	r4
  402f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  402f12:	ea48 0200 	orr.w	r2, r8, r0
  402f16:	b2d2      	uxtb	r2, r2
		break;
  402f18:	e7f4      	b.n	402f04 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  402f1a:	ea20 0207 	bic.w	r2, r0, r7
  402f1e:	b2d2      	uxtb	r2, r2
		break;
  402f20:	e7f0      	b.n	402f04 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  402f22:	ea88 0200 	eor.w	r2, r8, r0
  402f26:	b2d2      	uxtb	r2, r2
		break;
  402f28:	e7ec      	b.n	402f04 <gfx_mono_ssd1306_draw_pixel+0x34>
  402f2a:	4770      	bx	lr
  402f2c:	00402c25 	.word	0x00402c25
  402f30:	00402e31 	.word	0x00402e31

00402f34 <gfx_mono_ssd1306_get_byte>:
{
  402f34:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  402f36:	4b01      	ldr	r3, [pc, #4]	; (402f3c <gfx_mono_ssd1306_get_byte+0x8>)
  402f38:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  402f3a:	bd08      	pop	{r3, pc}
  402f3c:	00402c25 	.word	0x00402c25

00402f40 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  402f40:	b538      	push	{r3, r4, r5, lr}
  402f42:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402f44:	2208      	movs	r2, #8
  402f46:	4b09      	ldr	r3, [pc, #36]	; (402f6c <ssd1306_write_command+0x2c>)
  402f48:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  402f4a:	4c09      	ldr	r4, [pc, #36]	; (402f70 <ssd1306_write_command+0x30>)
  402f4c:	2101      	movs	r1, #1
  402f4e:	4620      	mov	r0, r4
  402f50:	4b08      	ldr	r3, [pc, #32]	; (402f74 <ssd1306_write_command+0x34>)
  402f52:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  402f54:	2301      	movs	r3, #1
  402f56:	461a      	mov	r2, r3
  402f58:	4629      	mov	r1, r5
  402f5a:	4620      	mov	r0, r4
  402f5c:	4c06      	ldr	r4, [pc, #24]	; (402f78 <ssd1306_write_command+0x38>)
  402f5e:	47a0      	blx	r4
	delay_us(10);
  402f60:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  402f64:	4b05      	ldr	r3, [pc, #20]	; (402f7c <ssd1306_write_command+0x3c>)
  402f66:	4798      	blx	r3
  402f68:	bd38      	pop	{r3, r4, r5, pc}
  402f6a:	bf00      	nop
  402f6c:	400e1000 	.word	0x400e1000
  402f70:	40008000 	.word	0x40008000
  402f74:	004001d9 	.word	0x004001d9
  402f78:	004001ef 	.word	0x004001ef
  402f7c:	20400001 	.word	0x20400001

00402f80 <ssd1306_init>:
{
  402f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402f84:	4d66      	ldr	r5, [pc, #408]	; (403120 <ssd1306_init+0x1a0>)
  402f86:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  402f8a:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402f8c:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402f90:	4b64      	ldr	r3, [pc, #400]	; (403124 <ssd1306_init+0x1a4>)
  402f92:	2708      	movs	r7, #8
  402f94:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402f96:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  402f9a:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402f9c:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  402fa0:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  402fa2:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402fa4:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402fa8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  402faa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  402fae:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402fb0:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  402fb2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  402fb6:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  402fb8:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402fba:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402fbe:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402fc0:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402fc2:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402fc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402fc8:	f022 0208 	bic.w	r2, r2, #8
  402fcc:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402fce:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402fd0:	f022 0208 	bic.w	r2, r2, #8
  402fd4:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  402fd6:	601f      	str	r7, [r3, #0]
  402fd8:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402fda:	631f      	str	r7, [r3, #48]	; 0x30
  402fdc:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  402fde:	f8df 817c 	ldr.w	r8, [pc, #380]	; 40315c <ssd1306_init+0x1dc>
  402fe2:	2300      	movs	r3, #0
  402fe4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402fe8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402fec:	4640      	mov	r0, r8
  402fee:	4c4e      	ldr	r4, [pc, #312]	; (403128 <ssd1306_init+0x1a8>)
  402ff0:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  402ff2:	2300      	movs	r3, #0
  402ff4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402ff8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402ffc:	4640      	mov	r0, r8
  402ffe:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  403000:	2300      	movs	r3, #0
  403002:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  403006:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40300a:	4640      	mov	r0, r8
  40300c:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  40300e:	2300      	movs	r3, #0
  403010:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  403014:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403018:	4640      	mov	r0, r8
  40301a:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  40301c:	2300      	movs	r3, #0
  40301e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  403022:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403026:	4640      	mov	r0, r8
  403028:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  40302a:	2300      	movs	r3, #0
  40302c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  403030:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403034:	4640      	mov	r0, r8
  403036:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  403038:	4c3c      	ldr	r4, [pc, #240]	; (40312c <ssd1306_init+0x1ac>)
  40303a:	f04f 0902 	mov.w	r9, #2
  40303e:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  403042:	f04f 0880 	mov.w	r8, #128	; 0x80
  403046:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  40304a:	6863      	ldr	r3, [r4, #4]
  40304c:	f043 0301 	orr.w	r3, r3, #1
  403050:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  403052:	463a      	mov	r2, r7
  403054:	2101      	movs	r1, #1
  403056:	4620      	mov	r0, r4
  403058:	4b35      	ldr	r3, [pc, #212]	; (403130 <ssd1306_init+0x1b0>)
  40305a:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  40305c:	2200      	movs	r2, #0
  40305e:	2101      	movs	r1, #1
  403060:	4620      	mov	r0, r4
  403062:	4b34      	ldr	r3, [pc, #208]	; (403134 <ssd1306_init+0x1b4>)
  403064:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  403066:	2200      	movs	r2, #0
  403068:	2101      	movs	r1, #1
  40306a:	4620      	mov	r0, r4
  40306c:	4b32      	ldr	r3, [pc, #200]	; (403138 <ssd1306_init+0x1b8>)
  40306e:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  403070:	6863      	ldr	r3, [r4, #4]
  403072:	f023 0302 	bic.w	r3, r3, #2
  403076:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  403078:	2200      	movs	r2, #0
  40307a:	2101      	movs	r1, #1
  40307c:	4620      	mov	r0, r4
  40307e:	4b2f      	ldr	r3, [pc, #188]	; (40313c <ssd1306_init+0x1bc>)
  403080:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  403082:	6863      	ldr	r3, [r4, #4]
  403084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403088:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40308a:	6863      	ldr	r3, [r4, #4]
  40308c:	f043 0310 	orr.w	r3, r3, #16
  403090:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  403092:	492b      	ldr	r1, [pc, #172]	; (403140 <ssd1306_init+0x1c0>)
  403094:	482b      	ldr	r0, [pc, #172]	; (403144 <ssd1306_init+0x1c4>)
  403096:	4b2c      	ldr	r3, [pc, #176]	; (403148 <ssd1306_init+0x1c8>)
  403098:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  40309a:	b2c2      	uxtb	r2, r0
  40309c:	2101      	movs	r1, #1
  40309e:	4620      	mov	r0, r4
  4030a0:	4b2a      	ldr	r3, [pc, #168]	; (40314c <ssd1306_init+0x1cc>)
  4030a2:	4798      	blx	r3
		spi_enable_clock(SPI0);
  4030a4:	4620      	mov	r0, r4
  4030a6:	4b2a      	ldr	r3, [pc, #168]	; (403150 <ssd1306_init+0x1d0>)
  4030a8:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4030aa:	2301      	movs	r3, #1
  4030ac:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4030ae:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  4030b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4030b4:	4c27      	ldr	r4, [pc, #156]	; (403154 <ssd1306_init+0x1d4>)
  4030b6:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4030b8:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  4030ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4030be:	47a0      	blx	r4
  4030c0:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  4030c2:	20a8      	movs	r0, #168	; 0xa8
  4030c4:	4c24      	ldr	r4, [pc, #144]	; (403158 <ssd1306_init+0x1d8>)
  4030c6:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  4030c8:	201f      	movs	r0, #31
  4030ca:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  4030cc:	20d3      	movs	r0, #211	; 0xd3
  4030ce:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  4030d0:	2000      	movs	r0, #0
  4030d2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  4030d4:	2040      	movs	r0, #64	; 0x40
  4030d6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  4030d8:	20a1      	movs	r0, #161	; 0xa1
  4030da:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  4030dc:	20c8      	movs	r0, #200	; 0xc8
  4030de:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  4030e0:	20da      	movs	r0, #218	; 0xda
  4030e2:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  4030e4:	4648      	mov	r0, r9
  4030e6:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  4030e8:	2081      	movs	r0, #129	; 0x81
  4030ea:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  4030ec:	208f      	movs	r0, #143	; 0x8f
  4030ee:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  4030f0:	20a4      	movs	r0, #164	; 0xa4
  4030f2:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  4030f4:	20a6      	movs	r0, #166	; 0xa6
  4030f6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  4030f8:	20d5      	movs	r0, #213	; 0xd5
  4030fa:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  4030fc:	4640      	mov	r0, r8
  4030fe:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  403100:	208d      	movs	r0, #141	; 0x8d
  403102:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  403104:	2014      	movs	r0, #20
  403106:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  403108:	20db      	movs	r0, #219	; 0xdb
  40310a:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  40310c:	2040      	movs	r0, #64	; 0x40
  40310e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  403110:	20d9      	movs	r0, #217	; 0xd9
  403112:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  403114:	20f1      	movs	r0, #241	; 0xf1
  403116:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  403118:	20af      	movs	r0, #175	; 0xaf
  40311a:	47a0      	blx	r4
  40311c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403120:	400e1200 	.word	0x400e1200
  403124:	400e1000 	.word	0x400e1000
  403128:	0040352d 	.word	0x0040352d
  40312c:	40008000 	.word	0x40008000
  403130:	0040025f 	.word	0x0040025f
  403134:	00400223 	.word	0x00400223
  403138:	00400241 	.word	0x00400241
  40313c:	004002a5 	.word	0x004002a5
  403140:	08f0d180 	.word	0x08f0d180
  403144:	001e8480 	.word	0x001e8480
  403148:	004002b9 	.word	0x004002b9
  40314c:	004002cf 	.word	0x004002cf
  403150:	004001ad 	.word	0x004001ad
  403154:	20400001 	.word	0x20400001
  403158:	00402f41 	.word	0x00402f41
  40315c:	400e1400 	.word	0x400e1400

00403160 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  403160:	b538      	push	{r3, r4, r5, lr}
  403162:	4605      	mov	r5, r0
  403164:	2208      	movs	r2, #8
  403166:	4b09      	ldr	r3, [pc, #36]	; (40318c <ssd1306_write_data+0x2c>)
  403168:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  40316a:	4c09      	ldr	r4, [pc, #36]	; (403190 <ssd1306_write_data+0x30>)
  40316c:	2101      	movs	r1, #1
  40316e:	4620      	mov	r0, r4
  403170:	4b08      	ldr	r3, [pc, #32]	; (403194 <ssd1306_write_data+0x34>)
  403172:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  403174:	2301      	movs	r3, #1
  403176:	461a      	mov	r2, r3
  403178:	4629      	mov	r1, r5
  40317a:	4620      	mov	r0, r4
  40317c:	4c06      	ldr	r4, [pc, #24]	; (403198 <ssd1306_write_data+0x38>)
  40317e:	47a0      	blx	r4
	delay_us(10);
  403180:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  403184:	4b05      	ldr	r3, [pc, #20]	; (40319c <ssd1306_write_data+0x3c>)
  403186:	4798      	blx	r3
  403188:	bd38      	pop	{r3, r4, r5, pc}
  40318a:	bf00      	nop
  40318c:	400e1000 	.word	0x400e1000
  403190:	40008000 	.word	0x40008000
  403194:	004001d9 	.word	0x004001d9
  403198:	004001ef 	.word	0x004001ef
  40319c:	20400001 	.word	0x20400001

004031a0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4031a0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4031a2:	4810      	ldr	r0, [pc, #64]	; (4031e4 <sysclk_init+0x44>)
  4031a4:	4b10      	ldr	r3, [pc, #64]	; (4031e8 <sysclk_init+0x48>)
  4031a6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4031a8:	213e      	movs	r1, #62	; 0x3e
  4031aa:	2000      	movs	r0, #0
  4031ac:	4b0f      	ldr	r3, [pc, #60]	; (4031ec <sysclk_init+0x4c>)
  4031ae:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4031b0:	4c0f      	ldr	r4, [pc, #60]	; (4031f0 <sysclk_init+0x50>)
  4031b2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4031b4:	2800      	cmp	r0, #0
  4031b6:	d0fc      	beq.n	4031b2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4031b8:	4b0e      	ldr	r3, [pc, #56]	; (4031f4 <sysclk_init+0x54>)
  4031ba:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4031bc:	4a0e      	ldr	r2, [pc, #56]	; (4031f8 <sysclk_init+0x58>)
  4031be:	4b0f      	ldr	r3, [pc, #60]	; (4031fc <sysclk_init+0x5c>)
  4031c0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4031c2:	4c0f      	ldr	r4, [pc, #60]	; (403200 <sysclk_init+0x60>)
  4031c4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4031c6:	2800      	cmp	r0, #0
  4031c8:	d0fc      	beq.n	4031c4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4031ca:	2002      	movs	r0, #2
  4031cc:	4b0d      	ldr	r3, [pc, #52]	; (403204 <sysclk_init+0x64>)
  4031ce:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4031d0:	2000      	movs	r0, #0
  4031d2:	4b0d      	ldr	r3, [pc, #52]	; (403208 <sysclk_init+0x68>)
  4031d4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4031d6:	4b0d      	ldr	r3, [pc, #52]	; (40320c <sysclk_init+0x6c>)
  4031d8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4031da:	4802      	ldr	r0, [pc, #8]	; (4031e4 <sysclk_init+0x44>)
  4031dc:	4b02      	ldr	r3, [pc, #8]	; (4031e8 <sysclk_init+0x48>)
  4031de:	4798      	blx	r3
  4031e0:	bd10      	pop	{r4, pc}
  4031e2:	bf00      	nop
  4031e4:	11e1a300 	.word	0x11e1a300
  4031e8:	00403af9 	.word	0x00403af9
  4031ec:	00403715 	.word	0x00403715
  4031f0:	00403769 	.word	0x00403769
  4031f4:	00403779 	.word	0x00403779
  4031f8:	20183f01 	.word	0x20183f01
  4031fc:	400e0600 	.word	0x400e0600
  403200:	00403789 	.word	0x00403789
  403204:	00403679 	.word	0x00403679
  403208:	004036b1 	.word	0x004036b1
  40320c:	004039ed 	.word	0x004039ed

00403210 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  403210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  403214:	b980      	cbnz	r0, 403238 <_read+0x28>
  403216:	460c      	mov	r4, r1
  403218:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40321a:	2a00      	cmp	r2, #0
  40321c:	dd0f      	ble.n	40323e <_read+0x2e>
  40321e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  403220:	4e08      	ldr	r6, [pc, #32]	; (403244 <_read+0x34>)
  403222:	4d09      	ldr	r5, [pc, #36]	; (403248 <_read+0x38>)
  403224:	6830      	ldr	r0, [r6, #0]
  403226:	4621      	mov	r1, r4
  403228:	682b      	ldr	r3, [r5, #0]
  40322a:	4798      	blx	r3
		ptr++;
  40322c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40322e:	42bc      	cmp	r4, r7
  403230:	d1f8      	bne.n	403224 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  403232:	4640      	mov	r0, r8
  403234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  403238:	f04f 38ff 	mov.w	r8, #4294967295
  40323c:	e7f9      	b.n	403232 <_read+0x22>
	for (; len > 0; --len) {
  40323e:	4680      	mov	r8, r0
  403240:	e7f7      	b.n	403232 <_read+0x22>
  403242:	bf00      	nop
  403244:	2040c63c 	.word	0x2040c63c
  403248:	2040c634 	.word	0x2040c634

0040324c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  40324c:	3801      	subs	r0, #1
  40324e:	2802      	cmp	r0, #2
  403250:	d815      	bhi.n	40327e <_write+0x32>
{
  403252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403256:	460e      	mov	r6, r1
  403258:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40325a:	b19a      	cbz	r2, 403284 <_write+0x38>
  40325c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40325e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 403298 <_write+0x4c>
  403262:	4f0c      	ldr	r7, [pc, #48]	; (403294 <_write+0x48>)
  403264:	f8d8 0000 	ldr.w	r0, [r8]
  403268:	f815 1b01 	ldrb.w	r1, [r5], #1
  40326c:	683b      	ldr	r3, [r7, #0]
  40326e:	4798      	blx	r3
  403270:	2800      	cmp	r0, #0
  403272:	db0a      	blt.n	40328a <_write+0x3e>
  403274:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  403276:	3c01      	subs	r4, #1
  403278:	d1f4      	bne.n	403264 <_write+0x18>
  40327a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40327e:	f04f 30ff 	mov.w	r0, #4294967295
  403282:	4770      	bx	lr
	for (; len != 0; --len) {
  403284:	4610      	mov	r0, r2
  403286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40328a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40328e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403292:	bf00      	nop
  403294:	2040c638 	.word	0x2040c638
  403298:	2040c63c 	.word	0x2040c63c

0040329c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  40329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40329e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4032a2:	4b5c      	ldr	r3, [pc, #368]	; (403414 <board_init+0x178>)
  4032a4:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4032a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4032aa:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4032ae:	4b5a      	ldr	r3, [pc, #360]	; (403418 <board_init+0x17c>)
  4032b0:	2200      	movs	r2, #0
  4032b2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4032b6:	695a      	ldr	r2, [r3, #20]
  4032b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4032bc:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4032be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4032c2:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4032c6:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4032ca:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4032ce:	f007 0007 	and.w	r0, r7, #7
  4032d2:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4032d4:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4032d8:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4032dc:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4032e0:	f3bf 8f4f 	dsb	sy
  4032e4:	f04f 34ff 	mov.w	r4, #4294967295
  4032e8:	fa04 fc00 	lsl.w	ip, r4, r0
  4032ec:	fa06 f000 	lsl.w	r0, r6, r0
  4032f0:	fa04 f40e 	lsl.w	r4, r4, lr
  4032f4:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4032f8:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4032fa:	463a      	mov	r2, r7
  4032fc:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4032fe:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  403302:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  403306:	3a01      	subs	r2, #1
  403308:	4423      	add	r3, r4
  40330a:	f1b2 3fff 	cmp.w	r2, #4294967295
  40330e:	d1f6      	bne.n	4032fe <board_init+0x62>
        } while(sets--);
  403310:	3e01      	subs	r6, #1
  403312:	4460      	add	r0, ip
  403314:	f1b6 3fff 	cmp.w	r6, #4294967295
  403318:	d1ef      	bne.n	4032fa <board_init+0x5e>
  40331a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40331e:	4b3e      	ldr	r3, [pc, #248]	; (403418 <board_init+0x17c>)
  403320:	695a      	ldr	r2, [r3, #20]
  403322:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  403326:	615a      	str	r2, [r3, #20]
  403328:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40332c:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  403330:	4a3a      	ldr	r2, [pc, #232]	; (40341c <board_init+0x180>)
  403332:	493b      	ldr	r1, [pc, #236]	; (403420 <board_init+0x184>)
  403334:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  403336:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  40333a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  40333c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403340:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  403344:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  403348:	f022 0201 	bic.w	r2, r2, #1
  40334c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  403350:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  403354:	f022 0201 	bic.w	r2, r2, #1
  403358:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  40335c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403360:	f3bf 8f6f 	isb	sy
  403364:	200a      	movs	r0, #10
  403366:	4c2f      	ldr	r4, [pc, #188]	; (403424 <board_init+0x188>)
  403368:	47a0      	blx	r4
  40336a:	200b      	movs	r0, #11
  40336c:	47a0      	blx	r4
  40336e:	200c      	movs	r0, #12
  403370:	47a0      	blx	r4
  403372:	2010      	movs	r0, #16
  403374:	47a0      	blx	r4
  403376:	2011      	movs	r0, #17
  403378:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40337a:	4b2b      	ldr	r3, [pc, #172]	; (403428 <board_init+0x18c>)
  40337c:	f44f 7280 	mov.w	r2, #256	; 0x100
  403380:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403382:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403386:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403388:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  40338c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  403390:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403392:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  403396:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  403398:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40339c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40339e:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4033a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4033a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4033a6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4033aa:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4033ac:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4033ae:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4033b2:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4033b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4033b8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4033bc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4033c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4033c4:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4033c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4033ca:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4033cc:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4033ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4033d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4033d4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4033d8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4033da:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4033dc:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4033e0:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4033e2:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4033e4:	4a11      	ldr	r2, [pc, #68]	; (40342c <board_init+0x190>)
  4033e6:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4033ea:	f043 0310 	orr.w	r3, r3, #16
  4033ee:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4033f2:	4b0f      	ldr	r3, [pc, #60]	; (403430 <board_init+0x194>)
  4033f4:	2210      	movs	r2, #16
  4033f6:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4033f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4033fc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4033fe:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  403400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  403404:	6f19      	ldr	r1, [r3, #112]	; 0x70
  403406:	4311      	orrs	r1, r2
  403408:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40340a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40340c:	4311      	orrs	r1, r2
  40340e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403410:	605a      	str	r2, [r3, #4]
  403412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403414:	400e1850 	.word	0x400e1850
  403418:	e000ed00 	.word	0xe000ed00
  40341c:	400e0c00 	.word	0x400e0c00
  403420:	5a00080c 	.word	0x5a00080c
  403424:	00403799 	.word	0x00403799
  403428:	400e1200 	.word	0x400e1200
  40342c:	40088000 	.word	0x40088000
  403430:	400e1000 	.word	0x400e1000

00403434 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  403434:	6301      	str	r1, [r0, #48]	; 0x30
  403436:	4770      	bx	lr

00403438 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  403438:	6341      	str	r1, [r0, #52]	; 0x34
  40343a:	4770      	bx	lr

0040343c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40343c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40343e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  403442:	d03a      	beq.n	4034ba <pio_set_peripheral+0x7e>
  403444:	d813      	bhi.n	40346e <pio_set_peripheral+0x32>
  403446:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40344a:	d025      	beq.n	403498 <pio_set_peripheral+0x5c>
  40344c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  403450:	d10a      	bne.n	403468 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403452:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403454:	4313      	orrs	r3, r2
  403456:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403458:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40345a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40345c:	400b      	ands	r3, r1
  40345e:	ea23 0302 	bic.w	r3, r3, r2
  403462:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  403464:	6042      	str	r2, [r0, #4]
  403466:	4770      	bx	lr
	switch (ul_type) {
  403468:	2900      	cmp	r1, #0
  40346a:	d1fb      	bne.n	403464 <pio_set_peripheral+0x28>
  40346c:	4770      	bx	lr
  40346e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  403472:	d021      	beq.n	4034b8 <pio_set_peripheral+0x7c>
  403474:	d809      	bhi.n	40348a <pio_set_peripheral+0x4e>
  403476:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40347a:	d1f3      	bne.n	403464 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40347c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40347e:	4313      	orrs	r3, r2
  403480:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  403482:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403484:	4313      	orrs	r3, r2
  403486:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  403488:	e7ec      	b.n	403464 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40348a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40348e:	d013      	beq.n	4034b8 <pio_set_peripheral+0x7c>
  403490:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  403494:	d010      	beq.n	4034b8 <pio_set_peripheral+0x7c>
  403496:	e7e5      	b.n	403464 <pio_set_peripheral+0x28>
{
  403498:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40349a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40349c:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40349e:	43d3      	mvns	r3, r2
  4034a0:	4021      	ands	r1, r4
  4034a2:	461c      	mov	r4, r3
  4034a4:	4019      	ands	r1, r3
  4034a6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4034a8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4034aa:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4034ac:	400b      	ands	r3, r1
  4034ae:	4023      	ands	r3, r4
  4034b0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4034b2:	6042      	str	r2, [r0, #4]
}
  4034b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4034b8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4034ba:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4034bc:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4034be:	400b      	ands	r3, r1
  4034c0:	ea23 0302 	bic.w	r3, r3, r2
  4034c4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4034c6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4034c8:	4313      	orrs	r3, r2
  4034ca:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4034cc:	e7ca      	b.n	403464 <pio_set_peripheral+0x28>

004034ce <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4034ce:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4034d0:	f012 0f01 	tst.w	r2, #1
  4034d4:	d10d      	bne.n	4034f2 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4034d6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4034d8:	f012 0f0a 	tst.w	r2, #10
  4034dc:	d00b      	beq.n	4034f6 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4034de:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4034e0:	f012 0f02 	tst.w	r2, #2
  4034e4:	d109      	bne.n	4034fa <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4034e6:	f012 0f08 	tst.w	r2, #8
  4034ea:	d008      	beq.n	4034fe <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4034ec:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4034f0:	e005      	b.n	4034fe <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4034f2:	6641      	str	r1, [r0, #100]	; 0x64
  4034f4:	e7f0      	b.n	4034d8 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4034f6:	6241      	str	r1, [r0, #36]	; 0x24
  4034f8:	e7f2      	b.n	4034e0 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4034fa:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4034fe:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  403500:	6001      	str	r1, [r0, #0]
  403502:	4770      	bx	lr

00403504 <pio_set_output>:
{
  403504:	b410      	push	{r4}
  403506:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  403508:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40350a:	b94c      	cbnz	r4, 403520 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  40350c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40350e:	b14b      	cbz	r3, 403524 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  403510:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  403512:	b94a      	cbnz	r2, 403528 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  403514:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  403516:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  403518:	6001      	str	r1, [r0, #0]
}
  40351a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40351e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  403520:	6641      	str	r1, [r0, #100]	; 0x64
  403522:	e7f4      	b.n	40350e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  403524:	6541      	str	r1, [r0, #84]	; 0x54
  403526:	e7f4      	b.n	403512 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  403528:	6301      	str	r1, [r0, #48]	; 0x30
  40352a:	e7f4      	b.n	403516 <pio_set_output+0x12>

0040352c <pio_configure>:
{
  40352c:	b570      	push	{r4, r5, r6, lr}
  40352e:	b082      	sub	sp, #8
  403530:	4605      	mov	r5, r0
  403532:	4616      	mov	r6, r2
  403534:	461c      	mov	r4, r3
	switch (ul_type) {
  403536:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40353a:	d014      	beq.n	403566 <pio_configure+0x3a>
  40353c:	d90a      	bls.n	403554 <pio_configure+0x28>
  40353e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  403542:	d024      	beq.n	40358e <pio_configure+0x62>
  403544:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  403548:	d021      	beq.n	40358e <pio_configure+0x62>
  40354a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40354e:	d017      	beq.n	403580 <pio_configure+0x54>
		return 0;
  403550:	2000      	movs	r0, #0
  403552:	e01a      	b.n	40358a <pio_configure+0x5e>
	switch (ul_type) {
  403554:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  403558:	d005      	beq.n	403566 <pio_configure+0x3a>
  40355a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40355e:	d002      	beq.n	403566 <pio_configure+0x3a>
  403560:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  403564:	d1f4      	bne.n	403550 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  403566:	4632      	mov	r2, r6
  403568:	4628      	mov	r0, r5
  40356a:	4b11      	ldr	r3, [pc, #68]	; (4035b0 <pio_configure+0x84>)
  40356c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40356e:	f014 0f01 	tst.w	r4, #1
  403572:	d102      	bne.n	40357a <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  403574:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  403576:	2001      	movs	r0, #1
  403578:	e007      	b.n	40358a <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  40357a:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  40357c:	2001      	movs	r0, #1
  40357e:	e004      	b.n	40358a <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  403580:	461a      	mov	r2, r3
  403582:	4631      	mov	r1, r6
  403584:	4b0b      	ldr	r3, [pc, #44]	; (4035b4 <pio_configure+0x88>)
  403586:	4798      	blx	r3
	return 1;
  403588:	2001      	movs	r0, #1
}
  40358a:	b002      	add	sp, #8
  40358c:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40358e:	f004 0301 	and.w	r3, r4, #1
  403592:	9300      	str	r3, [sp, #0]
  403594:	f3c4 0380 	ubfx	r3, r4, #2, #1
  403598:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40359c:	bf14      	ite	ne
  40359e:	2200      	movne	r2, #0
  4035a0:	2201      	moveq	r2, #1
  4035a2:	4631      	mov	r1, r6
  4035a4:	4628      	mov	r0, r5
  4035a6:	4c04      	ldr	r4, [pc, #16]	; (4035b8 <pio_configure+0x8c>)
  4035a8:	47a0      	blx	r4
	return 1;
  4035aa:	2001      	movs	r0, #1
		break;
  4035ac:	e7ed      	b.n	40358a <pio_configure+0x5e>
  4035ae:	bf00      	nop
  4035b0:	0040343d 	.word	0x0040343d
  4035b4:	004034cf 	.word	0x004034cf
  4035b8:	00403505 	.word	0x00403505

004035bc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4035bc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4035be:	4770      	bx	lr

004035c0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4035c0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4035c2:	4770      	bx	lr

004035c4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4035c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4035c8:	4604      	mov	r4, r0
  4035ca:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4035cc:	4b0e      	ldr	r3, [pc, #56]	; (403608 <pio_handler_process+0x44>)
  4035ce:	4798      	blx	r3
  4035d0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4035d2:	4620      	mov	r0, r4
  4035d4:	4b0d      	ldr	r3, [pc, #52]	; (40360c <pio_handler_process+0x48>)
  4035d6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4035d8:	4005      	ands	r5, r0
  4035da:	d013      	beq.n	403604 <pio_handler_process+0x40>
  4035dc:	4c0c      	ldr	r4, [pc, #48]	; (403610 <pio_handler_process+0x4c>)
  4035de:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4035e2:	e003      	b.n	4035ec <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4035e4:	42b4      	cmp	r4, r6
  4035e6:	d00d      	beq.n	403604 <pio_handler_process+0x40>
  4035e8:	3410      	adds	r4, #16
		while (status != 0) {
  4035ea:	b15d      	cbz	r5, 403604 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4035ec:	6820      	ldr	r0, [r4, #0]
  4035ee:	4540      	cmp	r0, r8
  4035f0:	d1f8      	bne.n	4035e4 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4035f2:	6861      	ldr	r1, [r4, #4]
  4035f4:	4229      	tst	r1, r5
  4035f6:	d0f5      	beq.n	4035e4 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4035f8:	68e3      	ldr	r3, [r4, #12]
  4035fa:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4035fc:	6863      	ldr	r3, [r4, #4]
  4035fe:	ea25 0503 	bic.w	r5, r5, r3
  403602:	e7ef      	b.n	4035e4 <pio_handler_process+0x20>
  403604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403608:	004035bd 	.word	0x004035bd
  40360c:	004035c1 	.word	0x004035c1
  403610:	2040c548 	.word	0x2040c548

00403614 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  403614:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  403616:	210a      	movs	r1, #10
  403618:	4801      	ldr	r0, [pc, #4]	; (403620 <PIOA_Handler+0xc>)
  40361a:	4b02      	ldr	r3, [pc, #8]	; (403624 <PIOA_Handler+0x10>)
  40361c:	4798      	blx	r3
  40361e:	bd08      	pop	{r3, pc}
  403620:	400e0e00 	.word	0x400e0e00
  403624:	004035c5 	.word	0x004035c5

00403628 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  403628:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40362a:	210b      	movs	r1, #11
  40362c:	4801      	ldr	r0, [pc, #4]	; (403634 <PIOB_Handler+0xc>)
  40362e:	4b02      	ldr	r3, [pc, #8]	; (403638 <PIOB_Handler+0x10>)
  403630:	4798      	blx	r3
  403632:	bd08      	pop	{r3, pc}
  403634:	400e1000 	.word	0x400e1000
  403638:	004035c5 	.word	0x004035c5

0040363c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40363c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40363e:	210c      	movs	r1, #12
  403640:	4801      	ldr	r0, [pc, #4]	; (403648 <PIOC_Handler+0xc>)
  403642:	4b02      	ldr	r3, [pc, #8]	; (40364c <PIOC_Handler+0x10>)
  403644:	4798      	blx	r3
  403646:	bd08      	pop	{r3, pc}
  403648:	400e1200 	.word	0x400e1200
  40364c:	004035c5 	.word	0x004035c5

00403650 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  403650:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  403652:	2110      	movs	r1, #16
  403654:	4801      	ldr	r0, [pc, #4]	; (40365c <PIOD_Handler+0xc>)
  403656:	4b02      	ldr	r3, [pc, #8]	; (403660 <PIOD_Handler+0x10>)
  403658:	4798      	blx	r3
  40365a:	bd08      	pop	{r3, pc}
  40365c:	400e1400 	.word	0x400e1400
  403660:	004035c5 	.word	0x004035c5

00403664 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  403664:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  403666:	2111      	movs	r1, #17
  403668:	4801      	ldr	r0, [pc, #4]	; (403670 <PIOE_Handler+0xc>)
  40366a:	4b02      	ldr	r3, [pc, #8]	; (403674 <PIOE_Handler+0x10>)
  40366c:	4798      	blx	r3
  40366e:	bd08      	pop	{r3, pc}
  403670:	400e1600 	.word	0x400e1600
  403674:	004035c5 	.word	0x004035c5

00403678 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  403678:	2803      	cmp	r0, #3
  40367a:	d011      	beq.n	4036a0 <pmc_mck_set_division+0x28>
  40367c:	2804      	cmp	r0, #4
  40367e:	d012      	beq.n	4036a6 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  403680:	2802      	cmp	r0, #2
  403682:	bf0c      	ite	eq
  403684:	f44f 7180 	moveq.w	r1, #256	; 0x100
  403688:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40368a:	4a08      	ldr	r2, [pc, #32]	; (4036ac <pmc_mck_set_division+0x34>)
  40368c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40368e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  403692:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  403694:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403696:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403698:	f013 0f08 	tst.w	r3, #8
  40369c:	d0fb      	beq.n	403696 <pmc_mck_set_division+0x1e>
}
  40369e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4036a0:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4036a4:	e7f1      	b.n	40368a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4036a6:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4036aa:	e7ee      	b.n	40368a <pmc_mck_set_division+0x12>
  4036ac:	400e0600 	.word	0x400e0600

004036b0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4036b0:	4a17      	ldr	r2, [pc, #92]	; (403710 <pmc_switch_mck_to_pllack+0x60>)
  4036b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4036b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4036b8:	4318      	orrs	r0, r3
  4036ba:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4036bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4036be:	f013 0f08 	tst.w	r3, #8
  4036c2:	d10a      	bne.n	4036da <pmc_switch_mck_to_pllack+0x2a>
  4036c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4036c8:	4911      	ldr	r1, [pc, #68]	; (403710 <pmc_switch_mck_to_pllack+0x60>)
  4036ca:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4036cc:	f012 0f08 	tst.w	r2, #8
  4036d0:	d103      	bne.n	4036da <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4036d2:	3b01      	subs	r3, #1
  4036d4:	d1f9      	bne.n	4036ca <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4036d6:	2001      	movs	r0, #1
  4036d8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4036da:	4a0d      	ldr	r2, [pc, #52]	; (403710 <pmc_switch_mck_to_pllack+0x60>)
  4036dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4036de:	f023 0303 	bic.w	r3, r3, #3
  4036e2:	f043 0302 	orr.w	r3, r3, #2
  4036e6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4036e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4036ea:	f013 0f08 	tst.w	r3, #8
  4036ee:	d10a      	bne.n	403706 <pmc_switch_mck_to_pllack+0x56>
  4036f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4036f4:	4906      	ldr	r1, [pc, #24]	; (403710 <pmc_switch_mck_to_pllack+0x60>)
  4036f6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4036f8:	f012 0f08 	tst.w	r2, #8
  4036fc:	d105      	bne.n	40370a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4036fe:	3b01      	subs	r3, #1
  403700:	d1f9      	bne.n	4036f6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  403702:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  403704:	4770      	bx	lr
	return 0;
  403706:	2000      	movs	r0, #0
  403708:	4770      	bx	lr
  40370a:	2000      	movs	r0, #0
  40370c:	4770      	bx	lr
  40370e:	bf00      	nop
  403710:	400e0600 	.word	0x400e0600

00403714 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  403714:	b9a0      	cbnz	r0, 403740 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403716:	480e      	ldr	r0, [pc, #56]	; (403750 <pmc_switch_mainck_to_xtal+0x3c>)
  403718:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40371a:	0209      	lsls	r1, r1, #8
  40371c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40371e:	4a0d      	ldr	r2, [pc, #52]	; (403754 <pmc_switch_mainck_to_xtal+0x40>)
  403720:	401a      	ands	r2, r3
  403722:	4b0d      	ldr	r3, [pc, #52]	; (403758 <pmc_switch_mainck_to_xtal+0x44>)
  403724:	4313      	orrs	r3, r2
  403726:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403728:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40372a:	4602      	mov	r2, r0
  40372c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40372e:	f013 0f01 	tst.w	r3, #1
  403732:	d0fb      	beq.n	40372c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  403734:	4a06      	ldr	r2, [pc, #24]	; (403750 <pmc_switch_mainck_to_xtal+0x3c>)
  403736:	6a11      	ldr	r1, [r2, #32]
  403738:	4b08      	ldr	r3, [pc, #32]	; (40375c <pmc_switch_mainck_to_xtal+0x48>)
  40373a:	430b      	orrs	r3, r1
  40373c:	6213      	str	r3, [r2, #32]
  40373e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403740:	4903      	ldr	r1, [pc, #12]	; (403750 <pmc_switch_mainck_to_xtal+0x3c>)
  403742:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  403744:	4a06      	ldr	r2, [pc, #24]	; (403760 <pmc_switch_mainck_to_xtal+0x4c>)
  403746:	401a      	ands	r2, r3
  403748:	4b06      	ldr	r3, [pc, #24]	; (403764 <pmc_switch_mainck_to_xtal+0x50>)
  40374a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40374c:	620b      	str	r3, [r1, #32]
  40374e:	4770      	bx	lr
  403750:	400e0600 	.word	0x400e0600
  403754:	ffc8fffc 	.word	0xffc8fffc
  403758:	00370001 	.word	0x00370001
  40375c:	01370000 	.word	0x01370000
  403760:	fec8fffc 	.word	0xfec8fffc
  403764:	01370002 	.word	0x01370002

00403768 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  403768:	4b02      	ldr	r3, [pc, #8]	; (403774 <pmc_osc_is_ready_mainck+0xc>)
  40376a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40376c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  403770:	4770      	bx	lr
  403772:	bf00      	nop
  403774:	400e0600 	.word	0x400e0600

00403778 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  403778:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40377c:	4b01      	ldr	r3, [pc, #4]	; (403784 <pmc_disable_pllack+0xc>)
  40377e:	629a      	str	r2, [r3, #40]	; 0x28
  403780:	4770      	bx	lr
  403782:	bf00      	nop
  403784:	400e0600 	.word	0x400e0600

00403788 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  403788:	4b02      	ldr	r3, [pc, #8]	; (403794 <pmc_is_locked_pllack+0xc>)
  40378a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40378c:	f000 0002 	and.w	r0, r0, #2
  403790:	4770      	bx	lr
  403792:	bf00      	nop
  403794:	400e0600 	.word	0x400e0600

00403798 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  403798:	283f      	cmp	r0, #63	; 0x3f
  40379a:	d81e      	bhi.n	4037da <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40379c:	281f      	cmp	r0, #31
  40379e:	d80c      	bhi.n	4037ba <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4037a0:	4b11      	ldr	r3, [pc, #68]	; (4037e8 <pmc_enable_periph_clk+0x50>)
  4037a2:	699a      	ldr	r2, [r3, #24]
  4037a4:	2301      	movs	r3, #1
  4037a6:	4083      	lsls	r3, r0
  4037a8:	4393      	bics	r3, r2
  4037aa:	d018      	beq.n	4037de <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4037ac:	2301      	movs	r3, #1
  4037ae:	fa03 f000 	lsl.w	r0, r3, r0
  4037b2:	4b0d      	ldr	r3, [pc, #52]	; (4037e8 <pmc_enable_periph_clk+0x50>)
  4037b4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4037b6:	2000      	movs	r0, #0
  4037b8:	4770      	bx	lr
		ul_id -= 32;
  4037ba:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4037bc:	4b0a      	ldr	r3, [pc, #40]	; (4037e8 <pmc_enable_periph_clk+0x50>)
  4037be:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4037c2:	2301      	movs	r3, #1
  4037c4:	4083      	lsls	r3, r0
  4037c6:	4393      	bics	r3, r2
  4037c8:	d00b      	beq.n	4037e2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4037ca:	2301      	movs	r3, #1
  4037cc:	fa03 f000 	lsl.w	r0, r3, r0
  4037d0:	4b05      	ldr	r3, [pc, #20]	; (4037e8 <pmc_enable_periph_clk+0x50>)
  4037d2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4037d6:	2000      	movs	r0, #0
  4037d8:	4770      	bx	lr
		return 1;
  4037da:	2001      	movs	r0, #1
  4037dc:	4770      	bx	lr
	return 0;
  4037de:	2000      	movs	r0, #0
  4037e0:	4770      	bx	lr
  4037e2:	2000      	movs	r0, #0
}
  4037e4:	4770      	bx	lr
  4037e6:	bf00      	nop
  4037e8:	400e0600 	.word	0x400e0600

004037ec <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4037ec:	6943      	ldr	r3, [r0, #20]
  4037ee:	f013 0f02 	tst.w	r3, #2
  4037f2:	d002      	beq.n	4037fa <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4037f4:	61c1      	str	r1, [r0, #28]
	return 0;
  4037f6:	2000      	movs	r0, #0
  4037f8:	4770      	bx	lr
		return 1;
  4037fa:	2001      	movs	r0, #1
}
  4037fc:	4770      	bx	lr

004037fe <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4037fe:	6943      	ldr	r3, [r0, #20]
  403800:	f013 0f01 	tst.w	r3, #1
  403804:	d003      	beq.n	40380e <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  403806:	6983      	ldr	r3, [r0, #24]
  403808:	700b      	strb	r3, [r1, #0]
	return 0;
  40380a:	2000      	movs	r0, #0
  40380c:	4770      	bx	lr
		return 1;
  40380e:	2001      	movs	r0, #1
}
  403810:	4770      	bx	lr

00403812 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  403812:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  403814:	010b      	lsls	r3, r1, #4
  403816:	4293      	cmp	r3, r2
  403818:	d914      	bls.n	403844 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40381a:	00c9      	lsls	r1, r1, #3
  40381c:	084b      	lsrs	r3, r1, #1
  40381e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  403822:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  403826:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  403828:	1e5c      	subs	r4, r3, #1
  40382a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40382e:	428c      	cmp	r4, r1
  403830:	d901      	bls.n	403836 <usart_set_async_baudrate+0x24>
		return 1;
  403832:	2001      	movs	r0, #1
  403834:	e017      	b.n	403866 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  403836:	6841      	ldr	r1, [r0, #4]
  403838:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40383c:	6041      	str	r1, [r0, #4]
  40383e:	e00c      	b.n	40385a <usart_set_async_baudrate+0x48>
		return 1;
  403840:	2001      	movs	r0, #1
  403842:	e010      	b.n	403866 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  403844:	0859      	lsrs	r1, r3, #1
  403846:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  40384a:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40384e:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  403850:	1e5c      	subs	r4, r3, #1
  403852:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  403856:	428c      	cmp	r4, r1
  403858:	d8f2      	bhi.n	403840 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40385a:	0412      	lsls	r2, r2, #16
  40385c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  403860:	431a      	orrs	r2, r3
  403862:	6202      	str	r2, [r0, #32]

	return 0;
  403864:	2000      	movs	r0, #0
}
  403866:	f85d 4b04 	ldr.w	r4, [sp], #4
  40386a:	4770      	bx	lr

0040386c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40386c:	4b08      	ldr	r3, [pc, #32]	; (403890 <usart_reset+0x24>)
  40386e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  403872:	2300      	movs	r3, #0
  403874:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  403876:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  403878:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40387a:	2388      	movs	r3, #136	; 0x88
  40387c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40387e:	2324      	movs	r3, #36	; 0x24
  403880:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  403882:	f44f 7380 	mov.w	r3, #256	; 0x100
  403886:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  403888:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40388c:	6003      	str	r3, [r0, #0]
  40388e:	4770      	bx	lr
  403890:	55534100 	.word	0x55534100

00403894 <usart_init_rs232>:
{
  403894:	b570      	push	{r4, r5, r6, lr}
  403896:	4605      	mov	r5, r0
  403898:	460c      	mov	r4, r1
  40389a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  40389c:	4b0f      	ldr	r3, [pc, #60]	; (4038dc <usart_init_rs232+0x48>)
  40389e:	4798      	blx	r3
	ul_reg_val = 0;
  4038a0:	2200      	movs	r2, #0
  4038a2:	4b0f      	ldr	r3, [pc, #60]	; (4038e0 <usart_init_rs232+0x4c>)
  4038a4:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4038a6:	b1a4      	cbz	r4, 4038d2 <usart_init_rs232+0x3e>
  4038a8:	4632      	mov	r2, r6
  4038aa:	6821      	ldr	r1, [r4, #0]
  4038ac:	4628      	mov	r0, r5
  4038ae:	4b0d      	ldr	r3, [pc, #52]	; (4038e4 <usart_init_rs232+0x50>)
  4038b0:	4798      	blx	r3
  4038b2:	4602      	mov	r2, r0
  4038b4:	b978      	cbnz	r0, 4038d6 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4038b6:	6863      	ldr	r3, [r4, #4]
  4038b8:	68a1      	ldr	r1, [r4, #8]
  4038ba:	430b      	orrs	r3, r1
  4038bc:	6921      	ldr	r1, [r4, #16]
  4038be:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4038c0:	68e1      	ldr	r1, [r4, #12]
  4038c2:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4038c4:	4906      	ldr	r1, [pc, #24]	; (4038e0 <usart_init_rs232+0x4c>)
  4038c6:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4038c8:	6869      	ldr	r1, [r5, #4]
  4038ca:	430b      	orrs	r3, r1
  4038cc:	606b      	str	r3, [r5, #4]
}
  4038ce:	4610      	mov	r0, r2
  4038d0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4038d2:	2201      	movs	r2, #1
  4038d4:	e7fb      	b.n	4038ce <usart_init_rs232+0x3a>
  4038d6:	2201      	movs	r2, #1
  4038d8:	e7f9      	b.n	4038ce <usart_init_rs232+0x3a>
  4038da:	bf00      	nop
  4038dc:	0040386d 	.word	0x0040386d
  4038e0:	2040c5b8 	.word	0x2040c5b8
  4038e4:	00403813 	.word	0x00403813

004038e8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4038e8:	2340      	movs	r3, #64	; 0x40
  4038ea:	6003      	str	r3, [r0, #0]
  4038ec:	4770      	bx	lr

004038ee <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4038ee:	2310      	movs	r3, #16
  4038f0:	6003      	str	r3, [r0, #0]
  4038f2:	4770      	bx	lr

004038f4 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4038f4:	6943      	ldr	r3, [r0, #20]
  4038f6:	f013 0f02 	tst.w	r3, #2
  4038fa:	d004      	beq.n	403906 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4038fc:	f3c1 0108 	ubfx	r1, r1, #0, #9
  403900:	61c1      	str	r1, [r0, #28]
	return 0;
  403902:	2000      	movs	r0, #0
  403904:	4770      	bx	lr
		return 1;
  403906:	2001      	movs	r0, #1
}
  403908:	4770      	bx	lr

0040390a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40390a:	6943      	ldr	r3, [r0, #20]
  40390c:	f013 0f01 	tst.w	r3, #1
  403910:	d005      	beq.n	40391e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  403912:	6983      	ldr	r3, [r0, #24]
  403914:	f3c3 0308 	ubfx	r3, r3, #0, #9
  403918:	600b      	str	r3, [r1, #0]
	return 0;
  40391a:	2000      	movs	r0, #0
  40391c:	4770      	bx	lr
		return 1;
  40391e:	2001      	movs	r0, #1
}
  403920:	4770      	bx	lr

00403922 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403922:	e7fe      	b.n	403922 <Dummy_Handler>

00403924 <Reset_Handler>:
{
  403924:	b500      	push	{lr}
  403926:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  403928:	4b25      	ldr	r3, [pc, #148]	; (4039c0 <Reset_Handler+0x9c>)
  40392a:	4a26      	ldr	r2, [pc, #152]	; (4039c4 <Reset_Handler+0xa0>)
  40392c:	429a      	cmp	r2, r3
  40392e:	d010      	beq.n	403952 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  403930:	4b25      	ldr	r3, [pc, #148]	; (4039c8 <Reset_Handler+0xa4>)
  403932:	4a23      	ldr	r2, [pc, #140]	; (4039c0 <Reset_Handler+0x9c>)
  403934:	429a      	cmp	r2, r3
  403936:	d20c      	bcs.n	403952 <Reset_Handler+0x2e>
  403938:	3b01      	subs	r3, #1
  40393a:	1a9b      	subs	r3, r3, r2
  40393c:	f023 0303 	bic.w	r3, r3, #3
  403940:	3304      	adds	r3, #4
  403942:	4413      	add	r3, r2
  403944:	491f      	ldr	r1, [pc, #124]	; (4039c4 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  403946:	f851 0b04 	ldr.w	r0, [r1], #4
  40394a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40394e:	429a      	cmp	r2, r3
  403950:	d1f9      	bne.n	403946 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  403952:	4b1e      	ldr	r3, [pc, #120]	; (4039cc <Reset_Handler+0xa8>)
  403954:	4a1e      	ldr	r2, [pc, #120]	; (4039d0 <Reset_Handler+0xac>)
  403956:	429a      	cmp	r2, r3
  403958:	d20a      	bcs.n	403970 <Reset_Handler+0x4c>
  40395a:	3b01      	subs	r3, #1
  40395c:	1a9b      	subs	r3, r3, r2
  40395e:	f023 0303 	bic.w	r3, r3, #3
  403962:	3304      	adds	r3, #4
  403964:	4413      	add	r3, r2
                *pDest++ = 0;
  403966:	2100      	movs	r1, #0
  403968:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40396c:	4293      	cmp	r3, r2
  40396e:	d1fb      	bne.n	403968 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  403970:	4a18      	ldr	r2, [pc, #96]	; (4039d4 <Reset_Handler+0xb0>)
  403972:	4b19      	ldr	r3, [pc, #100]	; (4039d8 <Reset_Handler+0xb4>)
  403974:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403978:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40397a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40397e:	fab3 f383 	clz	r3, r3
  403982:	095b      	lsrs	r3, r3, #5
  403984:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403986:	b672      	cpsid	i
  __ASM volatile ("dmb");
  403988:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40398c:	2200      	movs	r2, #0
  40398e:	4b13      	ldr	r3, [pc, #76]	; (4039dc <Reset_Handler+0xb8>)
  403990:	701a      	strb	r2, [r3, #0]
	return flags;
  403992:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  403994:	4a12      	ldr	r2, [pc, #72]	; (4039e0 <Reset_Handler+0xbc>)
  403996:	6813      	ldr	r3, [r2, #0]
  403998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40399c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40399e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4039a2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4039a6:	b129      	cbz	r1, 4039b4 <Reset_Handler+0x90>
		cpu_irq_enable();
  4039a8:	2201      	movs	r2, #1
  4039aa:	4b0c      	ldr	r3, [pc, #48]	; (4039dc <Reset_Handler+0xb8>)
  4039ac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4039ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4039b2:	b662      	cpsie	i
        __libc_init_array();
  4039b4:	4b0b      	ldr	r3, [pc, #44]	; (4039e4 <Reset_Handler+0xc0>)
  4039b6:	4798      	blx	r3
        main();
  4039b8:	4b0b      	ldr	r3, [pc, #44]	; (4039e8 <Reset_Handler+0xc4>)
  4039ba:	4798      	blx	r3
  4039bc:	e7fe      	b.n	4039bc <Reset_Handler+0x98>
  4039be:	bf00      	nop
  4039c0:	20400000 	.word	0x20400000
  4039c4:	0040a894 	.word	0x0040a894
  4039c8:	204009d8 	.word	0x204009d8
  4039cc:	2040c670 	.word	0x2040c670
  4039d0:	204009d8 	.word	0x204009d8
  4039d4:	e000ed00 	.word	0xe000ed00
  4039d8:	00400000 	.word	0x00400000
  4039dc:	2040001c 	.word	0x2040001c
  4039e0:	e000ed88 	.word	0xe000ed88
  4039e4:	00406f99 	.word	0x00406f99
  4039e8:	0040467d 	.word	0x0040467d

004039ec <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4039ec:	4b3b      	ldr	r3, [pc, #236]	; (403adc <SystemCoreClockUpdate+0xf0>)
  4039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4039f0:	f003 0303 	and.w	r3, r3, #3
  4039f4:	2b01      	cmp	r3, #1
  4039f6:	d01d      	beq.n	403a34 <SystemCoreClockUpdate+0x48>
  4039f8:	b183      	cbz	r3, 403a1c <SystemCoreClockUpdate+0x30>
  4039fa:	2b02      	cmp	r3, #2
  4039fc:	d036      	beq.n	403a6c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4039fe:	4b37      	ldr	r3, [pc, #220]	; (403adc <SystemCoreClockUpdate+0xf0>)
  403a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403a02:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403a06:	2b70      	cmp	r3, #112	; 0x70
  403a08:	d05f      	beq.n	403aca <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403a0a:	4b34      	ldr	r3, [pc, #208]	; (403adc <SystemCoreClockUpdate+0xf0>)
  403a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403a0e:	4934      	ldr	r1, [pc, #208]	; (403ae0 <SystemCoreClockUpdate+0xf4>)
  403a10:	f3c2 1202 	ubfx	r2, r2, #4, #3
  403a14:	680b      	ldr	r3, [r1, #0]
  403a16:	40d3      	lsrs	r3, r2
  403a18:	600b      	str	r3, [r1, #0]
  403a1a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  403a1c:	4b31      	ldr	r3, [pc, #196]	; (403ae4 <SystemCoreClockUpdate+0xf8>)
  403a1e:	695b      	ldr	r3, [r3, #20]
  403a20:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403a24:	bf14      	ite	ne
  403a26:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  403a2a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  403a2e:	4b2c      	ldr	r3, [pc, #176]	; (403ae0 <SystemCoreClockUpdate+0xf4>)
  403a30:	601a      	str	r2, [r3, #0]
  403a32:	e7e4      	b.n	4039fe <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403a34:	4b29      	ldr	r3, [pc, #164]	; (403adc <SystemCoreClockUpdate+0xf0>)
  403a36:	6a1b      	ldr	r3, [r3, #32]
  403a38:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403a3c:	d003      	beq.n	403a46 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  403a3e:	4a2a      	ldr	r2, [pc, #168]	; (403ae8 <SystemCoreClockUpdate+0xfc>)
  403a40:	4b27      	ldr	r3, [pc, #156]	; (403ae0 <SystemCoreClockUpdate+0xf4>)
  403a42:	601a      	str	r2, [r3, #0]
  403a44:	e7db      	b.n	4039fe <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403a46:	4a29      	ldr	r2, [pc, #164]	; (403aec <SystemCoreClockUpdate+0x100>)
  403a48:	4b25      	ldr	r3, [pc, #148]	; (403ae0 <SystemCoreClockUpdate+0xf4>)
  403a4a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403a4c:	4b23      	ldr	r3, [pc, #140]	; (403adc <SystemCoreClockUpdate+0xf0>)
  403a4e:	6a1b      	ldr	r3, [r3, #32]
  403a50:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403a54:	2b10      	cmp	r3, #16
  403a56:	d005      	beq.n	403a64 <SystemCoreClockUpdate+0x78>
  403a58:	2b20      	cmp	r3, #32
  403a5a:	d1d0      	bne.n	4039fe <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  403a5c:	4a22      	ldr	r2, [pc, #136]	; (403ae8 <SystemCoreClockUpdate+0xfc>)
  403a5e:	4b20      	ldr	r3, [pc, #128]	; (403ae0 <SystemCoreClockUpdate+0xf4>)
  403a60:	601a      	str	r2, [r3, #0]
          break;
  403a62:	e7cc      	b.n	4039fe <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  403a64:	4a22      	ldr	r2, [pc, #136]	; (403af0 <SystemCoreClockUpdate+0x104>)
  403a66:	4b1e      	ldr	r3, [pc, #120]	; (403ae0 <SystemCoreClockUpdate+0xf4>)
  403a68:	601a      	str	r2, [r3, #0]
          break;
  403a6a:	e7c8      	b.n	4039fe <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403a6c:	4b1b      	ldr	r3, [pc, #108]	; (403adc <SystemCoreClockUpdate+0xf0>)
  403a6e:	6a1b      	ldr	r3, [r3, #32]
  403a70:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403a74:	d016      	beq.n	403aa4 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  403a76:	4a1c      	ldr	r2, [pc, #112]	; (403ae8 <SystemCoreClockUpdate+0xfc>)
  403a78:	4b19      	ldr	r3, [pc, #100]	; (403ae0 <SystemCoreClockUpdate+0xf4>)
  403a7a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  403a7c:	4b17      	ldr	r3, [pc, #92]	; (403adc <SystemCoreClockUpdate+0xf0>)
  403a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403a80:	f003 0303 	and.w	r3, r3, #3
  403a84:	2b02      	cmp	r3, #2
  403a86:	d1ba      	bne.n	4039fe <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403a88:	4a14      	ldr	r2, [pc, #80]	; (403adc <SystemCoreClockUpdate+0xf0>)
  403a8a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403a8c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  403a8e:	4814      	ldr	r0, [pc, #80]	; (403ae0 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403a90:	f3c1 410a 	ubfx	r1, r1, #16, #11
  403a94:	6803      	ldr	r3, [r0, #0]
  403a96:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403a9a:	b2d2      	uxtb	r2, r2
  403a9c:	fbb3 f3f2 	udiv	r3, r3, r2
  403aa0:	6003      	str	r3, [r0, #0]
  403aa2:	e7ac      	b.n	4039fe <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403aa4:	4a11      	ldr	r2, [pc, #68]	; (403aec <SystemCoreClockUpdate+0x100>)
  403aa6:	4b0e      	ldr	r3, [pc, #56]	; (403ae0 <SystemCoreClockUpdate+0xf4>)
  403aa8:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403aaa:	4b0c      	ldr	r3, [pc, #48]	; (403adc <SystemCoreClockUpdate+0xf0>)
  403aac:	6a1b      	ldr	r3, [r3, #32]
  403aae:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403ab2:	2b10      	cmp	r3, #16
  403ab4:	d005      	beq.n	403ac2 <SystemCoreClockUpdate+0xd6>
  403ab6:	2b20      	cmp	r3, #32
  403ab8:	d1e0      	bne.n	403a7c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  403aba:	4a0b      	ldr	r2, [pc, #44]	; (403ae8 <SystemCoreClockUpdate+0xfc>)
  403abc:	4b08      	ldr	r3, [pc, #32]	; (403ae0 <SystemCoreClockUpdate+0xf4>)
  403abe:	601a      	str	r2, [r3, #0]
          break;
  403ac0:	e7dc      	b.n	403a7c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  403ac2:	4a0b      	ldr	r2, [pc, #44]	; (403af0 <SystemCoreClockUpdate+0x104>)
  403ac4:	4b06      	ldr	r3, [pc, #24]	; (403ae0 <SystemCoreClockUpdate+0xf4>)
  403ac6:	601a      	str	r2, [r3, #0]
          break;
  403ac8:	e7d8      	b.n	403a7c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  403aca:	4a05      	ldr	r2, [pc, #20]	; (403ae0 <SystemCoreClockUpdate+0xf4>)
  403acc:	6813      	ldr	r3, [r2, #0]
  403ace:	4909      	ldr	r1, [pc, #36]	; (403af4 <SystemCoreClockUpdate+0x108>)
  403ad0:	fba1 1303 	umull	r1, r3, r1, r3
  403ad4:	085b      	lsrs	r3, r3, #1
  403ad6:	6013      	str	r3, [r2, #0]
  403ad8:	4770      	bx	lr
  403ada:	bf00      	nop
  403adc:	400e0600 	.word	0x400e0600
  403ae0:	20400020 	.word	0x20400020
  403ae4:	400e1810 	.word	0x400e1810
  403ae8:	00b71b00 	.word	0x00b71b00
  403aec:	003d0900 	.word	0x003d0900
  403af0:	007a1200 	.word	0x007a1200
  403af4:	aaaaaaab 	.word	0xaaaaaaab

00403af8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  403af8:	4b16      	ldr	r3, [pc, #88]	; (403b54 <system_init_flash+0x5c>)
  403afa:	4298      	cmp	r0, r3
  403afc:	d913      	bls.n	403b26 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  403afe:	4b16      	ldr	r3, [pc, #88]	; (403b58 <system_init_flash+0x60>)
  403b00:	4298      	cmp	r0, r3
  403b02:	d915      	bls.n	403b30 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  403b04:	4b15      	ldr	r3, [pc, #84]	; (403b5c <system_init_flash+0x64>)
  403b06:	4298      	cmp	r0, r3
  403b08:	d916      	bls.n	403b38 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  403b0a:	4b15      	ldr	r3, [pc, #84]	; (403b60 <system_init_flash+0x68>)
  403b0c:	4298      	cmp	r0, r3
  403b0e:	d917      	bls.n	403b40 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  403b10:	4b14      	ldr	r3, [pc, #80]	; (403b64 <system_init_flash+0x6c>)
  403b12:	4298      	cmp	r0, r3
  403b14:	d918      	bls.n	403b48 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  403b16:	4b14      	ldr	r3, [pc, #80]	; (403b68 <system_init_flash+0x70>)
  403b18:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403b1a:	bf94      	ite	ls
  403b1c:	4a13      	ldrls	r2, [pc, #76]	; (403b6c <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  403b1e:	4a14      	ldrhi	r2, [pc, #80]	; (403b70 <system_init_flash+0x78>)
  403b20:	4b14      	ldr	r3, [pc, #80]	; (403b74 <system_init_flash+0x7c>)
  403b22:	601a      	str	r2, [r3, #0]
  403b24:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403b26:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  403b2a:	4b12      	ldr	r3, [pc, #72]	; (403b74 <system_init_flash+0x7c>)
  403b2c:	601a      	str	r2, [r3, #0]
  403b2e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403b30:	4a11      	ldr	r2, [pc, #68]	; (403b78 <system_init_flash+0x80>)
  403b32:	4b10      	ldr	r3, [pc, #64]	; (403b74 <system_init_flash+0x7c>)
  403b34:	601a      	str	r2, [r3, #0]
  403b36:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403b38:	4a10      	ldr	r2, [pc, #64]	; (403b7c <system_init_flash+0x84>)
  403b3a:	4b0e      	ldr	r3, [pc, #56]	; (403b74 <system_init_flash+0x7c>)
  403b3c:	601a      	str	r2, [r3, #0]
  403b3e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403b40:	4a0f      	ldr	r2, [pc, #60]	; (403b80 <system_init_flash+0x88>)
  403b42:	4b0c      	ldr	r3, [pc, #48]	; (403b74 <system_init_flash+0x7c>)
  403b44:	601a      	str	r2, [r3, #0]
  403b46:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403b48:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  403b4c:	4b09      	ldr	r3, [pc, #36]	; (403b74 <system_init_flash+0x7c>)
  403b4e:	601a      	str	r2, [r3, #0]
  403b50:	4770      	bx	lr
  403b52:	bf00      	nop
  403b54:	015ef3bf 	.word	0x015ef3bf
  403b58:	02bde77f 	.word	0x02bde77f
  403b5c:	041cdb3f 	.word	0x041cdb3f
  403b60:	057bceff 	.word	0x057bceff
  403b64:	06dac2bf 	.word	0x06dac2bf
  403b68:	0839b67f 	.word	0x0839b67f
  403b6c:	04000500 	.word	0x04000500
  403b70:	04000600 	.word	0x04000600
  403b74:	400e0c00 	.word	0x400e0c00
  403b78:	04000100 	.word	0x04000100
  403b7c:	04000200 	.word	0x04000200
  403b80:	04000300 	.word	0x04000300

00403b84 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403b84:	4b0a      	ldr	r3, [pc, #40]	; (403bb0 <_sbrk+0x2c>)
  403b86:	681b      	ldr	r3, [r3, #0]
  403b88:	b153      	cbz	r3, 403ba0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  403b8a:	4b09      	ldr	r3, [pc, #36]	; (403bb0 <_sbrk+0x2c>)
  403b8c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403b8e:	181a      	adds	r2, r3, r0
  403b90:	4908      	ldr	r1, [pc, #32]	; (403bb4 <_sbrk+0x30>)
  403b92:	4291      	cmp	r1, r2
  403b94:	db08      	blt.n	403ba8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  403b96:	4610      	mov	r0, r2
  403b98:	4a05      	ldr	r2, [pc, #20]	; (403bb0 <_sbrk+0x2c>)
  403b9a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403b9c:	4618      	mov	r0, r3
  403b9e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  403ba0:	4a05      	ldr	r2, [pc, #20]	; (403bb8 <_sbrk+0x34>)
  403ba2:	4b03      	ldr	r3, [pc, #12]	; (403bb0 <_sbrk+0x2c>)
  403ba4:	601a      	str	r2, [r3, #0]
  403ba6:	e7f0      	b.n	403b8a <_sbrk+0x6>
		return (caddr_t) -1;	
  403ba8:	f04f 30ff 	mov.w	r0, #4294967295
}
  403bac:	4770      	bx	lr
  403bae:	bf00      	nop
  403bb0:	2040c5bc 	.word	0x2040c5bc
  403bb4:	2045fffc 	.word	0x2045fffc
  403bb8:	2040e870 	.word	0x2040e870

00403bbc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  403bbc:	f04f 30ff 	mov.w	r0, #4294967295
  403bc0:	4770      	bx	lr

00403bc2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  403bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  403bc6:	604b      	str	r3, [r1, #4]

	return 0;
}
  403bc8:	2000      	movs	r0, #0
  403bca:	4770      	bx	lr

00403bcc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  403bcc:	2001      	movs	r0, #1
  403bce:	4770      	bx	lr

00403bd0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  403bd0:	2000      	movs	r0, #0
  403bd2:	4770      	bx	lr

00403bd4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  403bd6:	b083      	sub	sp, #12
  403bd8:	4605      	mov	r5, r0
  403bda:	460c      	mov	r4, r1
	uint32_t val = 0;
  403bdc:	2300      	movs	r3, #0
  403bde:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403be0:	4b2a      	ldr	r3, [pc, #168]	; (403c8c <usart_serial_getchar+0xb8>)
  403be2:	4298      	cmp	r0, r3
  403be4:	d013      	beq.n	403c0e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403be6:	4b2a      	ldr	r3, [pc, #168]	; (403c90 <usart_serial_getchar+0xbc>)
  403be8:	4298      	cmp	r0, r3
  403bea:	d018      	beq.n	403c1e <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403bec:	4b29      	ldr	r3, [pc, #164]	; (403c94 <usart_serial_getchar+0xc0>)
  403bee:	4298      	cmp	r0, r3
  403bf0:	d01d      	beq.n	403c2e <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403bf2:	4b29      	ldr	r3, [pc, #164]	; (403c98 <usart_serial_getchar+0xc4>)
  403bf4:	429d      	cmp	r5, r3
  403bf6:	d022      	beq.n	403c3e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403bf8:	4b28      	ldr	r3, [pc, #160]	; (403c9c <usart_serial_getchar+0xc8>)
  403bfa:	429d      	cmp	r5, r3
  403bfc:	d027      	beq.n	403c4e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403bfe:	4b28      	ldr	r3, [pc, #160]	; (403ca0 <usart_serial_getchar+0xcc>)
  403c00:	429d      	cmp	r5, r3
  403c02:	d02e      	beq.n	403c62 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403c04:	4b27      	ldr	r3, [pc, #156]	; (403ca4 <usart_serial_getchar+0xd0>)
  403c06:	429d      	cmp	r5, r3
  403c08:	d035      	beq.n	403c76 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403c0a:	b003      	add	sp, #12
  403c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403c0e:	461f      	mov	r7, r3
  403c10:	4e25      	ldr	r6, [pc, #148]	; (403ca8 <usart_serial_getchar+0xd4>)
  403c12:	4621      	mov	r1, r4
  403c14:	4638      	mov	r0, r7
  403c16:	47b0      	blx	r6
  403c18:	2800      	cmp	r0, #0
  403c1a:	d1fa      	bne.n	403c12 <usart_serial_getchar+0x3e>
  403c1c:	e7e9      	b.n	403bf2 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403c1e:	461f      	mov	r7, r3
  403c20:	4e21      	ldr	r6, [pc, #132]	; (403ca8 <usart_serial_getchar+0xd4>)
  403c22:	4621      	mov	r1, r4
  403c24:	4638      	mov	r0, r7
  403c26:	47b0      	blx	r6
  403c28:	2800      	cmp	r0, #0
  403c2a:	d1fa      	bne.n	403c22 <usart_serial_getchar+0x4e>
  403c2c:	e7e4      	b.n	403bf8 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  403c2e:	461f      	mov	r7, r3
  403c30:	4e1d      	ldr	r6, [pc, #116]	; (403ca8 <usart_serial_getchar+0xd4>)
  403c32:	4621      	mov	r1, r4
  403c34:	4638      	mov	r0, r7
  403c36:	47b0      	blx	r6
  403c38:	2800      	cmp	r0, #0
  403c3a:	d1fa      	bne.n	403c32 <usart_serial_getchar+0x5e>
  403c3c:	e7df      	b.n	403bfe <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  403c3e:	461f      	mov	r7, r3
  403c40:	4e19      	ldr	r6, [pc, #100]	; (403ca8 <usart_serial_getchar+0xd4>)
  403c42:	4621      	mov	r1, r4
  403c44:	4638      	mov	r0, r7
  403c46:	47b0      	blx	r6
  403c48:	2800      	cmp	r0, #0
  403c4a:	d1fa      	bne.n	403c42 <usart_serial_getchar+0x6e>
  403c4c:	e7da      	b.n	403c04 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  403c4e:	461e      	mov	r6, r3
  403c50:	4d16      	ldr	r5, [pc, #88]	; (403cac <usart_serial_getchar+0xd8>)
  403c52:	a901      	add	r1, sp, #4
  403c54:	4630      	mov	r0, r6
  403c56:	47a8      	blx	r5
  403c58:	2800      	cmp	r0, #0
  403c5a:	d1fa      	bne.n	403c52 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403c5c:	9b01      	ldr	r3, [sp, #4]
  403c5e:	7023      	strb	r3, [r4, #0]
  403c60:	e7d3      	b.n	403c0a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403c62:	461e      	mov	r6, r3
  403c64:	4d11      	ldr	r5, [pc, #68]	; (403cac <usart_serial_getchar+0xd8>)
  403c66:	a901      	add	r1, sp, #4
  403c68:	4630      	mov	r0, r6
  403c6a:	47a8      	blx	r5
  403c6c:	2800      	cmp	r0, #0
  403c6e:	d1fa      	bne.n	403c66 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403c70:	9b01      	ldr	r3, [sp, #4]
  403c72:	7023      	strb	r3, [r4, #0]
  403c74:	e7c9      	b.n	403c0a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403c76:	461e      	mov	r6, r3
  403c78:	4d0c      	ldr	r5, [pc, #48]	; (403cac <usart_serial_getchar+0xd8>)
  403c7a:	a901      	add	r1, sp, #4
  403c7c:	4630      	mov	r0, r6
  403c7e:	47a8      	blx	r5
  403c80:	2800      	cmp	r0, #0
  403c82:	d1fa      	bne.n	403c7a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403c84:	9b01      	ldr	r3, [sp, #4]
  403c86:	7023      	strb	r3, [r4, #0]
}
  403c88:	e7bf      	b.n	403c0a <usart_serial_getchar+0x36>
  403c8a:	bf00      	nop
  403c8c:	400e0800 	.word	0x400e0800
  403c90:	400e0a00 	.word	0x400e0a00
  403c94:	400e1a00 	.word	0x400e1a00
  403c98:	400e1c00 	.word	0x400e1c00
  403c9c:	40024000 	.word	0x40024000
  403ca0:	40028000 	.word	0x40028000
  403ca4:	4002c000 	.word	0x4002c000
  403ca8:	004037ff 	.word	0x004037ff
  403cac:	0040390b 	.word	0x0040390b

00403cb0 <usart_serial_putchar>:
{
  403cb0:	b570      	push	{r4, r5, r6, lr}
  403cb2:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403cb4:	4b2a      	ldr	r3, [pc, #168]	; (403d60 <usart_serial_putchar+0xb0>)
  403cb6:	4298      	cmp	r0, r3
  403cb8:	d013      	beq.n	403ce2 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403cba:	4b2a      	ldr	r3, [pc, #168]	; (403d64 <usart_serial_putchar+0xb4>)
  403cbc:	4298      	cmp	r0, r3
  403cbe:	d019      	beq.n	403cf4 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403cc0:	4b29      	ldr	r3, [pc, #164]	; (403d68 <usart_serial_putchar+0xb8>)
  403cc2:	4298      	cmp	r0, r3
  403cc4:	d01f      	beq.n	403d06 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  403cc6:	4b29      	ldr	r3, [pc, #164]	; (403d6c <usart_serial_putchar+0xbc>)
  403cc8:	4298      	cmp	r0, r3
  403cca:	d025      	beq.n	403d18 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403ccc:	4b28      	ldr	r3, [pc, #160]	; (403d70 <usart_serial_putchar+0xc0>)
  403cce:	4298      	cmp	r0, r3
  403cd0:	d02b      	beq.n	403d2a <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  403cd2:	4b28      	ldr	r3, [pc, #160]	; (403d74 <usart_serial_putchar+0xc4>)
  403cd4:	4298      	cmp	r0, r3
  403cd6:	d031      	beq.n	403d3c <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403cd8:	4b27      	ldr	r3, [pc, #156]	; (403d78 <usart_serial_putchar+0xc8>)
  403cda:	4298      	cmp	r0, r3
  403cdc:	d037      	beq.n	403d4e <usart_serial_putchar+0x9e>
	return 0;
  403cde:	2000      	movs	r0, #0
}
  403ce0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403ce2:	461e      	mov	r6, r3
  403ce4:	4d25      	ldr	r5, [pc, #148]	; (403d7c <usart_serial_putchar+0xcc>)
  403ce6:	4621      	mov	r1, r4
  403ce8:	4630      	mov	r0, r6
  403cea:	47a8      	blx	r5
  403cec:	2800      	cmp	r0, #0
  403cee:	d1fa      	bne.n	403ce6 <usart_serial_putchar+0x36>
		return 1;
  403cf0:	2001      	movs	r0, #1
  403cf2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403cf4:	461e      	mov	r6, r3
  403cf6:	4d21      	ldr	r5, [pc, #132]	; (403d7c <usart_serial_putchar+0xcc>)
  403cf8:	4621      	mov	r1, r4
  403cfa:	4630      	mov	r0, r6
  403cfc:	47a8      	blx	r5
  403cfe:	2800      	cmp	r0, #0
  403d00:	d1fa      	bne.n	403cf8 <usart_serial_putchar+0x48>
		return 1;
  403d02:	2001      	movs	r0, #1
  403d04:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403d06:	461e      	mov	r6, r3
  403d08:	4d1c      	ldr	r5, [pc, #112]	; (403d7c <usart_serial_putchar+0xcc>)
  403d0a:	4621      	mov	r1, r4
  403d0c:	4630      	mov	r0, r6
  403d0e:	47a8      	blx	r5
  403d10:	2800      	cmp	r0, #0
  403d12:	d1fa      	bne.n	403d0a <usart_serial_putchar+0x5a>
		return 1;
  403d14:	2001      	movs	r0, #1
  403d16:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403d18:	461e      	mov	r6, r3
  403d1a:	4d18      	ldr	r5, [pc, #96]	; (403d7c <usart_serial_putchar+0xcc>)
  403d1c:	4621      	mov	r1, r4
  403d1e:	4630      	mov	r0, r6
  403d20:	47a8      	blx	r5
  403d22:	2800      	cmp	r0, #0
  403d24:	d1fa      	bne.n	403d1c <usart_serial_putchar+0x6c>
		return 1;
  403d26:	2001      	movs	r0, #1
  403d28:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403d2a:	461e      	mov	r6, r3
  403d2c:	4d14      	ldr	r5, [pc, #80]	; (403d80 <usart_serial_putchar+0xd0>)
  403d2e:	4621      	mov	r1, r4
  403d30:	4630      	mov	r0, r6
  403d32:	47a8      	blx	r5
  403d34:	2800      	cmp	r0, #0
  403d36:	d1fa      	bne.n	403d2e <usart_serial_putchar+0x7e>
		return 1;
  403d38:	2001      	movs	r0, #1
  403d3a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403d3c:	461e      	mov	r6, r3
  403d3e:	4d10      	ldr	r5, [pc, #64]	; (403d80 <usart_serial_putchar+0xd0>)
  403d40:	4621      	mov	r1, r4
  403d42:	4630      	mov	r0, r6
  403d44:	47a8      	blx	r5
  403d46:	2800      	cmp	r0, #0
  403d48:	d1fa      	bne.n	403d40 <usart_serial_putchar+0x90>
		return 1;
  403d4a:	2001      	movs	r0, #1
  403d4c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403d4e:	461e      	mov	r6, r3
  403d50:	4d0b      	ldr	r5, [pc, #44]	; (403d80 <usart_serial_putchar+0xd0>)
  403d52:	4621      	mov	r1, r4
  403d54:	4630      	mov	r0, r6
  403d56:	47a8      	blx	r5
  403d58:	2800      	cmp	r0, #0
  403d5a:	d1fa      	bne.n	403d52 <usart_serial_putchar+0xa2>
		return 1;
  403d5c:	2001      	movs	r0, #1
  403d5e:	bd70      	pop	{r4, r5, r6, pc}
  403d60:	400e0800 	.word	0x400e0800
  403d64:	400e0a00 	.word	0x400e0a00
  403d68:	400e1a00 	.word	0x400e1a00
  403d6c:	400e1c00 	.word	0x400e1c00
  403d70:	40024000 	.word	0x40024000
  403d74:	40028000 	.word	0x40028000
  403d78:	4002c000 	.word	0x4002c000
  403d7c:	004037ed 	.word	0x004037ed
  403d80:	004038f5 	.word	0x004038f5

00403d84 <vApplicationStackOverflowHook>:
int8_t mcu6050_i2c_bus_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt);
/************************************************************************/
/* RTOS application funcs                                               */
/************************************************************************/

extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  403d84:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  403d86:	460a      	mov	r2, r1
  403d88:	4601      	mov	r1, r0
  403d8a:	4802      	ldr	r0, [pc, #8]	; (403d94 <vApplicationStackOverflowHook+0x10>)
  403d8c:	4b02      	ldr	r3, [pc, #8]	; (403d98 <vApplicationStackOverflowHook+0x14>)
  403d8e:	4798      	blx	r3
  403d90:	e7fe      	b.n	403d90 <vApplicationStackOverflowHook+0xc>
  403d92:	bf00      	nop
  403d94:	0040a2e8 	.word	0x0040a2e8
  403d98:	00406fe9 	.word	0x00406fe9

00403d9c <vApplicationTickHook>:
	for (;;) {	}
}

extern void vApplicationIdleHook(void) { }

extern void vApplicationTickHook(void) { }
  403d9c:	4770      	bx	lr

00403d9e <vApplicationMallocFailedHook>:
  403d9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403da2:	b672      	cpsid	i
  403da4:	f383 8811 	msr	BASEPRI, r3
  403da8:	f3bf 8f6f 	isb	sy
  403dac:	f3bf 8f4f 	dsb	sy
  403db0:	b662      	cpsie	i
  403db2:	e7fe      	b.n	403db2 <vApplicationMallocFailedHook+0x14>

00403db4 <mcu6050_i2c_bus_write>:

extern void vApplicationMallocFailedHook(void) {
configASSERT( ( volatile void * ) NULL );}
int8_t mcu6050_i2c_bus_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt)
{
  403db4:	b500      	push	{lr}
  403db6:	b087      	sub	sp, #28
	int32_t ierror = 0x00;

	twihs_packet_t p_packet;
	p_packet.chip         = dev_addr;
  403db8:	f88d 0014 	strb.w	r0, [sp, #20]
	p_packet.addr[0]      = reg_addr;
  403dbc:	f88d 1004 	strb.w	r1, [sp, #4]
	p_packet.addr_length  = 1;
  403dc0:	2101      	movs	r1, #1
  403dc2:	9102      	str	r1, [sp, #8]
	p_packet.buffer       = reg_data;
  403dc4:	9203      	str	r2, [sp, #12]
	p_packet.length       = cnt;
  403dc6:	9304      	str	r3, [sp, #16]

	ierror = twihs_master_write(TWIHS2, &p_packet);
  403dc8:	a901      	add	r1, sp, #4
  403dca:	4803      	ldr	r0, [pc, #12]	; (403dd8 <mcu6050_i2c_bus_write+0x24>)
  403dcc:	4b03      	ldr	r3, [pc, #12]	; (403ddc <mcu6050_i2c_bus_write+0x28>)
  403dce:	4798      	blx	r3

	return (int8_t)ierror;
}
  403dd0:	b240      	sxtb	r0, r0
  403dd2:	b007      	add	sp, #28
  403dd4:	f85d fb04 	ldr.w	pc, [sp], #4
  403dd8:	40060000 	.word	0x40060000
  403ddc:	00400489 	.word	0x00400489

00403de0 <mcu6050_i2c_bus_read>:
int8_t mcu6050_i2c_bus_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt)
{
  403de0:	b500      	push	{lr}
  403de2:	b087      	sub	sp, #28
	int32_t ierror = 0x00;

	twihs_packet_t p_packet;
	p_packet.chip         = dev_addr;
  403de4:	f88d 0014 	strb.w	r0, [sp, #20]
	p_packet.addr[0]      = reg_addr;
  403de8:	f88d 1004 	strb.w	r1, [sp, #4]
	p_packet.addr_length  = 1;
  403dec:	2101      	movs	r1, #1
  403dee:	9102      	str	r1, [sp, #8]
	p_packet.buffer       = reg_data;
  403df0:	9203      	str	r2, [sp, #12]
	p_packet.length       = cnt;
  403df2:	9304      	str	r3, [sp, #16]

	// TODO: Algum problema no SPI faz com que devemos ler duas vezes o registrador para
	//       conseguirmos pegar o valor correto.
	ierror = twihs_master_read(TWIHS2, &p_packet);
  403df4:	a901      	add	r1, sp, #4
  403df6:	4803      	ldr	r0, [pc, #12]	; (403e04 <mcu6050_i2c_bus_read+0x24>)
  403df8:	4b03      	ldr	r3, [pc, #12]	; (403e08 <mcu6050_i2c_bus_read+0x28>)
  403dfa:	4798      	blx	r3

	return (int8_t)ierror;
}
  403dfc:	b240      	sxtb	r0, r0
  403dfe:	b007      	add	sp, #28
  403e00:	f85d fb04 	ldr.w	pc, [sp], #4
  403e04:	40060000 	.word	0x40060000
  403e08:	004003dd 	.word	0x004003dd

00403e0c <mcu6050_i2c_bus_init>:



void mcu6050_i2c_bus_init(void)
{
  403e0c:	b530      	push	{r4, r5, lr}
  403e0e:	b085      	sub	sp, #20
	twihs_options_t mcu6050_option;
	pmc_enable_periph_clk(ID_TWIHS2);
  403e10:	2029      	movs	r0, #41	; 0x29
  403e12:	4c0e      	ldr	r4, [pc, #56]	; (403e4c <mcu6050_i2c_bus_init+0x40>)
  403e14:	47a0      	blx	r4

	/* Configure the options of TWI driver */
	mcu6050_option.master_clk = sysclk_get_cpu_hz();
  403e16:	4b0e      	ldr	r3, [pc, #56]	; (403e50 <mcu6050_i2c_bus_init+0x44>)
  403e18:	9301      	str	r3, [sp, #4]
	mcu6050_option.speed      = 40000;
  403e1a:	f649 4340 	movw	r3, #40000	; 0x9c40
  403e1e:	9302      	str	r3, [sp, #8]
	twihs_master_init(TWIHS2, &mcu6050_option);
  403e20:	a901      	add	r1, sp, #4
  403e22:	480c      	ldr	r0, [pc, #48]	; (403e54 <mcu6050_i2c_bus_init+0x48>)
  403e24:	4b0c      	ldr	r3, [pc, #48]	; (403e58 <mcu6050_i2c_bus_init+0x4c>)
  403e26:	4798      	blx	r3
	
	/** Enable TWIHS port to control PIO pins */
	pmc_enable_periph_clk(ID_PIOD);
  403e28:	2010      	movs	r0, #16
  403e2a:	47a0      	blx	r4
	pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 28);
  403e2c:	4d0b      	ldr	r5, [pc, #44]	; (403e5c <mcu6050_i2c_bus_init+0x50>)
  403e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403e32:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403e36:	4628      	mov	r0, r5
  403e38:	4c09      	ldr	r4, [pc, #36]	; (403e60 <mcu6050_i2c_bus_init+0x54>)
  403e3a:	47a0      	blx	r4
	pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 27);
  403e3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  403e40:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403e44:	4628      	mov	r0, r5
  403e46:	47a0      	blx	r4
}
  403e48:	b005      	add	sp, #20
  403e4a:	bd30      	pop	{r4, r5, pc}
  403e4c:	00403799 	.word	0x00403799
  403e50:	11e1a300 	.word	0x11e1a300
  403e54:	40060000 	.word	0x40060000
  403e58:	004003a9 	.word	0x004003a9
  403e5c:	400e1400 	.word	0x400e1400
  403e60:	0040343d 	.word	0x0040343d
  403e64:	00000000 	.word	0x00000000

00403e68 <task_imu>:
		}
	}
}


static void task_imu(void *pvParameters) {
  403e68:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
  403e6c:	ed2d 8b0e 	vpush	{d8-d14}
  403e70:	b0b4      	sub	sp, #208	; 0xd0
	mcu6050_i2c_bus_init();
  403e72:	4b69      	ldr	r3, [pc, #420]	; (404018 <task_imu+0x1b0>)
  403e74:	4798      	blx	r3
	
	/* Inicializa Fun??o de fus?o */
	FusionAhrs ahrs;
	FusionAhrsInitialise(&ahrs);
  403e76:	a817      	add	r0, sp, #92	; 0x5c
  403e78:	4b68      	ldr	r3, [pc, #416]	; (40401c <task_imu+0x1b4>)
  403e7a:	4798      	blx	r3


	/* resultado da fun??o */
	uint8_t rtn;
	
	rtn = twihs_probe(TWIHS2, MPU6050_DEFAULT_ADDRESS);
  403e7c:	2168      	movs	r1, #104	; 0x68
  403e7e:	4868      	ldr	r0, [pc, #416]	; (404020 <task_imu+0x1b8>)
  403e80:	4b68      	ldr	r3, [pc, #416]	; (404024 <task_imu+0x1bc>)
  403e82:	4798      	blx	r3
	
	// L? registrador WHO AM I
	rtn = mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_WHO_AM_I, bufferRX, 1);
  403e84:	2301      	movs	r3, #1
  403e86:	aa14      	add	r2, sp, #80	; 0x50
  403e88:	2175      	movs	r1, #117	; 0x75
  403e8a:	2068      	movs	r0, #104	; 0x68
  403e8c:	4c66      	ldr	r4, [pc, #408]	; (404028 <task_imu+0x1c0>)
  403e8e:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS){
  403e90:	b360      	cbz	r0, 403eec <task_imu+0x84>
		printf("[ERRO] [i2c] [read] \n");
  403e92:	4866      	ldr	r0, [pc, #408]	; (40402c <task_imu+0x1c4>)
  403e94:	4b66      	ldr	r3, [pc, #408]	; (404030 <task_imu+0x1c8>)
  403e96:	4798      	blx	r3
		} else {
		printf("[DADO] [i2c] %x:%x", MPU6050_RA_WHO_AM_I, bufferRX[0]);
		printf("%x", bufferRX[0]);
	}
	
	if (bufferRX[0] == 104){
  403e98:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
  403e9c:	2b68      	cmp	r3, #104	; 0x68
  403e9e:	d030      	beq.n	403f02 <task_imu+0x9a>
		printf("sucesso");
	}

	// Set Clock source
	bufferTX[0] = MPU6050_CLOCK_PLL_XGYRO;
  403ea0:	2301      	movs	r3, #1
  403ea2:	aa34      	add	r2, sp, #208	; 0xd0
  403ea4:	f802 3d8c 	strb.w	r3, [r2, #-140]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_PWR_MGMT_1, bufferTX, 1);
  403ea8:	216b      	movs	r1, #107	; 0x6b
  403eaa:	2068      	movs	r0, #104	; 0x68
  403eac:	4c61      	ldr	r4, [pc, #388]	; (404034 <task_imu+0x1cc>)
  403eae:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  403eb0:	bb58      	cbnz	r0, 403f0a <task_imu+0xa2>
	printf("[ERRO] [i2c] [write] \n");

	// Aceletromtro em 2G
	bufferTX[0] = MPU6050_ACCEL_FS_2 << MPU6050_ACONFIG_AFS_SEL_BIT;
  403eb2:	aa34      	add	r2, sp, #208	; 0xd0
  403eb4:	2300      	movs	r3, #0
  403eb6:	f802 3d8c 	strb.w	r3, [r2, #-140]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_CONFIG, bufferTX, 1);
  403eba:	2301      	movs	r3, #1
  403ebc:	211c      	movs	r1, #28
  403ebe:	2068      	movs	r0, #104	; 0x68
  403ec0:	4c5c      	ldr	r4, [pc, #368]	; (404034 <task_imu+0x1cc>)
  403ec2:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  403ec4:	bb28      	cbnz	r0, 403f12 <task_imu+0xaa>
	printf("[ERRO] [i2c] [write] \n");

	// Configura range giroscopio para operar com 250 ?/s
	bufferTX[0] = 0x00; // 250 ?/s
  403ec6:	aa34      	add	r2, sp, #208	; 0xd0
  403ec8:	2300      	movs	r3, #0
  403eca:	f802 3d8c 	strb.w	r3, [r2, #-140]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_CONFIG, bufferTX, 1);
  403ece:	2301      	movs	r3, #1
  403ed0:	211b      	movs	r1, #27
  403ed2:	2068      	movs	r0, #104	; 0x68
  403ed4:	4c57      	ldr	r4, [pc, #348]	; (404034 <task_imu+0x1cc>)
  403ed6:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  403ed8:	b9f8      	cbnz	r0, 403f1a <task_imu+0xb2>
	float valor_anterior_yaw = 0.0;
	float roll, pitch, yaw;
	int diracao;
	while(1) {
		// Le valor do acc X High e Low
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, &raw_acc_xHigh, 1);
  403eda:	f04f 0901 	mov.w	r9, #1
		raw_acc_y = (raw_acc_yHigh << 8) | (raw_acc_yLow << 0);
		raw_acc_z = (raw_acc_zHigh << 8) | (raw_acc_zLow << 0);


		// Dados em escala real
		proc_acc_x = (float)raw_acc_x/16384;
  403ede:	ed9f ca56 	vldr	s24, [pc, #344]	; 404038 <task_imu+0x1d0>
		FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, dT);

		// dados em pitch roll e yaw
		const FusionEuler euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));

		printf("Roll %0.1f, Pitch %0.1f, Yaw %0.1f\n", euler.angle.roll, euler.angle.pitch, euler.angle.yaw);
  403ee2:	ed9f ab49 	vldr	d10, [pc, #292]	; 404008 <task_imu+0x1a0>
  403ee6:	ed9f 9b4a 	vldr	d9, [pc, #296]	; 404010 <task_imu+0x1a8>
  403eea:	e0ce      	b.n	40408a <task_imu+0x222>
		printf("[DADO] [i2c] %x:%x", MPU6050_RA_WHO_AM_I, bufferRX[0]);
  403eec:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
  403ef0:	2175      	movs	r1, #117	; 0x75
  403ef2:	4852      	ldr	r0, [pc, #328]	; (40403c <task_imu+0x1d4>)
  403ef4:	4c4e      	ldr	r4, [pc, #312]	; (404030 <task_imu+0x1c8>)
  403ef6:	47a0      	blx	r4
		printf("%x", bufferRX[0]);
  403ef8:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
  403efc:	4850      	ldr	r0, [pc, #320]	; (404040 <task_imu+0x1d8>)
  403efe:	47a0      	blx	r4
  403f00:	e7ca      	b.n	403e98 <task_imu+0x30>
		printf("sucesso");
  403f02:	4850      	ldr	r0, [pc, #320]	; (404044 <task_imu+0x1dc>)
  403f04:	4b4a      	ldr	r3, [pc, #296]	; (404030 <task_imu+0x1c8>)
  403f06:	4798      	blx	r3
  403f08:	e7ca      	b.n	403ea0 <task_imu+0x38>
	printf("[ERRO] [i2c] [write] \n");
  403f0a:	484f      	ldr	r0, [pc, #316]	; (404048 <task_imu+0x1e0>)
  403f0c:	4b48      	ldr	r3, [pc, #288]	; (404030 <task_imu+0x1c8>)
  403f0e:	4798      	blx	r3
  403f10:	e7cf      	b.n	403eb2 <task_imu+0x4a>
	printf("[ERRO] [i2c] [write] \n");
  403f12:	484d      	ldr	r0, [pc, #308]	; (404048 <task_imu+0x1e0>)
  403f14:	4b46      	ldr	r3, [pc, #280]	; (404030 <task_imu+0x1c8>)
  403f16:	4798      	blx	r3
  403f18:	e7d5      	b.n	403ec6 <task_imu+0x5e>
	printf("[ERRO] [i2c] [write] \n");
  403f1a:	484b      	ldr	r0, [pc, #300]	; (404048 <task_imu+0x1e0>)
  403f1c:	4b44      	ldr	r3, [pc, #272]	; (404030 <task_imu+0x1c8>)
  403f1e:	4798      	blx	r3
  403f20:	e7db      	b.n	403eda <task_imu+0x72>
			printf("Em Q!");
  403f22:	484a      	ldr	r0, [pc, #296]	; (40404c <task_imu+0x1e4>)
  403f24:	4b42      	ldr	r3, [pc, #264]	; (404030 <task_imu+0x1c8>)
  403f26:	4798      	blx	r3
			xSemaphoreGive(xSemaphoreHouseDown);
  403f28:	2300      	movs	r3, #0
  403f2a:	461a      	mov	r2, r3
  403f2c:	4619      	mov	r1, r3
  403f2e:	4848      	ldr	r0, [pc, #288]	; (404050 <task_imu+0x1e8>)
  403f30:	6800      	ldr	r0, [r0, #0]
  403f32:	4c48      	ldr	r4, [pc, #288]	; (404054 <task_imu+0x1ec>)
  403f34:	47a0      	blx	r4
  403f36:	e177      	b.n	404228 <task_imu+0x3c0>
    return asinf(value);
  403f38:	ee17 0a90 	vmov	r0, s15
  403f3c:	4b46      	ldr	r3, [pc, #280]	; (404058 <task_imu+0x1f0>)
  403f3e:	4798      	blx	r3
    return radians * (180.0f / (float) M_PI);
  403f40:	ed9f ea46 	vldr	s28, [pc, #280]	; 40405c <task_imu+0x1f4>
  403f44:	ee07 0a90 	vmov	s15, r0
  403f48:	ee67 da8e 	vmul.f32	s27, s15, s28
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
    FusionEuler euler;
    euler.angle.roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x));
    euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
    euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z));
  403f4c:	ee2b 7a0b 	vmul.f32	s14, s22, s22
  403f50:	ee6b 7a2b 	vmul.f32	s15, s22, s23
  403f54:	ee28 8a88 	vmul.f32	s16, s17, s16
  403f58:	ee3c 7ac7 	vsub.f32	s14, s25, s14
  403f5c:	ee17 1a10 	vmov	r1, s14
  403f60:	ee77 7a88 	vadd.f32	s15, s15, s16
  403f64:	ee17 0a90 	vmov	r0, s15
  403f68:	4b3d      	ldr	r3, [pc, #244]	; (404060 <task_imu+0x1f8>)
  403f6a:	4798      	blx	r3
    return radians * (180.0f / (float) M_PI);
  403f6c:	ee07 0a90 	vmov	s15, r0
  403f70:	ee27 ea8e 	vmul.f32	s28, s15, s28
		printf("Roll %0.1f, Pitch %0.1f, Yaw %0.1f\n", euler.angle.roll, euler.angle.pitch, euler.angle.yaw);
  403f74:	4c3b      	ldr	r4, [pc, #236]	; (404064 <task_imu+0x1fc>)
  403f76:	ee1d 0a10 	vmov	r0, s26
  403f7a:	47a0      	blx	r4
  403f7c:	4606      	mov	r6, r0
  403f7e:	460f      	mov	r7, r1
  403f80:	ee1e 0a10 	vmov	r0, s28
  403f84:	47a0      	blx	r4
  403f86:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403f8a:	ee1d 0a90 	vmov	r0, s27
  403f8e:	47a0      	blx	r4
  403f90:	e9cd 0100 	strd	r0, r1, [sp]
  403f94:	4632      	mov	r2, r6
  403f96:	463b      	mov	r3, r7
  403f98:	4833      	ldr	r0, [pc, #204]	; (404068 <task_imu+0x200>)
  403f9a:	4925      	ldr	r1, [pc, #148]	; (404030 <task_imu+0x1c8>)
  403f9c:	4788      	blx	r1
		roll = euler.angle.roll;
		pitch = euler.angle.pitch;
		yaw = euler.angle.yaw;
		int direcao;
		
		if ((yaw - sqrt(pow(valor_anterior_yaw, 2)) > 30) && pitch < 15){
  403f9e:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
  403fa2:	eeb4 eae7 	vcmpe.f32	s28, s15
  403fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403faa:	dd10      	ble.n	403fce <task_imu+0x166>
  403fac:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
  403fb0:	eef4 dae7 	vcmpe.f32	s27, s15
  403fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403fb8:	d509      	bpl.n	403fce <task_imu+0x166>
			direcao = ESQUERDA;
  403fba:	2200      	movs	r2, #0
  403fbc:	a934      	add	r1, sp, #208	; 0xd0
  403fbe:	f841 2db4 	str.w	r2, [r1, #-180]!
			xQueueSend(xQueueLado, &direcao, 0);
  403fc2:	4613      	mov	r3, r2
  403fc4:	4829      	ldr	r0, [pc, #164]	; (40406c <task_imu+0x204>)
  403fc6:	6800      	ldr	r0, [r0, #0]
  403fc8:	4c22      	ldr	r4, [pc, #136]	; (404054 <task_imu+0x1ec>)
  403fca:	47a0      	blx	r4
  403fcc:	e05a      	b.n	404084 <task_imu+0x21c>
		}
		else if (yaw < -25 && pitch < 15){
  403fce:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
  403fd2:	eeb4 eae7 	vcmpe.f32	s28, s15
  403fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403fda:	f140 81a6 	bpl.w	40432a <task_imu+0x4c2>
  403fde:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
  403fe2:	eef4 dae7 	vcmpe.f32	s27, s15
  403fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403fea:	f140 819e 	bpl.w	40432a <task_imu+0x4c2>
			direcao = DIREITA;
  403fee:	a934      	add	r1, sp, #208	; 0xd0
  403ff0:	2302      	movs	r3, #2
  403ff2:	f841 3db4 	str.w	r3, [r1, #-180]!
			xQueueSend(xQueueLado, &direcao, 0);
  403ff6:	2300      	movs	r3, #0
  403ff8:	461a      	mov	r2, r3
  403ffa:	481c      	ldr	r0, [pc, #112]	; (40406c <task_imu+0x204>)
  403ffc:	6800      	ldr	r0, [r0, #0]
  403ffe:	4c15      	ldr	r4, [pc, #84]	; (404054 <task_imu+0x1ec>)
  404000:	47a0      	blx	r4
  404002:	e03f      	b.n	404084 <task_imu+0x21c>
  404004:	f3af 8000 	nop.w
  404008:	00000000 	.word	0x00000000
  40400c:	c0568000 	.word	0xc0568000
  404010:	00000000 	.word	0x00000000
  404014:	40568000 	.word	0x40568000
  404018:	00403e0d 	.word	0x00403e0d
  40401c:	00402449 	.word	0x00402449
  404020:	40060000 	.word	0x40060000
  404024:	00400529 	.word	0x00400529
  404028:	00403de1 	.word	0x00403de1
  40402c:	0040a254 	.word	0x0040a254
  404030:	00406fe9 	.word	0x00406fe9
  404034:	00403db5 	.word	0x00403db5
  404038:	38800000 	.word	0x38800000
  40403c:	0040a26c 	.word	0x0040a26c
  404040:	0040a27c 	.word	0x0040a27c
  404044:	0040a280 	.word	0x0040a280
  404048:	0040a288 	.word	0x0040a288
  40404c:	0040a2a0 	.word	0x0040a2a0
  404050:	2040c640 	.word	0x2040c640
  404054:	00400bf9 	.word	0x00400bf9
  404058:	00404999 	.word	0x00404999
  40405c:	42652ee0 	.word	0x42652ee0
  404060:	00404a39 	.word	0x00404a39
  404064:	004062c5 	.word	0x004062c5
  404068:	0040a2a8 	.word	0x0040a2a8
  40406c:	2040c644 	.word	0x2040c644
		else if (roll < -25 & pitch > 30){
			direcao = FRENTE;
			xQueueSend(xQueueLado, &direcao, 0);
		}
		else {
			direcao = 4;
  404070:	a934      	add	r1, sp, #208	; 0xd0
  404072:	2304      	movs	r3, #4
  404074:	f841 3db4 	str.w	r3, [r1, #-180]!
			xQueueSend(xQueueLado ,&direcao, 0);
  404078:	2300      	movs	r3, #0
  40407a:	461a      	mov	r2, r3
  40407c:	48ba      	ldr	r0, [pc, #744]	; (404368 <task_imu+0x500>)
  40407e:	6800      	ldr	r0, [r0, #0]
  404080:	4cba      	ldr	r4, [pc, #744]	; (40436c <task_imu+0x504>)
  404082:	47a0      	blx	r4
		}
		// uma amostra a cada 1ms
		vTaskDelay(10);
  404084:	200a      	movs	r0, #10
  404086:	4bba      	ldr	r3, [pc, #744]	; (404370 <task_imu+0x508>)
  404088:	4798      	blx	r3
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, &raw_acc_xHigh, 1);
  40408a:	464b      	mov	r3, r9
  40408c:	f10d 0243 	add.w	r2, sp, #67	; 0x43
  404090:	213b      	movs	r1, #59	; 0x3b
  404092:	2068      	movs	r0, #104	; 0x68
  404094:	4cb7      	ldr	r4, [pc, #732]	; (404374 <task_imu+0x50c>)
  404096:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, &raw_acc_xLow,  1);
  404098:	464b      	mov	r3, r9
  40409a:	aa10      	add	r2, sp, #64	; 0x40
  40409c:	213c      	movs	r1, #60	; 0x3c
  40409e:	2068      	movs	r0, #104	; 0x68
  4040a0:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, &raw_acc_yHigh, 1);
  4040a2:	464b      	mov	r3, r9
  4040a4:	f10d 0242 	add.w	r2, sp, #66	; 0x42
  4040a8:	213d      	movs	r1, #61	; 0x3d
  4040aa:	2068      	movs	r0, #104	; 0x68
  4040ac:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_yLow,  1);
  4040ae:	464b      	mov	r3, r9
  4040b0:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
  4040b4:	2140      	movs	r1, #64	; 0x40
  4040b6:	2068      	movs	r0, #104	; 0x68
  4040b8:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, &raw_acc_zHigh, 1);
  4040ba:	464b      	mov	r3, r9
  4040bc:	f10d 0241 	add.w	r2, sp, #65	; 0x41
  4040c0:	213f      	movs	r1, #63	; 0x3f
  4040c2:	2068      	movs	r0, #104	; 0x68
  4040c4:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_zLow,  1);
  4040c6:	464b      	mov	r3, r9
  4040c8:	f10d 023e 	add.w	r2, sp, #62	; 0x3e
  4040cc:	2140      	movs	r1, #64	; 0x40
  4040ce:	2068      	movs	r0, #104	; 0x68
  4040d0:	47a0      	blx	r4
		raw_gyr_x = (raw_gyr_xHigh << 8) | (raw_gyr_xLow << 0);
  4040d2:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
  4040d6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
  4040da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4040de:	b21f      	sxth	r7, r3
		raw_gyr_y = (raw_gyr_yHigh << 8) | (raw_gyr_yLow << 0);
  4040e0:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
  4040e4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
  4040e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4040ec:	b21e      	sxth	r6, r3
		raw_gyr_z = (raw_gyr_zHigh << 8) | (raw_gyr_zLow << 0);
  4040ee:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
  4040f2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
  4040f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4040fa:	b21d      	sxth	r5, r3
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_H, &raw_gyr_xHigh, 1);
  4040fc:	464b      	mov	r3, r9
  4040fe:	f10d 023d 	add.w	r2, sp, #61	; 0x3d
  404102:	2143      	movs	r1, #67	; 0x43
  404104:	2068      	movs	r0, #104	; 0x68
  404106:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_L, &raw_gyr_xLow,  1);
  404108:	464b      	mov	r3, r9
  40410a:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
  40410e:	2144      	movs	r1, #68	; 0x44
  404110:	2068      	movs	r0, #104	; 0x68
  404112:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_YOUT_H, &raw_gyr_yHigh, 1);
  404114:	464b      	mov	r3, r9
  404116:	aa0f      	add	r2, sp, #60	; 0x3c
  404118:	2145      	movs	r1, #69	; 0x45
  40411a:	2068      	movs	r0, #104	; 0x68
  40411c:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_yLow,  1);
  40411e:	464b      	mov	r3, r9
  404120:	f10d 0239 	add.w	r2, sp, #57	; 0x39
  404124:	2148      	movs	r1, #72	; 0x48
  404126:	2068      	movs	r0, #104	; 0x68
  404128:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, &raw_gyr_zHigh, 1);
  40412a:	464b      	mov	r3, r9
  40412c:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
  404130:	2147      	movs	r1, #71	; 0x47
  404132:	2068      	movs	r0, #104	; 0x68
  404134:	47a0      	blx	r4
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_zLow,  1);
  404136:	464b      	mov	r3, r9
  404138:	aa0e      	add	r2, sp, #56	; 0x38
  40413a:	2148      	movs	r1, #72	; 0x48
  40413c:	2068      	movs	r0, #104	; 0x68
  40413e:	47a0      	blx	r4
		raw_acc_x = (raw_acc_xHigh << 8) | (raw_acc_xLow << 0);
  404140:	f89d e043 	ldrb.w	lr, [sp, #67]	; 0x43
  404144:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		raw_acc_y = (raw_acc_yHigh << 8) | (raw_acc_yLow << 0);
  404148:	f89d 4042 	ldrb.w	r4, [sp, #66]	; 0x42
  40414c:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
		raw_acc_z = (raw_acc_zHigh << 8) | (raw_acc_zLow << 0);
  404150:	f89d 0041 	ldrb.w	r0, [sp, #65]	; 0x41
  404154:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
		raw_acc_x = (raw_acc_xHigh << 8) | (raw_acc_xLow << 0);
  404158:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
		proc_acc_x = (float)raw_acc_x/16384;
  40415c:	b209      	sxth	r1, r1
  40415e:	ee0b 1a10 	vmov	s22, r1
  404162:	eeb8 bacb 	vcvt.f32.s32	s22, s22
  404166:	ee2b ba0c 	vmul.f32	s22, s22, s24
		raw_acc_y = (raw_acc_yHigh << 8) | (raw_acc_yLow << 0);
  40416a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
		proc_acc_y = (float)raw_acc_y/16384;
  40416e:	b212      	sxth	r2, r2
  404170:	ee08 2a90 	vmov	s17, r2
  404174:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  404178:	ee68 8a8c 	vmul.f32	s17, s17, s24
		raw_acc_z = (raw_acc_zHigh << 8) | (raw_acc_zLow << 0);
  40417c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		proc_acc_z = (float)raw_acc_z/16384;
  404180:	b21b      	sxth	r3, r3
  404182:	ee08 3a10 	vmov	s16, r3
  404186:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  40418a:	ee28 8a0c 	vmul.f32	s16, s16, s24
		proc_gyr_x = (float)raw_gyr_x/131;
  40418e:	ee07 7a90 	vmov	s15, r7
  404192:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  404196:	eddf 7a78 	vldr	s15, [pc, #480]	; 404378 <task_imu+0x510>
  40419a:	eec7 ca27 	vdiv.f32	s25, s14, s15
		proc_gyr_y = (float)raw_gyr_y/131;
  40419e:	ee07 6a10 	vmov	s14, r6
  4041a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  4041a6:	ee87 da27 	vdiv.f32	s26, s14, s15
		proc_gyr_z = (float)raw_gyr_z/131;
  4041aa:	ee07 5a10 	vmov	s14, r5
  4041ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  4041b2:	eec7 ba27 	vdiv.f32	s23, s14, s15
		if(sqrt(pow(proc_acc_x, 2) + pow(proc_acc_y, 2) + pow(proc_acc_z, 2)) < 0.1){
  4041b6:	4c71      	ldr	r4, [pc, #452]	; (40437c <task_imu+0x514>)
  4041b8:	ee1b 0a10 	vmov	r0, s22
  4041bc:	47a0      	blx	r4
  4041be:	4682      	mov	sl, r0
  4041c0:	468b      	mov	fp, r1
  4041c2:	ee18 0a90 	vmov	r0, s17
  4041c6:	47a0      	blx	r4
  4041c8:	4606      	mov	r6, r0
  4041ca:	460f      	mov	r7, r1
  4041cc:	ee18 0a10 	vmov	r0, s16
  4041d0:	47a0      	blx	r4
  4041d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4041d6:	4c6a      	ldr	r4, [pc, #424]	; (404380 <task_imu+0x518>)
  4041d8:	4632      	mov	r2, r6
  4041da:	463b      	mov	r3, r7
  4041dc:	4630      	mov	r0, r6
  4041de:	4639      	mov	r1, r7
  4041e0:	47a0      	blx	r4
  4041e2:	4606      	mov	r6, r0
  4041e4:	460f      	mov	r7, r1
  4041e6:	4652      	mov	r2, sl
  4041e8:	465b      	mov	r3, fp
  4041ea:	4650      	mov	r0, sl
  4041ec:	4659      	mov	r1, fp
  4041ee:	47a0      	blx	r4
  4041f0:	4d64      	ldr	r5, [pc, #400]	; (404384 <task_imu+0x51c>)
  4041f2:	4602      	mov	r2, r0
  4041f4:	460b      	mov	r3, r1
  4041f6:	4630      	mov	r0, r6
  4041f8:	4639      	mov	r1, r7
  4041fa:	47a8      	blx	r5
  4041fc:	4606      	mov	r6, r0
  4041fe:	460f      	mov	r7, r1
  404200:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404204:	4602      	mov	r2, r0
  404206:	460b      	mov	r3, r1
  404208:	47a0      	blx	r4
  40420a:	4602      	mov	r2, r0
  40420c:	460b      	mov	r3, r1
  40420e:	4630      	mov	r0, r6
  404210:	4639      	mov	r1, r7
  404212:	47a8      	blx	r5
  404214:	4b5c      	ldr	r3, [pc, #368]	; (404388 <task_imu+0x520>)
  404216:	4798      	blx	r3
  404218:	a351      	add	r3, pc, #324	; (adr r3, 404360 <task_imu+0x4f8>)
  40421a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40421e:	4c5b      	ldr	r4, [pc, #364]	; (40438c <task_imu+0x524>)
  404220:	47a0      	blx	r4
  404222:	2800      	cmp	r0, #0
  404224:	f47f ae7d 	bne.w	403f22 <task_imu+0xba>
		const FusionVector gyroscope = {proc_gyr_x, proc_gyr_y, proc_gyr_z};
  404228:	edcd ca08 	vstr	s25, [sp, #32]
  40422c:	ed8d da09 	vstr	s26, [sp, #36]	; 0x24
  404230:	edcd ba0a 	vstr	s23, [sp, #40]	; 0x28
		const FusionVector accelerometer = {proc_acc_x, proc_acc_y, proc_acc_z};
  404234:	ed8d ba0b 	vstr	s22, [sp, #44]	; 0x2c
  404238:	edcd 8a0c 	vstr	s17, [sp, #48]	; 0x30
  40423c:	ed8d 8a0d 	vstr	s16, [sp, #52]	; 0x34
		FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, dT);
  404240:	4b53      	ldr	r3, [pc, #332]	; (404390 <task_imu+0x528>)
  404242:	9303      	str	r3, [sp, #12]
  404244:	ab0b      	add	r3, sp, #44	; 0x2c
  404246:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  40424a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  40424e:	ab08      	add	r3, sp, #32
  404250:	cb0e      	ldmia	r3, {r1, r2, r3}
  404252:	a817      	add	r0, sp, #92	; 0x5c
  404254:	4c4f      	ldr	r4, [pc, #316]	; (404394 <task_imu+0x52c>)
  404256:	47a0      	blx	r4
		const FusionEuler euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
  404258:	a917      	add	r1, sp, #92	; 0x5c
  40425a:	a830      	add	r0, sp, #192	; 0xc0
  40425c:	4b4e      	ldr	r3, [pc, #312]	; (404398 <task_imu+0x530>)
  40425e:	4798      	blx	r3
  404260:	eddd ba30 	vldr	s23, [sp, #192]	; 0xc0
  404264:	ed9d 8a31 	vldr	s16, [sp, #196]	; 0xc4
  404268:	eddd 8a32 	vldr	s17, [sp, #200]	; 0xc8
  40426c:	ed9d ba33 	vldr	s22, [sp, #204]	; 0xcc
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
  404270:	ee68 7aa8 	vmul.f32	s15, s17, s17
  404274:	eef6 ca00 	vmov.f32	s25, #96	; 0x3f000000  0.5
  404278:	ee7c cae7 	vsub.f32	s25, s25, s15
    euler.angle.roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x));
  40427c:	ee68 6a08 	vmul.f32	s13, s16, s16
  404280:	ee2b 7a88 	vmul.f32	s14, s23, s16
  404284:	ee68 7a8b 	vmul.f32	s15, s17, s22
  404288:	ee7c 6ae6 	vsub.f32	s13, s25, s13
  40428c:	ee16 1a90 	vmov	r1, s13
  404290:	ee77 7a27 	vadd.f32	s15, s14, s15
  404294:	ee17 0a90 	vmov	r0, s15
  404298:	4b40      	ldr	r3, [pc, #256]	; (40439c <task_imu+0x534>)
  40429a:	4798      	blx	r3
    return radians * (180.0f / (float) M_PI);
  40429c:	ed9f da40 	vldr	s26, [pc, #256]	; 4043a0 <task_imu+0x538>
  4042a0:	ee07 0a90 	vmov	s15, r0
  4042a4:	ee27 da8d 	vmul.f32	s26, s15, s26
    euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
  4042a8:	ee28 7aab 	vmul.f32	s14, s17, s23
  4042ac:	ee6b 7a08 	vmul.f32	s15, s22, s16
  4042b0:	ee77 7a67 	vsub.f32	s15, s14, s15
  4042b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
    if (value <= -1.0f) {
  4042b8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  4042bc:	eef4 7ac7 	vcmpe.f32	s15, s14
  4042c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4042c4:	d974      	bls.n	4043b0 <task_imu+0x548>
    if (value >= 1.0f) {
  4042c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  4042ca:	eef4 7ac7 	vcmpe.f32	s15, s14
  4042ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4042d2:	f6ff ae31 	blt.w	403f38 <task_imu+0xd0>
    euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z));
  4042d6:	ee2b 7a0b 	vmul.f32	s14, s22, s22
  4042da:	ee6b 7a2b 	vmul.f32	s15, s22, s23
  4042de:	ee28 8a88 	vmul.f32	s16, s17, s16
  4042e2:	ee3c 7ac7 	vsub.f32	s14, s25, s14
  4042e6:	ee17 1a10 	vmov	r1, s14
  4042ea:	ee77 7a88 	vadd.f32	s15, s15, s16
  4042ee:	ee17 0a90 	vmov	r0, s15
  4042f2:	4b2a      	ldr	r3, [pc, #168]	; (40439c <task_imu+0x534>)
  4042f4:	4798      	blx	r3
  4042f6:	ee08 0a10 	vmov	s16, r0
		printf("Roll %0.1f, Pitch %0.1f, Yaw %0.1f\n", euler.angle.roll, euler.angle.pitch, euler.angle.yaw);
  4042fa:	4c20      	ldr	r4, [pc, #128]	; (40437c <task_imu+0x514>)
  4042fc:	ee1d 0a10 	vmov	r0, s26
  404300:	47a0      	blx	r4
  404302:	4606      	mov	r6, r0
  404304:	460f      	mov	r7, r1
  404306:	eddf 7a26 	vldr	s15, [pc, #152]	; 4043a0 <task_imu+0x538>
  40430a:	ee68 7a27 	vmul.f32	s15, s16, s15
  40430e:	ee17 0a90 	vmov	r0, s15
  404312:	47a0      	blx	r4
  404314:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404318:	ed8d 9b00 	vstr	d9, [sp]
  40431c:	4632      	mov	r2, r6
  40431e:	463b      	mov	r3, r7
  404320:	4820      	ldr	r0, [pc, #128]	; (4043a4 <task_imu+0x53c>)
  404322:	4921      	ldr	r1, [pc, #132]	; (4043a8 <task_imu+0x540>)
  404324:	4788      	blx	r1
    return radians * (180.0f / (float) M_PI);
  404326:	eddf da21 	vldr	s27, [pc, #132]	; 4043ac <task_imu+0x544>
		else if (roll < -25 & pitch > 30){
  40432a:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
  40432e:	eeb4 da67 	vcmp.f32	s26, s15
  404332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  404336:	f57f ae9b 	bpl.w	404070 <task_imu+0x208>
  40433a:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
  40433e:	eef4 da67 	vcmp.f32	s27, s15
  404342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  404346:	f77f ae93 	ble.w	404070 <task_imu+0x208>
			direcao = FRENTE;
  40434a:	a934      	add	r1, sp, #208	; 0xd0
  40434c:	f841 9db4 	str.w	r9, [r1, #-180]!
			xQueueSend(xQueueLado, &direcao, 0);
  404350:	2300      	movs	r3, #0
  404352:	461a      	mov	r2, r3
  404354:	4804      	ldr	r0, [pc, #16]	; (404368 <task_imu+0x500>)
  404356:	6800      	ldr	r0, [r0, #0]
  404358:	4c04      	ldr	r4, [pc, #16]	; (40436c <task_imu+0x504>)
  40435a:	47a0      	blx	r4
  40435c:	e692      	b.n	404084 <task_imu+0x21c>
  40435e:	bf00      	nop
  404360:	9999999a 	.word	0x9999999a
  404364:	3fb99999 	.word	0x3fb99999
  404368:	2040c644 	.word	0x2040c644
  40436c:	00400bf9 	.word	0x00400bf9
  404370:	00401971 	.word	0x00401971
  404374:	00403de1 	.word	0x00403de1
  404378:	43030000 	.word	0x43030000
  40437c:	004062c5 	.word	0x004062c5
  404380:	0040636d 	.word	0x0040636d
  404384:	00406009 	.word	0x00406009
  404388:	004048dd 	.word	0x004048dd
  40438c:	00406851 	.word	0x00406851
  404390:	3dcccccd 	.word	0x3dcccccd
  404394:	00402a81 	.word	0x00402a81
  404398:	00402475 	.word	0x00402475
  40439c:	00404a39 	.word	0x00404a39
  4043a0:	42652ee0 	.word	0x42652ee0
  4043a4:	0040a2a8 	.word	0x0040a2a8
  4043a8:	00406fe9 	.word	0x00406fe9
  4043ac:	42b40000 	.word	0x42b40000
    euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z));
  4043b0:	ee2b 7a0b 	vmul.f32	s14, s22, s22
  4043b4:	ee6b 7a2b 	vmul.f32	s15, s22, s23
  4043b8:	ee28 8a88 	vmul.f32	s16, s17, s16
  4043bc:	ee3c 7ac7 	vsub.f32	s14, s25, s14
  4043c0:	ee17 1a10 	vmov	r1, s14
  4043c4:	ee77 7a88 	vadd.f32	s15, s15, s16
  4043c8:	ee17 0a90 	vmov	r0, s15
  4043cc:	4b16      	ldr	r3, [pc, #88]	; (404428 <task_imu+0x5c0>)
  4043ce:	4798      	blx	r3
    return radians * (180.0f / (float) M_PI);
  4043d0:	ed9f 8a16 	vldr	s16, [pc, #88]	; 40442c <task_imu+0x5c4>
  4043d4:	ee07 0a90 	vmov	s15, r0
  4043d8:	ee27 8a88 	vmul.f32	s16, s15, s16
		printf("Roll %0.1f, Pitch %0.1f, Yaw %0.1f\n", euler.angle.roll, euler.angle.pitch, euler.angle.yaw);
  4043dc:	4c14      	ldr	r4, [pc, #80]	; (404430 <task_imu+0x5c8>)
  4043de:	ee1d 0a10 	vmov	r0, s26
  4043e2:	47a0      	blx	r4
  4043e4:	4606      	mov	r6, r0
  4043e6:	460f      	mov	r7, r1
  4043e8:	ee18 0a10 	vmov	r0, s16
  4043ec:	47a0      	blx	r4
  4043ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4043f2:	ed8d ab00 	vstr	d10, [sp]
  4043f6:	4632      	mov	r2, r6
  4043f8:	463b      	mov	r3, r7
  4043fa:	480e      	ldr	r0, [pc, #56]	; (404434 <task_imu+0x5cc>)
  4043fc:	490e      	ldr	r1, [pc, #56]	; (404438 <task_imu+0x5d0>)
  4043fe:	4788      	blx	r1
		if ((yaw - sqrt(pow(valor_anterior_yaw, 2)) > 30) && pitch < 15){
  404400:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
  404404:	eeb4 8ae7 	vcmpe.f32	s16, s15
  404408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40440c:	f73f add5 	bgt.w	403fba <task_imu+0x152>
		else if (yaw < -25 && pitch < 15){
  404410:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
  404414:	eeb4 8ae7 	vcmpe.f32	s16, s15
  404418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40441c:	f53f ade7 	bmi.w	403fee <task_imu+0x186>
  404420:	eddf da06 	vldr	s27, [pc, #24]	; 40443c <task_imu+0x5d4>
  404424:	e781      	b.n	40432a <task_imu+0x4c2>
  404426:	bf00      	nop
  404428:	00404a39 	.word	0x00404a39
  40442c:	42652ee0 	.word	0x42652ee0
  404430:	004062c5 	.word	0x004062c5
  404434:	0040a2a8 	.word	0x0040a2a8
  404438:	00406fe9 	.word	0x00406fe9
  40443c:	c2b40000 	.word	0xc2b40000

00404440 <led_init>:
void led_init(void){
  404440:	b570      	push	{r4, r5, r6, lr}
  404442:	b082      	sub	sp, #8
	pmc_enable_periph_clk(ID_PIOA);
  404444:	200a      	movs	r0, #10
  404446:	4c13      	ldr	r4, [pc, #76]	; (404494 <led_init+0x54>)
  404448:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOC);
  40444a:	200c      	movs	r0, #12
  40444c:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);
  40444e:	200b      	movs	r0, #11
  404450:	47a0      	blx	r4
	pio_configure(LED_PIO, PIO_OUTPUT_0, LED_IDX_MASK, PIO_DEFAULT);
  404452:	4e11      	ldr	r6, [pc, #68]	; (404498 <led_init+0x58>)
  404454:	2300      	movs	r3, #0
  404456:	f44f 7280 	mov.w	r2, #256	; 0x100
  40445a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40445e:	4630      	mov	r0, r6
  404460:	4c0e      	ldr	r4, [pc, #56]	; (40449c <led_init+0x5c>)
  404462:	47a0      	blx	r4
	pio_set_output(LED1_PIO, LED1_PIO_IDX_MASK, 1, 0, 0);
  404464:	2400      	movs	r4, #0
  404466:	9400      	str	r4, [sp, #0]
  404468:	4623      	mov	r3, r4
  40446a:	2201      	movs	r2, #1
  40446c:	4611      	mov	r1, r2
  40446e:	480c      	ldr	r0, [pc, #48]	; (4044a0 <led_init+0x60>)
  404470:	4d0c      	ldr	r5, [pc, #48]	; (4044a4 <led_init+0x64>)
  404472:	47a8      	blx	r5
	pio_set_output(LED2_PIO, LED2_PIO_IDX_MASK, 1, 0, 0);
  404474:	9400      	str	r4, [sp, #0]
  404476:	4623      	mov	r3, r4
  404478:	2201      	movs	r2, #1
  40447a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40447e:	4630      	mov	r0, r6
  404480:	47a8      	blx	r5
	pio_set_output(LED3_PIO, LED3_PIO_IDX_MASK, 1, 0, 0);
  404482:	9400      	str	r4, [sp, #0]
  404484:	4623      	mov	r3, r4
  404486:	2201      	movs	r2, #1
  404488:	2104      	movs	r1, #4
  40448a:	4807      	ldr	r0, [pc, #28]	; (4044a8 <led_init+0x68>)
  40448c:	47a8      	blx	r5
}
  40448e:	b002      	add	sp, #8
  404490:	bd70      	pop	{r4, r5, r6, pc}
  404492:	bf00      	nop
  404494:	00403799 	.word	0x00403799
  404498:	400e1200 	.word	0x400e1200
  40449c:	0040352d 	.word	0x0040352d
  4044a0:	400e0e00 	.word	0x400e0e00
  4044a4:	00403505 	.word	0x00403505
  4044a8:	400e1000 	.word	0x400e1000

004044ac <pisca_led>:
void pisca_led(Pio * pio , const uint32_t idx_mask , int n){
  4044ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (int i = 0 ; i<n; i++){
  4044b0:	f1b2 0900 	subs.w	r9, r2, #0
  4044b4:	dd15      	ble.n	4044e2 <pisca_led+0x36>
  4044b6:	460e      	mov	r6, r1
  4044b8:	4605      	mov	r5, r0
  4044ba:	2400      	movs	r4, #0
		pio_clear(pio, idx_mask);  // Seta pino para 0
  4044bc:	f8df a030 	ldr.w	sl, [pc, #48]	; 4044f0 <pisca_led+0x44>
		delay_ms(100);
  4044c0:	f8df 8030 	ldr.w	r8, [pc, #48]	; 4044f4 <pisca_led+0x48>
  4044c4:	4f08      	ldr	r7, [pc, #32]	; (4044e8 <pisca_led+0x3c>)
		pio_clear(pio, idx_mask);  // Seta pino para 0
  4044c6:	4631      	mov	r1, r6
  4044c8:	4628      	mov	r0, r5
  4044ca:	47d0      	blx	sl
		delay_ms(100);
  4044cc:	4640      	mov	r0, r8
  4044ce:	47b8      	blx	r7
		pio_set(pio, idx_mask);
  4044d0:	4631      	mov	r1, r6
  4044d2:	4628      	mov	r0, r5
  4044d4:	4b05      	ldr	r3, [pc, #20]	; (4044ec <pisca_led+0x40>)
  4044d6:	4798      	blx	r3
		delay_ms(100);
  4044d8:	4640      	mov	r0, r8
  4044da:	47b8      	blx	r7
	for (int i = 0 ; i<n; i++){
  4044dc:	3401      	adds	r4, #1
  4044de:	45a1      	cmp	r9, r4
  4044e0:	d1f1      	bne.n	4044c6 <pisca_led+0x1a>
  4044e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4044e6:	bf00      	nop
  4044e8:	20400001 	.word	0x20400001
  4044ec:	00403435 	.word	0x00403435
  4044f0:	00403439 	.word	0x00403439
  4044f4:	004d2b25 	.word	0x004d2b25

004044f8 <task_house_down>:
static void task_house_down(void *pvParameters) {
  4044f8:	b570      	push	{r4, r5, r6, lr}
	led_init();
  4044fa:	4b0c      	ldr	r3, [pc, #48]	; (40452c <task_house_down+0x34>)
  4044fc:	4798      	blx	r3
		if(xSemaphoreTake(xSemaphoreHouseDown, 1000)){
  4044fe:	4e0c      	ldr	r6, [pc, #48]	; (404530 <task_house_down+0x38>)
  404500:	4d0c      	ldr	r5, [pc, #48]	; (404534 <task_house_down+0x3c>)
			pio_set(LED_PIO, LED_IDX_MASK);
  404502:	4c0d      	ldr	r4, [pc, #52]	; (404538 <task_house_down+0x40>)
  404504:	e004      	b.n	404510 <task_house_down+0x18>
  404506:	f44f 7180 	mov.w	r1, #256	; 0x100
  40450a:	4620      	mov	r0, r4
  40450c:	4b0b      	ldr	r3, [pc, #44]	; (40453c <task_house_down+0x44>)
  40450e:	4798      	blx	r3
		if(xSemaphoreTake(xSemaphoreHouseDown, 1000)){
  404510:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  404514:	6830      	ldr	r0, [r6, #0]
  404516:	47a8      	blx	r5
  404518:	2800      	cmp	r0, #0
  40451a:	d0f4      	beq.n	404506 <task_house_down+0xe>
			pisca_led(LED_PIO, LED_IDX_MASK, n);
  40451c:	220a      	movs	r2, #10
  40451e:	f44f 7180 	mov.w	r1, #256	; 0x100
  404522:	4620      	mov	r0, r4
  404524:	4b06      	ldr	r3, [pc, #24]	; (404540 <task_house_down+0x48>)
  404526:	4798      	blx	r3
  404528:	e7f2      	b.n	404510 <task_house_down+0x18>
  40452a:	bf00      	nop
  40452c:	00404441 	.word	0x00404441
  404530:	2040c640 	.word	0x2040c640
  404534:	00401095 	.word	0x00401095
  404538:	400e1200 	.word	0x400e1200
  40453c:	00403435 	.word	0x00403435
  404540:	004044ad 	.word	0x004044ad

00404544 <apaga_tela>:
void apaga_tela() {
  404544:	b510      	push	{r4, lr}
  404546:	b082      	sub	sp, #8
	gfx_mono_draw_filled_rect(0, 0, 120, 30, GFX_PIXEL_CLR);
  404548:	2000      	movs	r0, #0
  40454a:	9000      	str	r0, [sp, #0]
  40454c:	231e      	movs	r3, #30
  40454e:	2278      	movs	r2, #120	; 0x78
  404550:	4601      	mov	r1, r0
  404552:	4c02      	ldr	r4, [pc, #8]	; (40455c <apaga_tela+0x18>)
  404554:	47a0      	blx	r4
}
  404556:	b002      	add	sp, #8
  404558:	bd10      	pop	{r4, pc}
  40455a:	bf00      	nop
  40455c:	00402d05 	.word	0x00402d05

00404560 <task_orientacao>:
static void task_orientacao(void *pvParameters) {
  404560:	b580      	push	{r7, lr}
  404562:	b082      	sub	sp, #8
	led_init();
  404564:	4b35      	ldr	r3, [pc, #212]	; (40463c <task_orientacao+0xdc>)
  404566:	4798      	blx	r3
	gfx_mono_ssd1306_init();
  404568:	4b35      	ldr	r3, [pc, #212]	; (404640 <task_orientacao+0xe0>)
  40456a:	4798      	blx	r3
				pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  40456c:	4f35      	ldr	r7, [pc, #212]	; (404644 <task_orientacao+0xe4>)
				pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  40456e:	4e36      	ldr	r6, [pc, #216]	; (404648 <task_orientacao+0xe8>)
  404570:	e062      	b.n	404638 <task_orientacao+0xd8>
			if (direcao == FRENTE){
  404572:	9b01      	ldr	r3, [sp, #4]
  404574:	2b01      	cmp	r3, #1
  404576:	d024      	beq.n	4045c2 <task_orientacao+0x62>
			if (direcao == DIREITA){
  404578:	9b01      	ldr	r3, [sp, #4]
  40457a:	2b02      	cmp	r3, #2
  40457c:	d036      	beq.n	4045ec <task_orientacao+0x8c>
			if (direcao == 4){
  40457e:	9b01      	ldr	r3, [sp, #4]
  404580:	2b04      	cmp	r3, #4
  404582:	d04c      	beq.n	40461e <task_orientacao+0xbe>
		if(xQueueReceive(xQueueLado, &(direcao), 0)){
  404584:	4c31      	ldr	r4, [pc, #196]	; (40464c <task_orientacao+0xec>)
  404586:	2200      	movs	r2, #0
  404588:	a901      	add	r1, sp, #4
  40458a:	6828      	ldr	r0, [r5, #0]
  40458c:	47a0      	blx	r4
  40458e:	2800      	cmp	r0, #0
  404590:	d0f9      	beq.n	404586 <task_orientacao+0x26>
			if (direcao == ESQUERDA){
  404592:	9b01      	ldr	r3, [sp, #4]
  404594:	2b00      	cmp	r3, #0
  404596:	d1ec      	bne.n	404572 <task_orientacao+0x12>
				apaga_tela();
  404598:	4b2d      	ldr	r3, [pc, #180]	; (404650 <task_orientacao+0xf0>)
  40459a:	4798      	blx	r3
				gfx_mono_draw_string("esquerda", 0, 0, &sysfont);
  40459c:	4b2d      	ldr	r3, [pc, #180]	; (404654 <task_orientacao+0xf4>)
  40459e:	2200      	movs	r2, #0
  4045a0:	4611      	mov	r1, r2
  4045a2:	482d      	ldr	r0, [pc, #180]	; (404658 <task_orientacao+0xf8>)
  4045a4:	4c2d      	ldr	r4, [pc, #180]	; (40465c <task_orientacao+0xfc>)
  4045a6:	47a0      	blx	r4
				pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  4045a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4045ac:	4630      	mov	r0, r6
  4045ae:	4c2c      	ldr	r4, [pc, #176]	; (404660 <task_orientacao+0x100>)
  4045b0:	47a0      	blx	r4
				pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  4045b2:	2101      	movs	r1, #1
  4045b4:	4638      	mov	r0, r7
  4045b6:	4b2b      	ldr	r3, [pc, #172]	; (404664 <task_orientacao+0x104>)
  4045b8:	4798      	blx	r3
				pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  4045ba:	2104      	movs	r1, #4
  4045bc:	482a      	ldr	r0, [pc, #168]	; (404668 <task_orientacao+0x108>)
  4045be:	47a0      	blx	r4
  4045c0:	e7d7      	b.n	404572 <task_orientacao+0x12>
				apaga_tela();
  4045c2:	4b23      	ldr	r3, [pc, #140]	; (404650 <task_orientacao+0xf0>)
  4045c4:	4798      	blx	r3
				gfx_mono_draw_string("frente", 0, 0, &sysfont);
  4045c6:	4b23      	ldr	r3, [pc, #140]	; (404654 <task_orientacao+0xf4>)
  4045c8:	2200      	movs	r2, #0
  4045ca:	4611      	mov	r1, r2
  4045cc:	4827      	ldr	r0, [pc, #156]	; (40466c <task_orientacao+0x10c>)
  4045ce:	4c23      	ldr	r4, [pc, #140]	; (40465c <task_orientacao+0xfc>)
  4045d0:	47a0      	blx	r4
				pio_clear(LED2_PIO, LED2_PIO_IDX_MASK);
  4045d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4045d6:	4630      	mov	r0, r6
  4045d8:	4b22      	ldr	r3, [pc, #136]	; (404664 <task_orientacao+0x104>)
  4045da:	4798      	blx	r3
				pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  4045dc:	2101      	movs	r1, #1
  4045de:	4638      	mov	r0, r7
  4045e0:	4c1f      	ldr	r4, [pc, #124]	; (404660 <task_orientacao+0x100>)
  4045e2:	47a0      	blx	r4
				pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  4045e4:	2104      	movs	r1, #4
  4045e6:	4820      	ldr	r0, [pc, #128]	; (404668 <task_orientacao+0x108>)
  4045e8:	47a0      	blx	r4
  4045ea:	e7c5      	b.n	404578 <task_orientacao+0x18>
				apaga_tela();
  4045ec:	4b18      	ldr	r3, [pc, #96]	; (404650 <task_orientacao+0xf0>)
  4045ee:	4798      	blx	r3
				printf("direita");
  4045f0:	4c1f      	ldr	r4, [pc, #124]	; (404670 <task_orientacao+0x110>)
  4045f2:	4620      	mov	r0, r4
  4045f4:	4b1f      	ldr	r3, [pc, #124]	; (404674 <task_orientacao+0x114>)
  4045f6:	4798      	blx	r3
				gfx_mono_draw_string("direita", 0, 0, &sysfont);
  4045f8:	4b16      	ldr	r3, [pc, #88]	; (404654 <task_orientacao+0xf4>)
  4045fa:	2200      	movs	r2, #0
  4045fc:	4611      	mov	r1, r2
  4045fe:	4620      	mov	r0, r4
  404600:	4c16      	ldr	r4, [pc, #88]	; (40465c <task_orientacao+0xfc>)
  404602:	47a0      	blx	r4
				pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
  404604:	2104      	movs	r1, #4
  404606:	4818      	ldr	r0, [pc, #96]	; (404668 <task_orientacao+0x108>)
  404608:	4b16      	ldr	r3, [pc, #88]	; (404664 <task_orientacao+0x104>)
  40460a:	4798      	blx	r3
				pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  40460c:	2101      	movs	r1, #1
  40460e:	4638      	mov	r0, r7
  404610:	4c13      	ldr	r4, [pc, #76]	; (404660 <task_orientacao+0x100>)
  404612:	47a0      	blx	r4
				pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  404614:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  404618:	4630      	mov	r0, r6
  40461a:	47a0      	blx	r4
  40461c:	e7af      	b.n	40457e <task_orientacao+0x1e>
				apaga_tela();
  40461e:	4b0c      	ldr	r3, [pc, #48]	; (404650 <task_orientacao+0xf0>)
  404620:	4798      	blx	r3
				pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  404622:	2104      	movs	r1, #4
  404624:	4810      	ldr	r0, [pc, #64]	; (404668 <task_orientacao+0x108>)
  404626:	4c0e      	ldr	r4, [pc, #56]	; (404660 <task_orientacao+0x100>)
  404628:	47a0      	blx	r4
				pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  40462a:	2101      	movs	r1, #1
  40462c:	4638      	mov	r0, r7
  40462e:	47a0      	blx	r4
				pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  404630:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  404634:	4630      	mov	r0, r6
  404636:	47a0      	blx	r4
		if(xQueueReceive(xQueueLado, &(direcao), 0)){
  404638:	4d0f      	ldr	r5, [pc, #60]	; (404678 <task_orientacao+0x118>)
  40463a:	e7a3      	b.n	404584 <task_orientacao+0x24>
  40463c:	00404441 	.word	0x00404441
  404640:	00402e81 	.word	0x00402e81
  404644:	400e0e00 	.word	0x400e0e00
  404648:	400e1200 	.word	0x400e1200
  40464c:	00400efd 	.word	0x00400efd
  404650:	00404545 	.word	0x00404545
  404654:	20400010 	.word	0x20400010
  404658:	0040a2cc 	.word	0x0040a2cc
  40465c:	00402de9 	.word	0x00402de9
  404660:	00403435 	.word	0x00403435
  404664:	00403439 	.word	0x00403439
  404668:	400e1000 	.word	0x400e1000
  40466c:	0040a2d8 	.word	0x0040a2d8
  404670:	0040a2e0 	.word	0x0040a2e0
  404674:	00406fe9 	.word	0x00406fe9
  404678:	2040c644 	.word	0x2040c644

0040467c <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/


int main(void) {
  40467c:	b500      	push	{lr}
  40467e:	b089      	sub	sp, #36	; 0x24
	/* Initialize the SAM system */
	sysclk_init();
  404680:	4b3a      	ldr	r3, [pc, #232]	; (40476c <main+0xf0>)
  404682:	4798      	blx	r3
	board_init();
  404684:	4b3a      	ldr	r3, [pc, #232]	; (404770 <main+0xf4>)
  404686:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  404688:	4d3a      	ldr	r5, [pc, #232]	; (404774 <main+0xf8>)
  40468a:	4b3b      	ldr	r3, [pc, #236]	; (404778 <main+0xfc>)
  40468c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40468e:	4a3b      	ldr	r2, [pc, #236]	; (40477c <main+0x100>)
  404690:	4b3b      	ldr	r3, [pc, #236]	; (404780 <main+0x104>)
  404692:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  404694:	4a3b      	ldr	r2, [pc, #236]	; (404784 <main+0x108>)
  404696:	4b3c      	ldr	r3, [pc, #240]	; (404788 <main+0x10c>)
  404698:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  40469a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40469e:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  4046a0:	23c0      	movs	r3, #192	; 0xc0
  4046a2:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  4046a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4046a8:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  4046aa:	2400      	movs	r4, #0
  4046ac:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4046ae:	9406      	str	r4, [sp, #24]
  4046b0:	200e      	movs	r0, #14
  4046b2:	4b36      	ldr	r3, [pc, #216]	; (40478c <main+0x110>)
  4046b4:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  4046b6:	4a36      	ldr	r2, [pc, #216]	; (404790 <main+0x114>)
  4046b8:	a902      	add	r1, sp, #8
  4046ba:	4628      	mov	r0, r5
  4046bc:	4b35      	ldr	r3, [pc, #212]	; (404794 <main+0x118>)
  4046be:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4046c0:	4628      	mov	r0, r5
  4046c2:	4b35      	ldr	r3, [pc, #212]	; (404798 <main+0x11c>)
  4046c4:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4046c6:	4628      	mov	r0, r5
  4046c8:	4b34      	ldr	r3, [pc, #208]	; (40479c <main+0x120>)
  4046ca:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4046cc:	4e34      	ldr	r6, [pc, #208]	; (4047a0 <main+0x124>)
  4046ce:	6833      	ldr	r3, [r6, #0]
  4046d0:	4621      	mov	r1, r4
  4046d2:	6898      	ldr	r0, [r3, #8]
  4046d4:	4d33      	ldr	r5, [pc, #204]	; (4047a4 <main+0x128>)
  4046d6:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4046d8:	6833      	ldr	r3, [r6, #0]
  4046da:	4621      	mov	r1, r4
  4046dc:	6858      	ldr	r0, [r3, #4]
  4046de:	47a8      	blx	r5
	setbuf(stdout, NULL);
  4046e0:	6833      	ldr	r3, [r6, #0]
  4046e2:	4621      	mov	r1, r4
  4046e4:	6898      	ldr	r0, [r3, #8]
  4046e6:	47a8      	blx	r5
	configure_console();


	/* Create task to control oled */

	if (xTaskCreate(task_imu, "imu", TASK_IMU_STACK_SIZE, NULL, TASK_IMU_STACK_PRIORITY, NULL) != pdPASS) {
  4046e8:	9401      	str	r4, [sp, #4]
  4046ea:	9400      	str	r4, [sp, #0]
  4046ec:	4623      	mov	r3, r4
  4046ee:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4046f2:	492d      	ldr	r1, [pc, #180]	; (4047a8 <main+0x12c>)
  4046f4:	482d      	ldr	r0, [pc, #180]	; (4047ac <main+0x130>)
  4046f6:	4c2e      	ldr	r4, [pc, #184]	; (4047b0 <main+0x134>)
  4046f8:	47a0      	blx	r4
  4046fa:	2801      	cmp	r0, #1
  4046fc:	d002      	beq.n	404704 <main+0x88>
		printf("Failed to create oled imu\r\n");
  4046fe:	482d      	ldr	r0, [pc, #180]	; (4047b4 <main+0x138>)
  404700:	4b2d      	ldr	r3, [pc, #180]	; (4047b8 <main+0x13c>)
  404702:	4798      	blx	r3
	}

	if (xTaskCreate(task_house_down, "house_down", TASK_IMU_STACK_SIZE, NULL, TASK_IMU_STACK_PRIORITY, NULL) != pdPASS) {
  404704:	2300      	movs	r3, #0
  404706:	9301      	str	r3, [sp, #4]
  404708:	9300      	str	r3, [sp, #0]
  40470a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40470e:	492b      	ldr	r1, [pc, #172]	; (4047bc <main+0x140>)
  404710:	482b      	ldr	r0, [pc, #172]	; (4047c0 <main+0x144>)
  404712:	4c27      	ldr	r4, [pc, #156]	; (4047b0 <main+0x134>)
  404714:	47a0      	blx	r4
  404716:	2801      	cmp	r0, #1
  404718:	d002      	beq.n	404720 <main+0xa4>
		printf("Failed to create `HOUSE DOWN\r\n");
  40471a:	482a      	ldr	r0, [pc, #168]	; (4047c4 <main+0x148>)
  40471c:	4b26      	ldr	r3, [pc, #152]	; (4047b8 <main+0x13c>)
  40471e:	4798      	blx	r3
	}

	if (xTaskCreate(task_orientacao, "orientacao", TASK_IMU_STACK_SIZE, NULL, TASK_IMU_STACK_PRIORITY, NULL) != pdPASS) {
  404720:	2300      	movs	r3, #0
  404722:	9301      	str	r3, [sp, #4]
  404724:	9300      	str	r3, [sp, #0]
  404726:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40472a:	4927      	ldr	r1, [pc, #156]	; (4047c8 <main+0x14c>)
  40472c:	4827      	ldr	r0, [pc, #156]	; (4047cc <main+0x150>)
  40472e:	4c20      	ldr	r4, [pc, #128]	; (4047b0 <main+0x134>)
  404730:	47a0      	blx	r4
  404732:	2801      	cmp	r0, #1
  404734:	d002      	beq.n	40473c <main+0xc0>
		printf("Failed to create ORIENTATION\r\n");
  404736:	4826      	ldr	r0, [pc, #152]	; (4047d0 <main+0x154>)
  404738:	4b1f      	ldr	r3, [pc, #124]	; (4047b8 <main+0x13c>)
  40473a:	4798      	blx	r3
	}
	
	
	// Sem?foro
	xSemaphoreHouseDown = xSemaphoreCreateBinary();
  40473c:	2203      	movs	r2, #3
  40473e:	2100      	movs	r1, #0
  404740:	2001      	movs	r0, #1
  404742:	4b24      	ldr	r3, [pc, #144]	; (4047d4 <main+0x158>)
  404744:	4798      	blx	r3
  404746:	4b24      	ldr	r3, [pc, #144]	; (4047d8 <main+0x15c>)
  404748:	6018      	str	r0, [r3, #0]
	if (xSemaphoreHouseDown == NULL){
  40474a:	b140      	cbz	r0, 40475e <main+0xe2>
		printf("falha em criar o semaforo \n");
	}
	
	xQueueLado = xQueueCreate(32, sizeof(int));
  40474c:	2200      	movs	r2, #0
  40474e:	2104      	movs	r1, #4
  404750:	2020      	movs	r0, #32
  404752:	4b20      	ldr	r3, [pc, #128]	; (4047d4 <main+0x158>)
  404754:	4798      	blx	r3
  404756:	4b21      	ldr	r3, [pc, #132]	; (4047dc <main+0x160>)
  404758:	6018      	str	r0, [r3, #0]
	
	if (xQueueLado == NULL)
  40475a:	b120      	cbz	r0, 404766 <main+0xea>
  40475c:	e7fe      	b.n	40475c <main+0xe0>
		printf("falha em criar o semaforo \n");
  40475e:	4820      	ldr	r0, [pc, #128]	; (4047e0 <main+0x164>)
  404760:	4b15      	ldr	r3, [pc, #84]	; (4047b8 <main+0x13c>)
  404762:	4798      	blx	r3
  404764:	e7f2      	b.n	40474c <main+0xd0>
	/* Start the scheduler. */
	vTaskStartScheduler();
  404766:	4b1f      	ldr	r3, [pc, #124]	; (4047e4 <main+0x168>)
  404768:	4798      	blx	r3
  40476a:	e7f7      	b.n	40475c <main+0xe0>
  40476c:	004031a1 	.word	0x004031a1
  404770:	0040329d 	.word	0x0040329d
  404774:	40028000 	.word	0x40028000
  404778:	2040c63c 	.word	0x2040c63c
  40477c:	00403cb1 	.word	0x00403cb1
  404780:	2040c638 	.word	0x2040c638
  404784:	00403bd5 	.word	0x00403bd5
  404788:	2040c634 	.word	0x2040c634
  40478c:	00403799 	.word	0x00403799
  404790:	08f0d180 	.word	0x08f0d180
  404794:	00403895 	.word	0x00403895
  404798:	004038e9 	.word	0x004038e9
  40479c:	004038ef 	.word	0x004038ef
  4047a0:	20400028 	.word	0x20400028
  4047a4:	004071e1 	.word	0x004071e1
  4047a8:	0040a1c0 	.word	0x0040a1c0
  4047ac:	00403e69 	.word	0x00403e69
  4047b0:	0040146d 	.word	0x0040146d
  4047b4:	0040a1c4 	.word	0x0040a1c4
  4047b8:	00406fe9 	.word	0x00406fe9
  4047bc:	0040a1e0 	.word	0x0040a1e0
  4047c0:	004044f9 	.word	0x004044f9
  4047c4:	0040a1ec 	.word	0x0040a1ec
  4047c8:	0040a20c 	.word	0x0040a20c
  4047cc:	00404561 	.word	0x00404561
  4047d0:	0040a218 	.word	0x0040a218
  4047d4:	00400b9d 	.word	0x00400b9d
  4047d8:	2040c640 	.word	0x2040c640
  4047dc:	2040c644 	.word	0x2040c644
  4047e0:	0040a238 	.word	0x0040a238
  4047e4:	00401661 	.word	0x00401661

004047e8 <cosf>:
  4047e8:	b500      	push	{lr}
  4047ea:	4a1c      	ldr	r2, [pc, #112]	; (40485c <cosf+0x74>)
  4047ec:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  4047f0:	4293      	cmp	r3, r2
  4047f2:	b083      	sub	sp, #12
  4047f4:	dd18      	ble.n	404828 <cosf+0x40>
  4047f6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  4047fa:	db05      	blt.n	404808 <cosf+0x20>
  4047fc:	4601      	mov	r1, r0
  4047fe:	f002 f8b9 	bl	406974 <__aeabi_fsub>
  404802:	b003      	add	sp, #12
  404804:	f85d fb04 	ldr.w	pc, [sp], #4
  404808:	4669      	mov	r1, sp
  40480a:	f000 fbaf 	bl	404f6c <__ieee754_rem_pio2f>
  40480e:	f000 0203 	and.w	r2, r0, #3
  404812:	2a01      	cmp	r2, #1
  404814:	d015      	beq.n	404842 <cosf+0x5a>
  404816:	2a02      	cmp	r2, #2
  404818:	d00c      	beq.n	404834 <cosf+0x4c>
  40481a:	b1ca      	cbz	r2, 404850 <cosf+0x68>
  40481c:	2201      	movs	r2, #1
  40481e:	9901      	ldr	r1, [sp, #4]
  404820:	9800      	ldr	r0, [sp, #0]
  404822:	f001 f9af 	bl	405b84 <__kernel_sinf>
  404826:	e7ec      	b.n	404802 <cosf+0x1a>
  404828:	2100      	movs	r1, #0
  40482a:	f000 fd61 	bl	4052f0 <__kernel_cosf>
  40482e:	b003      	add	sp, #12
  404830:	f85d fb04 	ldr.w	pc, [sp], #4
  404834:	9901      	ldr	r1, [sp, #4]
  404836:	9800      	ldr	r0, [sp, #0]
  404838:	f000 fd5a 	bl	4052f0 <__kernel_cosf>
  40483c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404840:	e7df      	b.n	404802 <cosf+0x1a>
  404842:	9901      	ldr	r1, [sp, #4]
  404844:	9800      	ldr	r0, [sp, #0]
  404846:	f001 f99d 	bl	405b84 <__kernel_sinf>
  40484a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  40484e:	e7d8      	b.n	404802 <cosf+0x1a>
  404850:	9901      	ldr	r1, [sp, #4]
  404852:	9800      	ldr	r0, [sp, #0]
  404854:	f000 fd4c 	bl	4052f0 <__kernel_cosf>
  404858:	e7d3      	b.n	404802 <cosf+0x1a>
  40485a:	bf00      	nop
  40485c:	3f490fd8 	.word	0x3f490fd8

00404860 <sinf>:
  404860:	b500      	push	{lr}
  404862:	4a1d      	ldr	r2, [pc, #116]	; (4048d8 <sinf+0x78>)
  404864:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  404868:	4293      	cmp	r3, r2
  40486a:	b083      	sub	sp, #12
  40486c:	dd19      	ble.n	4048a2 <sinf+0x42>
  40486e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  404872:	db05      	blt.n	404880 <sinf+0x20>
  404874:	4601      	mov	r1, r0
  404876:	f002 f87d 	bl	406974 <__aeabi_fsub>
  40487a:	b003      	add	sp, #12
  40487c:	f85d fb04 	ldr.w	pc, [sp], #4
  404880:	4669      	mov	r1, sp
  404882:	f000 fb73 	bl	404f6c <__ieee754_rem_pio2f>
  404886:	f000 0003 	and.w	r0, r0, #3
  40488a:	2801      	cmp	r0, #1
  40488c:	d018      	beq.n	4048c0 <sinf+0x60>
  40488e:	2802      	cmp	r0, #2
  404890:	d00e      	beq.n	4048b0 <sinf+0x50>
  404892:	b1d0      	cbz	r0, 4048ca <sinf+0x6a>
  404894:	9901      	ldr	r1, [sp, #4]
  404896:	9800      	ldr	r0, [sp, #0]
  404898:	f000 fd2a 	bl	4052f0 <__kernel_cosf>
  40489c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  4048a0:	e7eb      	b.n	40487a <sinf+0x1a>
  4048a2:	2200      	movs	r2, #0
  4048a4:	2100      	movs	r1, #0
  4048a6:	f001 f96d 	bl	405b84 <__kernel_sinf>
  4048aa:	b003      	add	sp, #12
  4048ac:	f85d fb04 	ldr.w	pc, [sp], #4
  4048b0:	2201      	movs	r2, #1
  4048b2:	9901      	ldr	r1, [sp, #4]
  4048b4:	9800      	ldr	r0, [sp, #0]
  4048b6:	f001 f965 	bl	405b84 <__kernel_sinf>
  4048ba:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  4048be:	e7dc      	b.n	40487a <sinf+0x1a>
  4048c0:	9901      	ldr	r1, [sp, #4]
  4048c2:	9800      	ldr	r0, [sp, #0]
  4048c4:	f000 fd14 	bl	4052f0 <__kernel_cosf>
  4048c8:	e7d7      	b.n	40487a <sinf+0x1a>
  4048ca:	2201      	movs	r2, #1
  4048cc:	9901      	ldr	r1, [sp, #4]
  4048ce:	9800      	ldr	r0, [sp, #0]
  4048d0:	f001 f958 	bl	405b84 <__kernel_sinf>
  4048d4:	e7d1      	b.n	40487a <sinf+0x1a>
  4048d6:	bf00      	nop
  4048d8:	3f490fd8 	.word	0x3f490fd8

004048dc <sqrt>:
  4048dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4048e0:	b08b      	sub	sp, #44	; 0x2c
  4048e2:	4604      	mov	r4, r0
  4048e4:	460d      	mov	r5, r1
  4048e6:	f000 f8a9 	bl	404a3c <__ieee754_sqrt>
  4048ea:	4b29      	ldr	r3, [pc, #164]	; (404990 <sqrt+0xb4>)
  4048ec:	f993 a000 	ldrsb.w	sl, [r3]
  4048f0:	f1ba 3fff 	cmp.w	sl, #4294967295
  4048f4:	4606      	mov	r6, r0
  4048f6:	460f      	mov	r7, r1
  4048f8:	d012      	beq.n	404920 <sqrt+0x44>
  4048fa:	4622      	mov	r2, r4
  4048fc:	462b      	mov	r3, r5
  4048fe:	4620      	mov	r0, r4
  404900:	4629      	mov	r1, r5
  404902:	f001 ffcd 	bl	4068a0 <__aeabi_dcmpun>
  404906:	4683      	mov	fp, r0
  404908:	b950      	cbnz	r0, 404920 <sqrt+0x44>
  40490a:	f04f 0800 	mov.w	r8, #0
  40490e:	f04f 0900 	mov.w	r9, #0
  404912:	4642      	mov	r2, r8
  404914:	464b      	mov	r3, r9
  404916:	4620      	mov	r0, r4
  404918:	4629      	mov	r1, r5
  40491a:	f001 ff99 	bl	406850 <__aeabi_dcmplt>
  40491e:	b920      	cbnz	r0, 40492a <sqrt+0x4e>
  404920:	4630      	mov	r0, r6
  404922:	4639      	mov	r1, r7
  404924:	b00b      	add	sp, #44	; 0x2c
  404926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40492a:	4b1a      	ldr	r3, [pc, #104]	; (404994 <sqrt+0xb8>)
  40492c:	f8cd b020 	str.w	fp, [sp, #32]
  404930:	2201      	movs	r2, #1
  404932:	e9cd 4504 	strd	r4, r5, [sp, #16]
  404936:	e9cd 4502 	strd	r4, r5, [sp, #8]
  40493a:	e88d 000c 	stmia.w	sp, {r2, r3}
  40493e:	f1ba 0f00 	cmp.w	sl, #0
  404942:	d017      	beq.n	404974 <sqrt+0x98>
  404944:	4642      	mov	r2, r8
  404946:	464b      	mov	r3, r9
  404948:	4640      	mov	r0, r8
  40494a:	4649      	mov	r1, r9
  40494c:	f001 fe38 	bl	4065c0 <__aeabi_ddiv>
  404950:	f1ba 0f02 	cmp.w	sl, #2
  404954:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404958:	d10e      	bne.n	404978 <sqrt+0x9c>
  40495a:	f002 fb17 	bl	406f8c <__errno>
  40495e:	2321      	movs	r3, #33	; 0x21
  404960:	6003      	str	r3, [r0, #0]
  404962:	9b08      	ldr	r3, [sp, #32]
  404964:	b973      	cbnz	r3, 404984 <sqrt+0xa8>
  404966:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  40496a:	4630      	mov	r0, r6
  40496c:	4639      	mov	r1, r7
  40496e:	b00b      	add	sp, #44	; 0x2c
  404970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404974:	e9cd 8906 	strd	r8, r9, [sp, #24]
  404978:	4668      	mov	r0, sp
  40497a:	f001 f979 	bl	405c70 <matherr>
  40497e:	2800      	cmp	r0, #0
  404980:	d1ef      	bne.n	404962 <sqrt+0x86>
  404982:	e7ea      	b.n	40495a <sqrt+0x7e>
  404984:	f002 fb02 	bl	406f8c <__errno>
  404988:	9b08      	ldr	r3, [sp, #32]
  40498a:	6003      	str	r3, [r0, #0]
  40498c:	e7eb      	b.n	404966 <sqrt+0x8a>
  40498e:	bf00      	nop
  404990:	20400024 	.word	0x20400024
  404994:	0040a300 	.word	0x0040a300

00404998 <asinf>:
  404998:	b5f0      	push	{r4, r5, r6, r7, lr}
  40499a:	4e24      	ldr	r6, [pc, #144]	; (404a2c <asinf+0x94>)
  40499c:	b08b      	sub	sp, #44	; 0x2c
  40499e:	4604      	mov	r4, r0
  4049a0:	f000 f908 	bl	404bb4 <__ieee754_asinf>
  4049a4:	f996 3000 	ldrsb.w	r3, [r6]
  4049a8:	3301      	adds	r3, #1
  4049aa:	4605      	mov	r5, r0
  4049ac:	d02f      	beq.n	404a0e <asinf+0x76>
  4049ae:	4621      	mov	r1, r4
  4049b0:	4620      	mov	r0, r4
  4049b2:	f002 faaf 	bl	406f14 <__aeabi_fcmpun>
  4049b6:	4607      	mov	r7, r0
  4049b8:	bb48      	cbnz	r0, 404a0e <asinf+0x76>
  4049ba:	4620      	mov	r0, r4
  4049bc:	f001 fa76 	bl	405eac <fabsf>
  4049c0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  4049c4:	f002 fa9c 	bl	406f00 <__aeabi_fcmpgt>
  4049c8:	b308      	cbz	r0, 404a0e <asinf+0x76>
  4049ca:	4b19      	ldr	r3, [pc, #100]	; (404a30 <asinf+0x98>)
  4049cc:	9708      	str	r7, [sp, #32]
  4049ce:	2201      	movs	r2, #1
  4049d0:	4620      	mov	r0, r4
  4049d2:	e88d 000c 	stmia.w	sp, {r2, r3}
  4049d6:	f001 fc75 	bl	4062c4 <__aeabi_f2d>
  4049da:	4602      	mov	r2, r0
  4049dc:	460b      	mov	r3, r1
  4049de:	4815      	ldr	r0, [pc, #84]	; (404a34 <asinf+0x9c>)
  4049e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  4049e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4049e8:	f001 f944 	bl	405c74 <nan>
  4049ec:	f996 3000 	ldrsb.w	r3, [r6]
  4049f0:	2b02      	cmp	r3, #2
  4049f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4049f6:	d00d      	beq.n	404a14 <asinf+0x7c>
  4049f8:	4668      	mov	r0, sp
  4049fa:	f001 f939 	bl	405c70 <matherr>
  4049fe:	b148      	cbz	r0, 404a14 <asinf+0x7c>
  404a00:	9b08      	ldr	r3, [sp, #32]
  404a02:	b973      	cbnz	r3, 404a22 <asinf+0x8a>
  404a04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  404a08:	f001 ff60 	bl	4068cc <__aeabi_d2f>
  404a0c:	4605      	mov	r5, r0
  404a0e:	4628      	mov	r0, r5
  404a10:	b00b      	add	sp, #44	; 0x2c
  404a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404a14:	f002 faba 	bl	406f8c <__errno>
  404a18:	2321      	movs	r3, #33	; 0x21
  404a1a:	6003      	str	r3, [r0, #0]
  404a1c:	9b08      	ldr	r3, [sp, #32]
  404a1e:	2b00      	cmp	r3, #0
  404a20:	d0f0      	beq.n	404a04 <asinf+0x6c>
  404a22:	f002 fab3 	bl	406f8c <__errno>
  404a26:	9b08      	ldr	r3, [sp, #32]
  404a28:	6003      	str	r3, [r0, #0]
  404a2a:	e7eb      	b.n	404a04 <asinf+0x6c>
  404a2c:	20400024 	.word	0x20400024
  404a30:	0040a308 	.word	0x0040a308
  404a34:	00409f08 	.word	0x00409f08

00404a38 <atan2f>:
  404a38:	f000 ba06 	b.w	404e48 <__ieee754_atan2f>

00404a3c <__ieee754_sqrt>:
  404a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404a40:	4f5b      	ldr	r7, [pc, #364]	; (404bb0 <__ieee754_sqrt+0x174>)
  404a42:	438f      	bics	r7, r1
  404a44:	4605      	mov	r5, r0
  404a46:	460c      	mov	r4, r1
  404a48:	f000 8092 	beq.w	404b70 <__ieee754_sqrt+0x134>
  404a4c:	2900      	cmp	r1, #0
  404a4e:	460b      	mov	r3, r1
  404a50:	4602      	mov	r2, r0
  404a52:	dd6f      	ble.n	404b34 <__ieee754_sqrt+0xf8>
  404a54:	150f      	asrs	r7, r1, #20
  404a56:	d07b      	beq.n	404b50 <__ieee754_sqrt+0x114>
  404a58:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  404a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
  404a60:	07f8      	lsls	r0, r7, #31
  404a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404a66:	d45c      	bmi.n	404b22 <__ieee754_sqrt+0xe6>
  404a68:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  404a6c:	2600      	movs	r6, #0
  404a6e:	440b      	add	r3, r1
  404a70:	107f      	asrs	r7, r7, #1
  404a72:	0052      	lsls	r2, r2, #1
  404a74:	46b6      	mov	lr, r6
  404a76:	2016      	movs	r0, #22
  404a78:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  404a7c:	eb0e 0401 	add.w	r4, lr, r1
  404a80:	429c      	cmp	r4, r3
  404a82:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  404a86:	ea4f 0242 	mov.w	r2, r2, lsl #1
  404a8a:	dc03      	bgt.n	404a94 <__ieee754_sqrt+0x58>
  404a8c:	1b1b      	subs	r3, r3, r4
  404a8e:	eb04 0e01 	add.w	lr, r4, r1
  404a92:	440e      	add	r6, r1
  404a94:	3801      	subs	r0, #1
  404a96:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  404a9a:	ea4f 0151 	mov.w	r1, r1, lsr #1
  404a9e:	d1ed      	bne.n	404a7c <__ieee754_sqrt+0x40>
  404aa0:	4684      	mov	ip, r0
  404aa2:	2420      	movs	r4, #32
  404aa4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  404aa8:	e009      	b.n	404abe <__ieee754_sqrt+0x82>
  404aaa:	d020      	beq.n	404aee <__ieee754_sqrt+0xb2>
  404aac:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  404ab0:	3c01      	subs	r4, #1
  404ab2:	ea4f 0151 	mov.w	r1, r1, lsr #1
  404ab6:	442b      	add	r3, r5
  404ab8:	ea4f 0242 	mov.w	r2, r2, lsl #1
  404abc:	d020      	beq.n	404b00 <__ieee754_sqrt+0xc4>
  404abe:	4573      	cmp	r3, lr
  404ac0:	eb01 050c 	add.w	r5, r1, ip
  404ac4:	ddf1      	ble.n	404aaa <__ieee754_sqrt+0x6e>
  404ac6:	2d00      	cmp	r5, #0
  404ac8:	eb05 0c01 	add.w	ip, r5, r1
  404acc:	db09      	blt.n	404ae2 <__ieee754_sqrt+0xa6>
  404ace:	46f0      	mov	r8, lr
  404ad0:	4295      	cmp	r5, r2
  404ad2:	eba3 030e 	sub.w	r3, r3, lr
  404ad6:	d900      	bls.n	404ada <__ieee754_sqrt+0x9e>
  404ad8:	3b01      	subs	r3, #1
  404ada:	1b52      	subs	r2, r2, r5
  404adc:	4408      	add	r0, r1
  404ade:	46c6      	mov	lr, r8
  404ae0:	e7e4      	b.n	404aac <__ieee754_sqrt+0x70>
  404ae2:	f1bc 0f00 	cmp.w	ip, #0
  404ae6:	dbf2      	blt.n	404ace <__ieee754_sqrt+0x92>
  404ae8:	f10e 0801 	add.w	r8, lr, #1
  404aec:	e7f0      	b.n	404ad0 <__ieee754_sqrt+0x94>
  404aee:	4295      	cmp	r5, r2
  404af0:	d8dc      	bhi.n	404aac <__ieee754_sqrt+0x70>
  404af2:	2d00      	cmp	r5, #0
  404af4:	eb05 0c01 	add.w	ip, r5, r1
  404af8:	db44      	blt.n	404b84 <__ieee754_sqrt+0x148>
  404afa:	4698      	mov	r8, r3
  404afc:	2300      	movs	r3, #0
  404afe:	e7ec      	b.n	404ada <__ieee754_sqrt+0x9e>
  404b00:	4313      	orrs	r3, r2
  404b02:	d113      	bne.n	404b2c <__ieee754_sqrt+0xf0>
  404b04:	0840      	lsrs	r0, r0, #1
  404b06:	1073      	asrs	r3, r6, #1
  404b08:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  404b0c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404b10:	07f2      	lsls	r2, r6, #31
  404b12:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  404b16:	bf48      	it	mi
  404b18:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  404b1c:	4649      	mov	r1, r9
  404b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404b22:	005b      	lsls	r3, r3, #1
  404b24:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  404b28:	0052      	lsls	r2, r2, #1
  404b2a:	e79d      	b.n	404a68 <__ieee754_sqrt+0x2c>
  404b2c:	1c41      	adds	r1, r0, #1
  404b2e:	d02d      	beq.n	404b8c <__ieee754_sqrt+0x150>
  404b30:	3001      	adds	r0, #1
  404b32:	e7e7      	b.n	404b04 <__ieee754_sqrt+0xc8>
  404b34:	4606      	mov	r6, r0
  404b36:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  404b3a:	433e      	orrs	r6, r7
  404b3c:	d0ef      	beq.n	404b1e <__ieee754_sqrt+0xe2>
  404b3e:	bb69      	cbnz	r1, 404b9c <__ieee754_sqrt+0x160>
  404b40:	460f      	mov	r7, r1
  404b42:	0ad3      	lsrs	r3, r2, #11
  404b44:	3f15      	subs	r7, #21
  404b46:	0552      	lsls	r2, r2, #21
  404b48:	2b00      	cmp	r3, #0
  404b4a:	d0fa      	beq.n	404b42 <__ieee754_sqrt+0x106>
  404b4c:	02de      	lsls	r6, r3, #11
  404b4e:	d420      	bmi.n	404b92 <__ieee754_sqrt+0x156>
  404b50:	2400      	movs	r4, #0
  404b52:	e000      	b.n	404b56 <__ieee754_sqrt+0x11a>
  404b54:	4604      	mov	r4, r0
  404b56:	005b      	lsls	r3, r3, #1
  404b58:	02dd      	lsls	r5, r3, #11
  404b5a:	f104 0001 	add.w	r0, r4, #1
  404b5e:	d5f9      	bpl.n	404b54 <__ieee754_sqrt+0x118>
  404b60:	f1c0 0120 	rsb	r1, r0, #32
  404b64:	fa22 f101 	lsr.w	r1, r2, r1
  404b68:	430b      	orrs	r3, r1
  404b6a:	1b3f      	subs	r7, r7, r4
  404b6c:	4082      	lsls	r2, r0
  404b6e:	e773      	b.n	404a58 <__ieee754_sqrt+0x1c>
  404b70:	4602      	mov	r2, r0
  404b72:	460b      	mov	r3, r1
  404b74:	f001 fbfa 	bl	40636c <__aeabi_dmul>
  404b78:	462a      	mov	r2, r5
  404b7a:	4623      	mov	r3, r4
  404b7c:	f001 fa44 	bl	406008 <__adddf3>
  404b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404b84:	f1bc 0f00 	cmp.w	ip, #0
  404b88:	daae      	bge.n	404ae8 <__ieee754_sqrt+0xac>
  404b8a:	e7b6      	b.n	404afa <__ieee754_sqrt+0xbe>
  404b8c:	3601      	adds	r6, #1
  404b8e:	4620      	mov	r0, r4
  404b90:	e7b9      	b.n	404b06 <__ieee754_sqrt+0xca>
  404b92:	2000      	movs	r0, #0
  404b94:	2120      	movs	r1, #32
  404b96:	f04f 34ff 	mov.w	r4, #4294967295
  404b9a:	e7e3      	b.n	404b64 <__ieee754_sqrt+0x128>
  404b9c:	4602      	mov	r2, r0
  404b9e:	460b      	mov	r3, r1
  404ba0:	f001 fa30 	bl	406004 <__aeabi_dsub>
  404ba4:	4602      	mov	r2, r0
  404ba6:	460b      	mov	r3, r1
  404ba8:	f001 fd0a 	bl	4065c0 <__aeabi_ddiv>
  404bac:	e7b7      	b.n	404b1e <__ieee754_sqrt+0xe2>
  404bae:	bf00      	nop
  404bb0:	7ff00000 	.word	0x7ff00000

00404bb4 <__ieee754_asinf>:
  404bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404bb8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
  404bbc:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
  404bc0:	4604      	mov	r4, r0
  404bc2:	f000 80c6 	beq.w	404d52 <__ieee754_asinf+0x19e>
  404bc6:	dc12      	bgt.n	404bee <__ieee754_asinf+0x3a>
  404bc8:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
  404bcc:	4606      	mov	r6, r0
  404bce:	da16      	bge.n	404bfe <__ieee754_asinf+0x4a>
  404bd0:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
  404bd4:	f280 80cb 	bge.w	404d6e <__ieee754_asinf+0x1ba>
  404bd8:	498b      	ldr	r1, [pc, #556]	; (404e08 <__ieee754_asinf+0x254>)
  404bda:	f001 fecd 	bl	406978 <__addsf3>
  404bde:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  404be2:	f002 f98d 	bl	406f00 <__aeabi_fcmpgt>
  404be6:	b150      	cbz	r0, 404bfe <__ieee754_asinf+0x4a>
  404be8:	4620      	mov	r0, r4
  404bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404bee:	4601      	mov	r1, r0
  404bf0:	f001 fec0 	bl	406974 <__aeabi_fsub>
  404bf4:	4601      	mov	r1, r0
  404bf6:	f002 f87b 	bl	406cf0 <__aeabi_fdiv>
  404bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404bfe:	4620      	mov	r0, r4
  404c00:	f001 f954 	bl	405eac <fabsf>
  404c04:	4601      	mov	r1, r0
  404c06:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404c0a:	f001 feb3 	bl	406974 <__aeabi_fsub>
  404c0e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  404c12:	f001 ffb9 	bl	406b88 <__aeabi_fmul>
  404c16:	497d      	ldr	r1, [pc, #500]	; (404e0c <__ieee754_asinf+0x258>)
  404c18:	4604      	mov	r4, r0
  404c1a:	f001 ffb5 	bl	406b88 <__aeabi_fmul>
  404c1e:	497c      	ldr	r1, [pc, #496]	; (404e10 <__ieee754_asinf+0x25c>)
  404c20:	f001 feaa 	bl	406978 <__addsf3>
  404c24:	4621      	mov	r1, r4
  404c26:	f001 ffaf 	bl	406b88 <__aeabi_fmul>
  404c2a:	497a      	ldr	r1, [pc, #488]	; (404e14 <__ieee754_asinf+0x260>)
  404c2c:	f001 fea2 	bl	406974 <__aeabi_fsub>
  404c30:	4621      	mov	r1, r4
  404c32:	f001 ffa9 	bl	406b88 <__aeabi_fmul>
  404c36:	4978      	ldr	r1, [pc, #480]	; (404e18 <__ieee754_asinf+0x264>)
  404c38:	f001 fe9e 	bl	406978 <__addsf3>
  404c3c:	4621      	mov	r1, r4
  404c3e:	f001 ffa3 	bl	406b88 <__aeabi_fmul>
  404c42:	4976      	ldr	r1, [pc, #472]	; (404e1c <__ieee754_asinf+0x268>)
  404c44:	f001 fe96 	bl	406974 <__aeabi_fsub>
  404c48:	4621      	mov	r1, r4
  404c4a:	f001 ff9d 	bl	406b88 <__aeabi_fmul>
  404c4e:	4974      	ldr	r1, [pc, #464]	; (404e20 <__ieee754_asinf+0x26c>)
  404c50:	f001 fe92 	bl	406978 <__addsf3>
  404c54:	4621      	mov	r1, r4
  404c56:	f001 ff97 	bl	406b88 <__aeabi_fmul>
  404c5a:	4972      	ldr	r1, [pc, #456]	; (404e24 <__ieee754_asinf+0x270>)
  404c5c:	4680      	mov	r8, r0
  404c5e:	4620      	mov	r0, r4
  404c60:	f001 ff92 	bl	406b88 <__aeabi_fmul>
  404c64:	4970      	ldr	r1, [pc, #448]	; (404e28 <__ieee754_asinf+0x274>)
  404c66:	f001 fe85 	bl	406974 <__aeabi_fsub>
  404c6a:	4621      	mov	r1, r4
  404c6c:	f001 ff8c 	bl	406b88 <__aeabi_fmul>
  404c70:	496e      	ldr	r1, [pc, #440]	; (404e2c <__ieee754_asinf+0x278>)
  404c72:	f001 fe81 	bl	406978 <__addsf3>
  404c76:	4621      	mov	r1, r4
  404c78:	f001 ff86 	bl	406b88 <__aeabi_fmul>
  404c7c:	496c      	ldr	r1, [pc, #432]	; (404e30 <__ieee754_asinf+0x27c>)
  404c7e:	f001 fe79 	bl	406974 <__aeabi_fsub>
  404c82:	4621      	mov	r1, r4
  404c84:	f001 ff80 	bl	406b88 <__aeabi_fmul>
  404c88:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  404c8c:	f001 fe74 	bl	406978 <__addsf3>
  404c90:	4681      	mov	r9, r0
  404c92:	4620      	mov	r0, r4
  404c94:	f000 fad8 	bl	405248 <__ieee754_sqrtf>
  404c98:	4b66      	ldr	r3, [pc, #408]	; (404e34 <__ieee754_asinf+0x280>)
  404c9a:	429d      	cmp	r5, r3
  404c9c:	4607      	mov	r7, r0
  404c9e:	4649      	mov	r1, r9
  404ca0:	4640      	mov	r0, r8
  404ca2:	dc43      	bgt.n	404d2c <__ieee754_asinf+0x178>
  404ca4:	f002 f824 	bl	406cf0 <__aeabi_fdiv>
  404ca8:	4639      	mov	r1, r7
  404caa:	4680      	mov	r8, r0
  404cac:	4638      	mov	r0, r7
  404cae:	f001 fe63 	bl	406978 <__addsf3>
  404cb2:	4601      	mov	r1, r0
  404cb4:	4640      	mov	r0, r8
  404cb6:	f001 ff67 	bl	406b88 <__aeabi_fmul>
  404cba:	f427 657f 	bic.w	r5, r7, #4080	; 0xff0
  404cbe:	f025 050f 	bic.w	r5, r5, #15
  404cc2:	4680      	mov	r8, r0
  404cc4:	4629      	mov	r1, r5
  404cc6:	4628      	mov	r0, r5
  404cc8:	f001 ff5e 	bl	406b88 <__aeabi_fmul>
  404ccc:	4601      	mov	r1, r0
  404cce:	4620      	mov	r0, r4
  404cd0:	f001 fe50 	bl	406974 <__aeabi_fsub>
  404cd4:	4639      	mov	r1, r7
  404cd6:	4604      	mov	r4, r0
  404cd8:	4628      	mov	r0, r5
  404cda:	f001 fe4d 	bl	406978 <__addsf3>
  404cde:	4601      	mov	r1, r0
  404ce0:	4620      	mov	r0, r4
  404ce2:	f002 f805 	bl	406cf0 <__aeabi_fdiv>
  404ce6:	4601      	mov	r1, r0
  404ce8:	f001 fe46 	bl	406978 <__addsf3>
  404cec:	4601      	mov	r1, r0
  404cee:	4852      	ldr	r0, [pc, #328]	; (404e38 <__ieee754_asinf+0x284>)
  404cf0:	f001 fe40 	bl	406974 <__aeabi_fsub>
  404cf4:	4601      	mov	r1, r0
  404cf6:	4640      	mov	r0, r8
  404cf8:	f001 fe3c 	bl	406974 <__aeabi_fsub>
  404cfc:	4629      	mov	r1, r5
  404cfe:	4604      	mov	r4, r0
  404d00:	4628      	mov	r0, r5
  404d02:	f001 fe39 	bl	406978 <__addsf3>
  404d06:	4601      	mov	r1, r0
  404d08:	484c      	ldr	r0, [pc, #304]	; (404e3c <__ieee754_asinf+0x288>)
  404d0a:	f001 fe33 	bl	406974 <__aeabi_fsub>
  404d0e:	4601      	mov	r1, r0
  404d10:	4620      	mov	r0, r4
  404d12:	f001 fe2f 	bl	406974 <__aeabi_fsub>
  404d16:	4601      	mov	r1, r0
  404d18:	4848      	ldr	r0, [pc, #288]	; (404e3c <__ieee754_asinf+0x288>)
  404d1a:	f001 fe2b 	bl	406974 <__aeabi_fsub>
  404d1e:	2e00      	cmp	r6, #0
  404d20:	f73f af63 	bgt.w	404bea <__ieee754_asinf+0x36>
  404d24:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404d2c:	f001 ffe0 	bl	406cf0 <__aeabi_fdiv>
  404d30:	4639      	mov	r1, r7
  404d32:	f001 ff29 	bl	406b88 <__aeabi_fmul>
  404d36:	4639      	mov	r1, r7
  404d38:	f001 fe1e 	bl	406978 <__addsf3>
  404d3c:	4601      	mov	r1, r0
  404d3e:	f001 fe1b 	bl	406978 <__addsf3>
  404d42:	493f      	ldr	r1, [pc, #252]	; (404e40 <__ieee754_asinf+0x28c>)
  404d44:	f001 fe18 	bl	406978 <__addsf3>
  404d48:	4601      	mov	r1, r0
  404d4a:	483e      	ldr	r0, [pc, #248]	; (404e44 <__ieee754_asinf+0x290>)
  404d4c:	f001 fe12 	bl	406974 <__aeabi_fsub>
  404d50:	e7e5      	b.n	404d1e <__ieee754_asinf+0x16a>
  404d52:	493c      	ldr	r1, [pc, #240]	; (404e44 <__ieee754_asinf+0x290>)
  404d54:	f001 ff18 	bl	406b88 <__aeabi_fmul>
  404d58:	4937      	ldr	r1, [pc, #220]	; (404e38 <__ieee754_asinf+0x284>)
  404d5a:	4605      	mov	r5, r0
  404d5c:	4620      	mov	r0, r4
  404d5e:	f001 ff13 	bl	406b88 <__aeabi_fmul>
  404d62:	4601      	mov	r1, r0
  404d64:	4628      	mov	r0, r5
  404d66:	f001 fe07 	bl	406978 <__addsf3>
  404d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404d6e:	4601      	mov	r1, r0
  404d70:	f001 ff0a 	bl	406b88 <__aeabi_fmul>
  404d74:	4925      	ldr	r1, [pc, #148]	; (404e0c <__ieee754_asinf+0x258>)
  404d76:	4605      	mov	r5, r0
  404d78:	f001 ff06 	bl	406b88 <__aeabi_fmul>
  404d7c:	4924      	ldr	r1, [pc, #144]	; (404e10 <__ieee754_asinf+0x25c>)
  404d7e:	f001 fdfb 	bl	406978 <__addsf3>
  404d82:	4629      	mov	r1, r5
  404d84:	f001 ff00 	bl	406b88 <__aeabi_fmul>
  404d88:	4922      	ldr	r1, [pc, #136]	; (404e14 <__ieee754_asinf+0x260>)
  404d8a:	f001 fdf3 	bl	406974 <__aeabi_fsub>
  404d8e:	4629      	mov	r1, r5
  404d90:	f001 fefa 	bl	406b88 <__aeabi_fmul>
  404d94:	4920      	ldr	r1, [pc, #128]	; (404e18 <__ieee754_asinf+0x264>)
  404d96:	f001 fdef 	bl	406978 <__addsf3>
  404d9a:	4629      	mov	r1, r5
  404d9c:	f001 fef4 	bl	406b88 <__aeabi_fmul>
  404da0:	491e      	ldr	r1, [pc, #120]	; (404e1c <__ieee754_asinf+0x268>)
  404da2:	f001 fde7 	bl	406974 <__aeabi_fsub>
  404da6:	4629      	mov	r1, r5
  404da8:	f001 feee 	bl	406b88 <__aeabi_fmul>
  404dac:	491c      	ldr	r1, [pc, #112]	; (404e20 <__ieee754_asinf+0x26c>)
  404dae:	f001 fde3 	bl	406978 <__addsf3>
  404db2:	4629      	mov	r1, r5
  404db4:	f001 fee8 	bl	406b88 <__aeabi_fmul>
  404db8:	491a      	ldr	r1, [pc, #104]	; (404e24 <__ieee754_asinf+0x270>)
  404dba:	4606      	mov	r6, r0
  404dbc:	4628      	mov	r0, r5
  404dbe:	f001 fee3 	bl	406b88 <__aeabi_fmul>
  404dc2:	4919      	ldr	r1, [pc, #100]	; (404e28 <__ieee754_asinf+0x274>)
  404dc4:	f001 fdd6 	bl	406974 <__aeabi_fsub>
  404dc8:	4629      	mov	r1, r5
  404dca:	f001 fedd 	bl	406b88 <__aeabi_fmul>
  404dce:	4917      	ldr	r1, [pc, #92]	; (404e2c <__ieee754_asinf+0x278>)
  404dd0:	f001 fdd2 	bl	406978 <__addsf3>
  404dd4:	4629      	mov	r1, r5
  404dd6:	f001 fed7 	bl	406b88 <__aeabi_fmul>
  404dda:	4915      	ldr	r1, [pc, #84]	; (404e30 <__ieee754_asinf+0x27c>)
  404ddc:	f001 fdca 	bl	406974 <__aeabi_fsub>
  404de0:	4629      	mov	r1, r5
  404de2:	f001 fed1 	bl	406b88 <__aeabi_fmul>
  404de6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  404dea:	f001 fdc5 	bl	406978 <__addsf3>
  404dee:	4601      	mov	r1, r0
  404df0:	4630      	mov	r0, r6
  404df2:	f001 ff7d 	bl	406cf0 <__aeabi_fdiv>
  404df6:	4621      	mov	r1, r4
  404df8:	f001 fec6 	bl	406b88 <__aeabi_fmul>
  404dfc:	4621      	mov	r1, r4
  404dfe:	f001 fdbb 	bl	406978 <__addsf3>
  404e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404e06:	bf00      	nop
  404e08:	7149f2ca 	.word	0x7149f2ca
  404e0c:	3811ef08 	.word	0x3811ef08
  404e10:	3a4f7f04 	.word	0x3a4f7f04
  404e14:	3d241146 	.word	0x3d241146
  404e18:	3e4e0aa8 	.word	0x3e4e0aa8
  404e1c:	3ea6b090 	.word	0x3ea6b090
  404e20:	3e2aaaab 	.word	0x3e2aaaab
  404e24:	3d9dc62e 	.word	0x3d9dc62e
  404e28:	3f303361 	.word	0x3f303361
  404e2c:	4001572d 	.word	0x4001572d
  404e30:	4019d139 	.word	0x4019d139
  404e34:	3f799999 	.word	0x3f799999
  404e38:	b33bbd2e 	.word	0xb33bbd2e
  404e3c:	3f490fdb 	.word	0x3f490fdb
  404e40:	333bbd2e 	.word	0x333bbd2e
  404e44:	3fc90fdb 	.word	0x3fc90fdb

00404e48 <__ieee754_atan2f>:
  404e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404e4a:	460c      	mov	r4, r1
  404e4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404e50:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  404e54:	4603      	mov	r3, r0
  404e56:	dc14      	bgt.n	404e82 <__ieee754_atan2f+0x3a>
  404e58:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
  404e5c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
  404e60:	4607      	mov	r7, r0
  404e62:	dc0e      	bgt.n	404e82 <__ieee754_atan2f+0x3a>
  404e64:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
  404e68:	d03d      	beq.n	404ee6 <__ieee754_atan2f+0x9e>
  404e6a:	17a5      	asrs	r5, r4, #30
  404e6c:	f005 0502 	and.w	r5, r5, #2
  404e70:	ea45 75d0 	orr.w	r5, r5, r0, lsr #31
  404e74:	b956      	cbnz	r6, 404e8c <__ieee754_atan2f+0x44>
  404e76:	2d02      	cmp	r5, #2
  404e78:	d030      	beq.n	404edc <__ieee754_atan2f+0x94>
  404e7a:	2d03      	cmp	r5, #3
  404e7c:	d130      	bne.n	404ee0 <__ieee754_atan2f+0x98>
  404e7e:	4832      	ldr	r0, [pc, #200]	; (404f48 <__ieee754_atan2f+0x100>)
  404e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404e82:	4619      	mov	r1, r3
  404e84:	4620      	mov	r0, r4
  404e86:	f001 fd77 	bl	406978 <__addsf3>
  404e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404e8c:	b301      	cbz	r1, 404ed0 <__ieee754_atan2f+0x88>
  404e8e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  404e92:	d02c      	beq.n	404eee <__ieee754_atan2f+0xa6>
  404e94:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
  404e98:	d01a      	beq.n	404ed0 <__ieee754_atan2f+0x88>
  404e9a:	1a71      	subs	r1, r6, r1
  404e9c:	15c9      	asrs	r1, r1, #23
  404e9e:	293c      	cmp	r1, #60	; 0x3c
  404ea0:	dc1a      	bgt.n	404ed8 <__ieee754_atan2f+0x90>
  404ea2:	2c00      	cmp	r4, #0
  404ea4:	db39      	blt.n	404f1a <__ieee754_atan2f+0xd2>
  404ea6:	4621      	mov	r1, r4
  404ea8:	4618      	mov	r0, r3
  404eaa:	f001 ff21 	bl	406cf0 <__aeabi_fdiv>
  404eae:	f000 fffd 	bl	405eac <fabsf>
  404eb2:	f000 fee5 	bl	405c80 <atanf>
  404eb6:	2d01      	cmp	r5, #1
  404eb8:	d02c      	beq.n	404f14 <__ieee754_atan2f+0xcc>
  404eba:	2d02      	cmp	r5, #2
  404ebc:	d022      	beq.n	404f04 <__ieee754_atan2f+0xbc>
  404ebe:	2d00      	cmp	r5, #0
  404ec0:	d02f      	beq.n	404f22 <__ieee754_atan2f+0xda>
  404ec2:	4922      	ldr	r1, [pc, #136]	; (404f4c <__ieee754_atan2f+0x104>)
  404ec4:	f001 fd58 	bl	406978 <__addsf3>
  404ec8:	4921      	ldr	r1, [pc, #132]	; (404f50 <__ieee754_atan2f+0x108>)
  404eca:	f001 fd53 	bl	406974 <__aeabi_fsub>
  404ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404ed0:	2f00      	cmp	r7, #0
  404ed2:	db06      	blt.n	404ee2 <__ieee754_atan2f+0x9a>
  404ed4:	481f      	ldr	r0, [pc, #124]	; (404f54 <__ieee754_atan2f+0x10c>)
  404ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404ed8:	481e      	ldr	r0, [pc, #120]	; (404f54 <__ieee754_atan2f+0x10c>)
  404eda:	e7ec      	b.n	404eb6 <__ieee754_atan2f+0x6e>
  404edc:	481c      	ldr	r0, [pc, #112]	; (404f50 <__ieee754_atan2f+0x108>)
  404ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404ee2:	481d      	ldr	r0, [pc, #116]	; (404f58 <__ieee754_atan2f+0x110>)
  404ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404ee6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  404eea:	f000 bec9 	b.w	405c80 <atanf>
  404eee:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
  404ef2:	d017      	beq.n	404f24 <__ieee754_atan2f+0xdc>
  404ef4:	2d02      	cmp	r5, #2
  404ef6:	d0f1      	beq.n	404edc <__ieee754_atan2f+0x94>
  404ef8:	2d03      	cmp	r5, #3
  404efa:	d0c0      	beq.n	404e7e <__ieee754_atan2f+0x36>
  404efc:	2d01      	cmp	r5, #1
  404efe:	d019      	beq.n	404f34 <__ieee754_atan2f+0xec>
  404f00:	2000      	movs	r0, #0
  404f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f04:	4911      	ldr	r1, [pc, #68]	; (404f4c <__ieee754_atan2f+0x104>)
  404f06:	f001 fd37 	bl	406978 <__addsf3>
  404f0a:	4601      	mov	r1, r0
  404f0c:	4810      	ldr	r0, [pc, #64]	; (404f50 <__ieee754_atan2f+0x108>)
  404f0e:	f001 fd31 	bl	406974 <__aeabi_fsub>
  404f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f14:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f1a:	313c      	adds	r1, #60	; 0x3c
  404f1c:	dac3      	bge.n	404ea6 <__ieee754_atan2f+0x5e>
  404f1e:	2000      	movs	r0, #0
  404f20:	e7c9      	b.n	404eb6 <__ieee754_atan2f+0x6e>
  404f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f24:	2d02      	cmp	r5, #2
  404f26:	d00c      	beq.n	404f42 <__ieee754_atan2f+0xfa>
  404f28:	2d03      	cmp	r5, #3
  404f2a:	d008      	beq.n	404f3e <__ieee754_atan2f+0xf6>
  404f2c:	2d01      	cmp	r5, #1
  404f2e:	d004      	beq.n	404f3a <__ieee754_atan2f+0xf2>
  404f30:	480a      	ldr	r0, [pc, #40]	; (404f5c <__ieee754_atan2f+0x114>)
  404f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f34:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  404f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f3a:	4809      	ldr	r0, [pc, #36]	; (404f60 <__ieee754_atan2f+0x118>)
  404f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f3e:	4809      	ldr	r0, [pc, #36]	; (404f64 <__ieee754_atan2f+0x11c>)
  404f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f42:	4809      	ldr	r0, [pc, #36]	; (404f68 <__ieee754_atan2f+0x120>)
  404f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f46:	bf00      	nop
  404f48:	c0490fdb 	.word	0xc0490fdb
  404f4c:	33bbbd2e 	.word	0x33bbbd2e
  404f50:	40490fdb 	.word	0x40490fdb
  404f54:	3fc90fdb 	.word	0x3fc90fdb
  404f58:	bfc90fdb 	.word	0xbfc90fdb
  404f5c:	3f490fdb 	.word	0x3f490fdb
  404f60:	bf490fdb 	.word	0xbf490fdb
  404f64:	c016cbe4 	.word	0xc016cbe4
  404f68:	4016cbe4 	.word	0x4016cbe4

00404f6c <__ieee754_rem_pio2f>:
  404f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404f70:	4aa8      	ldr	r2, [pc, #672]	; (405214 <__ieee754_rem_pio2f+0x2a8>)
  404f72:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
  404f76:	4294      	cmp	r4, r2
  404f78:	b089      	sub	sp, #36	; 0x24
  404f7a:	dd6e      	ble.n	40505a <__ieee754_rem_pio2f+0xee>
  404f7c:	4aa6      	ldr	r2, [pc, #664]	; (405218 <__ieee754_rem_pio2f+0x2ac>)
  404f7e:	4294      	cmp	r4, r2
  404f80:	4606      	mov	r6, r0
  404f82:	460d      	mov	r5, r1
  404f84:	dc1c      	bgt.n	404fc0 <__ieee754_rem_pio2f+0x54>
  404f86:	2800      	cmp	r0, #0
  404f88:	49a4      	ldr	r1, [pc, #656]	; (40521c <__ieee754_rem_pio2f+0x2b0>)
  404f8a:	f340 80fc 	ble.w	405186 <__ieee754_rem_pio2f+0x21a>
  404f8e:	f001 fcf1 	bl	406974 <__aeabi_fsub>
  404f92:	4ba3      	ldr	r3, [pc, #652]	; (405220 <__ieee754_rem_pio2f+0x2b4>)
  404f94:	f024 040f 	bic.w	r4, r4, #15
  404f98:	429c      	cmp	r4, r3
  404f9a:	4606      	mov	r6, r0
  404f9c:	d06c      	beq.n	405078 <__ieee754_rem_pio2f+0x10c>
  404f9e:	49a1      	ldr	r1, [pc, #644]	; (405224 <__ieee754_rem_pio2f+0x2b8>)
  404fa0:	f001 fce8 	bl	406974 <__aeabi_fsub>
  404fa4:	4601      	mov	r1, r0
  404fa6:	6028      	str	r0, [r5, #0]
  404fa8:	4630      	mov	r0, r6
  404faa:	f001 fce3 	bl	406974 <__aeabi_fsub>
  404fae:	499d      	ldr	r1, [pc, #628]	; (405224 <__ieee754_rem_pio2f+0x2b8>)
  404fb0:	f001 fce0 	bl	406974 <__aeabi_fsub>
  404fb4:	2701      	movs	r7, #1
  404fb6:	6068      	str	r0, [r5, #4]
  404fb8:	4638      	mov	r0, r7
  404fba:	b009      	add	sp, #36	; 0x24
  404fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404fc0:	4a99      	ldr	r2, [pc, #612]	; (405228 <__ieee754_rem_pio2f+0x2bc>)
  404fc2:	4294      	cmp	r4, r2
  404fc4:	dd6a      	ble.n	40509c <__ieee754_rem_pio2f+0x130>
  404fc6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
  404fca:	da4e      	bge.n	40506a <__ieee754_rem_pio2f+0xfe>
  404fcc:	15e7      	asrs	r7, r4, #23
  404fce:	3f86      	subs	r7, #134	; 0x86
  404fd0:	eba4 54c7 	sub.w	r4, r4, r7, lsl #23
  404fd4:	4620      	mov	r0, r4
  404fd6:	f001 ffb3 	bl	406f40 <__aeabi_f2iz>
  404fda:	f001 fd81 	bl	406ae0 <__aeabi_i2f>
  404fde:	4603      	mov	r3, r0
  404fe0:	4601      	mov	r1, r0
  404fe2:	4620      	mov	r0, r4
  404fe4:	9305      	str	r3, [sp, #20]
  404fe6:	f001 fcc5 	bl	406974 <__aeabi_fsub>
  404fea:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  404fee:	f001 fdcb 	bl	406b88 <__aeabi_fmul>
  404ff2:	4680      	mov	r8, r0
  404ff4:	f001 ffa4 	bl	406f40 <__aeabi_f2iz>
  404ff8:	f001 fd72 	bl	406ae0 <__aeabi_i2f>
  404ffc:	4601      	mov	r1, r0
  404ffe:	4604      	mov	r4, r0
  405000:	4640      	mov	r0, r8
  405002:	9406      	str	r4, [sp, #24]
  405004:	f001 fcb6 	bl	406974 <__aeabi_fsub>
  405008:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  40500c:	f001 fdbc 	bl	406b88 <__aeabi_fmul>
  405010:	2100      	movs	r1, #0
  405012:	9007      	str	r0, [sp, #28]
  405014:	f001 ff4c 	bl	406eb0 <__aeabi_fcmpeq>
  405018:	2800      	cmp	r0, #0
  40501a:	f000 80cb 	beq.w	4051b4 <__ieee754_rem_pio2f+0x248>
  40501e:	4620      	mov	r0, r4
  405020:	2100      	movs	r1, #0
  405022:	f001 ff45 	bl	406eb0 <__aeabi_fcmpeq>
  405026:	2800      	cmp	r0, #0
  405028:	bf14      	ite	ne
  40502a:	2301      	movne	r3, #1
  40502c:	2302      	moveq	r3, #2
  40502e:	4a7f      	ldr	r2, [pc, #508]	; (40522c <__ieee754_rem_pio2f+0x2c0>)
  405030:	9201      	str	r2, [sp, #4]
  405032:	2102      	movs	r1, #2
  405034:	463a      	mov	r2, r7
  405036:	9100      	str	r1, [sp, #0]
  405038:	a805      	add	r0, sp, #20
  40503a:	4629      	mov	r1, r5
  40503c:	f000 fa1c 	bl	405478 <__kernel_rem_pio2f>
  405040:	2e00      	cmp	r6, #0
  405042:	4607      	mov	r7, r0
  405044:	da0d      	bge.n	405062 <__ieee754_rem_pio2f+0xf6>
  405046:	e895 000c 	ldmia.w	r5, {r2, r3}
  40504a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  40504e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  405052:	4247      	negs	r7, r0
  405054:	602a      	str	r2, [r5, #0]
  405056:	606b      	str	r3, [r5, #4]
  405058:	e003      	b.n	405062 <__ieee754_rem_pio2f+0xf6>
  40505a:	2200      	movs	r2, #0
  40505c:	6008      	str	r0, [r1, #0]
  40505e:	604a      	str	r2, [r1, #4]
  405060:	2700      	movs	r7, #0
  405062:	4638      	mov	r0, r7
  405064:	b009      	add	sp, #36	; 0x24
  405066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40506a:	4601      	mov	r1, r0
  40506c:	f001 fc82 	bl	406974 <__aeabi_fsub>
  405070:	2700      	movs	r7, #0
  405072:	6068      	str	r0, [r5, #4]
  405074:	6028      	str	r0, [r5, #0]
  405076:	e7f4      	b.n	405062 <__ieee754_rem_pio2f+0xf6>
  405078:	496d      	ldr	r1, [pc, #436]	; (405230 <__ieee754_rem_pio2f+0x2c4>)
  40507a:	f001 fc7b 	bl	406974 <__aeabi_fsub>
  40507e:	496d      	ldr	r1, [pc, #436]	; (405234 <__ieee754_rem_pio2f+0x2c8>)
  405080:	4604      	mov	r4, r0
  405082:	f001 fc77 	bl	406974 <__aeabi_fsub>
  405086:	4601      	mov	r1, r0
  405088:	6028      	str	r0, [r5, #0]
  40508a:	4620      	mov	r0, r4
  40508c:	f001 fc72 	bl	406974 <__aeabi_fsub>
  405090:	4968      	ldr	r1, [pc, #416]	; (405234 <__ieee754_rem_pio2f+0x2c8>)
  405092:	f001 fc6f 	bl	406974 <__aeabi_fsub>
  405096:	2701      	movs	r7, #1
  405098:	6068      	str	r0, [r5, #4]
  40509a:	e7e2      	b.n	405062 <__ieee754_rem_pio2f+0xf6>
  40509c:	f000 ff06 	bl	405eac <fabsf>
  4050a0:	4965      	ldr	r1, [pc, #404]	; (405238 <__ieee754_rem_pio2f+0x2cc>)
  4050a2:	4680      	mov	r8, r0
  4050a4:	f001 fd70 	bl	406b88 <__aeabi_fmul>
  4050a8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  4050ac:	f001 fc64 	bl	406978 <__addsf3>
  4050b0:	f001 ff46 	bl	406f40 <__aeabi_f2iz>
  4050b4:	4607      	mov	r7, r0
  4050b6:	f001 fd13 	bl	406ae0 <__aeabi_i2f>
  4050ba:	4958      	ldr	r1, [pc, #352]	; (40521c <__ieee754_rem_pio2f+0x2b0>)
  4050bc:	4683      	mov	fp, r0
  4050be:	f001 fd63 	bl	406b88 <__aeabi_fmul>
  4050c2:	4601      	mov	r1, r0
  4050c4:	4640      	mov	r0, r8
  4050c6:	f001 fc55 	bl	406974 <__aeabi_fsub>
  4050ca:	4956      	ldr	r1, [pc, #344]	; (405224 <__ieee754_rem_pio2f+0x2b8>)
  4050cc:	4681      	mov	r9, r0
  4050ce:	4658      	mov	r0, fp
  4050d0:	f001 fd5a 	bl	406b88 <__aeabi_fmul>
  4050d4:	2f1f      	cmp	r7, #31
  4050d6:	4682      	mov	sl, r0
  4050d8:	dc21      	bgt.n	40511e <__ieee754_rem_pio2f+0x1b2>
  4050da:	4a58      	ldr	r2, [pc, #352]	; (40523c <__ieee754_rem_pio2f+0x2d0>)
  4050dc:	1e79      	subs	r1, r7, #1
  4050de:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
  4050e2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4050e6:	4293      	cmp	r3, r2
  4050e8:	d019      	beq.n	40511e <__ieee754_rem_pio2f+0x1b2>
  4050ea:	4651      	mov	r1, sl
  4050ec:	4648      	mov	r0, r9
  4050ee:	f001 fc41 	bl	406974 <__aeabi_fsub>
  4050f2:	4680      	mov	r8, r0
  4050f4:	f8c5 8000 	str.w	r8, [r5]
  4050f8:	4641      	mov	r1, r8
  4050fa:	4648      	mov	r0, r9
  4050fc:	f001 fc3a 	bl	406974 <__aeabi_fsub>
  405100:	4651      	mov	r1, sl
  405102:	f001 fc37 	bl	406974 <__aeabi_fsub>
  405106:	2e00      	cmp	r6, #0
  405108:	6068      	str	r0, [r5, #4]
  40510a:	daaa      	bge.n	405062 <__ieee754_rem_pio2f+0xf6>
  40510c:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
  405110:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  405114:	f8c5 8000 	str.w	r8, [r5]
  405118:	6068      	str	r0, [r5, #4]
  40511a:	427f      	negs	r7, r7
  40511c:	e7a1      	b.n	405062 <__ieee754_rem_pio2f+0xf6>
  40511e:	4651      	mov	r1, sl
  405120:	4648      	mov	r0, r9
  405122:	f001 fc27 	bl	406974 <__aeabi_fsub>
  405126:	15e2      	asrs	r2, r4, #23
  405128:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  40512c:	1ad3      	subs	r3, r2, r3
  40512e:	2b08      	cmp	r3, #8
  405130:	4680      	mov	r8, r0
  405132:	dddf      	ble.n	4050f4 <__ieee754_rem_pio2f+0x188>
  405134:	493e      	ldr	r1, [pc, #248]	; (405230 <__ieee754_rem_pio2f+0x2c4>)
  405136:	9203      	str	r2, [sp, #12]
  405138:	4658      	mov	r0, fp
  40513a:	f001 fd25 	bl	406b88 <__aeabi_fmul>
  40513e:	4680      	mov	r8, r0
  405140:	4601      	mov	r1, r0
  405142:	4648      	mov	r0, r9
  405144:	f001 fc16 	bl	406974 <__aeabi_fsub>
  405148:	4601      	mov	r1, r0
  40514a:	4604      	mov	r4, r0
  40514c:	4648      	mov	r0, r9
  40514e:	f001 fc11 	bl	406974 <__aeabi_fsub>
  405152:	4641      	mov	r1, r8
  405154:	f001 fc0e 	bl	406974 <__aeabi_fsub>
  405158:	4936      	ldr	r1, [pc, #216]	; (405234 <__ieee754_rem_pio2f+0x2c8>)
  40515a:	4680      	mov	r8, r0
  40515c:	4658      	mov	r0, fp
  40515e:	f001 fd13 	bl	406b88 <__aeabi_fmul>
  405162:	4641      	mov	r1, r8
  405164:	f001 fc06 	bl	406974 <__aeabi_fsub>
  405168:	4601      	mov	r1, r0
  40516a:	4682      	mov	sl, r0
  40516c:	4620      	mov	r0, r4
  40516e:	f001 fc01 	bl	406974 <__aeabi_fsub>
  405172:	9a03      	ldr	r2, [sp, #12]
  405174:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  405178:	1ad2      	subs	r2, r2, r3
  40517a:	2a19      	cmp	r2, #25
  40517c:	4680      	mov	r8, r0
  40517e:	dc2e      	bgt.n	4051de <__ieee754_rem_pio2f+0x272>
  405180:	6028      	str	r0, [r5, #0]
  405182:	46a1      	mov	r9, r4
  405184:	e7b8      	b.n	4050f8 <__ieee754_rem_pio2f+0x18c>
  405186:	f001 fbf7 	bl	406978 <__addsf3>
  40518a:	4b25      	ldr	r3, [pc, #148]	; (405220 <__ieee754_rem_pio2f+0x2b4>)
  40518c:	f024 040f 	bic.w	r4, r4, #15
  405190:	429c      	cmp	r4, r3
  405192:	4606      	mov	r6, r0
  405194:	d010      	beq.n	4051b8 <__ieee754_rem_pio2f+0x24c>
  405196:	4923      	ldr	r1, [pc, #140]	; (405224 <__ieee754_rem_pio2f+0x2b8>)
  405198:	f001 fbee 	bl	406978 <__addsf3>
  40519c:	4601      	mov	r1, r0
  40519e:	6028      	str	r0, [r5, #0]
  4051a0:	4630      	mov	r0, r6
  4051a2:	f001 fbe7 	bl	406974 <__aeabi_fsub>
  4051a6:	491f      	ldr	r1, [pc, #124]	; (405224 <__ieee754_rem_pio2f+0x2b8>)
  4051a8:	f001 fbe6 	bl	406978 <__addsf3>
  4051ac:	f04f 37ff 	mov.w	r7, #4294967295
  4051b0:	6068      	str	r0, [r5, #4]
  4051b2:	e756      	b.n	405062 <__ieee754_rem_pio2f+0xf6>
  4051b4:	2303      	movs	r3, #3
  4051b6:	e73a      	b.n	40502e <__ieee754_rem_pio2f+0xc2>
  4051b8:	491d      	ldr	r1, [pc, #116]	; (405230 <__ieee754_rem_pio2f+0x2c4>)
  4051ba:	f001 fbdd 	bl	406978 <__addsf3>
  4051be:	491d      	ldr	r1, [pc, #116]	; (405234 <__ieee754_rem_pio2f+0x2c8>)
  4051c0:	4604      	mov	r4, r0
  4051c2:	f001 fbd9 	bl	406978 <__addsf3>
  4051c6:	4601      	mov	r1, r0
  4051c8:	6028      	str	r0, [r5, #0]
  4051ca:	4620      	mov	r0, r4
  4051cc:	f001 fbd2 	bl	406974 <__aeabi_fsub>
  4051d0:	4918      	ldr	r1, [pc, #96]	; (405234 <__ieee754_rem_pio2f+0x2c8>)
  4051d2:	f001 fbd1 	bl	406978 <__addsf3>
  4051d6:	f04f 37ff 	mov.w	r7, #4294967295
  4051da:	6068      	str	r0, [r5, #4]
  4051dc:	e741      	b.n	405062 <__ieee754_rem_pio2f+0xf6>
  4051de:	4918      	ldr	r1, [pc, #96]	; (405240 <__ieee754_rem_pio2f+0x2d4>)
  4051e0:	4658      	mov	r0, fp
  4051e2:	f001 fcd1 	bl	406b88 <__aeabi_fmul>
  4051e6:	4601      	mov	r1, r0
  4051e8:	4680      	mov	r8, r0
  4051ea:	4620      	mov	r0, r4
  4051ec:	f001 fbc2 	bl	406974 <__aeabi_fsub>
  4051f0:	4601      	mov	r1, r0
  4051f2:	4681      	mov	r9, r0
  4051f4:	4620      	mov	r0, r4
  4051f6:	f001 fbbd 	bl	406974 <__aeabi_fsub>
  4051fa:	4641      	mov	r1, r8
  4051fc:	f001 fbba 	bl	406974 <__aeabi_fsub>
  405200:	4910      	ldr	r1, [pc, #64]	; (405244 <__ieee754_rem_pio2f+0x2d8>)
  405202:	4604      	mov	r4, r0
  405204:	4658      	mov	r0, fp
  405206:	f001 fcbf 	bl	406b88 <__aeabi_fmul>
  40520a:	4621      	mov	r1, r4
  40520c:	f001 fbb2 	bl	406974 <__aeabi_fsub>
  405210:	4682      	mov	sl, r0
  405212:	e76a      	b.n	4050ea <__ieee754_rem_pio2f+0x17e>
  405214:	3f490fd8 	.word	0x3f490fd8
  405218:	4016cbe3 	.word	0x4016cbe3
  40521c:	3fc90f80 	.word	0x3fc90f80
  405220:	3fc90fd0 	.word	0x3fc90fd0
  405224:	37354443 	.word	0x37354443
  405228:	43490f80 	.word	0x43490f80
  40522c:	0040a390 	.word	0x0040a390
  405230:	37354400 	.word	0x37354400
  405234:	2e85a308 	.word	0x2e85a308
  405238:	3f22f984 	.word	0x3f22f984
  40523c:	0040a310 	.word	0x0040a310
  405240:	2e85a300 	.word	0x2e85a300
  405244:	248d3132 	.word	0x248d3132

00405248 <__ieee754_sqrtf>:
  405248:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
  40524c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
  405250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405252:	4604      	mov	r4, r0
  405254:	d22e      	bcs.n	4052b4 <__ieee754_sqrtf+0x6c>
  405256:	b362      	cbz	r2, 4052b2 <__ieee754_sqrtf+0x6a>
  405258:	2800      	cmp	r0, #0
  40525a:	4603      	mov	r3, r0
  40525c:	db3d      	blt.n	4052da <__ieee754_sqrtf+0x92>
  40525e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
  405262:	ea4f 50e0 	mov.w	r0, r0, asr #23
  405266:	d32c      	bcc.n	4052c2 <__ieee754_sqrtf+0x7a>
  405268:	387f      	subs	r0, #127	; 0x7f
  40526a:	f3c3 0316 	ubfx	r3, r3, #0, #23
  40526e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  405272:	07c2      	lsls	r2, r0, #31
  405274:	bf48      	it	mi
  405276:	005b      	lslmi	r3, r3, #1
  405278:	2600      	movs	r6, #0
  40527a:	1047      	asrs	r7, r0, #1
  40527c:	005b      	lsls	r3, r3, #1
  40527e:	4631      	mov	r1, r6
  405280:	2419      	movs	r4, #25
  405282:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  405286:	188d      	adds	r5, r1, r2
  405288:	429d      	cmp	r5, r3
  40528a:	dc02      	bgt.n	405292 <__ieee754_sqrtf+0x4a>
  40528c:	1b5b      	subs	r3, r3, r5
  40528e:	18a9      	adds	r1, r5, r2
  405290:	4416      	add	r6, r2
  405292:	3c01      	subs	r4, #1
  405294:	ea4f 0343 	mov.w	r3, r3, lsl #1
  405298:	ea4f 0252 	mov.w	r2, r2, lsr #1
  40529c:	d1f3      	bne.n	405286 <__ieee754_sqrtf+0x3e>
  40529e:	b113      	cbz	r3, 4052a6 <__ieee754_sqrtf+0x5e>
  4052a0:	3601      	adds	r6, #1
  4052a2:	f026 0601 	bic.w	r6, r6, #1
  4052a6:	1070      	asrs	r0, r6, #1
  4052a8:	f100 507c 	add.w	r0, r0, #1056964608	; 0x3f000000
  4052ac:	eb00 50c7 	add.w	r0, r0, r7, lsl #23
  4052b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4052b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4052b4:	4601      	mov	r1, r0
  4052b6:	f001 fc67 	bl	406b88 <__aeabi_fmul>
  4052ba:	4621      	mov	r1, r4
  4052bc:	f001 fb5c 	bl	406978 <__addsf3>
  4052c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4052c2:	f414 0200 	ands.w	r2, r4, #8388608	; 0x800000
  4052c6:	d001      	beq.n	4052cc <__ieee754_sqrtf+0x84>
  4052c8:	e00e      	b.n	4052e8 <__ieee754_sqrtf+0xa0>
  4052ca:	460a      	mov	r2, r1
  4052cc:	005b      	lsls	r3, r3, #1
  4052ce:	021c      	lsls	r4, r3, #8
  4052d0:	f102 0101 	add.w	r1, r2, #1
  4052d4:	d5f9      	bpl.n	4052ca <__ieee754_sqrtf+0x82>
  4052d6:	1a80      	subs	r0, r0, r2
  4052d8:	e7c6      	b.n	405268 <__ieee754_sqrtf+0x20>
  4052da:	4601      	mov	r1, r0
  4052dc:	f001 fb4a 	bl	406974 <__aeabi_fsub>
  4052e0:	4601      	mov	r1, r0
  4052e2:	f001 fd05 	bl	406cf0 <__aeabi_fdiv>
  4052e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4052e8:	f04f 32ff 	mov.w	r2, #4294967295
  4052ec:	e7f3      	b.n	4052d6 <__ieee754_sqrtf+0x8e>
  4052ee:	bf00      	nop

004052f0 <__kernel_cosf>:
  4052f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4052f4:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
  4052f8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
  4052fc:	4606      	mov	r6, r0
  4052fe:	460f      	mov	r7, r1
  405300:	da49      	bge.n	405396 <__kernel_cosf+0xa6>
  405302:	f001 fe1d 	bl	406f40 <__aeabi_f2iz>
  405306:	2800      	cmp	r0, #0
  405308:	f000 809d 	beq.w	405446 <__kernel_cosf+0x156>
  40530c:	4631      	mov	r1, r6
  40530e:	4630      	mov	r0, r6
  405310:	f001 fc3a 	bl	406b88 <__aeabi_fmul>
  405314:	494e      	ldr	r1, [pc, #312]	; (405450 <__kernel_cosf+0x160>)
  405316:	4605      	mov	r5, r0
  405318:	f001 fc36 	bl	406b88 <__aeabi_fmul>
  40531c:	494d      	ldr	r1, [pc, #308]	; (405454 <__kernel_cosf+0x164>)
  40531e:	f001 fb2b 	bl	406978 <__addsf3>
  405322:	4629      	mov	r1, r5
  405324:	f001 fc30 	bl	406b88 <__aeabi_fmul>
  405328:	494b      	ldr	r1, [pc, #300]	; (405458 <__kernel_cosf+0x168>)
  40532a:	f001 fb23 	bl	406974 <__aeabi_fsub>
  40532e:	4629      	mov	r1, r5
  405330:	f001 fc2a 	bl	406b88 <__aeabi_fmul>
  405334:	4949      	ldr	r1, [pc, #292]	; (40545c <__kernel_cosf+0x16c>)
  405336:	f001 fb1f 	bl	406978 <__addsf3>
  40533a:	4629      	mov	r1, r5
  40533c:	f001 fc24 	bl	406b88 <__aeabi_fmul>
  405340:	4947      	ldr	r1, [pc, #284]	; (405460 <__kernel_cosf+0x170>)
  405342:	f001 fb17 	bl	406974 <__aeabi_fsub>
  405346:	4629      	mov	r1, r5
  405348:	f001 fc1e 	bl	406b88 <__aeabi_fmul>
  40534c:	4945      	ldr	r1, [pc, #276]	; (405464 <__kernel_cosf+0x174>)
  40534e:	f001 fb13 	bl	406978 <__addsf3>
  405352:	4629      	mov	r1, r5
  405354:	f001 fc18 	bl	406b88 <__aeabi_fmul>
  405358:	4680      	mov	r8, r0
  40535a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  40535e:	4628      	mov	r0, r5
  405360:	f001 fc12 	bl	406b88 <__aeabi_fmul>
  405364:	4641      	mov	r1, r8
  405366:	4604      	mov	r4, r0
  405368:	4628      	mov	r0, r5
  40536a:	f001 fc0d 	bl	406b88 <__aeabi_fmul>
  40536e:	4639      	mov	r1, r7
  405370:	4605      	mov	r5, r0
  405372:	4630      	mov	r0, r6
  405374:	f001 fc08 	bl	406b88 <__aeabi_fmul>
  405378:	4601      	mov	r1, r0
  40537a:	4628      	mov	r0, r5
  40537c:	f001 fafa 	bl	406974 <__aeabi_fsub>
  405380:	4601      	mov	r1, r0
  405382:	4620      	mov	r0, r4
  405384:	f001 faf6 	bl	406974 <__aeabi_fsub>
  405388:	4601      	mov	r1, r0
  40538a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  40538e:	f001 faf1 	bl	406974 <__aeabi_fsub>
  405392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405396:	4601      	mov	r1, r0
  405398:	f001 fbf6 	bl	406b88 <__aeabi_fmul>
  40539c:	492c      	ldr	r1, [pc, #176]	; (405450 <__kernel_cosf+0x160>)
  40539e:	4605      	mov	r5, r0
  4053a0:	f001 fbf2 	bl	406b88 <__aeabi_fmul>
  4053a4:	492b      	ldr	r1, [pc, #172]	; (405454 <__kernel_cosf+0x164>)
  4053a6:	f001 fae7 	bl	406978 <__addsf3>
  4053aa:	4629      	mov	r1, r5
  4053ac:	f001 fbec 	bl	406b88 <__aeabi_fmul>
  4053b0:	4929      	ldr	r1, [pc, #164]	; (405458 <__kernel_cosf+0x168>)
  4053b2:	f001 fadf 	bl	406974 <__aeabi_fsub>
  4053b6:	4629      	mov	r1, r5
  4053b8:	f001 fbe6 	bl	406b88 <__aeabi_fmul>
  4053bc:	4927      	ldr	r1, [pc, #156]	; (40545c <__kernel_cosf+0x16c>)
  4053be:	f001 fadb 	bl	406978 <__addsf3>
  4053c2:	4629      	mov	r1, r5
  4053c4:	f001 fbe0 	bl	406b88 <__aeabi_fmul>
  4053c8:	4925      	ldr	r1, [pc, #148]	; (405460 <__kernel_cosf+0x170>)
  4053ca:	f001 fad3 	bl	406974 <__aeabi_fsub>
  4053ce:	4629      	mov	r1, r5
  4053d0:	f001 fbda 	bl	406b88 <__aeabi_fmul>
  4053d4:	4923      	ldr	r1, [pc, #140]	; (405464 <__kernel_cosf+0x174>)
  4053d6:	f001 facf 	bl	406978 <__addsf3>
  4053da:	4629      	mov	r1, r5
  4053dc:	f001 fbd4 	bl	406b88 <__aeabi_fmul>
  4053e0:	4b21      	ldr	r3, [pc, #132]	; (405468 <__kernel_cosf+0x178>)
  4053e2:	429c      	cmp	r4, r3
  4053e4:	4680      	mov	r8, r0
  4053e6:	ddb8      	ble.n	40535a <__kernel_cosf+0x6a>
  4053e8:	4b20      	ldr	r3, [pc, #128]	; (40546c <__kernel_cosf+0x17c>)
  4053ea:	429c      	cmp	r4, r3
  4053ec:	dc27      	bgt.n	40543e <__kernel_cosf+0x14e>
  4053ee:	f104 447f 	add.w	r4, r4, #4278190080	; 0xff000000
  4053f2:	4621      	mov	r1, r4
  4053f4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  4053f8:	f001 fabc 	bl	406974 <__aeabi_fsub>
  4053fc:	4681      	mov	r9, r0
  4053fe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  405402:	4628      	mov	r0, r5
  405404:	f001 fbc0 	bl	406b88 <__aeabi_fmul>
  405408:	4621      	mov	r1, r4
  40540a:	f001 fab3 	bl	406974 <__aeabi_fsub>
  40540e:	4641      	mov	r1, r8
  405410:	4604      	mov	r4, r0
  405412:	4628      	mov	r0, r5
  405414:	f001 fbb8 	bl	406b88 <__aeabi_fmul>
  405418:	4639      	mov	r1, r7
  40541a:	4605      	mov	r5, r0
  40541c:	4630      	mov	r0, r6
  40541e:	f001 fbb3 	bl	406b88 <__aeabi_fmul>
  405422:	4601      	mov	r1, r0
  405424:	4628      	mov	r0, r5
  405426:	f001 faa5 	bl	406974 <__aeabi_fsub>
  40542a:	4601      	mov	r1, r0
  40542c:	4620      	mov	r0, r4
  40542e:	f001 faa1 	bl	406974 <__aeabi_fsub>
  405432:	4601      	mov	r1, r0
  405434:	4648      	mov	r0, r9
  405436:	f001 fa9d 	bl	406974 <__aeabi_fsub>
  40543a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40543e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 405474 <__kernel_cosf+0x184>
  405442:	4c0b      	ldr	r4, [pc, #44]	; (405470 <__kernel_cosf+0x180>)
  405444:	e7db      	b.n	4053fe <__kernel_cosf+0x10e>
  405446:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  40544a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40544e:	bf00      	nop
  405450:	ad47d74e 	.word	0xad47d74e
  405454:	310f74f6 	.word	0x310f74f6
  405458:	3493f27c 	.word	0x3493f27c
  40545c:	37d00d01 	.word	0x37d00d01
  405460:	3ab60b61 	.word	0x3ab60b61
  405464:	3d2aaaab 	.word	0x3d2aaaab
  405468:	3e999999 	.word	0x3e999999
  40546c:	3f480000 	.word	0x3f480000
  405470:	3e900000 	.word	0x3e900000
  405474:	3f380000 	.word	0x3f380000

00405478 <__kernel_rem_pio2f>:
  405478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40547c:	b0dd      	sub	sp, #372	; 0x174
  40547e:	4c90      	ldr	r4, [pc, #576]	; (4056c0 <__kernel_rem_pio2f+0x248>)
  405480:	9308      	str	r3, [sp, #32]
  405482:	3b01      	subs	r3, #1
  405484:	9301      	str	r3, [sp, #4]
  405486:	1ed3      	subs	r3, r2, #3
  405488:	bf48      	it	mi
  40548a:	1d13      	addmi	r3, r2, #4
  40548c:	9d66      	ldr	r5, [sp, #408]	; 0x198
  40548e:	9107      	str	r1, [sp, #28]
  405490:	10db      	asrs	r3, r3, #3
  405492:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405496:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
  40549a:	9309      	str	r3, [sp, #36]	; 0x24
  40549c:	4619      	mov	r1, r3
  40549e:	3301      	adds	r3, #1
  4054a0:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
  4054a4:	9405      	str	r4, [sp, #20]
  4054a6:	9a01      	ldr	r2, [sp, #4]
  4054a8:	9304      	str	r3, [sp, #16]
  4054aa:	9b05      	ldr	r3, [sp, #20]
  4054ac:	9002      	str	r0, [sp, #8]
  4054ae:	189c      	adds	r4, r3, r2
  4054b0:	eba1 0602 	sub.w	r6, r1, r2
  4054b4:	d417      	bmi.n	4054e6 <__kernel_rem_pio2f+0x6e>
  4054b6:	4434      	add	r4, r6
  4054b8:	2500      	movs	r5, #0
  4054ba:	3401      	adds	r4, #1
  4054bc:	af1f      	add	r7, sp, #124	; 0x7c
  4054be:	f8dd 819c 	ldr.w	r8, [sp, #412]	; 0x19c
  4054c2:	e008      	b.n	4054d6 <__kernel_rem_pio2f+0x5e>
  4054c4:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
  4054c8:	f001 fb0a 	bl	406ae0 <__aeabi_i2f>
  4054cc:	3601      	adds	r6, #1
  4054ce:	42a6      	cmp	r6, r4
  4054d0:	f847 0f04 	str.w	r0, [r7, #4]!
  4054d4:	d007      	beq.n	4054e6 <__kernel_rem_pio2f+0x6e>
  4054d6:	2e00      	cmp	r6, #0
  4054d8:	daf4      	bge.n	4054c4 <__kernel_rem_pio2f+0x4c>
  4054da:	3601      	adds	r6, #1
  4054dc:	4628      	mov	r0, r5
  4054de:	42a6      	cmp	r6, r4
  4054e0:	f847 0f04 	str.w	r0, [r7, #4]!
  4054e4:	d1f7      	bne.n	4054d6 <__kernel_rem_pio2f+0x5e>
  4054e6:	9b05      	ldr	r3, [sp, #20]
  4054e8:	2b00      	cmp	r3, #0
  4054ea:	db28      	blt.n	40553e <__kernel_rem_pio2f+0xc6>
  4054ec:	9b08      	ldr	r3, [sp, #32]
  4054ee:	009e      	lsls	r6, r3, #2
  4054f0:	9b02      	ldr	r3, [sp, #8]
  4054f2:	1f35      	subs	r5, r6, #4
  4054f4:	441d      	add	r5, r3
  4054f6:	ab20      	add	r3, sp, #128	; 0x80
  4054f8:	441e      	add	r6, r3
  4054fa:	9b05      	ldr	r3, [sp, #20]
  4054fc:	aa48      	add	r2, sp, #288	; 0x120
  4054fe:	f04f 0900 	mov.w	r9, #0
  405502:	eb02 0883 	add.w	r8, r2, r3, lsl #2
  405506:	af47      	add	r7, sp, #284	; 0x11c
  405508:	9b01      	ldr	r3, [sp, #4]
  40550a:	2b00      	cmp	r3, #0
  40550c:	f2c0 82b9 	blt.w	405a82 <__kernel_rem_pio2f+0x60a>
  405510:	9b02      	ldr	r3, [sp, #8]
  405512:	46b3      	mov	fp, r6
  405514:	1f1c      	subs	r4, r3, #4
  405516:	46ca      	mov	sl, r9
  405518:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
  40551c:	f854 0f04 	ldr.w	r0, [r4, #4]!
  405520:	f001 fb32 	bl	406b88 <__aeabi_fmul>
  405524:	4601      	mov	r1, r0
  405526:	4650      	mov	r0, sl
  405528:	f001 fa26 	bl	406978 <__addsf3>
  40552c:	42ac      	cmp	r4, r5
  40552e:	4682      	mov	sl, r0
  405530:	d1f2      	bne.n	405518 <__kernel_rem_pio2f+0xa0>
  405532:	f847 af04 	str.w	sl, [r7, #4]!
  405536:	4547      	cmp	r7, r8
  405538:	f106 0604 	add.w	r6, r6, #4
  40553c:	d1e4      	bne.n	405508 <__kernel_rem_pio2f+0x90>
  40553e:	9805      	ldr	r0, [sp, #20]
  405540:	9908      	ldr	r1, [sp, #32]
  405542:	9c02      	ldr	r4, [sp, #8]
  405544:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
  405548:	4603      	mov	r3, r0
  40554a:	4413      	add	r3, r2
  40554c:	009b      	lsls	r3, r3, #2
  40554e:	440a      	add	r2, r1
  405550:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
  405554:	1f19      	subs	r1, r3, #4
  405556:	eb04 0582 	add.w	r5, r4, r2, lsl #2
  40555a:	4453      	add	r3, sl
  40555c:	eb0a 0201 	add.w	r2, sl, r1
  405560:	920a      	str	r2, [sp, #40]	; 0x28
  405562:	930b      	str	r3, [sp, #44]	; 0x2c
  405564:	4680      	mov	r8, r0
  405566:	ea4f 0388 	mov.w	r3, r8, lsl #2
  40556a:	aa5c      	add	r2, sp, #368	; 0x170
  40556c:	9303      	str	r3, [sp, #12]
  40556e:	18d3      	adds	r3, r2, r3
  405570:	f1b8 0f00 	cmp.w	r8, #0
  405574:	f853 9c50 	ldr.w	r9, [r3, #-80]
  405578:	dd22      	ble.n	4055c0 <__kernel_rem_pio2f+0x148>
  40557a:	eb02 0488 	add.w	r4, r2, r8, lsl #2
  40557e:	3c54      	subs	r4, #84	; 0x54
  405580:	ae0b      	add	r6, sp, #44	; 0x2c
  405582:	af47      	add	r7, sp, #284	; 0x11c
  405584:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
  405588:	4648      	mov	r0, r9
  40558a:	f001 fafd 	bl	406b88 <__aeabi_fmul>
  40558e:	f001 fcd7 	bl	406f40 <__aeabi_f2iz>
  405592:	f001 faa5 	bl	406ae0 <__aeabi_i2f>
  405596:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  40559a:	4683      	mov	fp, r0
  40559c:	f001 faf4 	bl	406b88 <__aeabi_fmul>
  4055a0:	4601      	mov	r1, r0
  4055a2:	4648      	mov	r0, r9
  4055a4:	f001 f9e6 	bl	406974 <__aeabi_fsub>
  4055a8:	f001 fcca 	bl	406f40 <__aeabi_f2iz>
  4055ac:	f854 1904 	ldr.w	r1, [r4], #-4
  4055b0:	f846 0f04 	str.w	r0, [r6, #4]!
  4055b4:	4658      	mov	r0, fp
  4055b6:	f001 f9df 	bl	406978 <__addsf3>
  4055ba:	42bc      	cmp	r4, r7
  4055bc:	4681      	mov	r9, r0
  4055be:	d1e1      	bne.n	405584 <__kernel_rem_pio2f+0x10c>
  4055c0:	9e04      	ldr	r6, [sp, #16]
  4055c2:	4648      	mov	r0, r9
  4055c4:	4631      	mov	r1, r6
  4055c6:	f000 fcbb 	bl	405f40 <scalbnf>
  4055ca:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
  4055ce:	4604      	mov	r4, r0
  4055d0:	f001 fada 	bl	406b88 <__aeabi_fmul>
  4055d4:	f000 fc6e 	bl	405eb4 <floorf>
  4055d8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
  4055dc:	f001 fad4 	bl	406b88 <__aeabi_fmul>
  4055e0:	4601      	mov	r1, r0
  4055e2:	4620      	mov	r0, r4
  4055e4:	f001 f9c6 	bl	406974 <__aeabi_fsub>
  4055e8:	4604      	mov	r4, r0
  4055ea:	f001 fca9 	bl	406f40 <__aeabi_f2iz>
  4055ee:	4681      	mov	r9, r0
  4055f0:	9006      	str	r0, [sp, #24]
  4055f2:	f001 fa75 	bl	406ae0 <__aeabi_i2f>
  4055f6:	4601      	mov	r1, r0
  4055f8:	4620      	mov	r0, r4
  4055fa:	f001 f9bb 	bl	406974 <__aeabi_fsub>
  4055fe:	2e00      	cmp	r6, #0
  405600:	4607      	mov	r7, r0
  405602:	f340 80e6 	ble.w	4057d2 <__kernel_rem_pio2f+0x35a>
  405606:	f108 31ff 	add.w	r1, r8, #4294967295
  40560a:	f1c6 0308 	rsb	r3, r6, #8
  40560e:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
  405612:	fa42 f003 	asr.w	r0, r2, r3
  405616:	fa00 f303 	lsl.w	r3, r0, r3
  40561a:	1ad3      	subs	r3, r2, r3
  40561c:	464a      	mov	r2, r9
  40561e:	f1c6 0407 	rsb	r4, r6, #7
  405622:	4402      	add	r2, r0
  405624:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
  405628:	9206      	str	r2, [sp, #24]
  40562a:	fa43 f404 	asr.w	r4, r3, r4
  40562e:	2c00      	cmp	r4, #0
  405630:	dd5b      	ble.n	4056ea <__kernel_rem_pio2f+0x272>
  405632:	9b06      	ldr	r3, [sp, #24]
  405634:	f1b8 0f00 	cmp.w	r8, #0
  405638:	f103 0301 	add.w	r3, r3, #1
  40563c:	9306      	str	r3, [sp, #24]
  40563e:	f340 823b 	ble.w	405ab8 <__kernel_rem_pio2f+0x640>
  405642:	f8da 6000 	ldr.w	r6, [sl]
  405646:	2e00      	cmp	r6, #0
  405648:	f040 8294 	bne.w	405b74 <__kernel_rem_pio2f+0x6fc>
  40564c:	f1b8 0f01 	cmp.w	r8, #1
  405650:	f340 8255 	ble.w	405afe <__kernel_rem_pio2f+0x686>
  405654:	4652      	mov	r2, sl
  405656:	2301      	movs	r3, #1
  405658:	f852 6f04 	ldr.w	r6, [r2, #4]!
  40565c:	2e00      	cmp	r6, #0
  40565e:	f000 824a 	beq.w	405af6 <__kernel_rem_pio2f+0x67e>
  405662:	1c59      	adds	r1, r3, #1
  405664:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
  405668:	4588      	cmp	r8, r1
  40566a:	f84a 6023 	str.w	r6, [sl, r3, lsl #2]
  40566e:	dd14      	ble.n	40569a <__kernel_rem_pio2f+0x222>
  405670:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
  405674:	3302      	adds	r3, #2
  405676:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  40567a:	4598      	cmp	r8, r3
  40567c:	f84a 2021 	str.w	r2, [sl, r1, lsl #2]
  405680:	dd0b      	ble.n	40569a <__kernel_rem_pio2f+0x222>
  405682:	9a03      	ldr	r2, [sp, #12]
  405684:	4452      	add	r2, sl
  405686:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  40568a:	4691      	mov	r9, r2
  40568c:	681a      	ldr	r2, [r3, #0]
  40568e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  405692:	f843 2b04 	str.w	r2, [r3], #4
  405696:	454b      	cmp	r3, r9
  405698:	d1f8      	bne.n	40568c <__kernel_rem_pio2f+0x214>
  40569a:	9b04      	ldr	r3, [sp, #16]
  40569c:	2b00      	cmp	r3, #0
  40569e:	dd11      	ble.n	4056c4 <__kernel_rem_pio2f+0x24c>
  4056a0:	9b04      	ldr	r3, [sp, #16]
  4056a2:	2b01      	cmp	r3, #1
  4056a4:	f04f 0601 	mov.w	r6, #1
  4056a8:	f040 820e 	bne.w	405ac8 <__kernel_rem_pio2f+0x650>
  4056ac:	f108 32ff 	add.w	r2, r8, #4294967295
  4056b0:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
  4056b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4056b8:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  4056bc:	e20e      	b.n	405adc <__kernel_rem_pio2f+0x664>
  4056be:	bf00      	nop
  4056c0:	0040a6d4 	.word	0x0040a6d4
  4056c4:	2c02      	cmp	r4, #2
  4056c6:	d110      	bne.n	4056ea <__kernel_rem_pio2f+0x272>
  4056c8:	4639      	mov	r1, r7
  4056ca:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  4056ce:	f001 f951 	bl	406974 <__aeabi_fsub>
  4056d2:	4607      	mov	r7, r0
  4056d4:	9904      	ldr	r1, [sp, #16]
  4056d6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  4056da:	f000 fc31 	bl	405f40 <scalbnf>
  4056de:	4601      	mov	r1, r0
  4056e0:	4638      	mov	r0, r7
  4056e2:	f001 f947 	bl	406974 <__aeabi_fsub>
  4056e6:	2402      	movs	r4, #2
  4056e8:	4607      	mov	r7, r0
  4056ea:	2100      	movs	r1, #0
  4056ec:	4638      	mov	r0, r7
  4056ee:	f001 fbdf 	bl	406eb0 <__aeabi_fcmpeq>
  4056f2:	2800      	cmp	r0, #0
  4056f4:	f000 8083 	beq.w	4057fe <__kernel_rem_pio2f+0x386>
  4056f8:	9b05      	ldr	r3, [sp, #20]
  4056fa:	f108 37ff 	add.w	r7, r8, #4294967295
  4056fe:	42bb      	cmp	r3, r7
  405700:	dc0f      	bgt.n	405722 <__kernel_rem_pio2f+0x2aa>
  405702:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
  405706:	3b01      	subs	r3, #1
  405708:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40570a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  40570e:	2200      	movs	r2, #0
  405710:	f853 1904 	ldr.w	r1, [r3], #-4
  405714:	4283      	cmp	r3, r0
  405716:	ea42 0201 	orr.w	r2, r2, r1
  40571a:	d1f9      	bne.n	405710 <__kernel_rem_pio2f+0x298>
  40571c:	2a00      	cmp	r2, #0
  40571e:	f040 809d 	bne.w	40585c <__kernel_rem_pio2f+0x3e4>
  405722:	9b05      	ldr	r3, [sp, #20]
  405724:	3b01      	subs	r3, #1
  405726:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
  40572a:	2b00      	cmp	r3, #0
  40572c:	f040 81f4 	bne.w	405b18 <__kernel_rem_pio2f+0x6a0>
  405730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405732:	2301      	movs	r3, #1
  405734:	f852 1904 	ldr.w	r1, [r2], #-4
  405738:	3301      	adds	r3, #1
  40573a:	2900      	cmp	r1, #0
  40573c:	d0fa      	beq.n	405734 <__kernel_rem_pio2f+0x2bc>
  40573e:	4443      	add	r3, r8
  405740:	461a      	mov	r2, r3
  405742:	9306      	str	r3, [sp, #24]
  405744:	f108 0301 	add.w	r3, r8, #1
  405748:	4293      	cmp	r3, r2
  40574a:	dc37      	bgt.n	4057bc <__kernel_rem_pio2f+0x344>
  40574c:	9908      	ldr	r1, [sp, #32]
  40574e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405750:	eb01 0708 	add.w	r7, r1, r8
  405754:	a920      	add	r1, sp, #128	; 0x80
  405756:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  40575a:	9906      	ldr	r1, [sp, #24]
  40575c:	189e      	adds	r6, r3, r2
  40575e:	eb01 0902 	add.w	r9, r1, r2
  405762:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
  405766:	9a67      	ldr	r2, [sp, #412]	; 0x19c
  405768:	3e01      	subs	r6, #1
  40576a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  40576e:	aa48      	add	r2, sp, #288	; 0x120
  405770:	eb02 0883 	add.w	r8, r2, r3, lsl #2
  405774:	9b67      	ldr	r3, [sp, #412]	; 0x19c
  405776:	eb03 0389 	add.w	r3, r3, r9, lsl #2
  40577a:	9303      	str	r3, [sp, #12]
  40577c:	f856 0f04 	ldr.w	r0, [r6, #4]!
  405780:	f001 f9ae 	bl	406ae0 <__aeabi_i2f>
  405784:	9b01      	ldr	r3, [sp, #4]
  405786:	f847 0b04 	str.w	r0, [r7], #4
  40578a:	2b00      	cmp	r3, #0
  40578c:	db19      	blt.n	4057c2 <__kernel_rem_pio2f+0x34a>
  40578e:	9b02      	ldr	r3, [sp, #8]
  405790:	46bb      	mov	fp, r7
  405792:	1f1c      	subs	r4, r3, #4
  405794:	f04f 0900 	mov.w	r9, #0
  405798:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
  40579c:	f854 0f04 	ldr.w	r0, [r4, #4]!
  4057a0:	f001 f9f2 	bl	406b88 <__aeabi_fmul>
  4057a4:	4601      	mov	r1, r0
  4057a6:	4648      	mov	r0, r9
  4057a8:	f001 f8e6 	bl	406978 <__addsf3>
  4057ac:	42ac      	cmp	r4, r5
  4057ae:	4681      	mov	r9, r0
  4057b0:	d1f2      	bne.n	405798 <__kernel_rem_pio2f+0x320>
  4057b2:	9b03      	ldr	r3, [sp, #12]
  4057b4:	f848 9b04 	str.w	r9, [r8], #4
  4057b8:	429e      	cmp	r6, r3
  4057ba:	d1df      	bne.n	40577c <__kernel_rem_pio2f+0x304>
  4057bc:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4057c0:	e6d1      	b.n	405566 <__kernel_rem_pio2f+0xee>
  4057c2:	9b03      	ldr	r3, [sp, #12]
  4057c4:	f04f 0900 	mov.w	r9, #0
  4057c8:	429e      	cmp	r6, r3
  4057ca:	f848 9b04 	str.w	r9, [r8], #4
  4057ce:	d1d5      	bne.n	40577c <__kernel_rem_pio2f+0x304>
  4057d0:	e7f4      	b.n	4057bc <__kernel_rem_pio2f+0x344>
  4057d2:	d105      	bne.n	4057e0 <__kernel_rem_pio2f+0x368>
  4057d4:	f108 33ff 	add.w	r3, r8, #4294967295
  4057d8:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
  4057dc:	1224      	asrs	r4, r4, #8
  4057de:	e726      	b.n	40562e <__kernel_rem_pio2f+0x1b6>
  4057e0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  4057e4:	f001 fb82 	bl	406eec <__aeabi_fcmpge>
  4057e8:	2800      	cmp	r0, #0
  4057ea:	f040 8153 	bne.w	405a94 <__kernel_rem_pio2f+0x61c>
  4057ee:	4604      	mov	r4, r0
  4057f0:	2100      	movs	r1, #0
  4057f2:	4638      	mov	r0, r7
  4057f4:	f001 fb5c 	bl	406eb0 <__aeabi_fcmpeq>
  4057f8:	2800      	cmp	r0, #0
  4057fa:	f47f af7d 	bne.w	4056f8 <__kernel_rem_pio2f+0x280>
  4057fe:	9e04      	ldr	r6, [sp, #16]
  405800:	4638      	mov	r0, r7
  405802:	4271      	negs	r1, r6
  405804:	f000 fb9c 	bl	405f40 <scalbnf>
  405808:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  40580c:	46a1      	mov	r9, r4
  40580e:	4604      	mov	r4, r0
  405810:	f001 fb6c 	bl	406eec <__aeabi_fcmpge>
  405814:	2800      	cmp	r0, #0
  405816:	f000 818d 	beq.w	405b34 <__kernel_rem_pio2f+0x6bc>
  40581a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
  40581e:	4620      	mov	r0, r4
  405820:	f001 f9b2 	bl	406b88 <__aeabi_fmul>
  405824:	f001 fb8c 	bl	406f40 <__aeabi_f2iz>
  405828:	f001 f95a 	bl	406ae0 <__aeabi_i2f>
  40582c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  405830:	4605      	mov	r5, r0
  405832:	f001 f9a9 	bl	406b88 <__aeabi_fmul>
  405836:	4601      	mov	r1, r0
  405838:	4620      	mov	r0, r4
  40583a:	f001 f89b 	bl	406974 <__aeabi_fsub>
  40583e:	f001 fb7f 	bl	406f40 <__aeabi_f2iz>
  405842:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
  405846:	4628      	mov	r0, r5
  405848:	f001 fb7a 	bl	406f40 <__aeabi_f2iz>
  40584c:	f108 0701 	add.w	r7, r8, #1
  405850:	4633      	mov	r3, r6
  405852:	3308      	adds	r3, #8
  405854:	9304      	str	r3, [sp, #16]
  405856:	f84a 0027 	str.w	r0, [sl, r7, lsl #2]
  40585a:	e012      	b.n	405882 <__kernel_rem_pio2f+0x40a>
  40585c:	9a04      	ldr	r2, [sp, #16]
  40585e:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  405862:	3a08      	subs	r2, #8
  405864:	46a1      	mov	r9, r4
  405866:	9204      	str	r2, [sp, #16]
  405868:	b95b      	cbnz	r3, 405882 <__kernel_rem_pio2f+0x40a>
  40586a:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
  40586e:	3b01      	subs	r3, #1
  405870:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  405874:	f853 1904 	ldr.w	r1, [r3], #-4
  405878:	3f01      	subs	r7, #1
  40587a:	3a08      	subs	r2, #8
  40587c:	2900      	cmp	r1, #0
  40587e:	d0f9      	beq.n	405874 <__kernel_rem_pio2f+0x3fc>
  405880:	9204      	str	r2, [sp, #16]
  405882:	9904      	ldr	r1, [sp, #16]
  405884:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  405888:	f000 fb5a 	bl	405f40 <scalbnf>
  40588c:	2f00      	cmp	r7, #0
  40588e:	4604      	mov	r4, r0
  405890:	f2c0 815c 	blt.w	405b4c <__kernel_rem_pio2f+0x6d4>
  405894:	00bb      	lsls	r3, r7, #2
  405896:	a948      	add	r1, sp, #288	; 0x120
  405898:	1d1a      	adds	r2, r3, #4
  40589a:	eb01 0803 	add.w	r8, r1, r3
  40589e:	9301      	str	r3, [sp, #4]
  4058a0:	9202      	str	r2, [sp, #8]
  4058a2:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
  4058a6:	eb0a 0b02 	add.w	fp, sl, r2
  4058aa:	f108 0504 	add.w	r5, r8, #4
  4058ae:	f85b 0d04 	ldr.w	r0, [fp, #-4]!
  4058b2:	f001 f915 	bl	406ae0 <__aeabi_i2f>
  4058b6:	4621      	mov	r1, r4
  4058b8:	f001 f966 	bl	406b88 <__aeabi_fmul>
  4058bc:	4631      	mov	r1, r6
  4058be:	f845 0d04 	str.w	r0, [r5, #-4]!
  4058c2:	4620      	mov	r0, r4
  4058c4:	f001 f960 	bl	406b88 <__aeabi_fmul>
  4058c8:	45d3      	cmp	fp, sl
  4058ca:	4604      	mov	r4, r0
  4058cc:	d1ef      	bne.n	4058ae <__kernel_rem_pio2f+0x436>
  4058ce:	2600      	movs	r6, #0
  4058d0:	f8dd b014 	ldr.w	fp, [sp, #20]
  4058d4:	9703      	str	r7, [sp, #12]
  4058d6:	f1a8 0804 	sub.w	r8, r8, #4
  4058da:	46b2      	mov	sl, r6
  4058dc:	f1bb 0f00 	cmp.w	fp, #0
  4058e0:	bfb8      	it	lt
  4058e2:	2500      	movlt	r5, #0
  4058e4:	db15      	blt.n	405912 <__kernel_rem_pio2f+0x49a>
  4058e6:	4ea5      	ldr	r6, [pc, #660]	; (405b7c <__kernel_rem_pio2f+0x704>)
  4058e8:	48a5      	ldr	r0, [pc, #660]	; (405b80 <__kernel_rem_pio2f+0x708>)
  4058ea:	4647      	mov	r7, r8
  4058ec:	2500      	movs	r5, #0
  4058ee:	2400      	movs	r4, #0
  4058f0:	e003      	b.n	4058fa <__kernel_rem_pio2f+0x482>
  4058f2:	4554      	cmp	r4, sl
  4058f4:	dc0d      	bgt.n	405912 <__kernel_rem_pio2f+0x49a>
  4058f6:	f856 0f04 	ldr.w	r0, [r6, #4]!
  4058fa:	f857 1f04 	ldr.w	r1, [r7, #4]!
  4058fe:	f001 f943 	bl	406b88 <__aeabi_fmul>
  405902:	4601      	mov	r1, r0
  405904:	4628      	mov	r0, r5
  405906:	f001 f837 	bl	406978 <__addsf3>
  40590a:	3401      	adds	r4, #1
  40590c:	45a3      	cmp	fp, r4
  40590e:	4605      	mov	r5, r0
  405910:	daef      	bge.n	4058f2 <__kernel_rem_pio2f+0x47a>
  405912:	ab5c      	add	r3, sp, #368	; 0x170
  405914:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  405918:	f1a8 0804 	sub.w	r8, r8, #4
  40591c:	f843 5ca0 	str.w	r5, [r3, #-160]
  405920:	ab46      	add	r3, sp, #280	; 0x118
  405922:	4543      	cmp	r3, r8
  405924:	f10a 0a01 	add.w	sl, sl, #1
  405928:	d1d8      	bne.n	4058dc <__kernel_rem_pio2f+0x464>
  40592a:	9b66      	ldr	r3, [sp, #408]	; 0x198
  40592c:	9f03      	ldr	r7, [sp, #12]
  40592e:	2b03      	cmp	r3, #3
  405930:	d85a      	bhi.n	4059e8 <__kernel_rem_pio2f+0x570>
  405932:	e8df f003 	tbb	[pc, r3]
  405936:	5f8e      	.short	0x5f8e
  405938:	025f      	.short	0x025f
  40593a:	2f00      	cmp	r7, #0
  40593c:	f340 8104 	ble.w	405b48 <__kernel_rem_pio2f+0x6d0>
  405940:	9a01      	ldr	r2, [sp, #4]
  405942:	a95c      	add	r1, sp, #368	; 0x170
  405944:	188b      	adds	r3, r1, r2
  405946:	ac34      	add	r4, sp, #208	; 0xd0
  405948:	f853 6ca0 	ldr.w	r6, [r3, #-160]
  40594c:	18a5      	adds	r5, r4, r2
  40594e:	f855 ac04 	ldr.w	sl, [r5, #-4]
  405952:	4631      	mov	r1, r6
  405954:	4650      	mov	r0, sl
  405956:	f001 f80f 	bl	406978 <__addsf3>
  40595a:	4680      	mov	r8, r0
  40595c:	4601      	mov	r1, r0
  40595e:	4650      	mov	r0, sl
  405960:	f001 f808 	bl	406974 <__aeabi_fsub>
  405964:	4631      	mov	r1, r6
  405966:	f001 f807 	bl	406978 <__addsf3>
  40596a:	6028      	str	r0, [r5, #0]
  40596c:	f845 8d04 	str.w	r8, [r5, #-4]!
  405970:	42ac      	cmp	r4, r5
  405972:	4646      	mov	r6, r8
  405974:	d1eb      	bne.n	40594e <__kernel_rem_pio2f+0x4d6>
  405976:	2f01      	cmp	r7, #1
  405978:	f340 80e6 	ble.w	405b48 <__kernel_rem_pio2f+0x6d0>
  40597c:	9a01      	ldr	r2, [sp, #4]
  40597e:	a95c      	add	r1, sp, #368	; 0x170
  405980:	188b      	adds	r3, r1, r2
  405982:	4414      	add	r4, r2
  405984:	f853 6ca0 	ldr.w	r6, [r3, #-160]
  405988:	4625      	mov	r5, r4
  40598a:	f10d 0ad4 	add.w	sl, sp, #212	; 0xd4
  40598e:	f855 8c04 	ldr.w	r8, [r5, #-4]
  405992:	4631      	mov	r1, r6
  405994:	4640      	mov	r0, r8
  405996:	f000 ffef 	bl	406978 <__addsf3>
  40599a:	4607      	mov	r7, r0
  40599c:	4601      	mov	r1, r0
  40599e:	4640      	mov	r0, r8
  4059a0:	f000 ffe8 	bl	406974 <__aeabi_fsub>
  4059a4:	4631      	mov	r1, r6
  4059a6:	f000 ffe7 	bl	406978 <__addsf3>
  4059aa:	6028      	str	r0, [r5, #0]
  4059ac:	f845 7d04 	str.w	r7, [r5, #-4]!
  4059b0:	45aa      	cmp	sl, r5
  4059b2:	463e      	mov	r6, r7
  4059b4:	d1eb      	bne.n	40598e <__kernel_rem_pio2f+0x516>
  4059b6:	2000      	movs	r0, #0
  4059b8:	3404      	adds	r4, #4
  4059ba:	ad36      	add	r5, sp, #216	; 0xd8
  4059bc:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  4059c0:	f000 ffda 	bl	406978 <__addsf3>
  4059c4:	42a5      	cmp	r5, r4
  4059c6:	d1f9      	bne.n	4059bc <__kernel_rem_pio2f+0x544>
  4059c8:	f1b9 0f00 	cmp.w	r9, #0
  4059cc:	f000 80b9 	beq.w	405b42 <__kernel_rem_pio2f+0x6ca>
  4059d0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
  4059d2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
  4059d4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  4059d8:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  4059dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4059e0:	9c07      	ldr	r4, [sp, #28]
  4059e2:	60a0      	str	r0, [r4, #8]
  4059e4:	6022      	str	r2, [r4, #0]
  4059e6:	6063      	str	r3, [r4, #4]
  4059e8:	9b06      	ldr	r3, [sp, #24]
  4059ea:	f003 0007 	and.w	r0, r3, #7
  4059ee:	b05d      	add	sp, #372	; 0x174
  4059f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059f4:	9c01      	ldr	r4, [sp, #4]
  4059f6:	ad34      	add	r5, sp, #208	; 0xd0
  4059f8:	3404      	adds	r4, #4
  4059fa:	442c      	add	r4, r5
  4059fc:	2000      	movs	r0, #0
  4059fe:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  405a02:	f000 ffb9 	bl	406978 <__addsf3>
  405a06:	42ac      	cmp	r4, r5
  405a08:	d1f9      	bne.n	4059fe <__kernel_rem_pio2f+0x586>
  405a0a:	f1b9 0f00 	cmp.w	r9, #0
  405a0e:	f000 8085 	beq.w	405b1c <__kernel_rem_pio2f+0x6a4>
  405a12:	9a07      	ldr	r2, [sp, #28]
  405a14:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
  405a18:	4601      	mov	r1, r0
  405a1a:	6013      	str	r3, [r2, #0]
  405a1c:	9834      	ldr	r0, [sp, #208]	; 0xd0
  405a1e:	f000 ffa9 	bl	406974 <__aeabi_fsub>
  405a22:	2f00      	cmp	r7, #0
  405a24:	dd0b      	ble.n	405a3e <__kernel_rem_pio2f+0x5c6>
  405a26:	ad34      	add	r5, sp, #208	; 0xd0
  405a28:	2401      	movs	r4, #1
  405a2a:	3401      	adds	r4, #1
  405a2c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  405a30:	f000 ffa2 	bl	406978 <__addsf3>
  405a34:	42a7      	cmp	r7, r4
  405a36:	daf8      	bge.n	405a2a <__kernel_rem_pio2f+0x5b2>
  405a38:	f1b9 0f00 	cmp.w	r9, #0
  405a3c:	d001      	beq.n	405a42 <__kernel_rem_pio2f+0x5ca>
  405a3e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  405a42:	9b07      	ldr	r3, [sp, #28]
  405a44:	6058      	str	r0, [r3, #4]
  405a46:	9b06      	ldr	r3, [sp, #24]
  405a48:	f003 0007 	and.w	r0, r3, #7
  405a4c:	b05d      	add	sp, #372	; 0x174
  405a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a52:	9b02      	ldr	r3, [sp, #8]
  405a54:	ad34      	add	r5, sp, #208	; 0xd0
  405a56:	442b      	add	r3, r5
  405a58:	2000      	movs	r0, #0
  405a5a:	461c      	mov	r4, r3
  405a5c:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  405a60:	f000 ff8a 	bl	406978 <__addsf3>
  405a64:	42a5      	cmp	r5, r4
  405a66:	d1f9      	bne.n	405a5c <__kernel_rem_pio2f+0x5e4>
  405a68:	f1b9 0f00 	cmp.w	r9, #0
  405a6c:	d001      	beq.n	405a72 <__kernel_rem_pio2f+0x5fa>
  405a6e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  405a72:	9b07      	ldr	r3, [sp, #28]
  405a74:	6018      	str	r0, [r3, #0]
  405a76:	9b06      	ldr	r3, [sp, #24]
  405a78:	f003 0007 	and.w	r0, r3, #7
  405a7c:	b05d      	add	sp, #372	; 0x174
  405a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a82:	46ca      	mov	sl, r9
  405a84:	f847 af04 	str.w	sl, [r7, #4]!
  405a88:	4547      	cmp	r7, r8
  405a8a:	f106 0604 	add.w	r6, r6, #4
  405a8e:	f47f ad3b 	bne.w	405508 <__kernel_rem_pio2f+0x90>
  405a92:	e554      	b.n	40553e <__kernel_rem_pio2f+0xc6>
  405a94:	9b06      	ldr	r3, [sp, #24]
  405a96:	f1b8 0f00 	cmp.w	r8, #0
  405a9a:	f103 0301 	add.w	r3, r3, #1
  405a9e:	9306      	str	r3, [sp, #24]
  405aa0:	bfc8      	it	gt
  405aa2:	2402      	movgt	r4, #2
  405aa4:	f73f adcd 	bgt.w	405642 <__kernel_rem_pio2f+0x1ca>
  405aa8:	4639      	mov	r1, r7
  405aaa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  405aae:	f000 ff61 	bl	406974 <__aeabi_fsub>
  405ab2:	2402      	movs	r4, #2
  405ab4:	4607      	mov	r7, r0
  405ab6:	e618      	b.n	4056ea <__kernel_rem_pio2f+0x272>
  405ab8:	9b04      	ldr	r3, [sp, #16]
  405aba:	2b00      	cmp	r3, #0
  405abc:	dd22      	ble.n	405b04 <__kernel_rem_pio2f+0x68c>
  405abe:	2600      	movs	r6, #0
  405ac0:	9b04      	ldr	r3, [sp, #16]
  405ac2:	2b01      	cmp	r3, #1
  405ac4:	f43f adf2 	beq.w	4056ac <__kernel_rem_pio2f+0x234>
  405ac8:	2b02      	cmp	r3, #2
  405aca:	d107      	bne.n	405adc <__kernel_rem_pio2f+0x664>
  405acc:	f108 32ff 	add.w	r2, r8, #4294967295
  405ad0:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
  405ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  405ad8:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  405adc:	2c02      	cmp	r4, #2
  405ade:	f47f ae04 	bne.w	4056ea <__kernel_rem_pio2f+0x272>
  405ae2:	4639      	mov	r1, r7
  405ae4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  405ae8:	f000 ff44 	bl	406974 <__aeabi_fsub>
  405aec:	4607      	mov	r7, r0
  405aee:	2e00      	cmp	r6, #0
  405af0:	f43f adfb 	beq.w	4056ea <__kernel_rem_pio2f+0x272>
  405af4:	e5ee      	b.n	4056d4 <__kernel_rem_pio2f+0x25c>
  405af6:	3301      	adds	r3, #1
  405af8:	4598      	cmp	r8, r3
  405afa:	f47f adad 	bne.w	405658 <__kernel_rem_pio2f+0x1e0>
  405afe:	9b04      	ldr	r3, [sp, #16]
  405b00:	2b00      	cmp	r3, #0
  405b02:	dcdd      	bgt.n	405ac0 <__kernel_rem_pio2f+0x648>
  405b04:	2c02      	cmp	r4, #2
  405b06:	f47f adf0 	bne.w	4056ea <__kernel_rem_pio2f+0x272>
  405b0a:	4639      	mov	r1, r7
  405b0c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  405b10:	f000 ff30 	bl	406974 <__aeabi_fsub>
  405b14:	4607      	mov	r7, r0
  405b16:	e5e8      	b.n	4056ea <__kernel_rem_pio2f+0x272>
  405b18:	2301      	movs	r3, #1
  405b1a:	e610      	b.n	40573e <__kernel_rem_pio2f+0x2c6>
  405b1c:	9b07      	ldr	r3, [sp, #28]
  405b1e:	4601      	mov	r1, r0
  405b20:	6018      	str	r0, [r3, #0]
  405b22:	9834      	ldr	r0, [sp, #208]	; 0xd0
  405b24:	f000 ff26 	bl	406974 <__aeabi_fsub>
  405b28:	2f00      	cmp	r7, #0
  405b2a:	f73f af7c 	bgt.w	405a26 <__kernel_rem_pio2f+0x5ae>
  405b2e:	9b07      	ldr	r3, [sp, #28]
  405b30:	6058      	str	r0, [r3, #4]
  405b32:	e788      	b.n	405a46 <__kernel_rem_pio2f+0x5ce>
  405b34:	4620      	mov	r0, r4
  405b36:	f001 fa03 	bl	406f40 <__aeabi_f2iz>
  405b3a:	4647      	mov	r7, r8
  405b3c:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
  405b40:	e69f      	b.n	405882 <__kernel_rem_pio2f+0x40a>
  405b42:	9a34      	ldr	r2, [sp, #208]	; 0xd0
  405b44:	9b35      	ldr	r3, [sp, #212]	; 0xd4
  405b46:	e74b      	b.n	4059e0 <__kernel_rem_pio2f+0x568>
  405b48:	2000      	movs	r0, #0
  405b4a:	e73d      	b.n	4059c8 <__kernel_rem_pio2f+0x550>
  405b4c:	9b66      	ldr	r3, [sp, #408]	; 0x198
  405b4e:	2b03      	cmp	r3, #3
  405b50:	f63f af4a 	bhi.w	4059e8 <__kernel_rem_pio2f+0x570>
  405b54:	a201      	add	r2, pc, #4	; (adr r2, 405b5c <__kernel_rem_pio2f+0x6e4>)
  405b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405b5a:	bf00      	nop
  405b5c:	00405b71 	.word	0x00405b71
  405b60:	00405b6d 	.word	0x00405b6d
  405b64:	00405b6d 	.word	0x00405b6d
  405b68:	00405b49 	.word	0x00405b49
  405b6c:	2000      	movs	r0, #0
  405b6e:	e74c      	b.n	405a0a <__kernel_rem_pio2f+0x592>
  405b70:	2000      	movs	r0, #0
  405b72:	e779      	b.n	405a68 <__kernel_rem_pio2f+0x5f0>
  405b74:	2101      	movs	r1, #1
  405b76:	2300      	movs	r3, #0
  405b78:	e574      	b.n	405664 <__kernel_rem_pio2f+0x1ec>
  405b7a:	bf00      	nop
  405b7c:	0040a6a8 	.word	0x0040a6a8
  405b80:	3fc90000 	.word	0x3fc90000

00405b84 <__kernel_sinf>:
  405b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405b88:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  405b8c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
  405b90:	4604      	mov	r4, r0
  405b92:	460f      	mov	r7, r1
  405b94:	4690      	mov	r8, r2
  405b96:	da03      	bge.n	405ba0 <__kernel_sinf+0x1c>
  405b98:	f001 f9d2 	bl	406f40 <__aeabi_f2iz>
  405b9c:	2800      	cmp	r0, #0
  405b9e:	d058      	beq.n	405c52 <__kernel_sinf+0xce>
  405ba0:	4621      	mov	r1, r4
  405ba2:	4620      	mov	r0, r4
  405ba4:	f000 fff0 	bl	406b88 <__aeabi_fmul>
  405ba8:	4605      	mov	r5, r0
  405baa:	4601      	mov	r1, r0
  405bac:	4620      	mov	r0, r4
  405bae:	f000 ffeb 	bl	406b88 <__aeabi_fmul>
  405bb2:	4929      	ldr	r1, [pc, #164]	; (405c58 <__kernel_sinf+0xd4>)
  405bb4:	4606      	mov	r6, r0
  405bb6:	4628      	mov	r0, r5
  405bb8:	f000 ffe6 	bl	406b88 <__aeabi_fmul>
  405bbc:	4927      	ldr	r1, [pc, #156]	; (405c5c <__kernel_sinf+0xd8>)
  405bbe:	f000 fed9 	bl	406974 <__aeabi_fsub>
  405bc2:	4629      	mov	r1, r5
  405bc4:	f000 ffe0 	bl	406b88 <__aeabi_fmul>
  405bc8:	4925      	ldr	r1, [pc, #148]	; (405c60 <__kernel_sinf+0xdc>)
  405bca:	f000 fed5 	bl	406978 <__addsf3>
  405bce:	4629      	mov	r1, r5
  405bd0:	f000 ffda 	bl	406b88 <__aeabi_fmul>
  405bd4:	4923      	ldr	r1, [pc, #140]	; (405c64 <__kernel_sinf+0xe0>)
  405bd6:	f000 fecd 	bl	406974 <__aeabi_fsub>
  405bda:	4629      	mov	r1, r5
  405bdc:	f000 ffd4 	bl	406b88 <__aeabi_fmul>
  405be0:	4921      	ldr	r1, [pc, #132]	; (405c68 <__kernel_sinf+0xe4>)
  405be2:	f000 fec9 	bl	406978 <__addsf3>
  405be6:	4681      	mov	r9, r0
  405be8:	f1b8 0f00 	cmp.w	r8, #0
  405bec:	d022      	beq.n	405c34 <__kernel_sinf+0xb0>
  405bee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  405bf2:	4638      	mov	r0, r7
  405bf4:	f000 ffc8 	bl	406b88 <__aeabi_fmul>
  405bf8:	4649      	mov	r1, r9
  405bfa:	4680      	mov	r8, r0
  405bfc:	4630      	mov	r0, r6
  405bfe:	f000 ffc3 	bl	406b88 <__aeabi_fmul>
  405c02:	4601      	mov	r1, r0
  405c04:	4640      	mov	r0, r8
  405c06:	f000 feb5 	bl	406974 <__aeabi_fsub>
  405c0a:	4629      	mov	r1, r5
  405c0c:	f000 ffbc 	bl	406b88 <__aeabi_fmul>
  405c10:	4639      	mov	r1, r7
  405c12:	f000 feaf 	bl	406974 <__aeabi_fsub>
  405c16:	4915      	ldr	r1, [pc, #84]	; (405c6c <__kernel_sinf+0xe8>)
  405c18:	4605      	mov	r5, r0
  405c1a:	4630      	mov	r0, r6
  405c1c:	f000 ffb4 	bl	406b88 <__aeabi_fmul>
  405c20:	4601      	mov	r1, r0
  405c22:	4628      	mov	r0, r5
  405c24:	f000 fea8 	bl	406978 <__addsf3>
  405c28:	4601      	mov	r1, r0
  405c2a:	4620      	mov	r0, r4
  405c2c:	f000 fea2 	bl	406974 <__aeabi_fsub>
  405c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405c34:	4601      	mov	r1, r0
  405c36:	4628      	mov	r0, r5
  405c38:	f000 ffa6 	bl	406b88 <__aeabi_fmul>
  405c3c:	490b      	ldr	r1, [pc, #44]	; (405c6c <__kernel_sinf+0xe8>)
  405c3e:	f000 fe99 	bl	406974 <__aeabi_fsub>
  405c42:	4631      	mov	r1, r6
  405c44:	f000 ffa0 	bl	406b88 <__aeabi_fmul>
  405c48:	4621      	mov	r1, r4
  405c4a:	f000 fe95 	bl	406978 <__addsf3>
  405c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405c52:	4620      	mov	r0, r4
  405c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405c58:	2f2ec9d3 	.word	0x2f2ec9d3
  405c5c:	32d72f34 	.word	0x32d72f34
  405c60:	3638ef1b 	.word	0x3638ef1b
  405c64:	39500d01 	.word	0x39500d01
  405c68:	3c088889 	.word	0x3c088889
  405c6c:	3e2aaaab 	.word	0x3e2aaaab

00405c70 <matherr>:
  405c70:	2000      	movs	r0, #0
  405c72:	4770      	bx	lr

00405c74 <nan>:
  405c74:	2000      	movs	r0, #0
  405c76:	4901      	ldr	r1, [pc, #4]	; (405c7c <nan+0x8>)
  405c78:	4770      	bx	lr
  405c7a:	bf00      	nop
  405c7c:	7ff80000 	.word	0x7ff80000

00405c80 <atanf>:
  405c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c84:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
  405c88:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
  405c8c:	4604      	mov	r4, r0
  405c8e:	4606      	mov	r6, r0
  405c90:	db08      	blt.n	405ca4 <atanf+0x24>
  405c92:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
  405c96:	dc6f      	bgt.n	405d78 <atanf+0xf8>
  405c98:	2800      	cmp	r0, #0
  405c9a:	f340 80a0 	ble.w	405dde <atanf+0x15e>
  405c9e:	486f      	ldr	r0, [pc, #444]	; (405e5c <atanf+0x1dc>)
  405ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ca4:	4b6e      	ldr	r3, [pc, #440]	; (405e60 <atanf+0x1e0>)
  405ca6:	429d      	cmp	r5, r3
  405ca8:	dc77      	bgt.n	405d9a <atanf+0x11a>
  405caa:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
  405cae:	db68      	blt.n	405d82 <atanf+0x102>
  405cb0:	f04f 37ff 	mov.w	r7, #4294967295
  405cb4:	4621      	mov	r1, r4
  405cb6:	4620      	mov	r0, r4
  405cb8:	f000 ff66 	bl	406b88 <__aeabi_fmul>
  405cbc:	4601      	mov	r1, r0
  405cbe:	4680      	mov	r8, r0
  405cc0:	f000 ff62 	bl	406b88 <__aeabi_fmul>
  405cc4:	4967      	ldr	r1, [pc, #412]	; (405e64 <atanf+0x1e4>)
  405cc6:	4605      	mov	r5, r0
  405cc8:	f000 ff5e 	bl	406b88 <__aeabi_fmul>
  405ccc:	4966      	ldr	r1, [pc, #408]	; (405e68 <atanf+0x1e8>)
  405cce:	f000 fe53 	bl	406978 <__addsf3>
  405cd2:	4629      	mov	r1, r5
  405cd4:	f000 ff58 	bl	406b88 <__aeabi_fmul>
  405cd8:	4964      	ldr	r1, [pc, #400]	; (405e6c <atanf+0x1ec>)
  405cda:	f000 fe4d 	bl	406978 <__addsf3>
  405cde:	4629      	mov	r1, r5
  405ce0:	f000 ff52 	bl	406b88 <__aeabi_fmul>
  405ce4:	4962      	ldr	r1, [pc, #392]	; (405e70 <atanf+0x1f0>)
  405ce6:	f000 fe47 	bl	406978 <__addsf3>
  405cea:	4629      	mov	r1, r5
  405cec:	f000 ff4c 	bl	406b88 <__aeabi_fmul>
  405cf0:	4960      	ldr	r1, [pc, #384]	; (405e74 <atanf+0x1f4>)
  405cf2:	f000 fe41 	bl	406978 <__addsf3>
  405cf6:	4629      	mov	r1, r5
  405cf8:	f000 ff46 	bl	406b88 <__aeabi_fmul>
  405cfc:	495e      	ldr	r1, [pc, #376]	; (405e78 <atanf+0x1f8>)
  405cfe:	f000 fe3b 	bl	406978 <__addsf3>
  405d02:	4641      	mov	r1, r8
  405d04:	f000 ff40 	bl	406b88 <__aeabi_fmul>
  405d08:	495c      	ldr	r1, [pc, #368]	; (405e7c <atanf+0x1fc>)
  405d0a:	4680      	mov	r8, r0
  405d0c:	4628      	mov	r0, r5
  405d0e:	f000 ff3b 	bl	406b88 <__aeabi_fmul>
  405d12:	495b      	ldr	r1, [pc, #364]	; (405e80 <atanf+0x200>)
  405d14:	f000 fe2e 	bl	406974 <__aeabi_fsub>
  405d18:	4629      	mov	r1, r5
  405d1a:	f000 ff35 	bl	406b88 <__aeabi_fmul>
  405d1e:	4959      	ldr	r1, [pc, #356]	; (405e84 <atanf+0x204>)
  405d20:	f000 fe28 	bl	406974 <__aeabi_fsub>
  405d24:	4629      	mov	r1, r5
  405d26:	f000 ff2f 	bl	406b88 <__aeabi_fmul>
  405d2a:	4957      	ldr	r1, [pc, #348]	; (405e88 <atanf+0x208>)
  405d2c:	f000 fe22 	bl	406974 <__aeabi_fsub>
  405d30:	4629      	mov	r1, r5
  405d32:	f000 ff29 	bl	406b88 <__aeabi_fmul>
  405d36:	4955      	ldr	r1, [pc, #340]	; (405e8c <atanf+0x20c>)
  405d38:	f000 fe1c 	bl	406974 <__aeabi_fsub>
  405d3c:	4629      	mov	r1, r5
  405d3e:	f000 ff23 	bl	406b88 <__aeabi_fmul>
  405d42:	1c7b      	adds	r3, r7, #1
  405d44:	4601      	mov	r1, r0
  405d46:	4640      	mov	r0, r8
  405d48:	d04c      	beq.n	405de4 <atanf+0x164>
  405d4a:	f000 fe15 	bl	406978 <__addsf3>
  405d4e:	4621      	mov	r1, r4
  405d50:	f000 ff1a 	bl	406b88 <__aeabi_fmul>
  405d54:	4b4e      	ldr	r3, [pc, #312]	; (405e90 <atanf+0x210>)
  405d56:	4d4f      	ldr	r5, [pc, #316]	; (405e94 <atanf+0x214>)
  405d58:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
  405d5c:	f000 fe0a 	bl	406974 <__aeabi_fsub>
  405d60:	4621      	mov	r1, r4
  405d62:	f000 fe07 	bl	406974 <__aeabi_fsub>
  405d66:	4601      	mov	r1, r0
  405d68:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
  405d6c:	f000 fe02 	bl	406974 <__aeabi_fsub>
  405d70:	2e00      	cmp	r6, #0
  405d72:	db30      	blt.n	405dd6 <atanf+0x156>
  405d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405d78:	4601      	mov	r1, r0
  405d7a:	f000 fdfd 	bl	406978 <__addsf3>
  405d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405d82:	4945      	ldr	r1, [pc, #276]	; (405e98 <atanf+0x218>)
  405d84:	f000 fdf8 	bl	406978 <__addsf3>
  405d88:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405d8c:	f001 f8b8 	bl	406f00 <__aeabi_fcmpgt>
  405d90:	2800      	cmp	r0, #0
  405d92:	d08d      	beq.n	405cb0 <atanf+0x30>
  405d94:	4620      	mov	r0, r4
  405d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405d9a:	f000 f887 	bl	405eac <fabsf>
  405d9e:	4b3f      	ldr	r3, [pc, #252]	; (405e9c <atanf+0x21c>)
  405da0:	429d      	cmp	r5, r3
  405da2:	4604      	mov	r4, r0
  405da4:	dc29      	bgt.n	405dfa <atanf+0x17a>
  405da6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
  405daa:	429d      	cmp	r5, r3
  405dac:	dc44      	bgt.n	405e38 <atanf+0x1b8>
  405dae:	4601      	mov	r1, r0
  405db0:	f000 fde2 	bl	406978 <__addsf3>
  405db4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405db8:	f000 fddc 	bl	406974 <__aeabi_fsub>
  405dbc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  405dc0:	4605      	mov	r5, r0
  405dc2:	4620      	mov	r0, r4
  405dc4:	f000 fdd8 	bl	406978 <__addsf3>
  405dc8:	4601      	mov	r1, r0
  405dca:	4628      	mov	r0, r5
  405dcc:	f000 ff90 	bl	406cf0 <__aeabi_fdiv>
  405dd0:	2700      	movs	r7, #0
  405dd2:	4604      	mov	r4, r0
  405dd4:	e76e      	b.n	405cb4 <atanf+0x34>
  405dd6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  405dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405dde:	4830      	ldr	r0, [pc, #192]	; (405ea0 <atanf+0x220>)
  405de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405de4:	f000 fdc8 	bl	406978 <__addsf3>
  405de8:	4621      	mov	r1, r4
  405dea:	f000 fecd 	bl	406b88 <__aeabi_fmul>
  405dee:	4601      	mov	r1, r0
  405df0:	4620      	mov	r0, r4
  405df2:	f000 fdbf 	bl	406974 <__aeabi_fsub>
  405df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405dfa:	4b2a      	ldr	r3, [pc, #168]	; (405ea4 <atanf+0x224>)
  405dfc:	429d      	cmp	r5, r3
  405dfe:	dc14      	bgt.n	405e2a <atanf+0x1aa>
  405e00:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
  405e04:	f000 fdb6 	bl	406974 <__aeabi_fsub>
  405e08:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
  405e0c:	4605      	mov	r5, r0
  405e0e:	4620      	mov	r0, r4
  405e10:	f000 feba 	bl	406b88 <__aeabi_fmul>
  405e14:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405e18:	f000 fdae 	bl	406978 <__addsf3>
  405e1c:	4601      	mov	r1, r0
  405e1e:	4628      	mov	r0, r5
  405e20:	f000 ff66 	bl	406cf0 <__aeabi_fdiv>
  405e24:	2702      	movs	r7, #2
  405e26:	4604      	mov	r4, r0
  405e28:	e744      	b.n	405cb4 <atanf+0x34>
  405e2a:	4601      	mov	r1, r0
  405e2c:	481e      	ldr	r0, [pc, #120]	; (405ea8 <atanf+0x228>)
  405e2e:	f000 ff5f 	bl	406cf0 <__aeabi_fdiv>
  405e32:	2703      	movs	r7, #3
  405e34:	4604      	mov	r4, r0
  405e36:	e73d      	b.n	405cb4 <atanf+0x34>
  405e38:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405e3c:	f000 fd9a 	bl	406974 <__aeabi_fsub>
  405e40:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405e44:	4605      	mov	r5, r0
  405e46:	4620      	mov	r0, r4
  405e48:	f000 fd96 	bl	406978 <__addsf3>
  405e4c:	4601      	mov	r1, r0
  405e4e:	4628      	mov	r0, r5
  405e50:	f000 ff4e 	bl	406cf0 <__aeabi_fdiv>
  405e54:	2701      	movs	r7, #1
  405e56:	4604      	mov	r4, r0
  405e58:	e72c      	b.n	405cb4 <atanf+0x34>
  405e5a:	bf00      	nop
  405e5c:	3fc90fdb 	.word	0x3fc90fdb
  405e60:	3edfffff 	.word	0x3edfffff
  405e64:	3c8569d7 	.word	0x3c8569d7
  405e68:	3d4bda59 	.word	0x3d4bda59
  405e6c:	3d886b35 	.word	0x3d886b35
  405e70:	3dba2e6e 	.word	0x3dba2e6e
  405e74:	3e124925 	.word	0x3e124925
  405e78:	3eaaaaab 	.word	0x3eaaaaab
  405e7c:	bd15a221 	.word	0xbd15a221
  405e80:	3d6ef16b 	.word	0x3d6ef16b
  405e84:	3d9d8795 	.word	0x3d9d8795
  405e88:	3de38e38 	.word	0x3de38e38
  405e8c:	3e4ccccd 	.word	0x3e4ccccd
  405e90:	0040a6f0 	.word	0x0040a6f0
  405e94:	0040a6e0 	.word	0x0040a6e0
  405e98:	7149f2ca 	.word	0x7149f2ca
  405e9c:	3f97ffff 	.word	0x3f97ffff
  405ea0:	bfc90fdb 	.word	0xbfc90fdb
  405ea4:	401bffff 	.word	0x401bffff
  405ea8:	bf800000 	.word	0xbf800000

00405eac <fabsf>:
  405eac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  405eb0:	4770      	bx	lr
  405eb2:	bf00      	nop

00405eb4 <floorf>:
  405eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405eb8:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
  405ebc:	0dfc      	lsrs	r4, r7, #23
  405ebe:	3c7f      	subs	r4, #127	; 0x7f
  405ec0:	2c16      	cmp	r4, #22
  405ec2:	4605      	mov	r5, r0
  405ec4:	dc13      	bgt.n	405eee <floorf+0x3a>
  405ec6:	2c00      	cmp	r4, #0
  405ec8:	4680      	mov	r8, r0
  405eca:	db1b      	blt.n	405f04 <floorf+0x50>
  405ecc:	4f19      	ldr	r7, [pc, #100]	; (405f34 <floorf+0x80>)
  405ece:	4127      	asrs	r7, r4
  405ed0:	4238      	tst	r0, r7
  405ed2:	d014      	beq.n	405efe <floorf+0x4a>
  405ed4:	4918      	ldr	r1, [pc, #96]	; (405f38 <floorf+0x84>)
  405ed6:	f000 fd4f 	bl	406978 <__addsf3>
  405eda:	2100      	movs	r1, #0
  405edc:	f001 f810 	bl	406f00 <__aeabi_fcmpgt>
  405ee0:	b168      	cbz	r0, 405efe <floorf+0x4a>
  405ee2:	2d00      	cmp	r5, #0
  405ee4:	db1b      	blt.n	405f1e <floorf+0x6a>
  405ee6:	ea28 0007 	bic.w	r0, r8, r7
  405eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405eee:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
  405ef2:	d304      	bcc.n	405efe <floorf+0x4a>
  405ef4:	4601      	mov	r1, r0
  405ef6:	f000 fd3f 	bl	406978 <__addsf3>
  405efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405efe:	4628      	mov	r0, r5
  405f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405f04:	490c      	ldr	r1, [pc, #48]	; (405f38 <floorf+0x84>)
  405f06:	f000 fd37 	bl	406978 <__addsf3>
  405f0a:	2100      	movs	r1, #0
  405f0c:	f000 fff8 	bl	406f00 <__aeabi_fcmpgt>
  405f10:	2800      	cmp	r0, #0
  405f12:	d0f4      	beq.n	405efe <floorf+0x4a>
  405f14:	2d00      	cmp	r5, #0
  405f16:	db08      	blt.n	405f2a <floorf+0x76>
  405f18:	2000      	movs	r0, #0
  405f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405f1e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  405f22:	fa43 f404 	asr.w	r4, r3, r4
  405f26:	44a0      	add	r8, r4
  405f28:	e7dd      	b.n	405ee6 <floorf+0x32>
  405f2a:	2f00      	cmp	r7, #0
  405f2c:	d0e7      	beq.n	405efe <floorf+0x4a>
  405f2e:	4803      	ldr	r0, [pc, #12]	; (405f3c <floorf+0x88>)
  405f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405f34:	007fffff 	.word	0x007fffff
  405f38:	7149f2ca 	.word	0x7149f2ca
  405f3c:	bf800000 	.word	0xbf800000

00405f40 <scalbnf>:
  405f40:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  405f44:	b538      	push	{r3, r4, r5, lr}
  405f46:	4603      	mov	r3, r0
  405f48:	d016      	beq.n	405f78 <scalbnf+0x38>
  405f4a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
  405f4e:	d20f      	bcs.n	405f70 <scalbnf+0x30>
  405f50:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
  405f54:	460d      	mov	r5, r1
  405f56:	d310      	bcc.n	405f7a <scalbnf+0x3a>
  405f58:	4604      	mov	r4, r0
  405f5a:	0dd0      	lsrs	r0, r2, #23
  405f5c:	4428      	add	r0, r5
  405f5e:	28fe      	cmp	r0, #254	; 0xfe
  405f60:	dc2e      	bgt.n	405fc0 <scalbnf+0x80>
  405f62:	2800      	cmp	r0, #0
  405f64:	dd1d      	ble.n	405fa2 <scalbnf+0x62>
  405f66:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
  405f6a:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
  405f6e:	bd38      	pop	{r3, r4, r5, pc}
  405f70:	4601      	mov	r1, r0
  405f72:	f000 fd01 	bl	406978 <__addsf3>
  405f76:	bd38      	pop	{r3, r4, r5, pc}
  405f78:	bd38      	pop	{r3, r4, r5, pc}
  405f7a:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
  405f7e:	f000 fe03 	bl	406b88 <__aeabi_fmul>
  405f82:	4a18      	ldr	r2, [pc, #96]	; (405fe4 <scalbnf+0xa4>)
  405f84:	4295      	cmp	r5, r2
  405f86:	4603      	mov	r3, r0
  405f88:	db07      	blt.n	405f9a <scalbnf+0x5a>
  405f8a:	4604      	mov	r4, r0
  405f8c:	f3c0 50c7 	ubfx	r0, r0, #23, #8
  405f90:	3819      	subs	r0, #25
  405f92:	e7e3      	b.n	405f5c <scalbnf+0x1c>
  405f94:	4814      	ldr	r0, [pc, #80]	; (405fe8 <scalbnf+0xa8>)
  405f96:	f000 f82b 	bl	405ff0 <copysignf>
  405f9a:	4913      	ldr	r1, [pc, #76]	; (405fe8 <scalbnf+0xa8>)
  405f9c:	f000 fdf4 	bl	406b88 <__aeabi_fmul>
  405fa0:	bd38      	pop	{r3, r4, r5, pc}
  405fa2:	f110 0f16 	cmn.w	r0, #22
  405fa6:	da13      	bge.n	405fd0 <scalbnf+0x90>
  405fa8:	f24c 3250 	movw	r2, #50000	; 0xc350
  405fac:	4295      	cmp	r5, r2
  405fae:	4619      	mov	r1, r3
  405fb0:	ddf0      	ble.n	405f94 <scalbnf+0x54>
  405fb2:	480e      	ldr	r0, [pc, #56]	; (405fec <scalbnf+0xac>)
  405fb4:	f000 f81c 	bl	405ff0 <copysignf>
  405fb8:	490c      	ldr	r1, [pc, #48]	; (405fec <scalbnf+0xac>)
  405fba:	f000 fde5 	bl	406b88 <__aeabi_fmul>
  405fbe:	bd38      	pop	{r3, r4, r5, pc}
  405fc0:	4619      	mov	r1, r3
  405fc2:	480a      	ldr	r0, [pc, #40]	; (405fec <scalbnf+0xac>)
  405fc4:	f000 f814 	bl	405ff0 <copysignf>
  405fc8:	4908      	ldr	r1, [pc, #32]	; (405fec <scalbnf+0xac>)
  405fca:	f000 fddd 	bl	406b88 <__aeabi_fmul>
  405fce:	bd38      	pop	{r3, r4, r5, pc}
  405fd0:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
  405fd4:	3019      	adds	r0, #25
  405fd6:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
  405fda:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
  405fde:	f000 fdd3 	bl	406b88 <__aeabi_fmul>
  405fe2:	bd38      	pop	{r3, r4, r5, pc}
  405fe4:	ffff3cb0 	.word	0xffff3cb0
  405fe8:	0da24260 	.word	0x0da24260
  405fec:	7149f2ca 	.word	0x7149f2ca

00405ff0 <copysignf>:
  405ff0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405ff4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  405ff8:	4308      	orrs	r0, r1
  405ffa:	4770      	bx	lr

00405ffc <__aeabi_drsub>:
  405ffc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  406000:	e002      	b.n	406008 <__adddf3>
  406002:	bf00      	nop

00406004 <__aeabi_dsub>:
  406004:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00406008 <__adddf3>:
  406008:	b530      	push	{r4, r5, lr}
  40600a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40600e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  406012:	ea94 0f05 	teq	r4, r5
  406016:	bf08      	it	eq
  406018:	ea90 0f02 	teqeq	r0, r2
  40601c:	bf1f      	itttt	ne
  40601e:	ea54 0c00 	orrsne.w	ip, r4, r0
  406022:	ea55 0c02 	orrsne.w	ip, r5, r2
  406026:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40602a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40602e:	f000 80e2 	beq.w	4061f6 <__adddf3+0x1ee>
  406032:	ea4f 5454 	mov.w	r4, r4, lsr #21
  406036:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40603a:	bfb8      	it	lt
  40603c:	426d      	neglt	r5, r5
  40603e:	dd0c      	ble.n	40605a <__adddf3+0x52>
  406040:	442c      	add	r4, r5
  406042:	ea80 0202 	eor.w	r2, r0, r2
  406046:	ea81 0303 	eor.w	r3, r1, r3
  40604a:	ea82 0000 	eor.w	r0, r2, r0
  40604e:	ea83 0101 	eor.w	r1, r3, r1
  406052:	ea80 0202 	eor.w	r2, r0, r2
  406056:	ea81 0303 	eor.w	r3, r1, r3
  40605a:	2d36      	cmp	r5, #54	; 0x36
  40605c:	bf88      	it	hi
  40605e:	bd30      	pophi	{r4, r5, pc}
  406060:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406064:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406068:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40606c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  406070:	d002      	beq.n	406078 <__adddf3+0x70>
  406072:	4240      	negs	r0, r0
  406074:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406078:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40607c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406080:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  406084:	d002      	beq.n	40608c <__adddf3+0x84>
  406086:	4252      	negs	r2, r2
  406088:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40608c:	ea94 0f05 	teq	r4, r5
  406090:	f000 80a7 	beq.w	4061e2 <__adddf3+0x1da>
  406094:	f1a4 0401 	sub.w	r4, r4, #1
  406098:	f1d5 0e20 	rsbs	lr, r5, #32
  40609c:	db0d      	blt.n	4060ba <__adddf3+0xb2>
  40609e:	fa02 fc0e 	lsl.w	ip, r2, lr
  4060a2:	fa22 f205 	lsr.w	r2, r2, r5
  4060a6:	1880      	adds	r0, r0, r2
  4060a8:	f141 0100 	adc.w	r1, r1, #0
  4060ac:	fa03 f20e 	lsl.w	r2, r3, lr
  4060b0:	1880      	adds	r0, r0, r2
  4060b2:	fa43 f305 	asr.w	r3, r3, r5
  4060b6:	4159      	adcs	r1, r3
  4060b8:	e00e      	b.n	4060d8 <__adddf3+0xd0>
  4060ba:	f1a5 0520 	sub.w	r5, r5, #32
  4060be:	f10e 0e20 	add.w	lr, lr, #32
  4060c2:	2a01      	cmp	r2, #1
  4060c4:	fa03 fc0e 	lsl.w	ip, r3, lr
  4060c8:	bf28      	it	cs
  4060ca:	f04c 0c02 	orrcs.w	ip, ip, #2
  4060ce:	fa43 f305 	asr.w	r3, r3, r5
  4060d2:	18c0      	adds	r0, r0, r3
  4060d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4060d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4060dc:	d507      	bpl.n	4060ee <__adddf3+0xe6>
  4060de:	f04f 0e00 	mov.w	lr, #0
  4060e2:	f1dc 0c00 	rsbs	ip, ip, #0
  4060e6:	eb7e 0000 	sbcs.w	r0, lr, r0
  4060ea:	eb6e 0101 	sbc.w	r1, lr, r1
  4060ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4060f2:	d31b      	bcc.n	40612c <__adddf3+0x124>
  4060f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4060f8:	d30c      	bcc.n	406114 <__adddf3+0x10c>
  4060fa:	0849      	lsrs	r1, r1, #1
  4060fc:	ea5f 0030 	movs.w	r0, r0, rrx
  406100:	ea4f 0c3c 	mov.w	ip, ip, rrx
  406104:	f104 0401 	add.w	r4, r4, #1
  406108:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40610c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  406110:	f080 809a 	bcs.w	406248 <__adddf3+0x240>
  406114:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406118:	bf08      	it	eq
  40611a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40611e:	f150 0000 	adcs.w	r0, r0, #0
  406122:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406126:	ea41 0105 	orr.w	r1, r1, r5
  40612a:	bd30      	pop	{r4, r5, pc}
  40612c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  406130:	4140      	adcs	r0, r0
  406132:	eb41 0101 	adc.w	r1, r1, r1
  406136:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40613a:	f1a4 0401 	sub.w	r4, r4, #1
  40613e:	d1e9      	bne.n	406114 <__adddf3+0x10c>
  406140:	f091 0f00 	teq	r1, #0
  406144:	bf04      	itt	eq
  406146:	4601      	moveq	r1, r0
  406148:	2000      	moveq	r0, #0
  40614a:	fab1 f381 	clz	r3, r1
  40614e:	bf08      	it	eq
  406150:	3320      	addeq	r3, #32
  406152:	f1a3 030b 	sub.w	r3, r3, #11
  406156:	f1b3 0220 	subs.w	r2, r3, #32
  40615a:	da0c      	bge.n	406176 <__adddf3+0x16e>
  40615c:	320c      	adds	r2, #12
  40615e:	dd08      	ble.n	406172 <__adddf3+0x16a>
  406160:	f102 0c14 	add.w	ip, r2, #20
  406164:	f1c2 020c 	rsb	r2, r2, #12
  406168:	fa01 f00c 	lsl.w	r0, r1, ip
  40616c:	fa21 f102 	lsr.w	r1, r1, r2
  406170:	e00c      	b.n	40618c <__adddf3+0x184>
  406172:	f102 0214 	add.w	r2, r2, #20
  406176:	bfd8      	it	le
  406178:	f1c2 0c20 	rsble	ip, r2, #32
  40617c:	fa01 f102 	lsl.w	r1, r1, r2
  406180:	fa20 fc0c 	lsr.w	ip, r0, ip
  406184:	bfdc      	itt	le
  406186:	ea41 010c 	orrle.w	r1, r1, ip
  40618a:	4090      	lslle	r0, r2
  40618c:	1ae4      	subs	r4, r4, r3
  40618e:	bfa2      	ittt	ge
  406190:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  406194:	4329      	orrge	r1, r5
  406196:	bd30      	popge	{r4, r5, pc}
  406198:	ea6f 0404 	mvn.w	r4, r4
  40619c:	3c1f      	subs	r4, #31
  40619e:	da1c      	bge.n	4061da <__adddf3+0x1d2>
  4061a0:	340c      	adds	r4, #12
  4061a2:	dc0e      	bgt.n	4061c2 <__adddf3+0x1ba>
  4061a4:	f104 0414 	add.w	r4, r4, #20
  4061a8:	f1c4 0220 	rsb	r2, r4, #32
  4061ac:	fa20 f004 	lsr.w	r0, r0, r4
  4061b0:	fa01 f302 	lsl.w	r3, r1, r2
  4061b4:	ea40 0003 	orr.w	r0, r0, r3
  4061b8:	fa21 f304 	lsr.w	r3, r1, r4
  4061bc:	ea45 0103 	orr.w	r1, r5, r3
  4061c0:	bd30      	pop	{r4, r5, pc}
  4061c2:	f1c4 040c 	rsb	r4, r4, #12
  4061c6:	f1c4 0220 	rsb	r2, r4, #32
  4061ca:	fa20 f002 	lsr.w	r0, r0, r2
  4061ce:	fa01 f304 	lsl.w	r3, r1, r4
  4061d2:	ea40 0003 	orr.w	r0, r0, r3
  4061d6:	4629      	mov	r1, r5
  4061d8:	bd30      	pop	{r4, r5, pc}
  4061da:	fa21 f004 	lsr.w	r0, r1, r4
  4061de:	4629      	mov	r1, r5
  4061e0:	bd30      	pop	{r4, r5, pc}
  4061e2:	f094 0f00 	teq	r4, #0
  4061e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4061ea:	bf06      	itte	eq
  4061ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4061f0:	3401      	addeq	r4, #1
  4061f2:	3d01      	subne	r5, #1
  4061f4:	e74e      	b.n	406094 <__adddf3+0x8c>
  4061f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4061fa:	bf18      	it	ne
  4061fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406200:	d029      	beq.n	406256 <__adddf3+0x24e>
  406202:	ea94 0f05 	teq	r4, r5
  406206:	bf08      	it	eq
  406208:	ea90 0f02 	teqeq	r0, r2
  40620c:	d005      	beq.n	40621a <__adddf3+0x212>
  40620e:	ea54 0c00 	orrs.w	ip, r4, r0
  406212:	bf04      	itt	eq
  406214:	4619      	moveq	r1, r3
  406216:	4610      	moveq	r0, r2
  406218:	bd30      	pop	{r4, r5, pc}
  40621a:	ea91 0f03 	teq	r1, r3
  40621e:	bf1e      	ittt	ne
  406220:	2100      	movne	r1, #0
  406222:	2000      	movne	r0, #0
  406224:	bd30      	popne	{r4, r5, pc}
  406226:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40622a:	d105      	bne.n	406238 <__adddf3+0x230>
  40622c:	0040      	lsls	r0, r0, #1
  40622e:	4149      	adcs	r1, r1
  406230:	bf28      	it	cs
  406232:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  406236:	bd30      	pop	{r4, r5, pc}
  406238:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40623c:	bf3c      	itt	cc
  40623e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  406242:	bd30      	popcc	{r4, r5, pc}
  406244:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406248:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40624c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406250:	f04f 0000 	mov.w	r0, #0
  406254:	bd30      	pop	{r4, r5, pc}
  406256:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40625a:	bf1a      	itte	ne
  40625c:	4619      	movne	r1, r3
  40625e:	4610      	movne	r0, r2
  406260:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  406264:	bf1c      	itt	ne
  406266:	460b      	movne	r3, r1
  406268:	4602      	movne	r2, r0
  40626a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40626e:	bf06      	itte	eq
  406270:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  406274:	ea91 0f03 	teqeq	r1, r3
  406278:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40627c:	bd30      	pop	{r4, r5, pc}
  40627e:	bf00      	nop

00406280 <__aeabi_ui2d>:
  406280:	f090 0f00 	teq	r0, #0
  406284:	bf04      	itt	eq
  406286:	2100      	moveq	r1, #0
  406288:	4770      	bxeq	lr
  40628a:	b530      	push	{r4, r5, lr}
  40628c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406290:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406294:	f04f 0500 	mov.w	r5, #0
  406298:	f04f 0100 	mov.w	r1, #0
  40629c:	e750      	b.n	406140 <__adddf3+0x138>
  40629e:	bf00      	nop

004062a0 <__aeabi_i2d>:
  4062a0:	f090 0f00 	teq	r0, #0
  4062a4:	bf04      	itt	eq
  4062a6:	2100      	moveq	r1, #0
  4062a8:	4770      	bxeq	lr
  4062aa:	b530      	push	{r4, r5, lr}
  4062ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4062b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4062b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4062b8:	bf48      	it	mi
  4062ba:	4240      	negmi	r0, r0
  4062bc:	f04f 0100 	mov.w	r1, #0
  4062c0:	e73e      	b.n	406140 <__adddf3+0x138>
  4062c2:	bf00      	nop

004062c4 <__aeabi_f2d>:
  4062c4:	0042      	lsls	r2, r0, #1
  4062c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4062ca:	ea4f 0131 	mov.w	r1, r1, rrx
  4062ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4062d2:	bf1f      	itttt	ne
  4062d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4062d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4062dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4062e0:	4770      	bxne	lr
  4062e2:	f092 0f00 	teq	r2, #0
  4062e6:	bf14      	ite	ne
  4062e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4062ec:	4770      	bxeq	lr
  4062ee:	b530      	push	{r4, r5, lr}
  4062f0:	f44f 7460 	mov.w	r4, #896	; 0x380
  4062f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4062f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4062fc:	e720      	b.n	406140 <__adddf3+0x138>
  4062fe:	bf00      	nop

00406300 <__aeabi_ul2d>:
  406300:	ea50 0201 	orrs.w	r2, r0, r1
  406304:	bf08      	it	eq
  406306:	4770      	bxeq	lr
  406308:	b530      	push	{r4, r5, lr}
  40630a:	f04f 0500 	mov.w	r5, #0
  40630e:	e00a      	b.n	406326 <__aeabi_l2d+0x16>

00406310 <__aeabi_l2d>:
  406310:	ea50 0201 	orrs.w	r2, r0, r1
  406314:	bf08      	it	eq
  406316:	4770      	bxeq	lr
  406318:	b530      	push	{r4, r5, lr}
  40631a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40631e:	d502      	bpl.n	406326 <__aeabi_l2d+0x16>
  406320:	4240      	negs	r0, r0
  406322:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406326:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40632a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40632e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  406332:	f43f aedc 	beq.w	4060ee <__adddf3+0xe6>
  406336:	f04f 0203 	mov.w	r2, #3
  40633a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40633e:	bf18      	it	ne
  406340:	3203      	addne	r2, #3
  406342:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  406346:	bf18      	it	ne
  406348:	3203      	addne	r2, #3
  40634a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40634e:	f1c2 0320 	rsb	r3, r2, #32
  406352:	fa00 fc03 	lsl.w	ip, r0, r3
  406356:	fa20 f002 	lsr.w	r0, r0, r2
  40635a:	fa01 fe03 	lsl.w	lr, r1, r3
  40635e:	ea40 000e 	orr.w	r0, r0, lr
  406362:	fa21 f102 	lsr.w	r1, r1, r2
  406366:	4414      	add	r4, r2
  406368:	e6c1      	b.n	4060ee <__adddf3+0xe6>
  40636a:	bf00      	nop

0040636c <__aeabi_dmul>:
  40636c:	b570      	push	{r4, r5, r6, lr}
  40636e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406372:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  406376:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40637a:	bf1d      	ittte	ne
  40637c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  406380:	ea94 0f0c 	teqne	r4, ip
  406384:	ea95 0f0c 	teqne	r5, ip
  406388:	f000 f8de 	bleq	406548 <__aeabi_dmul+0x1dc>
  40638c:	442c      	add	r4, r5
  40638e:	ea81 0603 	eor.w	r6, r1, r3
  406392:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  406396:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40639a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40639e:	bf18      	it	ne
  4063a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4063a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4063a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4063ac:	d038      	beq.n	406420 <__aeabi_dmul+0xb4>
  4063ae:	fba0 ce02 	umull	ip, lr, r0, r2
  4063b2:	f04f 0500 	mov.w	r5, #0
  4063b6:	fbe1 e502 	umlal	lr, r5, r1, r2
  4063ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4063be:	fbe0 e503 	umlal	lr, r5, r0, r3
  4063c2:	f04f 0600 	mov.w	r6, #0
  4063c6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4063ca:	f09c 0f00 	teq	ip, #0
  4063ce:	bf18      	it	ne
  4063d0:	f04e 0e01 	orrne.w	lr, lr, #1
  4063d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4063d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4063dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4063e0:	d204      	bcs.n	4063ec <__aeabi_dmul+0x80>
  4063e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4063e6:	416d      	adcs	r5, r5
  4063e8:	eb46 0606 	adc.w	r6, r6, r6
  4063ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4063f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4063f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4063f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4063fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  406400:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  406404:	bf88      	it	hi
  406406:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40640a:	d81e      	bhi.n	40644a <__aeabi_dmul+0xde>
  40640c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  406410:	bf08      	it	eq
  406412:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  406416:	f150 0000 	adcs.w	r0, r0, #0
  40641a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40641e:	bd70      	pop	{r4, r5, r6, pc}
  406420:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  406424:	ea46 0101 	orr.w	r1, r6, r1
  406428:	ea40 0002 	orr.w	r0, r0, r2
  40642c:	ea81 0103 	eor.w	r1, r1, r3
  406430:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  406434:	bfc2      	ittt	gt
  406436:	ebd4 050c 	rsbsgt	r5, r4, ip
  40643a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40643e:	bd70      	popgt	{r4, r5, r6, pc}
  406440:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406444:	f04f 0e00 	mov.w	lr, #0
  406448:	3c01      	subs	r4, #1
  40644a:	f300 80ab 	bgt.w	4065a4 <__aeabi_dmul+0x238>
  40644e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  406452:	bfde      	ittt	le
  406454:	2000      	movle	r0, #0
  406456:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40645a:	bd70      	pople	{r4, r5, r6, pc}
  40645c:	f1c4 0400 	rsb	r4, r4, #0
  406460:	3c20      	subs	r4, #32
  406462:	da35      	bge.n	4064d0 <__aeabi_dmul+0x164>
  406464:	340c      	adds	r4, #12
  406466:	dc1b      	bgt.n	4064a0 <__aeabi_dmul+0x134>
  406468:	f104 0414 	add.w	r4, r4, #20
  40646c:	f1c4 0520 	rsb	r5, r4, #32
  406470:	fa00 f305 	lsl.w	r3, r0, r5
  406474:	fa20 f004 	lsr.w	r0, r0, r4
  406478:	fa01 f205 	lsl.w	r2, r1, r5
  40647c:	ea40 0002 	orr.w	r0, r0, r2
  406480:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  406484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406488:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40648c:	fa21 f604 	lsr.w	r6, r1, r4
  406490:	eb42 0106 	adc.w	r1, r2, r6
  406494:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406498:	bf08      	it	eq
  40649a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40649e:	bd70      	pop	{r4, r5, r6, pc}
  4064a0:	f1c4 040c 	rsb	r4, r4, #12
  4064a4:	f1c4 0520 	rsb	r5, r4, #32
  4064a8:	fa00 f304 	lsl.w	r3, r0, r4
  4064ac:	fa20 f005 	lsr.w	r0, r0, r5
  4064b0:	fa01 f204 	lsl.w	r2, r1, r4
  4064b4:	ea40 0002 	orr.w	r0, r0, r2
  4064b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4064bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4064c0:	f141 0100 	adc.w	r1, r1, #0
  4064c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4064c8:	bf08      	it	eq
  4064ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4064ce:	bd70      	pop	{r4, r5, r6, pc}
  4064d0:	f1c4 0520 	rsb	r5, r4, #32
  4064d4:	fa00 f205 	lsl.w	r2, r0, r5
  4064d8:	ea4e 0e02 	orr.w	lr, lr, r2
  4064dc:	fa20 f304 	lsr.w	r3, r0, r4
  4064e0:	fa01 f205 	lsl.w	r2, r1, r5
  4064e4:	ea43 0302 	orr.w	r3, r3, r2
  4064e8:	fa21 f004 	lsr.w	r0, r1, r4
  4064ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4064f0:	fa21 f204 	lsr.w	r2, r1, r4
  4064f4:	ea20 0002 	bic.w	r0, r0, r2
  4064f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4064fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406500:	bf08      	it	eq
  406502:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406506:	bd70      	pop	{r4, r5, r6, pc}
  406508:	f094 0f00 	teq	r4, #0
  40650c:	d10f      	bne.n	40652e <__aeabi_dmul+0x1c2>
  40650e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  406512:	0040      	lsls	r0, r0, #1
  406514:	eb41 0101 	adc.w	r1, r1, r1
  406518:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40651c:	bf08      	it	eq
  40651e:	3c01      	subeq	r4, #1
  406520:	d0f7      	beq.n	406512 <__aeabi_dmul+0x1a6>
  406522:	ea41 0106 	orr.w	r1, r1, r6
  406526:	f095 0f00 	teq	r5, #0
  40652a:	bf18      	it	ne
  40652c:	4770      	bxne	lr
  40652e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  406532:	0052      	lsls	r2, r2, #1
  406534:	eb43 0303 	adc.w	r3, r3, r3
  406538:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40653c:	bf08      	it	eq
  40653e:	3d01      	subeq	r5, #1
  406540:	d0f7      	beq.n	406532 <__aeabi_dmul+0x1c6>
  406542:	ea43 0306 	orr.w	r3, r3, r6
  406546:	4770      	bx	lr
  406548:	ea94 0f0c 	teq	r4, ip
  40654c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  406550:	bf18      	it	ne
  406552:	ea95 0f0c 	teqne	r5, ip
  406556:	d00c      	beq.n	406572 <__aeabi_dmul+0x206>
  406558:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40655c:	bf18      	it	ne
  40655e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406562:	d1d1      	bne.n	406508 <__aeabi_dmul+0x19c>
  406564:	ea81 0103 	eor.w	r1, r1, r3
  406568:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40656c:	f04f 0000 	mov.w	r0, #0
  406570:	bd70      	pop	{r4, r5, r6, pc}
  406572:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406576:	bf06      	itte	eq
  406578:	4610      	moveq	r0, r2
  40657a:	4619      	moveq	r1, r3
  40657c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406580:	d019      	beq.n	4065b6 <__aeabi_dmul+0x24a>
  406582:	ea94 0f0c 	teq	r4, ip
  406586:	d102      	bne.n	40658e <__aeabi_dmul+0x222>
  406588:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40658c:	d113      	bne.n	4065b6 <__aeabi_dmul+0x24a>
  40658e:	ea95 0f0c 	teq	r5, ip
  406592:	d105      	bne.n	4065a0 <__aeabi_dmul+0x234>
  406594:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  406598:	bf1c      	itt	ne
  40659a:	4610      	movne	r0, r2
  40659c:	4619      	movne	r1, r3
  40659e:	d10a      	bne.n	4065b6 <__aeabi_dmul+0x24a>
  4065a0:	ea81 0103 	eor.w	r1, r1, r3
  4065a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4065a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4065ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4065b0:	f04f 0000 	mov.w	r0, #0
  4065b4:	bd70      	pop	{r4, r5, r6, pc}
  4065b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4065ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4065be:	bd70      	pop	{r4, r5, r6, pc}

004065c0 <__aeabi_ddiv>:
  4065c0:	b570      	push	{r4, r5, r6, lr}
  4065c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4065c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4065ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4065ce:	bf1d      	ittte	ne
  4065d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4065d4:	ea94 0f0c 	teqne	r4, ip
  4065d8:	ea95 0f0c 	teqne	r5, ip
  4065dc:	f000 f8a7 	bleq	40672e <__aeabi_ddiv+0x16e>
  4065e0:	eba4 0405 	sub.w	r4, r4, r5
  4065e4:	ea81 0e03 	eor.w	lr, r1, r3
  4065e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4065ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4065f0:	f000 8088 	beq.w	406704 <__aeabi_ddiv+0x144>
  4065f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4065f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4065fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  406600:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  406604:	ea4f 2202 	mov.w	r2, r2, lsl #8
  406608:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40660c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  406610:	ea4f 2600 	mov.w	r6, r0, lsl #8
  406614:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  406618:	429d      	cmp	r5, r3
  40661a:	bf08      	it	eq
  40661c:	4296      	cmpeq	r6, r2
  40661e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  406622:	f504 7440 	add.w	r4, r4, #768	; 0x300
  406626:	d202      	bcs.n	40662e <__aeabi_ddiv+0x6e>
  406628:	085b      	lsrs	r3, r3, #1
  40662a:	ea4f 0232 	mov.w	r2, r2, rrx
  40662e:	1ab6      	subs	r6, r6, r2
  406630:	eb65 0503 	sbc.w	r5, r5, r3
  406634:	085b      	lsrs	r3, r3, #1
  406636:	ea4f 0232 	mov.w	r2, r2, rrx
  40663a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40663e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  406642:	ebb6 0e02 	subs.w	lr, r6, r2
  406646:	eb75 0e03 	sbcs.w	lr, r5, r3
  40664a:	bf22      	ittt	cs
  40664c:	1ab6      	subcs	r6, r6, r2
  40664e:	4675      	movcs	r5, lr
  406650:	ea40 000c 	orrcs.w	r0, r0, ip
  406654:	085b      	lsrs	r3, r3, #1
  406656:	ea4f 0232 	mov.w	r2, r2, rrx
  40665a:	ebb6 0e02 	subs.w	lr, r6, r2
  40665e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406662:	bf22      	ittt	cs
  406664:	1ab6      	subcs	r6, r6, r2
  406666:	4675      	movcs	r5, lr
  406668:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40666c:	085b      	lsrs	r3, r3, #1
  40666e:	ea4f 0232 	mov.w	r2, r2, rrx
  406672:	ebb6 0e02 	subs.w	lr, r6, r2
  406676:	eb75 0e03 	sbcs.w	lr, r5, r3
  40667a:	bf22      	ittt	cs
  40667c:	1ab6      	subcs	r6, r6, r2
  40667e:	4675      	movcs	r5, lr
  406680:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  406684:	085b      	lsrs	r3, r3, #1
  406686:	ea4f 0232 	mov.w	r2, r2, rrx
  40668a:	ebb6 0e02 	subs.w	lr, r6, r2
  40668e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406692:	bf22      	ittt	cs
  406694:	1ab6      	subcs	r6, r6, r2
  406696:	4675      	movcs	r5, lr
  406698:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40669c:	ea55 0e06 	orrs.w	lr, r5, r6
  4066a0:	d018      	beq.n	4066d4 <__aeabi_ddiv+0x114>
  4066a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4066a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4066aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4066ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4066b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4066b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4066ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4066be:	d1c0      	bne.n	406642 <__aeabi_ddiv+0x82>
  4066c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4066c4:	d10b      	bne.n	4066de <__aeabi_ddiv+0x11e>
  4066c6:	ea41 0100 	orr.w	r1, r1, r0
  4066ca:	f04f 0000 	mov.w	r0, #0
  4066ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4066d2:	e7b6      	b.n	406642 <__aeabi_ddiv+0x82>
  4066d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4066d8:	bf04      	itt	eq
  4066da:	4301      	orreq	r1, r0
  4066dc:	2000      	moveq	r0, #0
  4066de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4066e2:	bf88      	it	hi
  4066e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4066e8:	f63f aeaf 	bhi.w	40644a <__aeabi_dmul+0xde>
  4066ec:	ebb5 0c03 	subs.w	ip, r5, r3
  4066f0:	bf04      	itt	eq
  4066f2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4066f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4066fa:	f150 0000 	adcs.w	r0, r0, #0
  4066fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406702:	bd70      	pop	{r4, r5, r6, pc}
  406704:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  406708:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40670c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  406710:	bfc2      	ittt	gt
  406712:	ebd4 050c 	rsbsgt	r5, r4, ip
  406716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40671a:	bd70      	popgt	{r4, r5, r6, pc}
  40671c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406720:	f04f 0e00 	mov.w	lr, #0
  406724:	3c01      	subs	r4, #1
  406726:	e690      	b.n	40644a <__aeabi_dmul+0xde>
  406728:	ea45 0e06 	orr.w	lr, r5, r6
  40672c:	e68d      	b.n	40644a <__aeabi_dmul+0xde>
  40672e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  406732:	ea94 0f0c 	teq	r4, ip
  406736:	bf08      	it	eq
  406738:	ea95 0f0c 	teqeq	r5, ip
  40673c:	f43f af3b 	beq.w	4065b6 <__aeabi_dmul+0x24a>
  406740:	ea94 0f0c 	teq	r4, ip
  406744:	d10a      	bne.n	40675c <__aeabi_ddiv+0x19c>
  406746:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40674a:	f47f af34 	bne.w	4065b6 <__aeabi_dmul+0x24a>
  40674e:	ea95 0f0c 	teq	r5, ip
  406752:	f47f af25 	bne.w	4065a0 <__aeabi_dmul+0x234>
  406756:	4610      	mov	r0, r2
  406758:	4619      	mov	r1, r3
  40675a:	e72c      	b.n	4065b6 <__aeabi_dmul+0x24a>
  40675c:	ea95 0f0c 	teq	r5, ip
  406760:	d106      	bne.n	406770 <__aeabi_ddiv+0x1b0>
  406762:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  406766:	f43f aefd 	beq.w	406564 <__aeabi_dmul+0x1f8>
  40676a:	4610      	mov	r0, r2
  40676c:	4619      	mov	r1, r3
  40676e:	e722      	b.n	4065b6 <__aeabi_dmul+0x24a>
  406770:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406774:	bf18      	it	ne
  406776:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40677a:	f47f aec5 	bne.w	406508 <__aeabi_dmul+0x19c>
  40677e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  406782:	f47f af0d 	bne.w	4065a0 <__aeabi_dmul+0x234>
  406786:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40678a:	f47f aeeb 	bne.w	406564 <__aeabi_dmul+0x1f8>
  40678e:	e712      	b.n	4065b6 <__aeabi_dmul+0x24a>

00406790 <__gedf2>:
  406790:	f04f 3cff 	mov.w	ip, #4294967295
  406794:	e006      	b.n	4067a4 <__cmpdf2+0x4>
  406796:	bf00      	nop

00406798 <__ledf2>:
  406798:	f04f 0c01 	mov.w	ip, #1
  40679c:	e002      	b.n	4067a4 <__cmpdf2+0x4>
  40679e:	bf00      	nop

004067a0 <__cmpdf2>:
  4067a0:	f04f 0c01 	mov.w	ip, #1
  4067a4:	f84d cd04 	str.w	ip, [sp, #-4]!
  4067a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4067ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4067b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4067b4:	bf18      	it	ne
  4067b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4067ba:	d01b      	beq.n	4067f4 <__cmpdf2+0x54>
  4067bc:	b001      	add	sp, #4
  4067be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4067c2:	bf0c      	ite	eq
  4067c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4067c8:	ea91 0f03 	teqne	r1, r3
  4067cc:	bf02      	ittt	eq
  4067ce:	ea90 0f02 	teqeq	r0, r2
  4067d2:	2000      	moveq	r0, #0
  4067d4:	4770      	bxeq	lr
  4067d6:	f110 0f00 	cmn.w	r0, #0
  4067da:	ea91 0f03 	teq	r1, r3
  4067de:	bf58      	it	pl
  4067e0:	4299      	cmppl	r1, r3
  4067e2:	bf08      	it	eq
  4067e4:	4290      	cmpeq	r0, r2
  4067e6:	bf2c      	ite	cs
  4067e8:	17d8      	asrcs	r0, r3, #31
  4067ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4067ee:	f040 0001 	orr.w	r0, r0, #1
  4067f2:	4770      	bx	lr
  4067f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4067f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4067fc:	d102      	bne.n	406804 <__cmpdf2+0x64>
  4067fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406802:	d107      	bne.n	406814 <__cmpdf2+0x74>
  406804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40680c:	d1d6      	bne.n	4067bc <__cmpdf2+0x1c>
  40680e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406812:	d0d3      	beq.n	4067bc <__cmpdf2+0x1c>
  406814:	f85d 0b04 	ldr.w	r0, [sp], #4
  406818:	4770      	bx	lr
  40681a:	bf00      	nop

0040681c <__aeabi_cdrcmple>:
  40681c:	4684      	mov	ip, r0
  40681e:	4610      	mov	r0, r2
  406820:	4662      	mov	r2, ip
  406822:	468c      	mov	ip, r1
  406824:	4619      	mov	r1, r3
  406826:	4663      	mov	r3, ip
  406828:	e000      	b.n	40682c <__aeabi_cdcmpeq>
  40682a:	bf00      	nop

0040682c <__aeabi_cdcmpeq>:
  40682c:	b501      	push	{r0, lr}
  40682e:	f7ff ffb7 	bl	4067a0 <__cmpdf2>
  406832:	2800      	cmp	r0, #0
  406834:	bf48      	it	mi
  406836:	f110 0f00 	cmnmi.w	r0, #0
  40683a:	bd01      	pop	{r0, pc}

0040683c <__aeabi_dcmpeq>:
  40683c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406840:	f7ff fff4 	bl	40682c <__aeabi_cdcmpeq>
  406844:	bf0c      	ite	eq
  406846:	2001      	moveq	r0, #1
  406848:	2000      	movne	r0, #0
  40684a:	f85d fb08 	ldr.w	pc, [sp], #8
  40684e:	bf00      	nop

00406850 <__aeabi_dcmplt>:
  406850:	f84d ed08 	str.w	lr, [sp, #-8]!
  406854:	f7ff ffea 	bl	40682c <__aeabi_cdcmpeq>
  406858:	bf34      	ite	cc
  40685a:	2001      	movcc	r0, #1
  40685c:	2000      	movcs	r0, #0
  40685e:	f85d fb08 	ldr.w	pc, [sp], #8
  406862:	bf00      	nop

00406864 <__aeabi_dcmple>:
  406864:	f84d ed08 	str.w	lr, [sp, #-8]!
  406868:	f7ff ffe0 	bl	40682c <__aeabi_cdcmpeq>
  40686c:	bf94      	ite	ls
  40686e:	2001      	movls	r0, #1
  406870:	2000      	movhi	r0, #0
  406872:	f85d fb08 	ldr.w	pc, [sp], #8
  406876:	bf00      	nop

00406878 <__aeabi_dcmpge>:
  406878:	f84d ed08 	str.w	lr, [sp, #-8]!
  40687c:	f7ff ffce 	bl	40681c <__aeabi_cdrcmple>
  406880:	bf94      	ite	ls
  406882:	2001      	movls	r0, #1
  406884:	2000      	movhi	r0, #0
  406886:	f85d fb08 	ldr.w	pc, [sp], #8
  40688a:	bf00      	nop

0040688c <__aeabi_dcmpgt>:
  40688c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406890:	f7ff ffc4 	bl	40681c <__aeabi_cdrcmple>
  406894:	bf34      	ite	cc
  406896:	2001      	movcc	r0, #1
  406898:	2000      	movcs	r0, #0
  40689a:	f85d fb08 	ldr.w	pc, [sp], #8
  40689e:	bf00      	nop

004068a0 <__aeabi_dcmpun>:
  4068a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4068a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4068a8:	d102      	bne.n	4068b0 <__aeabi_dcmpun+0x10>
  4068aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4068ae:	d10a      	bne.n	4068c6 <__aeabi_dcmpun+0x26>
  4068b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4068b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4068b8:	d102      	bne.n	4068c0 <__aeabi_dcmpun+0x20>
  4068ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4068be:	d102      	bne.n	4068c6 <__aeabi_dcmpun+0x26>
  4068c0:	f04f 0000 	mov.w	r0, #0
  4068c4:	4770      	bx	lr
  4068c6:	f04f 0001 	mov.w	r0, #1
  4068ca:	4770      	bx	lr

004068cc <__aeabi_d2f>:
  4068cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4068d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4068d4:	bf24      	itt	cs
  4068d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4068da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4068de:	d90d      	bls.n	4068fc <__aeabi_d2f+0x30>
  4068e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4068e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4068e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4068ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  4068f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4068f4:	bf08      	it	eq
  4068f6:	f020 0001 	biceq.w	r0, r0, #1
  4068fa:	4770      	bx	lr
  4068fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  406900:	d121      	bne.n	406946 <__aeabi_d2f+0x7a>
  406902:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  406906:	bfbc      	itt	lt
  406908:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40690c:	4770      	bxlt	lr
  40690e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406912:	ea4f 5252 	mov.w	r2, r2, lsr #21
  406916:	f1c2 0218 	rsb	r2, r2, #24
  40691a:	f1c2 0c20 	rsb	ip, r2, #32
  40691e:	fa10 f30c 	lsls.w	r3, r0, ip
  406922:	fa20 f002 	lsr.w	r0, r0, r2
  406926:	bf18      	it	ne
  406928:	f040 0001 	orrne.w	r0, r0, #1
  40692c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  406930:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  406934:	fa03 fc0c 	lsl.w	ip, r3, ip
  406938:	ea40 000c 	orr.w	r0, r0, ip
  40693c:	fa23 f302 	lsr.w	r3, r3, r2
  406940:	ea4f 0343 	mov.w	r3, r3, lsl #1
  406944:	e7cc      	b.n	4068e0 <__aeabi_d2f+0x14>
  406946:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40694a:	d107      	bne.n	40695c <__aeabi_d2f+0x90>
  40694c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  406950:	bf1e      	ittt	ne
  406952:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  406956:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40695a:	4770      	bxne	lr
  40695c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  406960:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  406964:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406968:	4770      	bx	lr
  40696a:	bf00      	nop

0040696c <__aeabi_frsub>:
  40696c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  406970:	e002      	b.n	406978 <__addsf3>
  406972:	bf00      	nop

00406974 <__aeabi_fsub>:
  406974:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00406978 <__addsf3>:
  406978:	0042      	lsls	r2, r0, #1
  40697a:	bf1f      	itttt	ne
  40697c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  406980:	ea92 0f03 	teqne	r2, r3
  406984:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  406988:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40698c:	d06a      	beq.n	406a64 <__addsf3+0xec>
  40698e:	ea4f 6212 	mov.w	r2, r2, lsr #24
  406992:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  406996:	bfc1      	itttt	gt
  406998:	18d2      	addgt	r2, r2, r3
  40699a:	4041      	eorgt	r1, r0
  40699c:	4048      	eorgt	r0, r1
  40699e:	4041      	eorgt	r1, r0
  4069a0:	bfb8      	it	lt
  4069a2:	425b      	neglt	r3, r3
  4069a4:	2b19      	cmp	r3, #25
  4069a6:	bf88      	it	hi
  4069a8:	4770      	bxhi	lr
  4069aa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  4069ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4069b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  4069b6:	bf18      	it	ne
  4069b8:	4240      	negne	r0, r0
  4069ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4069be:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  4069c2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  4069c6:	bf18      	it	ne
  4069c8:	4249      	negne	r1, r1
  4069ca:	ea92 0f03 	teq	r2, r3
  4069ce:	d03f      	beq.n	406a50 <__addsf3+0xd8>
  4069d0:	f1a2 0201 	sub.w	r2, r2, #1
  4069d4:	fa41 fc03 	asr.w	ip, r1, r3
  4069d8:	eb10 000c 	adds.w	r0, r0, ip
  4069dc:	f1c3 0320 	rsb	r3, r3, #32
  4069e0:	fa01 f103 	lsl.w	r1, r1, r3
  4069e4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4069e8:	d502      	bpl.n	4069f0 <__addsf3+0x78>
  4069ea:	4249      	negs	r1, r1
  4069ec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  4069f0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  4069f4:	d313      	bcc.n	406a1e <__addsf3+0xa6>
  4069f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  4069fa:	d306      	bcc.n	406a0a <__addsf3+0x92>
  4069fc:	0840      	lsrs	r0, r0, #1
  4069fe:	ea4f 0131 	mov.w	r1, r1, rrx
  406a02:	f102 0201 	add.w	r2, r2, #1
  406a06:	2afe      	cmp	r2, #254	; 0xfe
  406a08:	d251      	bcs.n	406aae <__addsf3+0x136>
  406a0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  406a0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  406a12:	bf08      	it	eq
  406a14:	f020 0001 	biceq.w	r0, r0, #1
  406a18:	ea40 0003 	orr.w	r0, r0, r3
  406a1c:	4770      	bx	lr
  406a1e:	0049      	lsls	r1, r1, #1
  406a20:	eb40 0000 	adc.w	r0, r0, r0
  406a24:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  406a28:	f1a2 0201 	sub.w	r2, r2, #1
  406a2c:	d1ed      	bne.n	406a0a <__addsf3+0x92>
  406a2e:	fab0 fc80 	clz	ip, r0
  406a32:	f1ac 0c08 	sub.w	ip, ip, #8
  406a36:	ebb2 020c 	subs.w	r2, r2, ip
  406a3a:	fa00 f00c 	lsl.w	r0, r0, ip
  406a3e:	bfaa      	itet	ge
  406a40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  406a44:	4252      	neglt	r2, r2
  406a46:	4318      	orrge	r0, r3
  406a48:	bfbc      	itt	lt
  406a4a:	40d0      	lsrlt	r0, r2
  406a4c:	4318      	orrlt	r0, r3
  406a4e:	4770      	bx	lr
  406a50:	f092 0f00 	teq	r2, #0
  406a54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  406a58:	bf06      	itte	eq
  406a5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  406a5e:	3201      	addeq	r2, #1
  406a60:	3b01      	subne	r3, #1
  406a62:	e7b5      	b.n	4069d0 <__addsf3+0x58>
  406a64:	ea4f 0341 	mov.w	r3, r1, lsl #1
  406a68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406a6c:	bf18      	it	ne
  406a6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  406a72:	d021      	beq.n	406ab8 <__addsf3+0x140>
  406a74:	ea92 0f03 	teq	r2, r3
  406a78:	d004      	beq.n	406a84 <__addsf3+0x10c>
  406a7a:	f092 0f00 	teq	r2, #0
  406a7e:	bf08      	it	eq
  406a80:	4608      	moveq	r0, r1
  406a82:	4770      	bx	lr
  406a84:	ea90 0f01 	teq	r0, r1
  406a88:	bf1c      	itt	ne
  406a8a:	2000      	movne	r0, #0
  406a8c:	4770      	bxne	lr
  406a8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  406a92:	d104      	bne.n	406a9e <__addsf3+0x126>
  406a94:	0040      	lsls	r0, r0, #1
  406a96:	bf28      	it	cs
  406a98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  406a9c:	4770      	bx	lr
  406a9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  406aa2:	bf3c      	itt	cc
  406aa4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  406aa8:	4770      	bxcc	lr
  406aaa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  406aae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  406ab2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406ab6:	4770      	bx	lr
  406ab8:	ea7f 6222 	mvns.w	r2, r2, asr #24
  406abc:	bf16      	itet	ne
  406abe:	4608      	movne	r0, r1
  406ac0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  406ac4:	4601      	movne	r1, r0
  406ac6:	0242      	lsls	r2, r0, #9
  406ac8:	bf06      	itte	eq
  406aca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  406ace:	ea90 0f01 	teqeq	r0, r1
  406ad2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  406ad6:	4770      	bx	lr

00406ad8 <__aeabi_ui2f>:
  406ad8:	f04f 0300 	mov.w	r3, #0
  406adc:	e004      	b.n	406ae8 <__aeabi_i2f+0x8>
  406ade:	bf00      	nop

00406ae0 <__aeabi_i2f>:
  406ae0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  406ae4:	bf48      	it	mi
  406ae6:	4240      	negmi	r0, r0
  406ae8:	ea5f 0c00 	movs.w	ip, r0
  406aec:	bf08      	it	eq
  406aee:	4770      	bxeq	lr
  406af0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  406af4:	4601      	mov	r1, r0
  406af6:	f04f 0000 	mov.w	r0, #0
  406afa:	e01c      	b.n	406b36 <__aeabi_l2f+0x2a>

00406afc <__aeabi_ul2f>:
  406afc:	ea50 0201 	orrs.w	r2, r0, r1
  406b00:	bf08      	it	eq
  406b02:	4770      	bxeq	lr
  406b04:	f04f 0300 	mov.w	r3, #0
  406b08:	e00a      	b.n	406b20 <__aeabi_l2f+0x14>
  406b0a:	bf00      	nop

00406b0c <__aeabi_l2f>:
  406b0c:	ea50 0201 	orrs.w	r2, r0, r1
  406b10:	bf08      	it	eq
  406b12:	4770      	bxeq	lr
  406b14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  406b18:	d502      	bpl.n	406b20 <__aeabi_l2f+0x14>
  406b1a:	4240      	negs	r0, r0
  406b1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406b20:	ea5f 0c01 	movs.w	ip, r1
  406b24:	bf02      	ittt	eq
  406b26:	4684      	moveq	ip, r0
  406b28:	4601      	moveq	r1, r0
  406b2a:	2000      	moveq	r0, #0
  406b2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  406b30:	bf08      	it	eq
  406b32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  406b36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  406b3a:	fabc f28c 	clz	r2, ip
  406b3e:	3a08      	subs	r2, #8
  406b40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  406b44:	db10      	blt.n	406b68 <__aeabi_l2f+0x5c>
  406b46:	fa01 fc02 	lsl.w	ip, r1, r2
  406b4a:	4463      	add	r3, ip
  406b4c:	fa00 fc02 	lsl.w	ip, r0, r2
  406b50:	f1c2 0220 	rsb	r2, r2, #32
  406b54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406b58:	fa20 f202 	lsr.w	r2, r0, r2
  406b5c:	eb43 0002 	adc.w	r0, r3, r2
  406b60:	bf08      	it	eq
  406b62:	f020 0001 	biceq.w	r0, r0, #1
  406b66:	4770      	bx	lr
  406b68:	f102 0220 	add.w	r2, r2, #32
  406b6c:	fa01 fc02 	lsl.w	ip, r1, r2
  406b70:	f1c2 0220 	rsb	r2, r2, #32
  406b74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  406b78:	fa21 f202 	lsr.w	r2, r1, r2
  406b7c:	eb43 0002 	adc.w	r0, r3, r2
  406b80:	bf08      	it	eq
  406b82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  406b86:	4770      	bx	lr

00406b88 <__aeabi_fmul>:
  406b88:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406b8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  406b90:	bf1e      	ittt	ne
  406b92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  406b96:	ea92 0f0c 	teqne	r2, ip
  406b9a:	ea93 0f0c 	teqne	r3, ip
  406b9e:	d06f      	beq.n	406c80 <__aeabi_fmul+0xf8>
  406ba0:	441a      	add	r2, r3
  406ba2:	ea80 0c01 	eor.w	ip, r0, r1
  406ba6:	0240      	lsls	r0, r0, #9
  406ba8:	bf18      	it	ne
  406baa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  406bae:	d01e      	beq.n	406bee <__aeabi_fmul+0x66>
  406bb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  406bb4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  406bb8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  406bbc:	fba0 3101 	umull	r3, r1, r0, r1
  406bc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  406bc4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  406bc8:	bf3e      	ittt	cc
  406bca:	0049      	lslcc	r1, r1, #1
  406bcc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  406bd0:	005b      	lslcc	r3, r3, #1
  406bd2:	ea40 0001 	orr.w	r0, r0, r1
  406bd6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  406bda:	2afd      	cmp	r2, #253	; 0xfd
  406bdc:	d81d      	bhi.n	406c1a <__aeabi_fmul+0x92>
  406bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  406be2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  406be6:	bf08      	it	eq
  406be8:	f020 0001 	biceq.w	r0, r0, #1
  406bec:	4770      	bx	lr
  406bee:	f090 0f00 	teq	r0, #0
  406bf2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  406bf6:	bf08      	it	eq
  406bf8:	0249      	lsleq	r1, r1, #9
  406bfa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  406bfe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  406c02:	3a7f      	subs	r2, #127	; 0x7f
  406c04:	bfc2      	ittt	gt
  406c06:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  406c0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  406c0e:	4770      	bxgt	lr
  406c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406c14:	f04f 0300 	mov.w	r3, #0
  406c18:	3a01      	subs	r2, #1
  406c1a:	dc5d      	bgt.n	406cd8 <__aeabi_fmul+0x150>
  406c1c:	f112 0f19 	cmn.w	r2, #25
  406c20:	bfdc      	itt	le
  406c22:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  406c26:	4770      	bxle	lr
  406c28:	f1c2 0200 	rsb	r2, r2, #0
  406c2c:	0041      	lsls	r1, r0, #1
  406c2e:	fa21 f102 	lsr.w	r1, r1, r2
  406c32:	f1c2 0220 	rsb	r2, r2, #32
  406c36:	fa00 fc02 	lsl.w	ip, r0, r2
  406c3a:	ea5f 0031 	movs.w	r0, r1, rrx
  406c3e:	f140 0000 	adc.w	r0, r0, #0
  406c42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  406c46:	bf08      	it	eq
  406c48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  406c4c:	4770      	bx	lr
  406c4e:	f092 0f00 	teq	r2, #0
  406c52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  406c56:	bf02      	ittt	eq
  406c58:	0040      	lsleq	r0, r0, #1
  406c5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  406c5e:	3a01      	subeq	r2, #1
  406c60:	d0f9      	beq.n	406c56 <__aeabi_fmul+0xce>
  406c62:	ea40 000c 	orr.w	r0, r0, ip
  406c66:	f093 0f00 	teq	r3, #0
  406c6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  406c6e:	bf02      	ittt	eq
  406c70:	0049      	lsleq	r1, r1, #1
  406c72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  406c76:	3b01      	subeq	r3, #1
  406c78:	d0f9      	beq.n	406c6e <__aeabi_fmul+0xe6>
  406c7a:	ea41 010c 	orr.w	r1, r1, ip
  406c7e:	e78f      	b.n	406ba0 <__aeabi_fmul+0x18>
  406c80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  406c84:	ea92 0f0c 	teq	r2, ip
  406c88:	bf18      	it	ne
  406c8a:	ea93 0f0c 	teqne	r3, ip
  406c8e:	d00a      	beq.n	406ca6 <__aeabi_fmul+0x11e>
  406c90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  406c94:	bf18      	it	ne
  406c96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  406c9a:	d1d8      	bne.n	406c4e <__aeabi_fmul+0xc6>
  406c9c:	ea80 0001 	eor.w	r0, r0, r1
  406ca0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  406ca4:	4770      	bx	lr
  406ca6:	f090 0f00 	teq	r0, #0
  406caa:	bf17      	itett	ne
  406cac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  406cb0:	4608      	moveq	r0, r1
  406cb2:	f091 0f00 	teqne	r1, #0
  406cb6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  406cba:	d014      	beq.n	406ce6 <__aeabi_fmul+0x15e>
  406cbc:	ea92 0f0c 	teq	r2, ip
  406cc0:	d101      	bne.n	406cc6 <__aeabi_fmul+0x13e>
  406cc2:	0242      	lsls	r2, r0, #9
  406cc4:	d10f      	bne.n	406ce6 <__aeabi_fmul+0x15e>
  406cc6:	ea93 0f0c 	teq	r3, ip
  406cca:	d103      	bne.n	406cd4 <__aeabi_fmul+0x14c>
  406ccc:	024b      	lsls	r3, r1, #9
  406cce:	bf18      	it	ne
  406cd0:	4608      	movne	r0, r1
  406cd2:	d108      	bne.n	406ce6 <__aeabi_fmul+0x15e>
  406cd4:	ea80 0001 	eor.w	r0, r0, r1
  406cd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  406cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  406ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406ce4:	4770      	bx	lr
  406ce6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  406cea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  406cee:	4770      	bx	lr

00406cf0 <__aeabi_fdiv>:
  406cf0:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406cf4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  406cf8:	bf1e      	ittt	ne
  406cfa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  406cfe:	ea92 0f0c 	teqne	r2, ip
  406d02:	ea93 0f0c 	teqne	r3, ip
  406d06:	d069      	beq.n	406ddc <__aeabi_fdiv+0xec>
  406d08:	eba2 0203 	sub.w	r2, r2, r3
  406d0c:	ea80 0c01 	eor.w	ip, r0, r1
  406d10:	0249      	lsls	r1, r1, #9
  406d12:	ea4f 2040 	mov.w	r0, r0, lsl #9
  406d16:	d037      	beq.n	406d88 <__aeabi_fdiv+0x98>
  406d18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  406d1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  406d20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  406d24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  406d28:	428b      	cmp	r3, r1
  406d2a:	bf38      	it	cc
  406d2c:	005b      	lslcc	r3, r3, #1
  406d2e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  406d32:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  406d36:	428b      	cmp	r3, r1
  406d38:	bf24      	itt	cs
  406d3a:	1a5b      	subcs	r3, r3, r1
  406d3c:	ea40 000c 	orrcs.w	r0, r0, ip
  406d40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  406d44:	bf24      	itt	cs
  406d46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  406d4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  406d4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  406d52:	bf24      	itt	cs
  406d54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  406d58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  406d5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  406d60:	bf24      	itt	cs
  406d62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  406d66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  406d6a:	011b      	lsls	r3, r3, #4
  406d6c:	bf18      	it	ne
  406d6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  406d72:	d1e0      	bne.n	406d36 <__aeabi_fdiv+0x46>
  406d74:	2afd      	cmp	r2, #253	; 0xfd
  406d76:	f63f af50 	bhi.w	406c1a <__aeabi_fmul+0x92>
  406d7a:	428b      	cmp	r3, r1
  406d7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  406d80:	bf08      	it	eq
  406d82:	f020 0001 	biceq.w	r0, r0, #1
  406d86:	4770      	bx	lr
  406d88:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  406d8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  406d90:	327f      	adds	r2, #127	; 0x7f
  406d92:	bfc2      	ittt	gt
  406d94:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  406d98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  406d9c:	4770      	bxgt	lr
  406d9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406da2:	f04f 0300 	mov.w	r3, #0
  406da6:	3a01      	subs	r2, #1
  406da8:	e737      	b.n	406c1a <__aeabi_fmul+0x92>
  406daa:	f092 0f00 	teq	r2, #0
  406dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  406db2:	bf02      	ittt	eq
  406db4:	0040      	lsleq	r0, r0, #1
  406db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  406dba:	3a01      	subeq	r2, #1
  406dbc:	d0f9      	beq.n	406db2 <__aeabi_fdiv+0xc2>
  406dbe:	ea40 000c 	orr.w	r0, r0, ip
  406dc2:	f093 0f00 	teq	r3, #0
  406dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  406dca:	bf02      	ittt	eq
  406dcc:	0049      	lsleq	r1, r1, #1
  406dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  406dd2:	3b01      	subeq	r3, #1
  406dd4:	d0f9      	beq.n	406dca <__aeabi_fdiv+0xda>
  406dd6:	ea41 010c 	orr.w	r1, r1, ip
  406dda:	e795      	b.n	406d08 <__aeabi_fdiv+0x18>
  406ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  406de0:	ea92 0f0c 	teq	r2, ip
  406de4:	d108      	bne.n	406df8 <__aeabi_fdiv+0x108>
  406de6:	0242      	lsls	r2, r0, #9
  406de8:	f47f af7d 	bne.w	406ce6 <__aeabi_fmul+0x15e>
  406dec:	ea93 0f0c 	teq	r3, ip
  406df0:	f47f af70 	bne.w	406cd4 <__aeabi_fmul+0x14c>
  406df4:	4608      	mov	r0, r1
  406df6:	e776      	b.n	406ce6 <__aeabi_fmul+0x15e>
  406df8:	ea93 0f0c 	teq	r3, ip
  406dfc:	d104      	bne.n	406e08 <__aeabi_fdiv+0x118>
  406dfe:	024b      	lsls	r3, r1, #9
  406e00:	f43f af4c 	beq.w	406c9c <__aeabi_fmul+0x114>
  406e04:	4608      	mov	r0, r1
  406e06:	e76e      	b.n	406ce6 <__aeabi_fmul+0x15e>
  406e08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  406e0c:	bf18      	it	ne
  406e0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  406e12:	d1ca      	bne.n	406daa <__aeabi_fdiv+0xba>
  406e14:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  406e18:	f47f af5c 	bne.w	406cd4 <__aeabi_fmul+0x14c>
  406e1c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  406e20:	f47f af3c 	bne.w	406c9c <__aeabi_fmul+0x114>
  406e24:	e75f      	b.n	406ce6 <__aeabi_fmul+0x15e>
  406e26:	bf00      	nop

00406e28 <__gesf2>:
  406e28:	f04f 3cff 	mov.w	ip, #4294967295
  406e2c:	e006      	b.n	406e3c <__cmpsf2+0x4>
  406e2e:	bf00      	nop

00406e30 <__lesf2>:
  406e30:	f04f 0c01 	mov.w	ip, #1
  406e34:	e002      	b.n	406e3c <__cmpsf2+0x4>
  406e36:	bf00      	nop

00406e38 <__cmpsf2>:
  406e38:	f04f 0c01 	mov.w	ip, #1
  406e3c:	f84d cd04 	str.w	ip, [sp, #-4]!
  406e40:	ea4f 0240 	mov.w	r2, r0, lsl #1
  406e44:	ea4f 0341 	mov.w	r3, r1, lsl #1
  406e48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406e4c:	bf18      	it	ne
  406e4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  406e52:	d011      	beq.n	406e78 <__cmpsf2+0x40>
  406e54:	b001      	add	sp, #4
  406e56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  406e5a:	bf18      	it	ne
  406e5c:	ea90 0f01 	teqne	r0, r1
  406e60:	bf58      	it	pl
  406e62:	ebb2 0003 	subspl.w	r0, r2, r3
  406e66:	bf88      	it	hi
  406e68:	17c8      	asrhi	r0, r1, #31
  406e6a:	bf38      	it	cc
  406e6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  406e70:	bf18      	it	ne
  406e72:	f040 0001 	orrne.w	r0, r0, #1
  406e76:	4770      	bx	lr
  406e78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406e7c:	d102      	bne.n	406e84 <__cmpsf2+0x4c>
  406e7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  406e82:	d105      	bne.n	406e90 <__cmpsf2+0x58>
  406e84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  406e88:	d1e4      	bne.n	406e54 <__cmpsf2+0x1c>
  406e8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  406e8e:	d0e1      	beq.n	406e54 <__cmpsf2+0x1c>
  406e90:	f85d 0b04 	ldr.w	r0, [sp], #4
  406e94:	4770      	bx	lr
  406e96:	bf00      	nop

00406e98 <__aeabi_cfrcmple>:
  406e98:	4684      	mov	ip, r0
  406e9a:	4608      	mov	r0, r1
  406e9c:	4661      	mov	r1, ip
  406e9e:	e7ff      	b.n	406ea0 <__aeabi_cfcmpeq>

00406ea0 <__aeabi_cfcmpeq>:
  406ea0:	b50f      	push	{r0, r1, r2, r3, lr}
  406ea2:	f7ff ffc9 	bl	406e38 <__cmpsf2>
  406ea6:	2800      	cmp	r0, #0
  406ea8:	bf48      	it	mi
  406eaa:	f110 0f00 	cmnmi.w	r0, #0
  406eae:	bd0f      	pop	{r0, r1, r2, r3, pc}

00406eb0 <__aeabi_fcmpeq>:
  406eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
  406eb4:	f7ff fff4 	bl	406ea0 <__aeabi_cfcmpeq>
  406eb8:	bf0c      	ite	eq
  406eba:	2001      	moveq	r0, #1
  406ebc:	2000      	movne	r0, #0
  406ebe:	f85d fb08 	ldr.w	pc, [sp], #8
  406ec2:	bf00      	nop

00406ec4 <__aeabi_fcmplt>:
  406ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
  406ec8:	f7ff ffea 	bl	406ea0 <__aeabi_cfcmpeq>
  406ecc:	bf34      	ite	cc
  406ece:	2001      	movcc	r0, #1
  406ed0:	2000      	movcs	r0, #0
  406ed2:	f85d fb08 	ldr.w	pc, [sp], #8
  406ed6:	bf00      	nop

00406ed8 <__aeabi_fcmple>:
  406ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
  406edc:	f7ff ffe0 	bl	406ea0 <__aeabi_cfcmpeq>
  406ee0:	bf94      	ite	ls
  406ee2:	2001      	movls	r0, #1
  406ee4:	2000      	movhi	r0, #0
  406ee6:	f85d fb08 	ldr.w	pc, [sp], #8
  406eea:	bf00      	nop

00406eec <__aeabi_fcmpge>:
  406eec:	f84d ed08 	str.w	lr, [sp, #-8]!
  406ef0:	f7ff ffd2 	bl	406e98 <__aeabi_cfrcmple>
  406ef4:	bf94      	ite	ls
  406ef6:	2001      	movls	r0, #1
  406ef8:	2000      	movhi	r0, #0
  406efa:	f85d fb08 	ldr.w	pc, [sp], #8
  406efe:	bf00      	nop

00406f00 <__aeabi_fcmpgt>:
  406f00:	f84d ed08 	str.w	lr, [sp, #-8]!
  406f04:	f7ff ffc8 	bl	406e98 <__aeabi_cfrcmple>
  406f08:	bf34      	ite	cc
  406f0a:	2001      	movcc	r0, #1
  406f0c:	2000      	movcs	r0, #0
  406f0e:	f85d fb08 	ldr.w	pc, [sp], #8
  406f12:	bf00      	nop

00406f14 <__aeabi_fcmpun>:
  406f14:	ea4f 0240 	mov.w	r2, r0, lsl #1
  406f18:	ea4f 0341 	mov.w	r3, r1, lsl #1
  406f1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406f20:	d102      	bne.n	406f28 <__aeabi_fcmpun+0x14>
  406f22:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  406f26:	d108      	bne.n	406f3a <__aeabi_fcmpun+0x26>
  406f28:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  406f2c:	d102      	bne.n	406f34 <__aeabi_fcmpun+0x20>
  406f2e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  406f32:	d102      	bne.n	406f3a <__aeabi_fcmpun+0x26>
  406f34:	f04f 0000 	mov.w	r0, #0
  406f38:	4770      	bx	lr
  406f3a:	f04f 0001 	mov.w	r0, #1
  406f3e:	4770      	bx	lr

00406f40 <__aeabi_f2iz>:
  406f40:	ea4f 0240 	mov.w	r2, r0, lsl #1
  406f44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  406f48:	d30f      	bcc.n	406f6a <__aeabi_f2iz+0x2a>
  406f4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
  406f4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  406f52:	d90d      	bls.n	406f70 <__aeabi_f2iz+0x30>
  406f54:	ea4f 2300 	mov.w	r3, r0, lsl #8
  406f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  406f5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  406f60:	fa23 f002 	lsr.w	r0, r3, r2
  406f64:	bf18      	it	ne
  406f66:	4240      	negne	r0, r0
  406f68:	4770      	bx	lr
  406f6a:	f04f 0000 	mov.w	r0, #0
  406f6e:	4770      	bx	lr
  406f70:	f112 0f61 	cmn.w	r2, #97	; 0x61
  406f74:	d101      	bne.n	406f7a <__aeabi_f2iz+0x3a>
  406f76:	0242      	lsls	r2, r0, #9
  406f78:	d105      	bne.n	406f86 <__aeabi_f2iz+0x46>
  406f7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  406f7e:	bf08      	it	eq
  406f80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  406f84:	4770      	bx	lr
  406f86:	f04f 0000 	mov.w	r0, #0
  406f8a:	4770      	bx	lr

00406f8c <__errno>:
  406f8c:	4b01      	ldr	r3, [pc, #4]	; (406f94 <__errno+0x8>)
  406f8e:	6818      	ldr	r0, [r3, #0]
  406f90:	4770      	bx	lr
  406f92:	bf00      	nop
  406f94:	20400028 	.word	0x20400028

00406f98 <__libc_init_array>:
  406f98:	b570      	push	{r4, r5, r6, lr}
  406f9a:	4e0f      	ldr	r6, [pc, #60]	; (406fd8 <__libc_init_array+0x40>)
  406f9c:	4d0f      	ldr	r5, [pc, #60]	; (406fdc <__libc_init_array+0x44>)
  406f9e:	1b76      	subs	r6, r6, r5
  406fa0:	10b6      	asrs	r6, r6, #2
  406fa2:	bf18      	it	ne
  406fa4:	2400      	movne	r4, #0
  406fa6:	d005      	beq.n	406fb4 <__libc_init_array+0x1c>
  406fa8:	3401      	adds	r4, #1
  406faa:	f855 3b04 	ldr.w	r3, [r5], #4
  406fae:	4798      	blx	r3
  406fb0:	42a6      	cmp	r6, r4
  406fb2:	d1f9      	bne.n	406fa8 <__libc_init_array+0x10>
  406fb4:	4e0a      	ldr	r6, [pc, #40]	; (406fe0 <__libc_init_array+0x48>)
  406fb6:	4d0b      	ldr	r5, [pc, #44]	; (406fe4 <__libc_init_array+0x4c>)
  406fb8:	1b76      	subs	r6, r6, r5
  406fba:	f003 fc55 	bl	40a868 <_init>
  406fbe:	10b6      	asrs	r6, r6, #2
  406fc0:	bf18      	it	ne
  406fc2:	2400      	movne	r4, #0
  406fc4:	d006      	beq.n	406fd4 <__libc_init_array+0x3c>
  406fc6:	3401      	adds	r4, #1
  406fc8:	f855 3b04 	ldr.w	r3, [r5], #4
  406fcc:	4798      	blx	r3
  406fce:	42a6      	cmp	r6, r4
  406fd0:	d1f9      	bne.n	406fc6 <__libc_init_array+0x2e>
  406fd2:	bd70      	pop	{r4, r5, r6, pc}
  406fd4:	bd70      	pop	{r4, r5, r6, pc}
  406fd6:	bf00      	nop
  406fd8:	0040a874 	.word	0x0040a874
  406fdc:	0040a874 	.word	0x0040a874
  406fe0:	0040a87c 	.word	0x0040a87c
  406fe4:	0040a874 	.word	0x0040a874

00406fe8 <iprintf>:
  406fe8:	b40f      	push	{r0, r1, r2, r3}
  406fea:	b500      	push	{lr}
  406fec:	4907      	ldr	r1, [pc, #28]	; (40700c <iprintf+0x24>)
  406fee:	b083      	sub	sp, #12
  406ff0:	ab04      	add	r3, sp, #16
  406ff2:	6808      	ldr	r0, [r1, #0]
  406ff4:	f853 2b04 	ldr.w	r2, [r3], #4
  406ff8:	6881      	ldr	r1, [r0, #8]
  406ffa:	9301      	str	r3, [sp, #4]
  406ffc:	f000 fa6e 	bl	4074dc <_vfiprintf_r>
  407000:	b003      	add	sp, #12
  407002:	f85d eb04 	ldr.w	lr, [sp], #4
  407006:	b004      	add	sp, #16
  407008:	4770      	bx	lr
  40700a:	bf00      	nop
  40700c:	20400028 	.word	0x20400028

00407010 <memcpy>:
  407010:	4684      	mov	ip, r0
  407012:	ea41 0300 	orr.w	r3, r1, r0
  407016:	f013 0303 	ands.w	r3, r3, #3
  40701a:	d16d      	bne.n	4070f8 <memcpy+0xe8>
  40701c:	3a40      	subs	r2, #64	; 0x40
  40701e:	d341      	bcc.n	4070a4 <memcpy+0x94>
  407020:	f851 3b04 	ldr.w	r3, [r1], #4
  407024:	f840 3b04 	str.w	r3, [r0], #4
  407028:	f851 3b04 	ldr.w	r3, [r1], #4
  40702c:	f840 3b04 	str.w	r3, [r0], #4
  407030:	f851 3b04 	ldr.w	r3, [r1], #4
  407034:	f840 3b04 	str.w	r3, [r0], #4
  407038:	f851 3b04 	ldr.w	r3, [r1], #4
  40703c:	f840 3b04 	str.w	r3, [r0], #4
  407040:	f851 3b04 	ldr.w	r3, [r1], #4
  407044:	f840 3b04 	str.w	r3, [r0], #4
  407048:	f851 3b04 	ldr.w	r3, [r1], #4
  40704c:	f840 3b04 	str.w	r3, [r0], #4
  407050:	f851 3b04 	ldr.w	r3, [r1], #4
  407054:	f840 3b04 	str.w	r3, [r0], #4
  407058:	f851 3b04 	ldr.w	r3, [r1], #4
  40705c:	f840 3b04 	str.w	r3, [r0], #4
  407060:	f851 3b04 	ldr.w	r3, [r1], #4
  407064:	f840 3b04 	str.w	r3, [r0], #4
  407068:	f851 3b04 	ldr.w	r3, [r1], #4
  40706c:	f840 3b04 	str.w	r3, [r0], #4
  407070:	f851 3b04 	ldr.w	r3, [r1], #4
  407074:	f840 3b04 	str.w	r3, [r0], #4
  407078:	f851 3b04 	ldr.w	r3, [r1], #4
  40707c:	f840 3b04 	str.w	r3, [r0], #4
  407080:	f851 3b04 	ldr.w	r3, [r1], #4
  407084:	f840 3b04 	str.w	r3, [r0], #4
  407088:	f851 3b04 	ldr.w	r3, [r1], #4
  40708c:	f840 3b04 	str.w	r3, [r0], #4
  407090:	f851 3b04 	ldr.w	r3, [r1], #4
  407094:	f840 3b04 	str.w	r3, [r0], #4
  407098:	f851 3b04 	ldr.w	r3, [r1], #4
  40709c:	f840 3b04 	str.w	r3, [r0], #4
  4070a0:	3a40      	subs	r2, #64	; 0x40
  4070a2:	d2bd      	bcs.n	407020 <memcpy+0x10>
  4070a4:	3230      	adds	r2, #48	; 0x30
  4070a6:	d311      	bcc.n	4070cc <memcpy+0xbc>
  4070a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4070ac:	f840 3b04 	str.w	r3, [r0], #4
  4070b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4070b4:	f840 3b04 	str.w	r3, [r0], #4
  4070b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4070bc:	f840 3b04 	str.w	r3, [r0], #4
  4070c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4070c4:	f840 3b04 	str.w	r3, [r0], #4
  4070c8:	3a10      	subs	r2, #16
  4070ca:	d2ed      	bcs.n	4070a8 <memcpy+0x98>
  4070cc:	320c      	adds	r2, #12
  4070ce:	d305      	bcc.n	4070dc <memcpy+0xcc>
  4070d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4070d4:	f840 3b04 	str.w	r3, [r0], #4
  4070d8:	3a04      	subs	r2, #4
  4070da:	d2f9      	bcs.n	4070d0 <memcpy+0xc0>
  4070dc:	3204      	adds	r2, #4
  4070de:	d008      	beq.n	4070f2 <memcpy+0xe2>
  4070e0:	07d2      	lsls	r2, r2, #31
  4070e2:	bf1c      	itt	ne
  4070e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4070e8:	f800 3b01 	strbne.w	r3, [r0], #1
  4070ec:	d301      	bcc.n	4070f2 <memcpy+0xe2>
  4070ee:	880b      	ldrh	r3, [r1, #0]
  4070f0:	8003      	strh	r3, [r0, #0]
  4070f2:	4660      	mov	r0, ip
  4070f4:	4770      	bx	lr
  4070f6:	bf00      	nop
  4070f8:	2a08      	cmp	r2, #8
  4070fa:	d313      	bcc.n	407124 <memcpy+0x114>
  4070fc:	078b      	lsls	r3, r1, #30
  4070fe:	d08d      	beq.n	40701c <memcpy+0xc>
  407100:	f010 0303 	ands.w	r3, r0, #3
  407104:	d08a      	beq.n	40701c <memcpy+0xc>
  407106:	f1c3 0304 	rsb	r3, r3, #4
  40710a:	1ad2      	subs	r2, r2, r3
  40710c:	07db      	lsls	r3, r3, #31
  40710e:	bf1c      	itt	ne
  407110:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407114:	f800 3b01 	strbne.w	r3, [r0], #1
  407118:	d380      	bcc.n	40701c <memcpy+0xc>
  40711a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40711e:	f820 3b02 	strh.w	r3, [r0], #2
  407122:	e77b      	b.n	40701c <memcpy+0xc>
  407124:	3a04      	subs	r2, #4
  407126:	d3d9      	bcc.n	4070dc <memcpy+0xcc>
  407128:	3a01      	subs	r2, #1
  40712a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40712e:	f800 3b01 	strb.w	r3, [r0], #1
  407132:	d2f9      	bcs.n	407128 <memcpy+0x118>
  407134:	780b      	ldrb	r3, [r1, #0]
  407136:	7003      	strb	r3, [r0, #0]
  407138:	784b      	ldrb	r3, [r1, #1]
  40713a:	7043      	strb	r3, [r0, #1]
  40713c:	788b      	ldrb	r3, [r1, #2]
  40713e:	7083      	strb	r3, [r0, #2]
  407140:	4660      	mov	r0, ip
  407142:	4770      	bx	lr

00407144 <memset>:
  407144:	b470      	push	{r4, r5, r6}
  407146:	0786      	lsls	r6, r0, #30
  407148:	d046      	beq.n	4071d8 <memset+0x94>
  40714a:	1e54      	subs	r4, r2, #1
  40714c:	2a00      	cmp	r2, #0
  40714e:	d041      	beq.n	4071d4 <memset+0x90>
  407150:	b2ca      	uxtb	r2, r1
  407152:	4603      	mov	r3, r0
  407154:	e002      	b.n	40715c <memset+0x18>
  407156:	f114 34ff 	adds.w	r4, r4, #4294967295
  40715a:	d33b      	bcc.n	4071d4 <memset+0x90>
  40715c:	f803 2b01 	strb.w	r2, [r3], #1
  407160:	079d      	lsls	r5, r3, #30
  407162:	d1f8      	bne.n	407156 <memset+0x12>
  407164:	2c03      	cmp	r4, #3
  407166:	d92e      	bls.n	4071c6 <memset+0x82>
  407168:	b2cd      	uxtb	r5, r1
  40716a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40716e:	2c0f      	cmp	r4, #15
  407170:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  407174:	d919      	bls.n	4071aa <memset+0x66>
  407176:	f103 0210 	add.w	r2, r3, #16
  40717a:	4626      	mov	r6, r4
  40717c:	3e10      	subs	r6, #16
  40717e:	2e0f      	cmp	r6, #15
  407180:	f842 5c10 	str.w	r5, [r2, #-16]
  407184:	f842 5c0c 	str.w	r5, [r2, #-12]
  407188:	f842 5c08 	str.w	r5, [r2, #-8]
  40718c:	f842 5c04 	str.w	r5, [r2, #-4]
  407190:	f102 0210 	add.w	r2, r2, #16
  407194:	d8f2      	bhi.n	40717c <memset+0x38>
  407196:	f1a4 0210 	sub.w	r2, r4, #16
  40719a:	f022 020f 	bic.w	r2, r2, #15
  40719e:	f004 040f 	and.w	r4, r4, #15
  4071a2:	3210      	adds	r2, #16
  4071a4:	2c03      	cmp	r4, #3
  4071a6:	4413      	add	r3, r2
  4071a8:	d90d      	bls.n	4071c6 <memset+0x82>
  4071aa:	461e      	mov	r6, r3
  4071ac:	4622      	mov	r2, r4
  4071ae:	3a04      	subs	r2, #4
  4071b0:	2a03      	cmp	r2, #3
  4071b2:	f846 5b04 	str.w	r5, [r6], #4
  4071b6:	d8fa      	bhi.n	4071ae <memset+0x6a>
  4071b8:	1f22      	subs	r2, r4, #4
  4071ba:	f022 0203 	bic.w	r2, r2, #3
  4071be:	3204      	adds	r2, #4
  4071c0:	4413      	add	r3, r2
  4071c2:	f004 0403 	and.w	r4, r4, #3
  4071c6:	b12c      	cbz	r4, 4071d4 <memset+0x90>
  4071c8:	b2c9      	uxtb	r1, r1
  4071ca:	441c      	add	r4, r3
  4071cc:	f803 1b01 	strb.w	r1, [r3], #1
  4071d0:	429c      	cmp	r4, r3
  4071d2:	d1fb      	bne.n	4071cc <memset+0x88>
  4071d4:	bc70      	pop	{r4, r5, r6}
  4071d6:	4770      	bx	lr
  4071d8:	4614      	mov	r4, r2
  4071da:	4603      	mov	r3, r0
  4071dc:	e7c2      	b.n	407164 <memset+0x20>
  4071de:	bf00      	nop

004071e0 <setbuf>:
  4071e0:	2900      	cmp	r1, #0
  4071e2:	bf0c      	ite	eq
  4071e4:	2202      	moveq	r2, #2
  4071e6:	2200      	movne	r2, #0
  4071e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4071ec:	f000 b800 	b.w	4071f0 <setvbuf>

004071f0 <setvbuf>:
  4071f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4071f4:	4c61      	ldr	r4, [pc, #388]	; (40737c <setvbuf+0x18c>)
  4071f6:	6825      	ldr	r5, [r4, #0]
  4071f8:	b083      	sub	sp, #12
  4071fa:	4604      	mov	r4, r0
  4071fc:	460f      	mov	r7, r1
  4071fe:	4690      	mov	r8, r2
  407200:	461e      	mov	r6, r3
  407202:	b115      	cbz	r5, 40720a <setvbuf+0x1a>
  407204:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407206:	2b00      	cmp	r3, #0
  407208:	d064      	beq.n	4072d4 <setvbuf+0xe4>
  40720a:	f1b8 0f02 	cmp.w	r8, #2
  40720e:	d006      	beq.n	40721e <setvbuf+0x2e>
  407210:	f1b8 0f01 	cmp.w	r8, #1
  407214:	f200 809f 	bhi.w	407356 <setvbuf+0x166>
  407218:	2e00      	cmp	r6, #0
  40721a:	f2c0 809c 	blt.w	407356 <setvbuf+0x166>
  40721e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407220:	07d8      	lsls	r0, r3, #31
  407222:	d534      	bpl.n	40728e <setvbuf+0x9e>
  407224:	4621      	mov	r1, r4
  407226:	4628      	mov	r0, r5
  407228:	f001 f8f6 	bl	408418 <_fflush_r>
  40722c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40722e:	b141      	cbz	r1, 407242 <setvbuf+0x52>
  407230:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407234:	4299      	cmp	r1, r3
  407236:	d002      	beq.n	40723e <setvbuf+0x4e>
  407238:	4628      	mov	r0, r5
  40723a:	f001 fa6b 	bl	408714 <_free_r>
  40723e:	2300      	movs	r3, #0
  407240:	6323      	str	r3, [r4, #48]	; 0x30
  407242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407246:	2200      	movs	r2, #0
  407248:	61a2      	str	r2, [r4, #24]
  40724a:	6062      	str	r2, [r4, #4]
  40724c:	061a      	lsls	r2, r3, #24
  40724e:	d43a      	bmi.n	4072c6 <setvbuf+0xd6>
  407250:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  407254:	f023 0303 	bic.w	r3, r3, #3
  407258:	f1b8 0f02 	cmp.w	r8, #2
  40725c:	81a3      	strh	r3, [r4, #12]
  40725e:	d01d      	beq.n	40729c <setvbuf+0xac>
  407260:	ab01      	add	r3, sp, #4
  407262:	466a      	mov	r2, sp
  407264:	4621      	mov	r1, r4
  407266:	4628      	mov	r0, r5
  407268:	f001 fcf2 	bl	408c50 <__swhatbuf_r>
  40726c:	89a3      	ldrh	r3, [r4, #12]
  40726e:	4318      	orrs	r0, r3
  407270:	81a0      	strh	r0, [r4, #12]
  407272:	2e00      	cmp	r6, #0
  407274:	d132      	bne.n	4072dc <setvbuf+0xec>
  407276:	9e00      	ldr	r6, [sp, #0]
  407278:	4630      	mov	r0, r6
  40727a:	f001 fd61 	bl	408d40 <malloc>
  40727e:	4607      	mov	r7, r0
  407280:	2800      	cmp	r0, #0
  407282:	d06b      	beq.n	40735c <setvbuf+0x16c>
  407284:	89a3      	ldrh	r3, [r4, #12]
  407286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40728a:	81a3      	strh	r3, [r4, #12]
  40728c:	e028      	b.n	4072e0 <setvbuf+0xf0>
  40728e:	89a3      	ldrh	r3, [r4, #12]
  407290:	0599      	lsls	r1, r3, #22
  407292:	d4c7      	bmi.n	407224 <setvbuf+0x34>
  407294:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407296:	f001 fcd7 	bl	408c48 <__retarget_lock_acquire_recursive>
  40729a:	e7c3      	b.n	407224 <setvbuf+0x34>
  40729c:	2500      	movs	r5, #0
  40729e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4072a0:	2600      	movs	r6, #0
  4072a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4072a6:	f043 0302 	orr.w	r3, r3, #2
  4072aa:	2001      	movs	r0, #1
  4072ac:	60a6      	str	r6, [r4, #8]
  4072ae:	07ce      	lsls	r6, r1, #31
  4072b0:	81a3      	strh	r3, [r4, #12]
  4072b2:	6022      	str	r2, [r4, #0]
  4072b4:	6122      	str	r2, [r4, #16]
  4072b6:	6160      	str	r0, [r4, #20]
  4072b8:	d401      	bmi.n	4072be <setvbuf+0xce>
  4072ba:	0598      	lsls	r0, r3, #22
  4072bc:	d53e      	bpl.n	40733c <setvbuf+0x14c>
  4072be:	4628      	mov	r0, r5
  4072c0:	b003      	add	sp, #12
  4072c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4072c6:	6921      	ldr	r1, [r4, #16]
  4072c8:	4628      	mov	r0, r5
  4072ca:	f001 fa23 	bl	408714 <_free_r>
  4072ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4072d2:	e7bd      	b.n	407250 <setvbuf+0x60>
  4072d4:	4628      	mov	r0, r5
  4072d6:	f001 f8f7 	bl	4084c8 <__sinit>
  4072da:	e796      	b.n	40720a <setvbuf+0x1a>
  4072dc:	2f00      	cmp	r7, #0
  4072de:	d0cb      	beq.n	407278 <setvbuf+0x88>
  4072e0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4072e2:	2b00      	cmp	r3, #0
  4072e4:	d033      	beq.n	40734e <setvbuf+0x15e>
  4072e6:	9b00      	ldr	r3, [sp, #0]
  4072e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4072ec:	6027      	str	r7, [r4, #0]
  4072ee:	429e      	cmp	r6, r3
  4072f0:	bf1c      	itt	ne
  4072f2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4072f6:	81a2      	strhne	r2, [r4, #12]
  4072f8:	f1b8 0f01 	cmp.w	r8, #1
  4072fc:	bf04      	itt	eq
  4072fe:	f042 0201 	orreq.w	r2, r2, #1
  407302:	81a2      	strheq	r2, [r4, #12]
  407304:	b292      	uxth	r2, r2
  407306:	f012 0308 	ands.w	r3, r2, #8
  40730a:	6127      	str	r7, [r4, #16]
  40730c:	6166      	str	r6, [r4, #20]
  40730e:	d00e      	beq.n	40732e <setvbuf+0x13e>
  407310:	07d1      	lsls	r1, r2, #31
  407312:	d51a      	bpl.n	40734a <setvbuf+0x15a>
  407314:	6e65      	ldr	r5, [r4, #100]	; 0x64
  407316:	4276      	negs	r6, r6
  407318:	2300      	movs	r3, #0
  40731a:	f015 0501 	ands.w	r5, r5, #1
  40731e:	61a6      	str	r6, [r4, #24]
  407320:	60a3      	str	r3, [r4, #8]
  407322:	d009      	beq.n	407338 <setvbuf+0x148>
  407324:	2500      	movs	r5, #0
  407326:	4628      	mov	r0, r5
  407328:	b003      	add	sp, #12
  40732a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40732e:	60a3      	str	r3, [r4, #8]
  407330:	6e65      	ldr	r5, [r4, #100]	; 0x64
  407332:	f015 0501 	ands.w	r5, r5, #1
  407336:	d1f5      	bne.n	407324 <setvbuf+0x134>
  407338:	0593      	lsls	r3, r2, #22
  40733a:	d4c0      	bmi.n	4072be <setvbuf+0xce>
  40733c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40733e:	f001 fc85 	bl	408c4c <__retarget_lock_release_recursive>
  407342:	4628      	mov	r0, r5
  407344:	b003      	add	sp, #12
  407346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40734a:	60a6      	str	r6, [r4, #8]
  40734c:	e7f0      	b.n	407330 <setvbuf+0x140>
  40734e:	4628      	mov	r0, r5
  407350:	f001 f8ba 	bl	4084c8 <__sinit>
  407354:	e7c7      	b.n	4072e6 <setvbuf+0xf6>
  407356:	f04f 35ff 	mov.w	r5, #4294967295
  40735a:	e7b0      	b.n	4072be <setvbuf+0xce>
  40735c:	f8dd 9000 	ldr.w	r9, [sp]
  407360:	45b1      	cmp	r9, r6
  407362:	d004      	beq.n	40736e <setvbuf+0x17e>
  407364:	4648      	mov	r0, r9
  407366:	f001 fceb 	bl	408d40 <malloc>
  40736a:	4607      	mov	r7, r0
  40736c:	b920      	cbnz	r0, 407378 <setvbuf+0x188>
  40736e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407372:	f04f 35ff 	mov.w	r5, #4294967295
  407376:	e792      	b.n	40729e <setvbuf+0xae>
  407378:	464e      	mov	r6, r9
  40737a:	e783      	b.n	407284 <setvbuf+0x94>
  40737c:	20400028 	.word	0x20400028

00407380 <strlen>:
  407380:	f890 f000 	pld	[r0]
  407384:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407388:	f020 0107 	bic.w	r1, r0, #7
  40738c:	f06f 0c00 	mvn.w	ip, #0
  407390:	f010 0407 	ands.w	r4, r0, #7
  407394:	f891 f020 	pld	[r1, #32]
  407398:	f040 8049 	bne.w	40742e <strlen+0xae>
  40739c:	f04f 0400 	mov.w	r4, #0
  4073a0:	f06f 0007 	mvn.w	r0, #7
  4073a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4073a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4073ac:	f100 0008 	add.w	r0, r0, #8
  4073b0:	fa82 f24c 	uadd8	r2, r2, ip
  4073b4:	faa4 f28c 	sel	r2, r4, ip
  4073b8:	fa83 f34c 	uadd8	r3, r3, ip
  4073bc:	faa2 f38c 	sel	r3, r2, ip
  4073c0:	bb4b      	cbnz	r3, 407416 <strlen+0x96>
  4073c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4073c6:	fa82 f24c 	uadd8	r2, r2, ip
  4073ca:	f100 0008 	add.w	r0, r0, #8
  4073ce:	faa4 f28c 	sel	r2, r4, ip
  4073d2:	fa83 f34c 	uadd8	r3, r3, ip
  4073d6:	faa2 f38c 	sel	r3, r2, ip
  4073da:	b9e3      	cbnz	r3, 407416 <strlen+0x96>
  4073dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4073e0:	fa82 f24c 	uadd8	r2, r2, ip
  4073e4:	f100 0008 	add.w	r0, r0, #8
  4073e8:	faa4 f28c 	sel	r2, r4, ip
  4073ec:	fa83 f34c 	uadd8	r3, r3, ip
  4073f0:	faa2 f38c 	sel	r3, r2, ip
  4073f4:	b97b      	cbnz	r3, 407416 <strlen+0x96>
  4073f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4073fa:	f101 0120 	add.w	r1, r1, #32
  4073fe:	fa82 f24c 	uadd8	r2, r2, ip
  407402:	f100 0008 	add.w	r0, r0, #8
  407406:	faa4 f28c 	sel	r2, r4, ip
  40740a:	fa83 f34c 	uadd8	r3, r3, ip
  40740e:	faa2 f38c 	sel	r3, r2, ip
  407412:	2b00      	cmp	r3, #0
  407414:	d0c6      	beq.n	4073a4 <strlen+0x24>
  407416:	2a00      	cmp	r2, #0
  407418:	bf04      	itt	eq
  40741a:	3004      	addeq	r0, #4
  40741c:	461a      	moveq	r2, r3
  40741e:	ba12      	rev	r2, r2
  407420:	fab2 f282 	clz	r2, r2
  407424:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407428:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40742c:	4770      	bx	lr
  40742e:	e9d1 2300 	ldrd	r2, r3, [r1]
  407432:	f004 0503 	and.w	r5, r4, #3
  407436:	f1c4 0000 	rsb	r0, r4, #0
  40743a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40743e:	f014 0f04 	tst.w	r4, #4
  407442:	f891 f040 	pld	[r1, #64]	; 0x40
  407446:	fa0c f505 	lsl.w	r5, ip, r5
  40744a:	ea62 0205 	orn	r2, r2, r5
  40744e:	bf1c      	itt	ne
  407450:	ea63 0305 	ornne	r3, r3, r5
  407454:	4662      	movne	r2, ip
  407456:	f04f 0400 	mov.w	r4, #0
  40745a:	e7a9      	b.n	4073b0 <strlen+0x30>

0040745c <__sprint_r.part.0>:
  40745c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407460:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  407462:	049c      	lsls	r4, r3, #18
  407464:	4693      	mov	fp, r2
  407466:	d52f      	bpl.n	4074c8 <__sprint_r.part.0+0x6c>
  407468:	6893      	ldr	r3, [r2, #8]
  40746a:	6812      	ldr	r2, [r2, #0]
  40746c:	b353      	cbz	r3, 4074c4 <__sprint_r.part.0+0x68>
  40746e:	460e      	mov	r6, r1
  407470:	4607      	mov	r7, r0
  407472:	f102 0908 	add.w	r9, r2, #8
  407476:	e919 0420 	ldmdb	r9, {r5, sl}
  40747a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40747e:	d017      	beq.n	4074b0 <__sprint_r.part.0+0x54>
  407480:	3d04      	subs	r5, #4
  407482:	2400      	movs	r4, #0
  407484:	e001      	b.n	40748a <__sprint_r.part.0+0x2e>
  407486:	45a0      	cmp	r8, r4
  407488:	d010      	beq.n	4074ac <__sprint_r.part.0+0x50>
  40748a:	4632      	mov	r2, r6
  40748c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  407490:	4638      	mov	r0, r7
  407492:	f001 f8bb 	bl	40860c <_fputwc_r>
  407496:	1c43      	adds	r3, r0, #1
  407498:	f104 0401 	add.w	r4, r4, #1
  40749c:	d1f3      	bne.n	407486 <__sprint_r.part.0+0x2a>
  40749e:	2300      	movs	r3, #0
  4074a0:	f8cb 3008 	str.w	r3, [fp, #8]
  4074a4:	f8cb 3004 	str.w	r3, [fp, #4]
  4074a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4074ac:	f8db 3008 	ldr.w	r3, [fp, #8]
  4074b0:	f02a 0a03 	bic.w	sl, sl, #3
  4074b4:	eba3 030a 	sub.w	r3, r3, sl
  4074b8:	f8cb 3008 	str.w	r3, [fp, #8]
  4074bc:	f109 0908 	add.w	r9, r9, #8
  4074c0:	2b00      	cmp	r3, #0
  4074c2:	d1d8      	bne.n	407476 <__sprint_r.part.0+0x1a>
  4074c4:	2000      	movs	r0, #0
  4074c6:	e7ea      	b.n	40749e <__sprint_r.part.0+0x42>
  4074c8:	f001 fa0a 	bl	4088e0 <__sfvwrite_r>
  4074cc:	2300      	movs	r3, #0
  4074ce:	f8cb 3008 	str.w	r3, [fp, #8]
  4074d2:	f8cb 3004 	str.w	r3, [fp, #4]
  4074d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4074da:	bf00      	nop

004074dc <_vfiprintf_r>:
  4074dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4074e0:	b0ad      	sub	sp, #180	; 0xb4
  4074e2:	461d      	mov	r5, r3
  4074e4:	468b      	mov	fp, r1
  4074e6:	4690      	mov	r8, r2
  4074e8:	9307      	str	r3, [sp, #28]
  4074ea:	9006      	str	r0, [sp, #24]
  4074ec:	b118      	cbz	r0, 4074f6 <_vfiprintf_r+0x1a>
  4074ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4074f0:	2b00      	cmp	r3, #0
  4074f2:	f000 80f3 	beq.w	4076dc <_vfiprintf_r+0x200>
  4074f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4074fa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4074fe:	07df      	lsls	r7, r3, #31
  407500:	b281      	uxth	r1, r0
  407502:	d402      	bmi.n	40750a <_vfiprintf_r+0x2e>
  407504:	058e      	lsls	r6, r1, #22
  407506:	f140 80fc 	bpl.w	407702 <_vfiprintf_r+0x226>
  40750a:	048c      	lsls	r4, r1, #18
  40750c:	d40a      	bmi.n	407524 <_vfiprintf_r+0x48>
  40750e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407512:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  407516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40751a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40751e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  407522:	b289      	uxth	r1, r1
  407524:	0708      	lsls	r0, r1, #28
  407526:	f140 80b3 	bpl.w	407690 <_vfiprintf_r+0x1b4>
  40752a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40752e:	2b00      	cmp	r3, #0
  407530:	f000 80ae 	beq.w	407690 <_vfiprintf_r+0x1b4>
  407534:	f001 031a 	and.w	r3, r1, #26
  407538:	2b0a      	cmp	r3, #10
  40753a:	f000 80b5 	beq.w	4076a8 <_vfiprintf_r+0x1cc>
  40753e:	2300      	movs	r3, #0
  407540:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  407544:	930b      	str	r3, [sp, #44]	; 0x2c
  407546:	9311      	str	r3, [sp, #68]	; 0x44
  407548:	9310      	str	r3, [sp, #64]	; 0x40
  40754a:	9303      	str	r3, [sp, #12]
  40754c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  407550:	46ca      	mov	sl, r9
  407552:	f8cd b010 	str.w	fp, [sp, #16]
  407556:	f898 3000 	ldrb.w	r3, [r8]
  40755a:	4644      	mov	r4, r8
  40755c:	b1fb      	cbz	r3, 40759e <_vfiprintf_r+0xc2>
  40755e:	2b25      	cmp	r3, #37	; 0x25
  407560:	d102      	bne.n	407568 <_vfiprintf_r+0x8c>
  407562:	e01c      	b.n	40759e <_vfiprintf_r+0xc2>
  407564:	2b25      	cmp	r3, #37	; 0x25
  407566:	d003      	beq.n	407570 <_vfiprintf_r+0x94>
  407568:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40756c:	2b00      	cmp	r3, #0
  40756e:	d1f9      	bne.n	407564 <_vfiprintf_r+0x88>
  407570:	eba4 0508 	sub.w	r5, r4, r8
  407574:	b19d      	cbz	r5, 40759e <_vfiprintf_r+0xc2>
  407576:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407578:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40757a:	f8ca 8000 	str.w	r8, [sl]
  40757e:	3301      	adds	r3, #1
  407580:	442a      	add	r2, r5
  407582:	2b07      	cmp	r3, #7
  407584:	f8ca 5004 	str.w	r5, [sl, #4]
  407588:	9211      	str	r2, [sp, #68]	; 0x44
  40758a:	9310      	str	r3, [sp, #64]	; 0x40
  40758c:	dd7a      	ble.n	407684 <_vfiprintf_r+0x1a8>
  40758e:	2a00      	cmp	r2, #0
  407590:	f040 84b0 	bne.w	407ef4 <_vfiprintf_r+0xa18>
  407594:	9b03      	ldr	r3, [sp, #12]
  407596:	9210      	str	r2, [sp, #64]	; 0x40
  407598:	442b      	add	r3, r5
  40759a:	46ca      	mov	sl, r9
  40759c:	9303      	str	r3, [sp, #12]
  40759e:	7823      	ldrb	r3, [r4, #0]
  4075a0:	2b00      	cmp	r3, #0
  4075a2:	f000 83e0 	beq.w	407d66 <_vfiprintf_r+0x88a>
  4075a6:	2000      	movs	r0, #0
  4075a8:	f04f 0300 	mov.w	r3, #0
  4075ac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4075b0:	f104 0801 	add.w	r8, r4, #1
  4075b4:	7862      	ldrb	r2, [r4, #1]
  4075b6:	4605      	mov	r5, r0
  4075b8:	4606      	mov	r6, r0
  4075ba:	4603      	mov	r3, r0
  4075bc:	f04f 34ff 	mov.w	r4, #4294967295
  4075c0:	f108 0801 	add.w	r8, r8, #1
  4075c4:	f1a2 0120 	sub.w	r1, r2, #32
  4075c8:	2958      	cmp	r1, #88	; 0x58
  4075ca:	f200 82de 	bhi.w	407b8a <_vfiprintf_r+0x6ae>
  4075ce:	e8df f011 	tbh	[pc, r1, lsl #1]
  4075d2:	0221      	.short	0x0221
  4075d4:	02dc02dc 	.word	0x02dc02dc
  4075d8:	02dc0229 	.word	0x02dc0229
  4075dc:	02dc02dc 	.word	0x02dc02dc
  4075e0:	02dc02dc 	.word	0x02dc02dc
  4075e4:	028902dc 	.word	0x028902dc
  4075e8:	02dc0295 	.word	0x02dc0295
  4075ec:	02bd00a2 	.word	0x02bd00a2
  4075f0:	019f02dc 	.word	0x019f02dc
  4075f4:	01a401a4 	.word	0x01a401a4
  4075f8:	01a401a4 	.word	0x01a401a4
  4075fc:	01a401a4 	.word	0x01a401a4
  407600:	01a401a4 	.word	0x01a401a4
  407604:	02dc01a4 	.word	0x02dc01a4
  407608:	02dc02dc 	.word	0x02dc02dc
  40760c:	02dc02dc 	.word	0x02dc02dc
  407610:	02dc02dc 	.word	0x02dc02dc
  407614:	02dc02dc 	.word	0x02dc02dc
  407618:	01b202dc 	.word	0x01b202dc
  40761c:	02dc02dc 	.word	0x02dc02dc
  407620:	02dc02dc 	.word	0x02dc02dc
  407624:	02dc02dc 	.word	0x02dc02dc
  407628:	02dc02dc 	.word	0x02dc02dc
  40762c:	02dc02dc 	.word	0x02dc02dc
  407630:	02dc0197 	.word	0x02dc0197
  407634:	02dc02dc 	.word	0x02dc02dc
  407638:	02dc02dc 	.word	0x02dc02dc
  40763c:	02dc019b 	.word	0x02dc019b
  407640:	025302dc 	.word	0x025302dc
  407644:	02dc02dc 	.word	0x02dc02dc
  407648:	02dc02dc 	.word	0x02dc02dc
  40764c:	02dc02dc 	.word	0x02dc02dc
  407650:	02dc02dc 	.word	0x02dc02dc
  407654:	02dc02dc 	.word	0x02dc02dc
  407658:	021b025a 	.word	0x021b025a
  40765c:	02dc02dc 	.word	0x02dc02dc
  407660:	026e02dc 	.word	0x026e02dc
  407664:	02dc021b 	.word	0x02dc021b
  407668:	027302dc 	.word	0x027302dc
  40766c:	01f502dc 	.word	0x01f502dc
  407670:	02090182 	.word	0x02090182
  407674:	02dc02d7 	.word	0x02dc02d7
  407678:	02dc029a 	.word	0x02dc029a
  40767c:	02dc00a7 	.word	0x02dc00a7
  407680:	022e02dc 	.word	0x022e02dc
  407684:	f10a 0a08 	add.w	sl, sl, #8
  407688:	9b03      	ldr	r3, [sp, #12]
  40768a:	442b      	add	r3, r5
  40768c:	9303      	str	r3, [sp, #12]
  40768e:	e786      	b.n	40759e <_vfiprintf_r+0xc2>
  407690:	4659      	mov	r1, fp
  407692:	9806      	ldr	r0, [sp, #24]
  407694:	f000 fdac 	bl	4081f0 <__swsetup_r>
  407698:	bb18      	cbnz	r0, 4076e2 <_vfiprintf_r+0x206>
  40769a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40769e:	f001 031a 	and.w	r3, r1, #26
  4076a2:	2b0a      	cmp	r3, #10
  4076a4:	f47f af4b 	bne.w	40753e <_vfiprintf_r+0x62>
  4076a8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4076ac:	2b00      	cmp	r3, #0
  4076ae:	f6ff af46 	blt.w	40753e <_vfiprintf_r+0x62>
  4076b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4076b6:	07db      	lsls	r3, r3, #31
  4076b8:	d405      	bmi.n	4076c6 <_vfiprintf_r+0x1ea>
  4076ba:	058f      	lsls	r7, r1, #22
  4076bc:	d403      	bmi.n	4076c6 <_vfiprintf_r+0x1ea>
  4076be:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4076c2:	f001 fac3 	bl	408c4c <__retarget_lock_release_recursive>
  4076c6:	462b      	mov	r3, r5
  4076c8:	4642      	mov	r2, r8
  4076ca:	4659      	mov	r1, fp
  4076cc:	9806      	ldr	r0, [sp, #24]
  4076ce:	f000 fd4d 	bl	40816c <__sbprintf>
  4076d2:	9003      	str	r0, [sp, #12]
  4076d4:	9803      	ldr	r0, [sp, #12]
  4076d6:	b02d      	add	sp, #180	; 0xb4
  4076d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4076dc:	f000 fef4 	bl	4084c8 <__sinit>
  4076e0:	e709      	b.n	4074f6 <_vfiprintf_r+0x1a>
  4076e2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4076e6:	07d9      	lsls	r1, r3, #31
  4076e8:	d404      	bmi.n	4076f4 <_vfiprintf_r+0x218>
  4076ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4076ee:	059a      	lsls	r2, r3, #22
  4076f0:	f140 84aa 	bpl.w	408048 <_vfiprintf_r+0xb6c>
  4076f4:	f04f 33ff 	mov.w	r3, #4294967295
  4076f8:	9303      	str	r3, [sp, #12]
  4076fa:	9803      	ldr	r0, [sp, #12]
  4076fc:	b02d      	add	sp, #180	; 0xb4
  4076fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407702:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407706:	f001 fa9f 	bl	408c48 <__retarget_lock_acquire_recursive>
  40770a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40770e:	b281      	uxth	r1, r0
  407710:	e6fb      	b.n	40750a <_vfiprintf_r+0x2e>
  407712:	4276      	negs	r6, r6
  407714:	9207      	str	r2, [sp, #28]
  407716:	f043 0304 	orr.w	r3, r3, #4
  40771a:	f898 2000 	ldrb.w	r2, [r8]
  40771e:	e74f      	b.n	4075c0 <_vfiprintf_r+0xe4>
  407720:	9608      	str	r6, [sp, #32]
  407722:	069e      	lsls	r6, r3, #26
  407724:	f100 8450 	bmi.w	407fc8 <_vfiprintf_r+0xaec>
  407728:	9907      	ldr	r1, [sp, #28]
  40772a:	06dd      	lsls	r5, r3, #27
  40772c:	460a      	mov	r2, r1
  40772e:	f100 83ef 	bmi.w	407f10 <_vfiprintf_r+0xa34>
  407732:	0658      	lsls	r0, r3, #25
  407734:	f140 83ec 	bpl.w	407f10 <_vfiprintf_r+0xa34>
  407738:	880e      	ldrh	r6, [r1, #0]
  40773a:	3104      	adds	r1, #4
  40773c:	2700      	movs	r7, #0
  40773e:	2201      	movs	r2, #1
  407740:	9107      	str	r1, [sp, #28]
  407742:	f04f 0100 	mov.w	r1, #0
  407746:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40774a:	2500      	movs	r5, #0
  40774c:	1c61      	adds	r1, r4, #1
  40774e:	f000 8116 	beq.w	40797e <_vfiprintf_r+0x4a2>
  407752:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  407756:	9102      	str	r1, [sp, #8]
  407758:	ea56 0107 	orrs.w	r1, r6, r7
  40775c:	f040 8114 	bne.w	407988 <_vfiprintf_r+0x4ac>
  407760:	2c00      	cmp	r4, #0
  407762:	f040 835c 	bne.w	407e1e <_vfiprintf_r+0x942>
  407766:	2a00      	cmp	r2, #0
  407768:	f040 83b7 	bne.w	407eda <_vfiprintf_r+0x9fe>
  40776c:	f013 0301 	ands.w	r3, r3, #1
  407770:	9305      	str	r3, [sp, #20]
  407772:	f000 8457 	beq.w	408024 <_vfiprintf_r+0xb48>
  407776:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40777a:	2330      	movs	r3, #48	; 0x30
  40777c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  407780:	9b05      	ldr	r3, [sp, #20]
  407782:	42a3      	cmp	r3, r4
  407784:	bfb8      	it	lt
  407786:	4623      	movlt	r3, r4
  407788:	9301      	str	r3, [sp, #4]
  40778a:	b10d      	cbz	r5, 407790 <_vfiprintf_r+0x2b4>
  40778c:	3301      	adds	r3, #1
  40778e:	9301      	str	r3, [sp, #4]
  407790:	9b02      	ldr	r3, [sp, #8]
  407792:	f013 0302 	ands.w	r3, r3, #2
  407796:	9309      	str	r3, [sp, #36]	; 0x24
  407798:	d002      	beq.n	4077a0 <_vfiprintf_r+0x2c4>
  40779a:	9b01      	ldr	r3, [sp, #4]
  40779c:	3302      	adds	r3, #2
  40779e:	9301      	str	r3, [sp, #4]
  4077a0:	9b02      	ldr	r3, [sp, #8]
  4077a2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4077a6:	930a      	str	r3, [sp, #40]	; 0x28
  4077a8:	f040 8217 	bne.w	407bda <_vfiprintf_r+0x6fe>
  4077ac:	9b08      	ldr	r3, [sp, #32]
  4077ae:	9a01      	ldr	r2, [sp, #4]
  4077b0:	1a9d      	subs	r5, r3, r2
  4077b2:	2d00      	cmp	r5, #0
  4077b4:	f340 8211 	ble.w	407bda <_vfiprintf_r+0x6fe>
  4077b8:	2d10      	cmp	r5, #16
  4077ba:	f340 8490 	ble.w	4080de <_vfiprintf_r+0xc02>
  4077be:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4077c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4077c2:	4ec4      	ldr	r6, [pc, #784]	; (407ad4 <_vfiprintf_r+0x5f8>)
  4077c4:	46d6      	mov	lr, sl
  4077c6:	2710      	movs	r7, #16
  4077c8:	46a2      	mov	sl, r4
  4077ca:	4619      	mov	r1, r3
  4077cc:	9c06      	ldr	r4, [sp, #24]
  4077ce:	e007      	b.n	4077e0 <_vfiprintf_r+0x304>
  4077d0:	f101 0c02 	add.w	ip, r1, #2
  4077d4:	f10e 0e08 	add.w	lr, lr, #8
  4077d8:	4601      	mov	r1, r0
  4077da:	3d10      	subs	r5, #16
  4077dc:	2d10      	cmp	r5, #16
  4077de:	dd11      	ble.n	407804 <_vfiprintf_r+0x328>
  4077e0:	1c48      	adds	r0, r1, #1
  4077e2:	3210      	adds	r2, #16
  4077e4:	2807      	cmp	r0, #7
  4077e6:	9211      	str	r2, [sp, #68]	; 0x44
  4077e8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4077ec:	9010      	str	r0, [sp, #64]	; 0x40
  4077ee:	ddef      	ble.n	4077d0 <_vfiprintf_r+0x2f4>
  4077f0:	2a00      	cmp	r2, #0
  4077f2:	f040 81e4 	bne.w	407bbe <_vfiprintf_r+0x6e2>
  4077f6:	3d10      	subs	r5, #16
  4077f8:	2d10      	cmp	r5, #16
  4077fa:	4611      	mov	r1, r2
  4077fc:	f04f 0c01 	mov.w	ip, #1
  407800:	46ce      	mov	lr, r9
  407802:	dced      	bgt.n	4077e0 <_vfiprintf_r+0x304>
  407804:	4654      	mov	r4, sl
  407806:	4661      	mov	r1, ip
  407808:	46f2      	mov	sl, lr
  40780a:	442a      	add	r2, r5
  40780c:	2907      	cmp	r1, #7
  40780e:	9211      	str	r2, [sp, #68]	; 0x44
  407810:	f8ca 6000 	str.w	r6, [sl]
  407814:	f8ca 5004 	str.w	r5, [sl, #4]
  407818:	9110      	str	r1, [sp, #64]	; 0x40
  40781a:	f300 82ec 	bgt.w	407df6 <_vfiprintf_r+0x91a>
  40781e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407822:	f10a 0a08 	add.w	sl, sl, #8
  407826:	1c48      	adds	r0, r1, #1
  407828:	2d00      	cmp	r5, #0
  40782a:	f040 81de 	bne.w	407bea <_vfiprintf_r+0x70e>
  40782e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407830:	2b00      	cmp	r3, #0
  407832:	f000 81f8 	beq.w	407c26 <_vfiprintf_r+0x74a>
  407836:	3202      	adds	r2, #2
  407838:	a90e      	add	r1, sp, #56	; 0x38
  40783a:	2302      	movs	r3, #2
  40783c:	2807      	cmp	r0, #7
  40783e:	9211      	str	r2, [sp, #68]	; 0x44
  407840:	9010      	str	r0, [sp, #64]	; 0x40
  407842:	e88a 000a 	stmia.w	sl, {r1, r3}
  407846:	f340 81ea 	ble.w	407c1e <_vfiprintf_r+0x742>
  40784a:	2a00      	cmp	r2, #0
  40784c:	f040 838c 	bne.w	407f68 <_vfiprintf_r+0xa8c>
  407850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407852:	2b80      	cmp	r3, #128	; 0x80
  407854:	f04f 0001 	mov.w	r0, #1
  407858:	4611      	mov	r1, r2
  40785a:	46ca      	mov	sl, r9
  40785c:	f040 81e7 	bne.w	407c2e <_vfiprintf_r+0x752>
  407860:	9b08      	ldr	r3, [sp, #32]
  407862:	9d01      	ldr	r5, [sp, #4]
  407864:	1b5e      	subs	r6, r3, r5
  407866:	2e00      	cmp	r6, #0
  407868:	f340 81e1 	ble.w	407c2e <_vfiprintf_r+0x752>
  40786c:	2e10      	cmp	r6, #16
  40786e:	4d9a      	ldr	r5, [pc, #616]	; (407ad8 <_vfiprintf_r+0x5fc>)
  407870:	f340 8450 	ble.w	408114 <_vfiprintf_r+0xc38>
  407874:	46d4      	mov	ip, sl
  407876:	2710      	movs	r7, #16
  407878:	46a2      	mov	sl, r4
  40787a:	9c06      	ldr	r4, [sp, #24]
  40787c:	e007      	b.n	40788e <_vfiprintf_r+0x3b2>
  40787e:	f101 0e02 	add.w	lr, r1, #2
  407882:	f10c 0c08 	add.w	ip, ip, #8
  407886:	4601      	mov	r1, r0
  407888:	3e10      	subs	r6, #16
  40788a:	2e10      	cmp	r6, #16
  40788c:	dd11      	ble.n	4078b2 <_vfiprintf_r+0x3d6>
  40788e:	1c48      	adds	r0, r1, #1
  407890:	3210      	adds	r2, #16
  407892:	2807      	cmp	r0, #7
  407894:	9211      	str	r2, [sp, #68]	; 0x44
  407896:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40789a:	9010      	str	r0, [sp, #64]	; 0x40
  40789c:	ddef      	ble.n	40787e <_vfiprintf_r+0x3a2>
  40789e:	2a00      	cmp	r2, #0
  4078a0:	f040 829d 	bne.w	407dde <_vfiprintf_r+0x902>
  4078a4:	3e10      	subs	r6, #16
  4078a6:	2e10      	cmp	r6, #16
  4078a8:	f04f 0e01 	mov.w	lr, #1
  4078ac:	4611      	mov	r1, r2
  4078ae:	46cc      	mov	ip, r9
  4078b0:	dced      	bgt.n	40788e <_vfiprintf_r+0x3b2>
  4078b2:	4654      	mov	r4, sl
  4078b4:	46e2      	mov	sl, ip
  4078b6:	4432      	add	r2, r6
  4078b8:	f1be 0f07 	cmp.w	lr, #7
  4078bc:	9211      	str	r2, [sp, #68]	; 0x44
  4078be:	e88a 0060 	stmia.w	sl, {r5, r6}
  4078c2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4078c6:	f300 8369 	bgt.w	407f9c <_vfiprintf_r+0xac0>
  4078ca:	f10a 0a08 	add.w	sl, sl, #8
  4078ce:	f10e 0001 	add.w	r0, lr, #1
  4078d2:	4671      	mov	r1, lr
  4078d4:	e1ab      	b.n	407c2e <_vfiprintf_r+0x752>
  4078d6:	9608      	str	r6, [sp, #32]
  4078d8:	f013 0220 	ands.w	r2, r3, #32
  4078dc:	f040 838c 	bne.w	407ff8 <_vfiprintf_r+0xb1c>
  4078e0:	f013 0110 	ands.w	r1, r3, #16
  4078e4:	f040 831a 	bne.w	407f1c <_vfiprintf_r+0xa40>
  4078e8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4078ec:	f000 8316 	beq.w	407f1c <_vfiprintf_r+0xa40>
  4078f0:	9807      	ldr	r0, [sp, #28]
  4078f2:	460a      	mov	r2, r1
  4078f4:	4601      	mov	r1, r0
  4078f6:	3104      	adds	r1, #4
  4078f8:	8806      	ldrh	r6, [r0, #0]
  4078fa:	9107      	str	r1, [sp, #28]
  4078fc:	2700      	movs	r7, #0
  4078fe:	e720      	b.n	407742 <_vfiprintf_r+0x266>
  407900:	9608      	str	r6, [sp, #32]
  407902:	f043 0310 	orr.w	r3, r3, #16
  407906:	e7e7      	b.n	4078d8 <_vfiprintf_r+0x3fc>
  407908:	9608      	str	r6, [sp, #32]
  40790a:	f043 0310 	orr.w	r3, r3, #16
  40790e:	e708      	b.n	407722 <_vfiprintf_r+0x246>
  407910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407914:	f898 2000 	ldrb.w	r2, [r8]
  407918:	e652      	b.n	4075c0 <_vfiprintf_r+0xe4>
  40791a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40791e:	2600      	movs	r6, #0
  407920:	f818 2b01 	ldrb.w	r2, [r8], #1
  407924:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  407928:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40792c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  407930:	2909      	cmp	r1, #9
  407932:	d9f5      	bls.n	407920 <_vfiprintf_r+0x444>
  407934:	e646      	b.n	4075c4 <_vfiprintf_r+0xe8>
  407936:	9608      	str	r6, [sp, #32]
  407938:	2800      	cmp	r0, #0
  40793a:	f040 8408 	bne.w	40814e <_vfiprintf_r+0xc72>
  40793e:	f043 0310 	orr.w	r3, r3, #16
  407942:	069e      	lsls	r6, r3, #26
  407944:	f100 834c 	bmi.w	407fe0 <_vfiprintf_r+0xb04>
  407948:	06dd      	lsls	r5, r3, #27
  40794a:	f100 82f3 	bmi.w	407f34 <_vfiprintf_r+0xa58>
  40794e:	0658      	lsls	r0, r3, #25
  407950:	f140 82f0 	bpl.w	407f34 <_vfiprintf_r+0xa58>
  407954:	9d07      	ldr	r5, [sp, #28]
  407956:	f9b5 6000 	ldrsh.w	r6, [r5]
  40795a:	462a      	mov	r2, r5
  40795c:	17f7      	asrs	r7, r6, #31
  40795e:	3204      	adds	r2, #4
  407960:	4630      	mov	r0, r6
  407962:	4639      	mov	r1, r7
  407964:	9207      	str	r2, [sp, #28]
  407966:	2800      	cmp	r0, #0
  407968:	f171 0200 	sbcs.w	r2, r1, #0
  40796c:	f2c0 835d 	blt.w	40802a <_vfiprintf_r+0xb4e>
  407970:	1c61      	adds	r1, r4, #1
  407972:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407976:	f04f 0201 	mov.w	r2, #1
  40797a:	f47f aeea 	bne.w	407752 <_vfiprintf_r+0x276>
  40797e:	ea56 0107 	orrs.w	r1, r6, r7
  407982:	f000 824d 	beq.w	407e20 <_vfiprintf_r+0x944>
  407986:	9302      	str	r3, [sp, #8]
  407988:	2a01      	cmp	r2, #1
  40798a:	f000 828c 	beq.w	407ea6 <_vfiprintf_r+0x9ca>
  40798e:	2a02      	cmp	r2, #2
  407990:	f040 825c 	bne.w	407e4c <_vfiprintf_r+0x970>
  407994:	980b      	ldr	r0, [sp, #44]	; 0x2c
  407996:	46cb      	mov	fp, r9
  407998:	0933      	lsrs	r3, r6, #4
  40799a:	f006 010f 	and.w	r1, r6, #15
  40799e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4079a2:	093a      	lsrs	r2, r7, #4
  4079a4:	461e      	mov	r6, r3
  4079a6:	4617      	mov	r7, r2
  4079a8:	5c43      	ldrb	r3, [r0, r1]
  4079aa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4079ae:	ea56 0307 	orrs.w	r3, r6, r7
  4079b2:	d1f1      	bne.n	407998 <_vfiprintf_r+0x4bc>
  4079b4:	eba9 030b 	sub.w	r3, r9, fp
  4079b8:	9305      	str	r3, [sp, #20]
  4079ba:	e6e1      	b.n	407780 <_vfiprintf_r+0x2a4>
  4079bc:	2800      	cmp	r0, #0
  4079be:	f040 83c0 	bne.w	408142 <_vfiprintf_r+0xc66>
  4079c2:	0699      	lsls	r1, r3, #26
  4079c4:	f100 8367 	bmi.w	408096 <_vfiprintf_r+0xbba>
  4079c8:	06da      	lsls	r2, r3, #27
  4079ca:	f100 80f1 	bmi.w	407bb0 <_vfiprintf_r+0x6d4>
  4079ce:	065b      	lsls	r3, r3, #25
  4079d0:	f140 80ee 	bpl.w	407bb0 <_vfiprintf_r+0x6d4>
  4079d4:	9a07      	ldr	r2, [sp, #28]
  4079d6:	6813      	ldr	r3, [r2, #0]
  4079d8:	3204      	adds	r2, #4
  4079da:	9207      	str	r2, [sp, #28]
  4079dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4079e0:	801a      	strh	r2, [r3, #0]
  4079e2:	e5b8      	b.n	407556 <_vfiprintf_r+0x7a>
  4079e4:	9807      	ldr	r0, [sp, #28]
  4079e6:	4a3d      	ldr	r2, [pc, #244]	; (407adc <_vfiprintf_r+0x600>)
  4079e8:	9608      	str	r6, [sp, #32]
  4079ea:	920b      	str	r2, [sp, #44]	; 0x2c
  4079ec:	6806      	ldr	r6, [r0, #0]
  4079ee:	2278      	movs	r2, #120	; 0x78
  4079f0:	2130      	movs	r1, #48	; 0x30
  4079f2:	3004      	adds	r0, #4
  4079f4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4079f8:	f043 0302 	orr.w	r3, r3, #2
  4079fc:	9007      	str	r0, [sp, #28]
  4079fe:	2700      	movs	r7, #0
  407a00:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  407a04:	2202      	movs	r2, #2
  407a06:	e69c      	b.n	407742 <_vfiprintf_r+0x266>
  407a08:	9608      	str	r6, [sp, #32]
  407a0a:	2800      	cmp	r0, #0
  407a0c:	d099      	beq.n	407942 <_vfiprintf_r+0x466>
  407a0e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407a12:	e796      	b.n	407942 <_vfiprintf_r+0x466>
  407a14:	f898 2000 	ldrb.w	r2, [r8]
  407a18:	2d00      	cmp	r5, #0
  407a1a:	f47f add1 	bne.w	4075c0 <_vfiprintf_r+0xe4>
  407a1e:	2001      	movs	r0, #1
  407a20:	2520      	movs	r5, #32
  407a22:	e5cd      	b.n	4075c0 <_vfiprintf_r+0xe4>
  407a24:	f043 0301 	orr.w	r3, r3, #1
  407a28:	f898 2000 	ldrb.w	r2, [r8]
  407a2c:	e5c8      	b.n	4075c0 <_vfiprintf_r+0xe4>
  407a2e:	9608      	str	r6, [sp, #32]
  407a30:	2800      	cmp	r0, #0
  407a32:	f040 8393 	bne.w	40815c <_vfiprintf_r+0xc80>
  407a36:	4929      	ldr	r1, [pc, #164]	; (407adc <_vfiprintf_r+0x600>)
  407a38:	910b      	str	r1, [sp, #44]	; 0x2c
  407a3a:	069f      	lsls	r7, r3, #26
  407a3c:	f100 82e8 	bmi.w	408010 <_vfiprintf_r+0xb34>
  407a40:	9807      	ldr	r0, [sp, #28]
  407a42:	06de      	lsls	r6, r3, #27
  407a44:	4601      	mov	r1, r0
  407a46:	f100 8270 	bmi.w	407f2a <_vfiprintf_r+0xa4e>
  407a4a:	065d      	lsls	r5, r3, #25
  407a4c:	f140 826d 	bpl.w	407f2a <_vfiprintf_r+0xa4e>
  407a50:	3104      	adds	r1, #4
  407a52:	8806      	ldrh	r6, [r0, #0]
  407a54:	9107      	str	r1, [sp, #28]
  407a56:	2700      	movs	r7, #0
  407a58:	07d8      	lsls	r0, r3, #31
  407a5a:	f140 8222 	bpl.w	407ea2 <_vfiprintf_r+0x9c6>
  407a5e:	ea56 0107 	orrs.w	r1, r6, r7
  407a62:	f000 821e 	beq.w	407ea2 <_vfiprintf_r+0x9c6>
  407a66:	2130      	movs	r1, #48	; 0x30
  407a68:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  407a6c:	f043 0302 	orr.w	r3, r3, #2
  407a70:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  407a74:	2202      	movs	r2, #2
  407a76:	e664      	b.n	407742 <_vfiprintf_r+0x266>
  407a78:	9608      	str	r6, [sp, #32]
  407a7a:	2800      	cmp	r0, #0
  407a7c:	f040 836b 	bne.w	408156 <_vfiprintf_r+0xc7a>
  407a80:	4917      	ldr	r1, [pc, #92]	; (407ae0 <_vfiprintf_r+0x604>)
  407a82:	910b      	str	r1, [sp, #44]	; 0x2c
  407a84:	e7d9      	b.n	407a3a <_vfiprintf_r+0x55e>
  407a86:	9907      	ldr	r1, [sp, #28]
  407a88:	9608      	str	r6, [sp, #32]
  407a8a:	680a      	ldr	r2, [r1, #0]
  407a8c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  407a90:	f04f 0000 	mov.w	r0, #0
  407a94:	460a      	mov	r2, r1
  407a96:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  407a9a:	3204      	adds	r2, #4
  407a9c:	2001      	movs	r0, #1
  407a9e:	9001      	str	r0, [sp, #4]
  407aa0:	9207      	str	r2, [sp, #28]
  407aa2:	9005      	str	r0, [sp, #20]
  407aa4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  407aa8:	9302      	str	r3, [sp, #8]
  407aaa:	2400      	movs	r4, #0
  407aac:	e670      	b.n	407790 <_vfiprintf_r+0x2b4>
  407aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407ab2:	f898 2000 	ldrb.w	r2, [r8]
  407ab6:	e583      	b.n	4075c0 <_vfiprintf_r+0xe4>
  407ab8:	f898 2000 	ldrb.w	r2, [r8]
  407abc:	2a6c      	cmp	r2, #108	; 0x6c
  407abe:	bf03      	ittte	eq
  407ac0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  407ac4:	f043 0320 	orreq.w	r3, r3, #32
  407ac8:	f108 0801 	addeq.w	r8, r8, #1
  407acc:	f043 0310 	orrne.w	r3, r3, #16
  407ad0:	e576      	b.n	4075c0 <_vfiprintf_r+0xe4>
  407ad2:	bf00      	nop
  407ad4:	0040a734 	.word	0x0040a734
  407ad8:	0040a744 	.word	0x0040a744
  407adc:	0040a718 	.word	0x0040a718
  407ae0:	0040a704 	.word	0x0040a704
  407ae4:	9907      	ldr	r1, [sp, #28]
  407ae6:	680e      	ldr	r6, [r1, #0]
  407ae8:	460a      	mov	r2, r1
  407aea:	2e00      	cmp	r6, #0
  407aec:	f102 0204 	add.w	r2, r2, #4
  407af0:	f6ff ae0f 	blt.w	407712 <_vfiprintf_r+0x236>
  407af4:	9207      	str	r2, [sp, #28]
  407af6:	f898 2000 	ldrb.w	r2, [r8]
  407afa:	e561      	b.n	4075c0 <_vfiprintf_r+0xe4>
  407afc:	f898 2000 	ldrb.w	r2, [r8]
  407b00:	2001      	movs	r0, #1
  407b02:	252b      	movs	r5, #43	; 0x2b
  407b04:	e55c      	b.n	4075c0 <_vfiprintf_r+0xe4>
  407b06:	9907      	ldr	r1, [sp, #28]
  407b08:	9608      	str	r6, [sp, #32]
  407b0a:	f8d1 b000 	ldr.w	fp, [r1]
  407b0e:	f04f 0200 	mov.w	r2, #0
  407b12:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  407b16:	1d0e      	adds	r6, r1, #4
  407b18:	f1bb 0f00 	cmp.w	fp, #0
  407b1c:	f000 82e5 	beq.w	4080ea <_vfiprintf_r+0xc0e>
  407b20:	1c67      	adds	r7, r4, #1
  407b22:	f000 82c4 	beq.w	4080ae <_vfiprintf_r+0xbd2>
  407b26:	4622      	mov	r2, r4
  407b28:	2100      	movs	r1, #0
  407b2a:	4658      	mov	r0, fp
  407b2c:	9301      	str	r3, [sp, #4]
  407b2e:	f001 fbd7 	bl	4092e0 <memchr>
  407b32:	9b01      	ldr	r3, [sp, #4]
  407b34:	2800      	cmp	r0, #0
  407b36:	f000 82e5 	beq.w	408104 <_vfiprintf_r+0xc28>
  407b3a:	eba0 020b 	sub.w	r2, r0, fp
  407b3e:	9205      	str	r2, [sp, #20]
  407b40:	9607      	str	r6, [sp, #28]
  407b42:	9302      	str	r3, [sp, #8]
  407b44:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407b48:	2400      	movs	r4, #0
  407b4a:	e619      	b.n	407780 <_vfiprintf_r+0x2a4>
  407b4c:	f898 2000 	ldrb.w	r2, [r8]
  407b50:	2a2a      	cmp	r2, #42	; 0x2a
  407b52:	f108 0701 	add.w	r7, r8, #1
  407b56:	f000 82e9 	beq.w	40812c <_vfiprintf_r+0xc50>
  407b5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  407b5e:	2909      	cmp	r1, #9
  407b60:	46b8      	mov	r8, r7
  407b62:	f04f 0400 	mov.w	r4, #0
  407b66:	f63f ad2d 	bhi.w	4075c4 <_vfiprintf_r+0xe8>
  407b6a:	f818 2b01 	ldrb.w	r2, [r8], #1
  407b6e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  407b72:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  407b76:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  407b7a:	2909      	cmp	r1, #9
  407b7c:	d9f5      	bls.n	407b6a <_vfiprintf_r+0x68e>
  407b7e:	e521      	b.n	4075c4 <_vfiprintf_r+0xe8>
  407b80:	f043 0320 	orr.w	r3, r3, #32
  407b84:	f898 2000 	ldrb.w	r2, [r8]
  407b88:	e51a      	b.n	4075c0 <_vfiprintf_r+0xe4>
  407b8a:	9608      	str	r6, [sp, #32]
  407b8c:	2800      	cmp	r0, #0
  407b8e:	f040 82db 	bne.w	408148 <_vfiprintf_r+0xc6c>
  407b92:	2a00      	cmp	r2, #0
  407b94:	f000 80e7 	beq.w	407d66 <_vfiprintf_r+0x88a>
  407b98:	2101      	movs	r1, #1
  407b9a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  407b9e:	f04f 0200 	mov.w	r2, #0
  407ba2:	9101      	str	r1, [sp, #4]
  407ba4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  407ba8:	9105      	str	r1, [sp, #20]
  407baa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  407bae:	e77b      	b.n	407aa8 <_vfiprintf_r+0x5cc>
  407bb0:	9a07      	ldr	r2, [sp, #28]
  407bb2:	6813      	ldr	r3, [r2, #0]
  407bb4:	3204      	adds	r2, #4
  407bb6:	9207      	str	r2, [sp, #28]
  407bb8:	9a03      	ldr	r2, [sp, #12]
  407bba:	601a      	str	r2, [r3, #0]
  407bbc:	e4cb      	b.n	407556 <_vfiprintf_r+0x7a>
  407bbe:	aa0f      	add	r2, sp, #60	; 0x3c
  407bc0:	9904      	ldr	r1, [sp, #16]
  407bc2:	4620      	mov	r0, r4
  407bc4:	f7ff fc4a 	bl	40745c <__sprint_r.part.0>
  407bc8:	2800      	cmp	r0, #0
  407bca:	f040 8139 	bne.w	407e40 <_vfiprintf_r+0x964>
  407bce:	9910      	ldr	r1, [sp, #64]	; 0x40
  407bd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407bd2:	f101 0c01 	add.w	ip, r1, #1
  407bd6:	46ce      	mov	lr, r9
  407bd8:	e5ff      	b.n	4077da <_vfiprintf_r+0x2fe>
  407bda:	9910      	ldr	r1, [sp, #64]	; 0x40
  407bdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407bde:	1c48      	adds	r0, r1, #1
  407be0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407be4:	2d00      	cmp	r5, #0
  407be6:	f43f ae22 	beq.w	40782e <_vfiprintf_r+0x352>
  407bea:	3201      	adds	r2, #1
  407bec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  407bf0:	2101      	movs	r1, #1
  407bf2:	2807      	cmp	r0, #7
  407bf4:	9211      	str	r2, [sp, #68]	; 0x44
  407bf6:	9010      	str	r0, [sp, #64]	; 0x40
  407bf8:	f8ca 5000 	str.w	r5, [sl]
  407bfc:	f8ca 1004 	str.w	r1, [sl, #4]
  407c00:	f340 8108 	ble.w	407e14 <_vfiprintf_r+0x938>
  407c04:	2a00      	cmp	r2, #0
  407c06:	f040 81bc 	bne.w	407f82 <_vfiprintf_r+0xaa6>
  407c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407c0c:	2b00      	cmp	r3, #0
  407c0e:	f43f ae1f 	beq.w	407850 <_vfiprintf_r+0x374>
  407c12:	ab0e      	add	r3, sp, #56	; 0x38
  407c14:	2202      	movs	r2, #2
  407c16:	4608      	mov	r0, r1
  407c18:	931c      	str	r3, [sp, #112]	; 0x70
  407c1a:	921d      	str	r2, [sp, #116]	; 0x74
  407c1c:	46ca      	mov	sl, r9
  407c1e:	4601      	mov	r1, r0
  407c20:	f10a 0a08 	add.w	sl, sl, #8
  407c24:	3001      	adds	r0, #1
  407c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407c28:	2b80      	cmp	r3, #128	; 0x80
  407c2a:	f43f ae19 	beq.w	407860 <_vfiprintf_r+0x384>
  407c2e:	9b05      	ldr	r3, [sp, #20]
  407c30:	1ae4      	subs	r4, r4, r3
  407c32:	2c00      	cmp	r4, #0
  407c34:	dd2e      	ble.n	407c94 <_vfiprintf_r+0x7b8>
  407c36:	2c10      	cmp	r4, #16
  407c38:	4db3      	ldr	r5, [pc, #716]	; (407f08 <_vfiprintf_r+0xa2c>)
  407c3a:	dd1e      	ble.n	407c7a <_vfiprintf_r+0x79e>
  407c3c:	46d6      	mov	lr, sl
  407c3e:	2610      	movs	r6, #16
  407c40:	9f06      	ldr	r7, [sp, #24]
  407c42:	f8dd a010 	ldr.w	sl, [sp, #16]
  407c46:	e006      	b.n	407c56 <_vfiprintf_r+0x77a>
  407c48:	1c88      	adds	r0, r1, #2
  407c4a:	f10e 0e08 	add.w	lr, lr, #8
  407c4e:	4619      	mov	r1, r3
  407c50:	3c10      	subs	r4, #16
  407c52:	2c10      	cmp	r4, #16
  407c54:	dd10      	ble.n	407c78 <_vfiprintf_r+0x79c>
  407c56:	1c4b      	adds	r3, r1, #1
  407c58:	3210      	adds	r2, #16
  407c5a:	2b07      	cmp	r3, #7
  407c5c:	9211      	str	r2, [sp, #68]	; 0x44
  407c5e:	e88e 0060 	stmia.w	lr, {r5, r6}
  407c62:	9310      	str	r3, [sp, #64]	; 0x40
  407c64:	ddf0      	ble.n	407c48 <_vfiprintf_r+0x76c>
  407c66:	2a00      	cmp	r2, #0
  407c68:	d165      	bne.n	407d36 <_vfiprintf_r+0x85a>
  407c6a:	3c10      	subs	r4, #16
  407c6c:	2c10      	cmp	r4, #16
  407c6e:	f04f 0001 	mov.w	r0, #1
  407c72:	4611      	mov	r1, r2
  407c74:	46ce      	mov	lr, r9
  407c76:	dcee      	bgt.n	407c56 <_vfiprintf_r+0x77a>
  407c78:	46f2      	mov	sl, lr
  407c7a:	4422      	add	r2, r4
  407c7c:	2807      	cmp	r0, #7
  407c7e:	9211      	str	r2, [sp, #68]	; 0x44
  407c80:	f8ca 5000 	str.w	r5, [sl]
  407c84:	f8ca 4004 	str.w	r4, [sl, #4]
  407c88:	9010      	str	r0, [sp, #64]	; 0x40
  407c8a:	f300 8085 	bgt.w	407d98 <_vfiprintf_r+0x8bc>
  407c8e:	f10a 0a08 	add.w	sl, sl, #8
  407c92:	3001      	adds	r0, #1
  407c94:	9905      	ldr	r1, [sp, #20]
  407c96:	f8ca b000 	str.w	fp, [sl]
  407c9a:	440a      	add	r2, r1
  407c9c:	2807      	cmp	r0, #7
  407c9e:	9211      	str	r2, [sp, #68]	; 0x44
  407ca0:	f8ca 1004 	str.w	r1, [sl, #4]
  407ca4:	9010      	str	r0, [sp, #64]	; 0x40
  407ca6:	f340 8082 	ble.w	407dae <_vfiprintf_r+0x8d2>
  407caa:	2a00      	cmp	r2, #0
  407cac:	f040 8118 	bne.w	407ee0 <_vfiprintf_r+0xa04>
  407cb0:	9b02      	ldr	r3, [sp, #8]
  407cb2:	9210      	str	r2, [sp, #64]	; 0x40
  407cb4:	0758      	lsls	r0, r3, #29
  407cb6:	d535      	bpl.n	407d24 <_vfiprintf_r+0x848>
  407cb8:	9b08      	ldr	r3, [sp, #32]
  407cba:	9901      	ldr	r1, [sp, #4]
  407cbc:	1a5c      	subs	r4, r3, r1
  407cbe:	2c00      	cmp	r4, #0
  407cc0:	f340 80e7 	ble.w	407e92 <_vfiprintf_r+0x9b6>
  407cc4:	46ca      	mov	sl, r9
  407cc6:	2c10      	cmp	r4, #16
  407cc8:	f340 8218 	ble.w	4080fc <_vfiprintf_r+0xc20>
  407ccc:	9910      	ldr	r1, [sp, #64]	; 0x40
  407cce:	4e8f      	ldr	r6, [pc, #572]	; (407f0c <_vfiprintf_r+0xa30>)
  407cd0:	9f06      	ldr	r7, [sp, #24]
  407cd2:	f8dd b010 	ldr.w	fp, [sp, #16]
  407cd6:	2510      	movs	r5, #16
  407cd8:	e006      	b.n	407ce8 <_vfiprintf_r+0x80c>
  407cda:	1c88      	adds	r0, r1, #2
  407cdc:	f10a 0a08 	add.w	sl, sl, #8
  407ce0:	4619      	mov	r1, r3
  407ce2:	3c10      	subs	r4, #16
  407ce4:	2c10      	cmp	r4, #16
  407ce6:	dd11      	ble.n	407d0c <_vfiprintf_r+0x830>
  407ce8:	1c4b      	adds	r3, r1, #1
  407cea:	3210      	adds	r2, #16
  407cec:	2b07      	cmp	r3, #7
  407cee:	9211      	str	r2, [sp, #68]	; 0x44
  407cf0:	f8ca 6000 	str.w	r6, [sl]
  407cf4:	f8ca 5004 	str.w	r5, [sl, #4]
  407cf8:	9310      	str	r3, [sp, #64]	; 0x40
  407cfa:	ddee      	ble.n	407cda <_vfiprintf_r+0x7fe>
  407cfc:	bb42      	cbnz	r2, 407d50 <_vfiprintf_r+0x874>
  407cfe:	3c10      	subs	r4, #16
  407d00:	2c10      	cmp	r4, #16
  407d02:	f04f 0001 	mov.w	r0, #1
  407d06:	4611      	mov	r1, r2
  407d08:	46ca      	mov	sl, r9
  407d0a:	dced      	bgt.n	407ce8 <_vfiprintf_r+0x80c>
  407d0c:	4422      	add	r2, r4
  407d0e:	2807      	cmp	r0, #7
  407d10:	9211      	str	r2, [sp, #68]	; 0x44
  407d12:	f8ca 6000 	str.w	r6, [sl]
  407d16:	f8ca 4004 	str.w	r4, [sl, #4]
  407d1a:	9010      	str	r0, [sp, #64]	; 0x40
  407d1c:	dd51      	ble.n	407dc2 <_vfiprintf_r+0x8e6>
  407d1e:	2a00      	cmp	r2, #0
  407d20:	f040 819b 	bne.w	40805a <_vfiprintf_r+0xb7e>
  407d24:	9b03      	ldr	r3, [sp, #12]
  407d26:	9a08      	ldr	r2, [sp, #32]
  407d28:	9901      	ldr	r1, [sp, #4]
  407d2a:	428a      	cmp	r2, r1
  407d2c:	bfac      	ite	ge
  407d2e:	189b      	addge	r3, r3, r2
  407d30:	185b      	addlt	r3, r3, r1
  407d32:	9303      	str	r3, [sp, #12]
  407d34:	e04e      	b.n	407dd4 <_vfiprintf_r+0x8f8>
  407d36:	aa0f      	add	r2, sp, #60	; 0x3c
  407d38:	4651      	mov	r1, sl
  407d3a:	4638      	mov	r0, r7
  407d3c:	f7ff fb8e 	bl	40745c <__sprint_r.part.0>
  407d40:	2800      	cmp	r0, #0
  407d42:	f040 813f 	bne.w	407fc4 <_vfiprintf_r+0xae8>
  407d46:	9910      	ldr	r1, [sp, #64]	; 0x40
  407d48:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407d4a:	1c48      	adds	r0, r1, #1
  407d4c:	46ce      	mov	lr, r9
  407d4e:	e77f      	b.n	407c50 <_vfiprintf_r+0x774>
  407d50:	aa0f      	add	r2, sp, #60	; 0x3c
  407d52:	4659      	mov	r1, fp
  407d54:	4638      	mov	r0, r7
  407d56:	f7ff fb81 	bl	40745c <__sprint_r.part.0>
  407d5a:	b960      	cbnz	r0, 407d76 <_vfiprintf_r+0x89a>
  407d5c:	9910      	ldr	r1, [sp, #64]	; 0x40
  407d5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407d60:	1c48      	adds	r0, r1, #1
  407d62:	46ca      	mov	sl, r9
  407d64:	e7bd      	b.n	407ce2 <_vfiprintf_r+0x806>
  407d66:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407d68:	f8dd b010 	ldr.w	fp, [sp, #16]
  407d6c:	2b00      	cmp	r3, #0
  407d6e:	f040 81d4 	bne.w	40811a <_vfiprintf_r+0xc3e>
  407d72:	2300      	movs	r3, #0
  407d74:	9310      	str	r3, [sp, #64]	; 0x40
  407d76:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407d7a:	f013 0f01 	tst.w	r3, #1
  407d7e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  407d82:	d102      	bne.n	407d8a <_vfiprintf_r+0x8ae>
  407d84:	059a      	lsls	r2, r3, #22
  407d86:	f140 80de 	bpl.w	407f46 <_vfiprintf_r+0xa6a>
  407d8a:	065b      	lsls	r3, r3, #25
  407d8c:	f53f acb2 	bmi.w	4076f4 <_vfiprintf_r+0x218>
  407d90:	9803      	ldr	r0, [sp, #12]
  407d92:	b02d      	add	sp, #180	; 0xb4
  407d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d98:	2a00      	cmp	r2, #0
  407d9a:	f040 8106 	bne.w	407faa <_vfiprintf_r+0xace>
  407d9e:	9a05      	ldr	r2, [sp, #20]
  407da0:	921d      	str	r2, [sp, #116]	; 0x74
  407da2:	2301      	movs	r3, #1
  407da4:	9211      	str	r2, [sp, #68]	; 0x44
  407da6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  407daa:	9310      	str	r3, [sp, #64]	; 0x40
  407dac:	46ca      	mov	sl, r9
  407dae:	f10a 0a08 	add.w	sl, sl, #8
  407db2:	9b02      	ldr	r3, [sp, #8]
  407db4:	0759      	lsls	r1, r3, #29
  407db6:	d504      	bpl.n	407dc2 <_vfiprintf_r+0x8e6>
  407db8:	9b08      	ldr	r3, [sp, #32]
  407dba:	9901      	ldr	r1, [sp, #4]
  407dbc:	1a5c      	subs	r4, r3, r1
  407dbe:	2c00      	cmp	r4, #0
  407dc0:	dc81      	bgt.n	407cc6 <_vfiprintf_r+0x7ea>
  407dc2:	9b03      	ldr	r3, [sp, #12]
  407dc4:	9908      	ldr	r1, [sp, #32]
  407dc6:	9801      	ldr	r0, [sp, #4]
  407dc8:	4281      	cmp	r1, r0
  407dca:	bfac      	ite	ge
  407dcc:	185b      	addge	r3, r3, r1
  407dce:	181b      	addlt	r3, r3, r0
  407dd0:	9303      	str	r3, [sp, #12]
  407dd2:	bb72      	cbnz	r2, 407e32 <_vfiprintf_r+0x956>
  407dd4:	2300      	movs	r3, #0
  407dd6:	9310      	str	r3, [sp, #64]	; 0x40
  407dd8:	46ca      	mov	sl, r9
  407dda:	f7ff bbbc 	b.w	407556 <_vfiprintf_r+0x7a>
  407dde:	aa0f      	add	r2, sp, #60	; 0x3c
  407de0:	9904      	ldr	r1, [sp, #16]
  407de2:	4620      	mov	r0, r4
  407de4:	f7ff fb3a 	bl	40745c <__sprint_r.part.0>
  407de8:	bb50      	cbnz	r0, 407e40 <_vfiprintf_r+0x964>
  407dea:	9910      	ldr	r1, [sp, #64]	; 0x40
  407dec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407dee:	f101 0e01 	add.w	lr, r1, #1
  407df2:	46cc      	mov	ip, r9
  407df4:	e548      	b.n	407888 <_vfiprintf_r+0x3ac>
  407df6:	2a00      	cmp	r2, #0
  407df8:	f040 8140 	bne.w	40807c <_vfiprintf_r+0xba0>
  407dfc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  407e00:	2900      	cmp	r1, #0
  407e02:	f000 811b 	beq.w	40803c <_vfiprintf_r+0xb60>
  407e06:	2201      	movs	r2, #1
  407e08:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  407e0c:	4610      	mov	r0, r2
  407e0e:	921d      	str	r2, [sp, #116]	; 0x74
  407e10:	911c      	str	r1, [sp, #112]	; 0x70
  407e12:	46ca      	mov	sl, r9
  407e14:	4601      	mov	r1, r0
  407e16:	f10a 0a08 	add.w	sl, sl, #8
  407e1a:	3001      	adds	r0, #1
  407e1c:	e507      	b.n	40782e <_vfiprintf_r+0x352>
  407e1e:	9b02      	ldr	r3, [sp, #8]
  407e20:	2a01      	cmp	r2, #1
  407e22:	f000 8098 	beq.w	407f56 <_vfiprintf_r+0xa7a>
  407e26:	2a02      	cmp	r2, #2
  407e28:	d10d      	bne.n	407e46 <_vfiprintf_r+0x96a>
  407e2a:	9302      	str	r3, [sp, #8]
  407e2c:	2600      	movs	r6, #0
  407e2e:	2700      	movs	r7, #0
  407e30:	e5b0      	b.n	407994 <_vfiprintf_r+0x4b8>
  407e32:	aa0f      	add	r2, sp, #60	; 0x3c
  407e34:	9904      	ldr	r1, [sp, #16]
  407e36:	9806      	ldr	r0, [sp, #24]
  407e38:	f7ff fb10 	bl	40745c <__sprint_r.part.0>
  407e3c:	2800      	cmp	r0, #0
  407e3e:	d0c9      	beq.n	407dd4 <_vfiprintf_r+0x8f8>
  407e40:	f8dd b010 	ldr.w	fp, [sp, #16]
  407e44:	e797      	b.n	407d76 <_vfiprintf_r+0x89a>
  407e46:	9302      	str	r3, [sp, #8]
  407e48:	2600      	movs	r6, #0
  407e4a:	2700      	movs	r7, #0
  407e4c:	4649      	mov	r1, r9
  407e4e:	e000      	b.n	407e52 <_vfiprintf_r+0x976>
  407e50:	4659      	mov	r1, fp
  407e52:	08f2      	lsrs	r2, r6, #3
  407e54:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  407e58:	08f8      	lsrs	r0, r7, #3
  407e5a:	f006 0307 	and.w	r3, r6, #7
  407e5e:	4607      	mov	r7, r0
  407e60:	4616      	mov	r6, r2
  407e62:	3330      	adds	r3, #48	; 0x30
  407e64:	ea56 0207 	orrs.w	r2, r6, r7
  407e68:	f801 3c01 	strb.w	r3, [r1, #-1]
  407e6c:	f101 3bff 	add.w	fp, r1, #4294967295
  407e70:	d1ee      	bne.n	407e50 <_vfiprintf_r+0x974>
  407e72:	9a02      	ldr	r2, [sp, #8]
  407e74:	07d6      	lsls	r6, r2, #31
  407e76:	f57f ad9d 	bpl.w	4079b4 <_vfiprintf_r+0x4d8>
  407e7a:	2b30      	cmp	r3, #48	; 0x30
  407e7c:	f43f ad9a 	beq.w	4079b4 <_vfiprintf_r+0x4d8>
  407e80:	3902      	subs	r1, #2
  407e82:	2330      	movs	r3, #48	; 0x30
  407e84:	f80b 3c01 	strb.w	r3, [fp, #-1]
  407e88:	eba9 0301 	sub.w	r3, r9, r1
  407e8c:	9305      	str	r3, [sp, #20]
  407e8e:	468b      	mov	fp, r1
  407e90:	e476      	b.n	407780 <_vfiprintf_r+0x2a4>
  407e92:	9b03      	ldr	r3, [sp, #12]
  407e94:	9a08      	ldr	r2, [sp, #32]
  407e96:	428a      	cmp	r2, r1
  407e98:	bfac      	ite	ge
  407e9a:	189b      	addge	r3, r3, r2
  407e9c:	185b      	addlt	r3, r3, r1
  407e9e:	9303      	str	r3, [sp, #12]
  407ea0:	e798      	b.n	407dd4 <_vfiprintf_r+0x8f8>
  407ea2:	2202      	movs	r2, #2
  407ea4:	e44d      	b.n	407742 <_vfiprintf_r+0x266>
  407ea6:	2f00      	cmp	r7, #0
  407ea8:	bf08      	it	eq
  407eaa:	2e0a      	cmpeq	r6, #10
  407eac:	d352      	bcc.n	407f54 <_vfiprintf_r+0xa78>
  407eae:	46cb      	mov	fp, r9
  407eb0:	4630      	mov	r0, r6
  407eb2:	4639      	mov	r1, r7
  407eb4:	220a      	movs	r2, #10
  407eb6:	2300      	movs	r3, #0
  407eb8:	f001 fe9c 	bl	409bf4 <__aeabi_uldivmod>
  407ebc:	3230      	adds	r2, #48	; 0x30
  407ebe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  407ec2:	4630      	mov	r0, r6
  407ec4:	4639      	mov	r1, r7
  407ec6:	2300      	movs	r3, #0
  407ec8:	220a      	movs	r2, #10
  407eca:	f001 fe93 	bl	409bf4 <__aeabi_uldivmod>
  407ece:	4606      	mov	r6, r0
  407ed0:	460f      	mov	r7, r1
  407ed2:	ea56 0307 	orrs.w	r3, r6, r7
  407ed6:	d1eb      	bne.n	407eb0 <_vfiprintf_r+0x9d4>
  407ed8:	e56c      	b.n	4079b4 <_vfiprintf_r+0x4d8>
  407eda:	9405      	str	r4, [sp, #20]
  407edc:	46cb      	mov	fp, r9
  407ede:	e44f      	b.n	407780 <_vfiprintf_r+0x2a4>
  407ee0:	aa0f      	add	r2, sp, #60	; 0x3c
  407ee2:	9904      	ldr	r1, [sp, #16]
  407ee4:	9806      	ldr	r0, [sp, #24]
  407ee6:	f7ff fab9 	bl	40745c <__sprint_r.part.0>
  407eea:	2800      	cmp	r0, #0
  407eec:	d1a8      	bne.n	407e40 <_vfiprintf_r+0x964>
  407eee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407ef0:	46ca      	mov	sl, r9
  407ef2:	e75e      	b.n	407db2 <_vfiprintf_r+0x8d6>
  407ef4:	aa0f      	add	r2, sp, #60	; 0x3c
  407ef6:	9904      	ldr	r1, [sp, #16]
  407ef8:	9806      	ldr	r0, [sp, #24]
  407efa:	f7ff faaf 	bl	40745c <__sprint_r.part.0>
  407efe:	2800      	cmp	r0, #0
  407f00:	d19e      	bne.n	407e40 <_vfiprintf_r+0x964>
  407f02:	46ca      	mov	sl, r9
  407f04:	f7ff bbc0 	b.w	407688 <_vfiprintf_r+0x1ac>
  407f08:	0040a744 	.word	0x0040a744
  407f0c:	0040a734 	.word	0x0040a734
  407f10:	3104      	adds	r1, #4
  407f12:	6816      	ldr	r6, [r2, #0]
  407f14:	9107      	str	r1, [sp, #28]
  407f16:	2201      	movs	r2, #1
  407f18:	2700      	movs	r7, #0
  407f1a:	e412      	b.n	407742 <_vfiprintf_r+0x266>
  407f1c:	9807      	ldr	r0, [sp, #28]
  407f1e:	4601      	mov	r1, r0
  407f20:	3104      	adds	r1, #4
  407f22:	6806      	ldr	r6, [r0, #0]
  407f24:	9107      	str	r1, [sp, #28]
  407f26:	2700      	movs	r7, #0
  407f28:	e40b      	b.n	407742 <_vfiprintf_r+0x266>
  407f2a:	680e      	ldr	r6, [r1, #0]
  407f2c:	3104      	adds	r1, #4
  407f2e:	9107      	str	r1, [sp, #28]
  407f30:	2700      	movs	r7, #0
  407f32:	e591      	b.n	407a58 <_vfiprintf_r+0x57c>
  407f34:	9907      	ldr	r1, [sp, #28]
  407f36:	680e      	ldr	r6, [r1, #0]
  407f38:	460a      	mov	r2, r1
  407f3a:	17f7      	asrs	r7, r6, #31
  407f3c:	3204      	adds	r2, #4
  407f3e:	9207      	str	r2, [sp, #28]
  407f40:	4630      	mov	r0, r6
  407f42:	4639      	mov	r1, r7
  407f44:	e50f      	b.n	407966 <_vfiprintf_r+0x48a>
  407f46:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407f4a:	f000 fe7f 	bl	408c4c <__retarget_lock_release_recursive>
  407f4e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  407f52:	e71a      	b.n	407d8a <_vfiprintf_r+0x8ae>
  407f54:	9b02      	ldr	r3, [sp, #8]
  407f56:	9302      	str	r3, [sp, #8]
  407f58:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  407f5c:	3630      	adds	r6, #48	; 0x30
  407f5e:	2301      	movs	r3, #1
  407f60:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  407f64:	9305      	str	r3, [sp, #20]
  407f66:	e40b      	b.n	407780 <_vfiprintf_r+0x2a4>
  407f68:	aa0f      	add	r2, sp, #60	; 0x3c
  407f6a:	9904      	ldr	r1, [sp, #16]
  407f6c:	9806      	ldr	r0, [sp, #24]
  407f6e:	f7ff fa75 	bl	40745c <__sprint_r.part.0>
  407f72:	2800      	cmp	r0, #0
  407f74:	f47f af64 	bne.w	407e40 <_vfiprintf_r+0x964>
  407f78:	9910      	ldr	r1, [sp, #64]	; 0x40
  407f7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407f7c:	1c48      	adds	r0, r1, #1
  407f7e:	46ca      	mov	sl, r9
  407f80:	e651      	b.n	407c26 <_vfiprintf_r+0x74a>
  407f82:	aa0f      	add	r2, sp, #60	; 0x3c
  407f84:	9904      	ldr	r1, [sp, #16]
  407f86:	9806      	ldr	r0, [sp, #24]
  407f88:	f7ff fa68 	bl	40745c <__sprint_r.part.0>
  407f8c:	2800      	cmp	r0, #0
  407f8e:	f47f af57 	bne.w	407e40 <_vfiprintf_r+0x964>
  407f92:	9910      	ldr	r1, [sp, #64]	; 0x40
  407f94:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407f96:	1c48      	adds	r0, r1, #1
  407f98:	46ca      	mov	sl, r9
  407f9a:	e448      	b.n	40782e <_vfiprintf_r+0x352>
  407f9c:	2a00      	cmp	r2, #0
  407f9e:	f040 8091 	bne.w	4080c4 <_vfiprintf_r+0xbe8>
  407fa2:	2001      	movs	r0, #1
  407fa4:	4611      	mov	r1, r2
  407fa6:	46ca      	mov	sl, r9
  407fa8:	e641      	b.n	407c2e <_vfiprintf_r+0x752>
  407faa:	aa0f      	add	r2, sp, #60	; 0x3c
  407fac:	9904      	ldr	r1, [sp, #16]
  407fae:	9806      	ldr	r0, [sp, #24]
  407fb0:	f7ff fa54 	bl	40745c <__sprint_r.part.0>
  407fb4:	2800      	cmp	r0, #0
  407fb6:	f47f af43 	bne.w	407e40 <_vfiprintf_r+0x964>
  407fba:	9810      	ldr	r0, [sp, #64]	; 0x40
  407fbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407fbe:	3001      	adds	r0, #1
  407fc0:	46ca      	mov	sl, r9
  407fc2:	e667      	b.n	407c94 <_vfiprintf_r+0x7b8>
  407fc4:	46d3      	mov	fp, sl
  407fc6:	e6d6      	b.n	407d76 <_vfiprintf_r+0x89a>
  407fc8:	9e07      	ldr	r6, [sp, #28]
  407fca:	3607      	adds	r6, #7
  407fcc:	f026 0207 	bic.w	r2, r6, #7
  407fd0:	f102 0108 	add.w	r1, r2, #8
  407fd4:	e9d2 6700 	ldrd	r6, r7, [r2]
  407fd8:	9107      	str	r1, [sp, #28]
  407fda:	2201      	movs	r2, #1
  407fdc:	f7ff bbb1 	b.w	407742 <_vfiprintf_r+0x266>
  407fe0:	9e07      	ldr	r6, [sp, #28]
  407fe2:	3607      	adds	r6, #7
  407fe4:	f026 0607 	bic.w	r6, r6, #7
  407fe8:	e9d6 0100 	ldrd	r0, r1, [r6]
  407fec:	f106 0208 	add.w	r2, r6, #8
  407ff0:	9207      	str	r2, [sp, #28]
  407ff2:	4606      	mov	r6, r0
  407ff4:	460f      	mov	r7, r1
  407ff6:	e4b6      	b.n	407966 <_vfiprintf_r+0x48a>
  407ff8:	9e07      	ldr	r6, [sp, #28]
  407ffa:	3607      	adds	r6, #7
  407ffc:	f026 0207 	bic.w	r2, r6, #7
  408000:	f102 0108 	add.w	r1, r2, #8
  408004:	e9d2 6700 	ldrd	r6, r7, [r2]
  408008:	9107      	str	r1, [sp, #28]
  40800a:	2200      	movs	r2, #0
  40800c:	f7ff bb99 	b.w	407742 <_vfiprintf_r+0x266>
  408010:	9e07      	ldr	r6, [sp, #28]
  408012:	3607      	adds	r6, #7
  408014:	f026 0107 	bic.w	r1, r6, #7
  408018:	f101 0008 	add.w	r0, r1, #8
  40801c:	9007      	str	r0, [sp, #28]
  40801e:	e9d1 6700 	ldrd	r6, r7, [r1]
  408022:	e519      	b.n	407a58 <_vfiprintf_r+0x57c>
  408024:	46cb      	mov	fp, r9
  408026:	f7ff bbab 	b.w	407780 <_vfiprintf_r+0x2a4>
  40802a:	252d      	movs	r5, #45	; 0x2d
  40802c:	4276      	negs	r6, r6
  40802e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  408032:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408036:	2201      	movs	r2, #1
  408038:	f7ff bb88 	b.w	40774c <_vfiprintf_r+0x270>
  40803c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40803e:	b9b3      	cbnz	r3, 40806e <_vfiprintf_r+0xb92>
  408040:	4611      	mov	r1, r2
  408042:	2001      	movs	r0, #1
  408044:	46ca      	mov	sl, r9
  408046:	e5f2      	b.n	407c2e <_vfiprintf_r+0x752>
  408048:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40804c:	f000 fdfe 	bl	408c4c <__retarget_lock_release_recursive>
  408050:	f04f 33ff 	mov.w	r3, #4294967295
  408054:	9303      	str	r3, [sp, #12]
  408056:	f7ff bb50 	b.w	4076fa <_vfiprintf_r+0x21e>
  40805a:	aa0f      	add	r2, sp, #60	; 0x3c
  40805c:	9904      	ldr	r1, [sp, #16]
  40805e:	9806      	ldr	r0, [sp, #24]
  408060:	f7ff f9fc 	bl	40745c <__sprint_r.part.0>
  408064:	2800      	cmp	r0, #0
  408066:	f47f aeeb 	bne.w	407e40 <_vfiprintf_r+0x964>
  40806a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40806c:	e6a9      	b.n	407dc2 <_vfiprintf_r+0x8e6>
  40806e:	ab0e      	add	r3, sp, #56	; 0x38
  408070:	2202      	movs	r2, #2
  408072:	931c      	str	r3, [sp, #112]	; 0x70
  408074:	921d      	str	r2, [sp, #116]	; 0x74
  408076:	2001      	movs	r0, #1
  408078:	46ca      	mov	sl, r9
  40807a:	e5d0      	b.n	407c1e <_vfiprintf_r+0x742>
  40807c:	aa0f      	add	r2, sp, #60	; 0x3c
  40807e:	9904      	ldr	r1, [sp, #16]
  408080:	9806      	ldr	r0, [sp, #24]
  408082:	f7ff f9eb 	bl	40745c <__sprint_r.part.0>
  408086:	2800      	cmp	r0, #0
  408088:	f47f aeda 	bne.w	407e40 <_vfiprintf_r+0x964>
  40808c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40808e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408090:	1c48      	adds	r0, r1, #1
  408092:	46ca      	mov	sl, r9
  408094:	e5a4      	b.n	407be0 <_vfiprintf_r+0x704>
  408096:	9a07      	ldr	r2, [sp, #28]
  408098:	9903      	ldr	r1, [sp, #12]
  40809a:	6813      	ldr	r3, [r2, #0]
  40809c:	17cd      	asrs	r5, r1, #31
  40809e:	4608      	mov	r0, r1
  4080a0:	3204      	adds	r2, #4
  4080a2:	4629      	mov	r1, r5
  4080a4:	9207      	str	r2, [sp, #28]
  4080a6:	e9c3 0100 	strd	r0, r1, [r3]
  4080aa:	f7ff ba54 	b.w	407556 <_vfiprintf_r+0x7a>
  4080ae:	4658      	mov	r0, fp
  4080b0:	9607      	str	r6, [sp, #28]
  4080b2:	9302      	str	r3, [sp, #8]
  4080b4:	f7ff f964 	bl	407380 <strlen>
  4080b8:	2400      	movs	r4, #0
  4080ba:	9005      	str	r0, [sp, #20]
  4080bc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4080c0:	f7ff bb5e 	b.w	407780 <_vfiprintf_r+0x2a4>
  4080c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4080c6:	9904      	ldr	r1, [sp, #16]
  4080c8:	9806      	ldr	r0, [sp, #24]
  4080ca:	f7ff f9c7 	bl	40745c <__sprint_r.part.0>
  4080ce:	2800      	cmp	r0, #0
  4080d0:	f47f aeb6 	bne.w	407e40 <_vfiprintf_r+0x964>
  4080d4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4080d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4080d8:	1c48      	adds	r0, r1, #1
  4080da:	46ca      	mov	sl, r9
  4080dc:	e5a7      	b.n	407c2e <_vfiprintf_r+0x752>
  4080de:	9910      	ldr	r1, [sp, #64]	; 0x40
  4080e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4080e2:	4e20      	ldr	r6, [pc, #128]	; (408164 <_vfiprintf_r+0xc88>)
  4080e4:	3101      	adds	r1, #1
  4080e6:	f7ff bb90 	b.w	40780a <_vfiprintf_r+0x32e>
  4080ea:	2c06      	cmp	r4, #6
  4080ec:	bf28      	it	cs
  4080ee:	2406      	movcs	r4, #6
  4080f0:	9405      	str	r4, [sp, #20]
  4080f2:	9607      	str	r6, [sp, #28]
  4080f4:	9401      	str	r4, [sp, #4]
  4080f6:	f8df b070 	ldr.w	fp, [pc, #112]	; 408168 <_vfiprintf_r+0xc8c>
  4080fa:	e4d5      	b.n	407aa8 <_vfiprintf_r+0x5cc>
  4080fc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4080fe:	4e19      	ldr	r6, [pc, #100]	; (408164 <_vfiprintf_r+0xc88>)
  408100:	3001      	adds	r0, #1
  408102:	e603      	b.n	407d0c <_vfiprintf_r+0x830>
  408104:	9405      	str	r4, [sp, #20]
  408106:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40810a:	9607      	str	r6, [sp, #28]
  40810c:	9302      	str	r3, [sp, #8]
  40810e:	4604      	mov	r4, r0
  408110:	f7ff bb36 	b.w	407780 <_vfiprintf_r+0x2a4>
  408114:	4686      	mov	lr, r0
  408116:	f7ff bbce 	b.w	4078b6 <_vfiprintf_r+0x3da>
  40811a:	9806      	ldr	r0, [sp, #24]
  40811c:	aa0f      	add	r2, sp, #60	; 0x3c
  40811e:	4659      	mov	r1, fp
  408120:	f7ff f99c 	bl	40745c <__sprint_r.part.0>
  408124:	2800      	cmp	r0, #0
  408126:	f43f ae24 	beq.w	407d72 <_vfiprintf_r+0x896>
  40812a:	e624      	b.n	407d76 <_vfiprintf_r+0x89a>
  40812c:	9907      	ldr	r1, [sp, #28]
  40812e:	f898 2001 	ldrb.w	r2, [r8, #1]
  408132:	680c      	ldr	r4, [r1, #0]
  408134:	3104      	adds	r1, #4
  408136:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40813a:	46b8      	mov	r8, r7
  40813c:	9107      	str	r1, [sp, #28]
  40813e:	f7ff ba3f 	b.w	4075c0 <_vfiprintf_r+0xe4>
  408142:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408146:	e43c      	b.n	4079c2 <_vfiprintf_r+0x4e6>
  408148:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40814c:	e521      	b.n	407b92 <_vfiprintf_r+0x6b6>
  40814e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408152:	f7ff bbf4 	b.w	40793e <_vfiprintf_r+0x462>
  408156:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40815a:	e491      	b.n	407a80 <_vfiprintf_r+0x5a4>
  40815c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408160:	e469      	b.n	407a36 <_vfiprintf_r+0x55a>
  408162:	bf00      	nop
  408164:	0040a734 	.word	0x0040a734
  408168:	0040a72c 	.word	0x0040a72c

0040816c <__sbprintf>:
  40816c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408170:	460c      	mov	r4, r1
  408172:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  408176:	8989      	ldrh	r1, [r1, #12]
  408178:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40817a:	89e5      	ldrh	r5, [r4, #14]
  40817c:	9619      	str	r6, [sp, #100]	; 0x64
  40817e:	f021 0102 	bic.w	r1, r1, #2
  408182:	4606      	mov	r6, r0
  408184:	69e0      	ldr	r0, [r4, #28]
  408186:	f8ad 100c 	strh.w	r1, [sp, #12]
  40818a:	4617      	mov	r7, r2
  40818c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  408190:	6a62      	ldr	r2, [r4, #36]	; 0x24
  408192:	f8ad 500e 	strh.w	r5, [sp, #14]
  408196:	4698      	mov	r8, r3
  408198:	ad1a      	add	r5, sp, #104	; 0x68
  40819a:	2300      	movs	r3, #0
  40819c:	9007      	str	r0, [sp, #28]
  40819e:	a816      	add	r0, sp, #88	; 0x58
  4081a0:	9209      	str	r2, [sp, #36]	; 0x24
  4081a2:	9306      	str	r3, [sp, #24]
  4081a4:	9500      	str	r5, [sp, #0]
  4081a6:	9504      	str	r5, [sp, #16]
  4081a8:	9102      	str	r1, [sp, #8]
  4081aa:	9105      	str	r1, [sp, #20]
  4081ac:	f000 fd48 	bl	408c40 <__retarget_lock_init_recursive>
  4081b0:	4643      	mov	r3, r8
  4081b2:	463a      	mov	r2, r7
  4081b4:	4669      	mov	r1, sp
  4081b6:	4630      	mov	r0, r6
  4081b8:	f7ff f990 	bl	4074dc <_vfiprintf_r>
  4081bc:	1e05      	subs	r5, r0, #0
  4081be:	db07      	blt.n	4081d0 <__sbprintf+0x64>
  4081c0:	4630      	mov	r0, r6
  4081c2:	4669      	mov	r1, sp
  4081c4:	f000 f928 	bl	408418 <_fflush_r>
  4081c8:	2800      	cmp	r0, #0
  4081ca:	bf18      	it	ne
  4081cc:	f04f 35ff 	movne.w	r5, #4294967295
  4081d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4081d4:	065b      	lsls	r3, r3, #25
  4081d6:	d503      	bpl.n	4081e0 <__sbprintf+0x74>
  4081d8:	89a3      	ldrh	r3, [r4, #12]
  4081da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4081de:	81a3      	strh	r3, [r4, #12]
  4081e0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4081e2:	f000 fd2f 	bl	408c44 <__retarget_lock_close_recursive>
  4081e6:	4628      	mov	r0, r5
  4081e8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4081ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004081f0 <__swsetup_r>:
  4081f0:	b538      	push	{r3, r4, r5, lr}
  4081f2:	4b30      	ldr	r3, [pc, #192]	; (4082b4 <__swsetup_r+0xc4>)
  4081f4:	681b      	ldr	r3, [r3, #0]
  4081f6:	4605      	mov	r5, r0
  4081f8:	460c      	mov	r4, r1
  4081fa:	b113      	cbz	r3, 408202 <__swsetup_r+0x12>
  4081fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4081fe:	2a00      	cmp	r2, #0
  408200:	d038      	beq.n	408274 <__swsetup_r+0x84>
  408202:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408206:	b293      	uxth	r3, r2
  408208:	0718      	lsls	r0, r3, #28
  40820a:	d50c      	bpl.n	408226 <__swsetup_r+0x36>
  40820c:	6920      	ldr	r0, [r4, #16]
  40820e:	b1a8      	cbz	r0, 40823c <__swsetup_r+0x4c>
  408210:	f013 0201 	ands.w	r2, r3, #1
  408214:	d01e      	beq.n	408254 <__swsetup_r+0x64>
  408216:	6963      	ldr	r3, [r4, #20]
  408218:	2200      	movs	r2, #0
  40821a:	425b      	negs	r3, r3
  40821c:	61a3      	str	r3, [r4, #24]
  40821e:	60a2      	str	r2, [r4, #8]
  408220:	b1f0      	cbz	r0, 408260 <__swsetup_r+0x70>
  408222:	2000      	movs	r0, #0
  408224:	bd38      	pop	{r3, r4, r5, pc}
  408226:	06d9      	lsls	r1, r3, #27
  408228:	d53c      	bpl.n	4082a4 <__swsetup_r+0xb4>
  40822a:	0758      	lsls	r0, r3, #29
  40822c:	d426      	bmi.n	40827c <__swsetup_r+0x8c>
  40822e:	6920      	ldr	r0, [r4, #16]
  408230:	f042 0308 	orr.w	r3, r2, #8
  408234:	81a3      	strh	r3, [r4, #12]
  408236:	b29b      	uxth	r3, r3
  408238:	2800      	cmp	r0, #0
  40823a:	d1e9      	bne.n	408210 <__swsetup_r+0x20>
  40823c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  408240:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  408244:	d0e4      	beq.n	408210 <__swsetup_r+0x20>
  408246:	4628      	mov	r0, r5
  408248:	4621      	mov	r1, r4
  40824a:	f000 fd2f 	bl	408cac <__smakebuf_r>
  40824e:	89a3      	ldrh	r3, [r4, #12]
  408250:	6920      	ldr	r0, [r4, #16]
  408252:	e7dd      	b.n	408210 <__swsetup_r+0x20>
  408254:	0799      	lsls	r1, r3, #30
  408256:	bf58      	it	pl
  408258:	6962      	ldrpl	r2, [r4, #20]
  40825a:	60a2      	str	r2, [r4, #8]
  40825c:	2800      	cmp	r0, #0
  40825e:	d1e0      	bne.n	408222 <__swsetup_r+0x32>
  408260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408264:	061a      	lsls	r2, r3, #24
  408266:	d5dd      	bpl.n	408224 <__swsetup_r+0x34>
  408268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40826c:	81a3      	strh	r3, [r4, #12]
  40826e:	f04f 30ff 	mov.w	r0, #4294967295
  408272:	bd38      	pop	{r3, r4, r5, pc}
  408274:	4618      	mov	r0, r3
  408276:	f000 f927 	bl	4084c8 <__sinit>
  40827a:	e7c2      	b.n	408202 <__swsetup_r+0x12>
  40827c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40827e:	b151      	cbz	r1, 408296 <__swsetup_r+0xa6>
  408280:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408284:	4299      	cmp	r1, r3
  408286:	d004      	beq.n	408292 <__swsetup_r+0xa2>
  408288:	4628      	mov	r0, r5
  40828a:	f000 fa43 	bl	408714 <_free_r>
  40828e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408292:	2300      	movs	r3, #0
  408294:	6323      	str	r3, [r4, #48]	; 0x30
  408296:	2300      	movs	r3, #0
  408298:	6920      	ldr	r0, [r4, #16]
  40829a:	6063      	str	r3, [r4, #4]
  40829c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4082a0:	6020      	str	r0, [r4, #0]
  4082a2:	e7c5      	b.n	408230 <__swsetup_r+0x40>
  4082a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4082a8:	2309      	movs	r3, #9
  4082aa:	602b      	str	r3, [r5, #0]
  4082ac:	f04f 30ff 	mov.w	r0, #4294967295
  4082b0:	81a2      	strh	r2, [r4, #12]
  4082b2:	bd38      	pop	{r3, r4, r5, pc}
  4082b4:	20400028 	.word	0x20400028

004082b8 <register_fini>:
  4082b8:	4b02      	ldr	r3, [pc, #8]	; (4082c4 <register_fini+0xc>)
  4082ba:	b113      	cbz	r3, 4082c2 <register_fini+0xa>
  4082bc:	4802      	ldr	r0, [pc, #8]	; (4082c8 <register_fini+0x10>)
  4082be:	f000 b805 	b.w	4082cc <atexit>
  4082c2:	4770      	bx	lr
  4082c4:	00000000 	.word	0x00000000
  4082c8:	00408539 	.word	0x00408539

004082cc <atexit>:
  4082cc:	2300      	movs	r3, #0
  4082ce:	4601      	mov	r1, r0
  4082d0:	461a      	mov	r2, r3
  4082d2:	4618      	mov	r0, r3
  4082d4:	f001 bb66 	b.w	4099a4 <__register_exitproc>

004082d8 <__sflush_r>:
  4082d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4082dc:	b29a      	uxth	r2, r3
  4082de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4082e2:	460d      	mov	r5, r1
  4082e4:	0711      	lsls	r1, r2, #28
  4082e6:	4680      	mov	r8, r0
  4082e8:	d43a      	bmi.n	408360 <__sflush_r+0x88>
  4082ea:	686a      	ldr	r2, [r5, #4]
  4082ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4082f0:	2a00      	cmp	r2, #0
  4082f2:	81ab      	strh	r3, [r5, #12]
  4082f4:	dd6f      	ble.n	4083d6 <__sflush_r+0xfe>
  4082f6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4082f8:	2c00      	cmp	r4, #0
  4082fa:	d049      	beq.n	408390 <__sflush_r+0xb8>
  4082fc:	2200      	movs	r2, #0
  4082fe:	b29b      	uxth	r3, r3
  408300:	f8d8 6000 	ldr.w	r6, [r8]
  408304:	f8c8 2000 	str.w	r2, [r8]
  408308:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40830c:	d067      	beq.n	4083de <__sflush_r+0x106>
  40830e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  408310:	075f      	lsls	r7, r3, #29
  408312:	d505      	bpl.n	408320 <__sflush_r+0x48>
  408314:	6869      	ldr	r1, [r5, #4]
  408316:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  408318:	1a52      	subs	r2, r2, r1
  40831a:	b10b      	cbz	r3, 408320 <__sflush_r+0x48>
  40831c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40831e:	1ad2      	subs	r2, r2, r3
  408320:	2300      	movs	r3, #0
  408322:	69e9      	ldr	r1, [r5, #28]
  408324:	4640      	mov	r0, r8
  408326:	47a0      	blx	r4
  408328:	1c44      	adds	r4, r0, #1
  40832a:	d03c      	beq.n	4083a6 <__sflush_r+0xce>
  40832c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  408330:	692a      	ldr	r2, [r5, #16]
  408332:	602a      	str	r2, [r5, #0]
  408334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  408338:	2200      	movs	r2, #0
  40833a:	81ab      	strh	r3, [r5, #12]
  40833c:	04db      	lsls	r3, r3, #19
  40833e:	606a      	str	r2, [r5, #4]
  408340:	d447      	bmi.n	4083d2 <__sflush_r+0xfa>
  408342:	6b29      	ldr	r1, [r5, #48]	; 0x30
  408344:	f8c8 6000 	str.w	r6, [r8]
  408348:	b311      	cbz	r1, 408390 <__sflush_r+0xb8>
  40834a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40834e:	4299      	cmp	r1, r3
  408350:	d002      	beq.n	408358 <__sflush_r+0x80>
  408352:	4640      	mov	r0, r8
  408354:	f000 f9de 	bl	408714 <_free_r>
  408358:	2000      	movs	r0, #0
  40835a:	6328      	str	r0, [r5, #48]	; 0x30
  40835c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408360:	692e      	ldr	r6, [r5, #16]
  408362:	b1ae      	cbz	r6, 408390 <__sflush_r+0xb8>
  408364:	682c      	ldr	r4, [r5, #0]
  408366:	602e      	str	r6, [r5, #0]
  408368:	0791      	lsls	r1, r2, #30
  40836a:	bf0c      	ite	eq
  40836c:	696b      	ldreq	r3, [r5, #20]
  40836e:	2300      	movne	r3, #0
  408370:	1ba4      	subs	r4, r4, r6
  408372:	60ab      	str	r3, [r5, #8]
  408374:	e00a      	b.n	40838c <__sflush_r+0xb4>
  408376:	4623      	mov	r3, r4
  408378:	4632      	mov	r2, r6
  40837a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40837c:	69e9      	ldr	r1, [r5, #28]
  40837e:	4640      	mov	r0, r8
  408380:	47b8      	blx	r7
  408382:	2800      	cmp	r0, #0
  408384:	eba4 0400 	sub.w	r4, r4, r0
  408388:	4406      	add	r6, r0
  40838a:	dd04      	ble.n	408396 <__sflush_r+0xbe>
  40838c:	2c00      	cmp	r4, #0
  40838e:	dcf2      	bgt.n	408376 <__sflush_r+0x9e>
  408390:	2000      	movs	r0, #0
  408392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408396:	89ab      	ldrh	r3, [r5, #12]
  408398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40839c:	81ab      	strh	r3, [r5, #12]
  40839e:	f04f 30ff 	mov.w	r0, #4294967295
  4083a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4083a6:	f8d8 4000 	ldr.w	r4, [r8]
  4083aa:	2c1d      	cmp	r4, #29
  4083ac:	d8f3      	bhi.n	408396 <__sflush_r+0xbe>
  4083ae:	4b19      	ldr	r3, [pc, #100]	; (408414 <__sflush_r+0x13c>)
  4083b0:	40e3      	lsrs	r3, r4
  4083b2:	43db      	mvns	r3, r3
  4083b4:	f013 0301 	ands.w	r3, r3, #1
  4083b8:	d1ed      	bne.n	408396 <__sflush_r+0xbe>
  4083ba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4083be:	606b      	str	r3, [r5, #4]
  4083c0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4083c4:	6929      	ldr	r1, [r5, #16]
  4083c6:	81ab      	strh	r3, [r5, #12]
  4083c8:	04da      	lsls	r2, r3, #19
  4083ca:	6029      	str	r1, [r5, #0]
  4083cc:	d5b9      	bpl.n	408342 <__sflush_r+0x6a>
  4083ce:	2c00      	cmp	r4, #0
  4083d0:	d1b7      	bne.n	408342 <__sflush_r+0x6a>
  4083d2:	6528      	str	r0, [r5, #80]	; 0x50
  4083d4:	e7b5      	b.n	408342 <__sflush_r+0x6a>
  4083d6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4083d8:	2a00      	cmp	r2, #0
  4083da:	dc8c      	bgt.n	4082f6 <__sflush_r+0x1e>
  4083dc:	e7d8      	b.n	408390 <__sflush_r+0xb8>
  4083de:	2301      	movs	r3, #1
  4083e0:	69e9      	ldr	r1, [r5, #28]
  4083e2:	4640      	mov	r0, r8
  4083e4:	47a0      	blx	r4
  4083e6:	1c43      	adds	r3, r0, #1
  4083e8:	4602      	mov	r2, r0
  4083ea:	d002      	beq.n	4083f2 <__sflush_r+0x11a>
  4083ec:	89ab      	ldrh	r3, [r5, #12]
  4083ee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4083f0:	e78e      	b.n	408310 <__sflush_r+0x38>
  4083f2:	f8d8 3000 	ldr.w	r3, [r8]
  4083f6:	2b00      	cmp	r3, #0
  4083f8:	d0f8      	beq.n	4083ec <__sflush_r+0x114>
  4083fa:	2b1d      	cmp	r3, #29
  4083fc:	d001      	beq.n	408402 <__sflush_r+0x12a>
  4083fe:	2b16      	cmp	r3, #22
  408400:	d102      	bne.n	408408 <__sflush_r+0x130>
  408402:	f8c8 6000 	str.w	r6, [r8]
  408406:	e7c3      	b.n	408390 <__sflush_r+0xb8>
  408408:	89ab      	ldrh	r3, [r5, #12]
  40840a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40840e:	81ab      	strh	r3, [r5, #12]
  408410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408414:	20400001 	.word	0x20400001

00408418 <_fflush_r>:
  408418:	b538      	push	{r3, r4, r5, lr}
  40841a:	460d      	mov	r5, r1
  40841c:	4604      	mov	r4, r0
  40841e:	b108      	cbz	r0, 408424 <_fflush_r+0xc>
  408420:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408422:	b1bb      	cbz	r3, 408454 <_fflush_r+0x3c>
  408424:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  408428:	b188      	cbz	r0, 40844e <_fflush_r+0x36>
  40842a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40842c:	07db      	lsls	r3, r3, #31
  40842e:	d401      	bmi.n	408434 <_fflush_r+0x1c>
  408430:	0581      	lsls	r1, r0, #22
  408432:	d517      	bpl.n	408464 <_fflush_r+0x4c>
  408434:	4620      	mov	r0, r4
  408436:	4629      	mov	r1, r5
  408438:	f7ff ff4e 	bl	4082d8 <__sflush_r>
  40843c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40843e:	07da      	lsls	r2, r3, #31
  408440:	4604      	mov	r4, r0
  408442:	d402      	bmi.n	40844a <_fflush_r+0x32>
  408444:	89ab      	ldrh	r3, [r5, #12]
  408446:	059b      	lsls	r3, r3, #22
  408448:	d507      	bpl.n	40845a <_fflush_r+0x42>
  40844a:	4620      	mov	r0, r4
  40844c:	bd38      	pop	{r3, r4, r5, pc}
  40844e:	4604      	mov	r4, r0
  408450:	4620      	mov	r0, r4
  408452:	bd38      	pop	{r3, r4, r5, pc}
  408454:	f000 f838 	bl	4084c8 <__sinit>
  408458:	e7e4      	b.n	408424 <_fflush_r+0xc>
  40845a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40845c:	f000 fbf6 	bl	408c4c <__retarget_lock_release_recursive>
  408460:	4620      	mov	r0, r4
  408462:	bd38      	pop	{r3, r4, r5, pc}
  408464:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408466:	f000 fbef 	bl	408c48 <__retarget_lock_acquire_recursive>
  40846a:	e7e3      	b.n	408434 <_fflush_r+0x1c>

0040846c <_cleanup_r>:
  40846c:	4901      	ldr	r1, [pc, #4]	; (408474 <_cleanup_r+0x8>)
  40846e:	f000 bbaf 	b.w	408bd0 <_fwalk_reent>
  408472:	bf00      	nop
  408474:	00409a8d 	.word	0x00409a8d

00408478 <std.isra.0>:
  408478:	b510      	push	{r4, lr}
  40847a:	2300      	movs	r3, #0
  40847c:	4604      	mov	r4, r0
  40847e:	8181      	strh	r1, [r0, #12]
  408480:	81c2      	strh	r2, [r0, #14]
  408482:	6003      	str	r3, [r0, #0]
  408484:	6043      	str	r3, [r0, #4]
  408486:	6083      	str	r3, [r0, #8]
  408488:	6643      	str	r3, [r0, #100]	; 0x64
  40848a:	6103      	str	r3, [r0, #16]
  40848c:	6143      	str	r3, [r0, #20]
  40848e:	6183      	str	r3, [r0, #24]
  408490:	4619      	mov	r1, r3
  408492:	2208      	movs	r2, #8
  408494:	305c      	adds	r0, #92	; 0x5c
  408496:	f7fe fe55 	bl	407144 <memset>
  40849a:	4807      	ldr	r0, [pc, #28]	; (4084b8 <std.isra.0+0x40>)
  40849c:	4907      	ldr	r1, [pc, #28]	; (4084bc <std.isra.0+0x44>)
  40849e:	4a08      	ldr	r2, [pc, #32]	; (4084c0 <std.isra.0+0x48>)
  4084a0:	4b08      	ldr	r3, [pc, #32]	; (4084c4 <std.isra.0+0x4c>)
  4084a2:	6220      	str	r0, [r4, #32]
  4084a4:	61e4      	str	r4, [r4, #28]
  4084a6:	6261      	str	r1, [r4, #36]	; 0x24
  4084a8:	62a2      	str	r2, [r4, #40]	; 0x28
  4084aa:	62e3      	str	r3, [r4, #44]	; 0x2c
  4084ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4084b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4084b4:	f000 bbc4 	b.w	408c40 <__retarget_lock_init_recursive>
  4084b8:	004097d1 	.word	0x004097d1
  4084bc:	004097f5 	.word	0x004097f5
  4084c0:	00409831 	.word	0x00409831
  4084c4:	00409851 	.word	0x00409851

004084c8 <__sinit>:
  4084c8:	b510      	push	{r4, lr}
  4084ca:	4604      	mov	r4, r0
  4084cc:	4812      	ldr	r0, [pc, #72]	; (408518 <__sinit+0x50>)
  4084ce:	f000 fbbb 	bl	408c48 <__retarget_lock_acquire_recursive>
  4084d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4084d4:	b9d2      	cbnz	r2, 40850c <__sinit+0x44>
  4084d6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4084da:	4810      	ldr	r0, [pc, #64]	; (40851c <__sinit+0x54>)
  4084dc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4084e0:	2103      	movs	r1, #3
  4084e2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4084e6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4084e8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4084ec:	6860      	ldr	r0, [r4, #4]
  4084ee:	2104      	movs	r1, #4
  4084f0:	f7ff ffc2 	bl	408478 <std.isra.0>
  4084f4:	2201      	movs	r2, #1
  4084f6:	2109      	movs	r1, #9
  4084f8:	68a0      	ldr	r0, [r4, #8]
  4084fa:	f7ff ffbd 	bl	408478 <std.isra.0>
  4084fe:	2202      	movs	r2, #2
  408500:	2112      	movs	r1, #18
  408502:	68e0      	ldr	r0, [r4, #12]
  408504:	f7ff ffb8 	bl	408478 <std.isra.0>
  408508:	2301      	movs	r3, #1
  40850a:	63a3      	str	r3, [r4, #56]	; 0x38
  40850c:	4802      	ldr	r0, [pc, #8]	; (408518 <__sinit+0x50>)
  40850e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408512:	f000 bb9b 	b.w	408c4c <__retarget_lock_release_recursive>
  408516:	bf00      	nop
  408518:	2040c654 	.word	0x2040c654
  40851c:	0040846d 	.word	0x0040846d

00408520 <__sfp_lock_acquire>:
  408520:	4801      	ldr	r0, [pc, #4]	; (408528 <__sfp_lock_acquire+0x8>)
  408522:	f000 bb91 	b.w	408c48 <__retarget_lock_acquire_recursive>
  408526:	bf00      	nop
  408528:	2040c668 	.word	0x2040c668

0040852c <__sfp_lock_release>:
  40852c:	4801      	ldr	r0, [pc, #4]	; (408534 <__sfp_lock_release+0x8>)
  40852e:	f000 bb8d 	b.w	408c4c <__retarget_lock_release_recursive>
  408532:	bf00      	nop
  408534:	2040c668 	.word	0x2040c668

00408538 <__libc_fini_array>:
  408538:	b538      	push	{r3, r4, r5, lr}
  40853a:	4c0a      	ldr	r4, [pc, #40]	; (408564 <__libc_fini_array+0x2c>)
  40853c:	4d0a      	ldr	r5, [pc, #40]	; (408568 <__libc_fini_array+0x30>)
  40853e:	1b64      	subs	r4, r4, r5
  408540:	10a4      	asrs	r4, r4, #2
  408542:	d00a      	beq.n	40855a <__libc_fini_array+0x22>
  408544:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  408548:	3b01      	subs	r3, #1
  40854a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40854e:	3c01      	subs	r4, #1
  408550:	f855 3904 	ldr.w	r3, [r5], #-4
  408554:	4798      	blx	r3
  408556:	2c00      	cmp	r4, #0
  408558:	d1f9      	bne.n	40854e <__libc_fini_array+0x16>
  40855a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40855e:	f002 b98d 	b.w	40a87c <_fini>
  408562:	bf00      	nop
  408564:	0040a88c 	.word	0x0040a88c
  408568:	0040a888 	.word	0x0040a888

0040856c <__fputwc>:
  40856c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408570:	b082      	sub	sp, #8
  408572:	4680      	mov	r8, r0
  408574:	4689      	mov	r9, r1
  408576:	4614      	mov	r4, r2
  408578:	f000 fb54 	bl	408c24 <__locale_mb_cur_max>
  40857c:	2801      	cmp	r0, #1
  40857e:	d036      	beq.n	4085ee <__fputwc+0x82>
  408580:	464a      	mov	r2, r9
  408582:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  408586:	a901      	add	r1, sp, #4
  408588:	4640      	mov	r0, r8
  40858a:	f001 f9bd 	bl	409908 <_wcrtomb_r>
  40858e:	1c42      	adds	r2, r0, #1
  408590:	4606      	mov	r6, r0
  408592:	d025      	beq.n	4085e0 <__fputwc+0x74>
  408594:	b3a8      	cbz	r0, 408602 <__fputwc+0x96>
  408596:	f89d e004 	ldrb.w	lr, [sp, #4]
  40859a:	2500      	movs	r5, #0
  40859c:	f10d 0a04 	add.w	sl, sp, #4
  4085a0:	e009      	b.n	4085b6 <__fputwc+0x4a>
  4085a2:	6823      	ldr	r3, [r4, #0]
  4085a4:	1c5a      	adds	r2, r3, #1
  4085a6:	6022      	str	r2, [r4, #0]
  4085a8:	f883 e000 	strb.w	lr, [r3]
  4085ac:	3501      	adds	r5, #1
  4085ae:	42b5      	cmp	r5, r6
  4085b0:	d227      	bcs.n	408602 <__fputwc+0x96>
  4085b2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4085b6:	68a3      	ldr	r3, [r4, #8]
  4085b8:	3b01      	subs	r3, #1
  4085ba:	2b00      	cmp	r3, #0
  4085bc:	60a3      	str	r3, [r4, #8]
  4085be:	daf0      	bge.n	4085a2 <__fputwc+0x36>
  4085c0:	69a7      	ldr	r7, [r4, #24]
  4085c2:	42bb      	cmp	r3, r7
  4085c4:	4671      	mov	r1, lr
  4085c6:	4622      	mov	r2, r4
  4085c8:	4640      	mov	r0, r8
  4085ca:	db02      	blt.n	4085d2 <__fputwc+0x66>
  4085cc:	f1be 0f0a 	cmp.w	lr, #10
  4085d0:	d1e7      	bne.n	4085a2 <__fputwc+0x36>
  4085d2:	f001 f941 	bl	409858 <__swbuf_r>
  4085d6:	1c43      	adds	r3, r0, #1
  4085d8:	d1e8      	bne.n	4085ac <__fputwc+0x40>
  4085da:	b002      	add	sp, #8
  4085dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4085e0:	89a3      	ldrh	r3, [r4, #12]
  4085e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4085e6:	81a3      	strh	r3, [r4, #12]
  4085e8:	b002      	add	sp, #8
  4085ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4085ee:	f109 33ff 	add.w	r3, r9, #4294967295
  4085f2:	2bfe      	cmp	r3, #254	; 0xfe
  4085f4:	d8c4      	bhi.n	408580 <__fputwc+0x14>
  4085f6:	fa5f fe89 	uxtb.w	lr, r9
  4085fa:	4606      	mov	r6, r0
  4085fc:	f88d e004 	strb.w	lr, [sp, #4]
  408600:	e7cb      	b.n	40859a <__fputwc+0x2e>
  408602:	4648      	mov	r0, r9
  408604:	b002      	add	sp, #8
  408606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40860a:	bf00      	nop

0040860c <_fputwc_r>:
  40860c:	b530      	push	{r4, r5, lr}
  40860e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  408610:	f013 0f01 	tst.w	r3, #1
  408614:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  408618:	4614      	mov	r4, r2
  40861a:	b083      	sub	sp, #12
  40861c:	4605      	mov	r5, r0
  40861e:	b29a      	uxth	r2, r3
  408620:	d101      	bne.n	408626 <_fputwc_r+0x1a>
  408622:	0590      	lsls	r0, r2, #22
  408624:	d51c      	bpl.n	408660 <_fputwc_r+0x54>
  408626:	0490      	lsls	r0, r2, #18
  408628:	d406      	bmi.n	408638 <_fputwc_r+0x2c>
  40862a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40862c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  408630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408634:	81a3      	strh	r3, [r4, #12]
  408636:	6662      	str	r2, [r4, #100]	; 0x64
  408638:	4628      	mov	r0, r5
  40863a:	4622      	mov	r2, r4
  40863c:	f7ff ff96 	bl	40856c <__fputwc>
  408640:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408642:	07da      	lsls	r2, r3, #31
  408644:	4605      	mov	r5, r0
  408646:	d402      	bmi.n	40864e <_fputwc_r+0x42>
  408648:	89a3      	ldrh	r3, [r4, #12]
  40864a:	059b      	lsls	r3, r3, #22
  40864c:	d502      	bpl.n	408654 <_fputwc_r+0x48>
  40864e:	4628      	mov	r0, r5
  408650:	b003      	add	sp, #12
  408652:	bd30      	pop	{r4, r5, pc}
  408654:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408656:	f000 faf9 	bl	408c4c <__retarget_lock_release_recursive>
  40865a:	4628      	mov	r0, r5
  40865c:	b003      	add	sp, #12
  40865e:	bd30      	pop	{r4, r5, pc}
  408660:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408662:	9101      	str	r1, [sp, #4]
  408664:	f000 faf0 	bl	408c48 <__retarget_lock_acquire_recursive>
  408668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40866c:	9901      	ldr	r1, [sp, #4]
  40866e:	b29a      	uxth	r2, r3
  408670:	e7d9      	b.n	408626 <_fputwc_r+0x1a>
  408672:	bf00      	nop

00408674 <_malloc_trim_r>:
  408674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408676:	4f24      	ldr	r7, [pc, #144]	; (408708 <_malloc_trim_r+0x94>)
  408678:	460c      	mov	r4, r1
  40867a:	4606      	mov	r6, r0
  40867c:	f000 fee4 	bl	409448 <__malloc_lock>
  408680:	68bb      	ldr	r3, [r7, #8]
  408682:	685d      	ldr	r5, [r3, #4]
  408684:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  408688:	310f      	adds	r1, #15
  40868a:	f025 0503 	bic.w	r5, r5, #3
  40868e:	4429      	add	r1, r5
  408690:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  408694:	f021 010f 	bic.w	r1, r1, #15
  408698:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40869c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4086a0:	db07      	blt.n	4086b2 <_malloc_trim_r+0x3e>
  4086a2:	2100      	movs	r1, #0
  4086a4:	4630      	mov	r0, r6
  4086a6:	f001 f881 	bl	4097ac <_sbrk_r>
  4086aa:	68bb      	ldr	r3, [r7, #8]
  4086ac:	442b      	add	r3, r5
  4086ae:	4298      	cmp	r0, r3
  4086b0:	d004      	beq.n	4086bc <_malloc_trim_r+0x48>
  4086b2:	4630      	mov	r0, r6
  4086b4:	f000 fece 	bl	409454 <__malloc_unlock>
  4086b8:	2000      	movs	r0, #0
  4086ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4086bc:	4261      	negs	r1, r4
  4086be:	4630      	mov	r0, r6
  4086c0:	f001 f874 	bl	4097ac <_sbrk_r>
  4086c4:	3001      	adds	r0, #1
  4086c6:	d00d      	beq.n	4086e4 <_malloc_trim_r+0x70>
  4086c8:	4b10      	ldr	r3, [pc, #64]	; (40870c <_malloc_trim_r+0x98>)
  4086ca:	68ba      	ldr	r2, [r7, #8]
  4086cc:	6819      	ldr	r1, [r3, #0]
  4086ce:	1b2d      	subs	r5, r5, r4
  4086d0:	f045 0501 	orr.w	r5, r5, #1
  4086d4:	4630      	mov	r0, r6
  4086d6:	1b09      	subs	r1, r1, r4
  4086d8:	6055      	str	r5, [r2, #4]
  4086da:	6019      	str	r1, [r3, #0]
  4086dc:	f000 feba 	bl	409454 <__malloc_unlock>
  4086e0:	2001      	movs	r0, #1
  4086e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4086e4:	2100      	movs	r1, #0
  4086e6:	4630      	mov	r0, r6
  4086e8:	f001 f860 	bl	4097ac <_sbrk_r>
  4086ec:	68ba      	ldr	r2, [r7, #8]
  4086ee:	1a83      	subs	r3, r0, r2
  4086f0:	2b0f      	cmp	r3, #15
  4086f2:	ddde      	ble.n	4086b2 <_malloc_trim_r+0x3e>
  4086f4:	4c06      	ldr	r4, [pc, #24]	; (408710 <_malloc_trim_r+0x9c>)
  4086f6:	4905      	ldr	r1, [pc, #20]	; (40870c <_malloc_trim_r+0x98>)
  4086f8:	6824      	ldr	r4, [r4, #0]
  4086fa:	f043 0301 	orr.w	r3, r3, #1
  4086fe:	1b00      	subs	r0, r0, r4
  408700:	6053      	str	r3, [r2, #4]
  408702:	6008      	str	r0, [r1, #0]
  408704:	e7d5      	b.n	4086b2 <_malloc_trim_r+0x3e>
  408706:	bf00      	nop
  408708:	204005c8 	.word	0x204005c8
  40870c:	2040c5c0 	.word	0x2040c5c0
  408710:	204009d0 	.word	0x204009d0

00408714 <_free_r>:
  408714:	2900      	cmp	r1, #0
  408716:	d044      	beq.n	4087a2 <_free_r+0x8e>
  408718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40871c:	460d      	mov	r5, r1
  40871e:	4680      	mov	r8, r0
  408720:	f000 fe92 	bl	409448 <__malloc_lock>
  408724:	f855 7c04 	ldr.w	r7, [r5, #-4]
  408728:	4969      	ldr	r1, [pc, #420]	; (4088d0 <_free_r+0x1bc>)
  40872a:	f027 0301 	bic.w	r3, r7, #1
  40872e:	f1a5 0408 	sub.w	r4, r5, #8
  408732:	18e2      	adds	r2, r4, r3
  408734:	688e      	ldr	r6, [r1, #8]
  408736:	6850      	ldr	r0, [r2, #4]
  408738:	42b2      	cmp	r2, r6
  40873a:	f020 0003 	bic.w	r0, r0, #3
  40873e:	d05e      	beq.n	4087fe <_free_r+0xea>
  408740:	07fe      	lsls	r6, r7, #31
  408742:	6050      	str	r0, [r2, #4]
  408744:	d40b      	bmi.n	40875e <_free_r+0x4a>
  408746:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40874a:	1be4      	subs	r4, r4, r7
  40874c:	f101 0e08 	add.w	lr, r1, #8
  408750:	68a5      	ldr	r5, [r4, #8]
  408752:	4575      	cmp	r5, lr
  408754:	443b      	add	r3, r7
  408756:	d06d      	beq.n	408834 <_free_r+0x120>
  408758:	68e7      	ldr	r7, [r4, #12]
  40875a:	60ef      	str	r7, [r5, #12]
  40875c:	60bd      	str	r5, [r7, #8]
  40875e:	1815      	adds	r5, r2, r0
  408760:	686d      	ldr	r5, [r5, #4]
  408762:	07ed      	lsls	r5, r5, #31
  408764:	d53e      	bpl.n	4087e4 <_free_r+0xd0>
  408766:	f043 0201 	orr.w	r2, r3, #1
  40876a:	6062      	str	r2, [r4, #4]
  40876c:	50e3      	str	r3, [r4, r3]
  40876e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408772:	d217      	bcs.n	4087a4 <_free_r+0x90>
  408774:	08db      	lsrs	r3, r3, #3
  408776:	1c58      	adds	r0, r3, #1
  408778:	109a      	asrs	r2, r3, #2
  40877a:	684d      	ldr	r5, [r1, #4]
  40877c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  408780:	60a7      	str	r7, [r4, #8]
  408782:	2301      	movs	r3, #1
  408784:	4093      	lsls	r3, r2
  408786:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40878a:	432b      	orrs	r3, r5
  40878c:	3a08      	subs	r2, #8
  40878e:	60e2      	str	r2, [r4, #12]
  408790:	604b      	str	r3, [r1, #4]
  408792:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  408796:	60fc      	str	r4, [r7, #12]
  408798:	4640      	mov	r0, r8
  40879a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40879e:	f000 be59 	b.w	409454 <__malloc_unlock>
  4087a2:	4770      	bx	lr
  4087a4:	0a5a      	lsrs	r2, r3, #9
  4087a6:	2a04      	cmp	r2, #4
  4087a8:	d852      	bhi.n	408850 <_free_r+0x13c>
  4087aa:	099a      	lsrs	r2, r3, #6
  4087ac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4087b0:	00ff      	lsls	r7, r7, #3
  4087b2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4087b6:	19c8      	adds	r0, r1, r7
  4087b8:	59ca      	ldr	r2, [r1, r7]
  4087ba:	3808      	subs	r0, #8
  4087bc:	4290      	cmp	r0, r2
  4087be:	d04f      	beq.n	408860 <_free_r+0x14c>
  4087c0:	6851      	ldr	r1, [r2, #4]
  4087c2:	f021 0103 	bic.w	r1, r1, #3
  4087c6:	428b      	cmp	r3, r1
  4087c8:	d232      	bcs.n	408830 <_free_r+0x11c>
  4087ca:	6892      	ldr	r2, [r2, #8]
  4087cc:	4290      	cmp	r0, r2
  4087ce:	d1f7      	bne.n	4087c0 <_free_r+0xac>
  4087d0:	68c3      	ldr	r3, [r0, #12]
  4087d2:	60a0      	str	r0, [r4, #8]
  4087d4:	60e3      	str	r3, [r4, #12]
  4087d6:	609c      	str	r4, [r3, #8]
  4087d8:	60c4      	str	r4, [r0, #12]
  4087da:	4640      	mov	r0, r8
  4087dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4087e0:	f000 be38 	b.w	409454 <__malloc_unlock>
  4087e4:	6895      	ldr	r5, [r2, #8]
  4087e6:	4f3b      	ldr	r7, [pc, #236]	; (4088d4 <_free_r+0x1c0>)
  4087e8:	42bd      	cmp	r5, r7
  4087ea:	4403      	add	r3, r0
  4087ec:	d040      	beq.n	408870 <_free_r+0x15c>
  4087ee:	68d0      	ldr	r0, [r2, #12]
  4087f0:	60e8      	str	r0, [r5, #12]
  4087f2:	f043 0201 	orr.w	r2, r3, #1
  4087f6:	6085      	str	r5, [r0, #8]
  4087f8:	6062      	str	r2, [r4, #4]
  4087fa:	50e3      	str	r3, [r4, r3]
  4087fc:	e7b7      	b.n	40876e <_free_r+0x5a>
  4087fe:	07ff      	lsls	r7, r7, #31
  408800:	4403      	add	r3, r0
  408802:	d407      	bmi.n	408814 <_free_r+0x100>
  408804:	f855 2c08 	ldr.w	r2, [r5, #-8]
  408808:	1aa4      	subs	r4, r4, r2
  40880a:	4413      	add	r3, r2
  40880c:	68a0      	ldr	r0, [r4, #8]
  40880e:	68e2      	ldr	r2, [r4, #12]
  408810:	60c2      	str	r2, [r0, #12]
  408812:	6090      	str	r0, [r2, #8]
  408814:	4a30      	ldr	r2, [pc, #192]	; (4088d8 <_free_r+0x1c4>)
  408816:	6812      	ldr	r2, [r2, #0]
  408818:	f043 0001 	orr.w	r0, r3, #1
  40881c:	4293      	cmp	r3, r2
  40881e:	6060      	str	r0, [r4, #4]
  408820:	608c      	str	r4, [r1, #8]
  408822:	d3b9      	bcc.n	408798 <_free_r+0x84>
  408824:	4b2d      	ldr	r3, [pc, #180]	; (4088dc <_free_r+0x1c8>)
  408826:	4640      	mov	r0, r8
  408828:	6819      	ldr	r1, [r3, #0]
  40882a:	f7ff ff23 	bl	408674 <_malloc_trim_r>
  40882e:	e7b3      	b.n	408798 <_free_r+0x84>
  408830:	4610      	mov	r0, r2
  408832:	e7cd      	b.n	4087d0 <_free_r+0xbc>
  408834:	1811      	adds	r1, r2, r0
  408836:	6849      	ldr	r1, [r1, #4]
  408838:	07c9      	lsls	r1, r1, #31
  40883a:	d444      	bmi.n	4088c6 <_free_r+0x1b2>
  40883c:	6891      	ldr	r1, [r2, #8]
  40883e:	68d2      	ldr	r2, [r2, #12]
  408840:	60ca      	str	r2, [r1, #12]
  408842:	4403      	add	r3, r0
  408844:	f043 0001 	orr.w	r0, r3, #1
  408848:	6091      	str	r1, [r2, #8]
  40884a:	6060      	str	r0, [r4, #4]
  40884c:	50e3      	str	r3, [r4, r3]
  40884e:	e7a3      	b.n	408798 <_free_r+0x84>
  408850:	2a14      	cmp	r2, #20
  408852:	d816      	bhi.n	408882 <_free_r+0x16e>
  408854:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  408858:	00ff      	lsls	r7, r7, #3
  40885a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40885e:	e7aa      	b.n	4087b6 <_free_r+0xa2>
  408860:	10aa      	asrs	r2, r5, #2
  408862:	2301      	movs	r3, #1
  408864:	684d      	ldr	r5, [r1, #4]
  408866:	4093      	lsls	r3, r2
  408868:	432b      	orrs	r3, r5
  40886a:	604b      	str	r3, [r1, #4]
  40886c:	4603      	mov	r3, r0
  40886e:	e7b0      	b.n	4087d2 <_free_r+0xbe>
  408870:	f043 0201 	orr.w	r2, r3, #1
  408874:	614c      	str	r4, [r1, #20]
  408876:	610c      	str	r4, [r1, #16]
  408878:	60e5      	str	r5, [r4, #12]
  40887a:	60a5      	str	r5, [r4, #8]
  40887c:	6062      	str	r2, [r4, #4]
  40887e:	50e3      	str	r3, [r4, r3]
  408880:	e78a      	b.n	408798 <_free_r+0x84>
  408882:	2a54      	cmp	r2, #84	; 0x54
  408884:	d806      	bhi.n	408894 <_free_r+0x180>
  408886:	0b1a      	lsrs	r2, r3, #12
  408888:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40888c:	00ff      	lsls	r7, r7, #3
  40888e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  408892:	e790      	b.n	4087b6 <_free_r+0xa2>
  408894:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408898:	d806      	bhi.n	4088a8 <_free_r+0x194>
  40889a:	0bda      	lsrs	r2, r3, #15
  40889c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4088a0:	00ff      	lsls	r7, r7, #3
  4088a2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4088a6:	e786      	b.n	4087b6 <_free_r+0xa2>
  4088a8:	f240 5054 	movw	r0, #1364	; 0x554
  4088ac:	4282      	cmp	r2, r0
  4088ae:	d806      	bhi.n	4088be <_free_r+0x1aa>
  4088b0:	0c9a      	lsrs	r2, r3, #18
  4088b2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4088b6:	00ff      	lsls	r7, r7, #3
  4088b8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4088bc:	e77b      	b.n	4087b6 <_free_r+0xa2>
  4088be:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4088c2:	257e      	movs	r5, #126	; 0x7e
  4088c4:	e777      	b.n	4087b6 <_free_r+0xa2>
  4088c6:	f043 0101 	orr.w	r1, r3, #1
  4088ca:	6061      	str	r1, [r4, #4]
  4088cc:	6013      	str	r3, [r2, #0]
  4088ce:	e763      	b.n	408798 <_free_r+0x84>
  4088d0:	204005c8 	.word	0x204005c8
  4088d4:	204005d0 	.word	0x204005d0
  4088d8:	204009d4 	.word	0x204009d4
  4088dc:	2040c5f0 	.word	0x2040c5f0

004088e0 <__sfvwrite_r>:
  4088e0:	6893      	ldr	r3, [r2, #8]
  4088e2:	2b00      	cmp	r3, #0
  4088e4:	d073      	beq.n	4089ce <__sfvwrite_r+0xee>
  4088e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4088ea:	898b      	ldrh	r3, [r1, #12]
  4088ec:	b083      	sub	sp, #12
  4088ee:	460c      	mov	r4, r1
  4088f0:	0719      	lsls	r1, r3, #28
  4088f2:	9000      	str	r0, [sp, #0]
  4088f4:	4616      	mov	r6, r2
  4088f6:	d526      	bpl.n	408946 <__sfvwrite_r+0x66>
  4088f8:	6922      	ldr	r2, [r4, #16]
  4088fa:	b322      	cbz	r2, 408946 <__sfvwrite_r+0x66>
  4088fc:	f013 0002 	ands.w	r0, r3, #2
  408900:	6835      	ldr	r5, [r6, #0]
  408902:	d02c      	beq.n	40895e <__sfvwrite_r+0x7e>
  408904:	f04f 0900 	mov.w	r9, #0
  408908:	4fb0      	ldr	r7, [pc, #704]	; (408bcc <__sfvwrite_r+0x2ec>)
  40890a:	46c8      	mov	r8, r9
  40890c:	46b2      	mov	sl, r6
  40890e:	45b8      	cmp	r8, r7
  408910:	4643      	mov	r3, r8
  408912:	464a      	mov	r2, r9
  408914:	bf28      	it	cs
  408916:	463b      	movcs	r3, r7
  408918:	9800      	ldr	r0, [sp, #0]
  40891a:	f1b8 0f00 	cmp.w	r8, #0
  40891e:	d050      	beq.n	4089c2 <__sfvwrite_r+0xe2>
  408920:	69e1      	ldr	r1, [r4, #28]
  408922:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408924:	47b0      	blx	r6
  408926:	2800      	cmp	r0, #0
  408928:	dd58      	ble.n	4089dc <__sfvwrite_r+0xfc>
  40892a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40892e:	1a1b      	subs	r3, r3, r0
  408930:	4481      	add	r9, r0
  408932:	eba8 0800 	sub.w	r8, r8, r0
  408936:	f8ca 3008 	str.w	r3, [sl, #8]
  40893a:	2b00      	cmp	r3, #0
  40893c:	d1e7      	bne.n	40890e <__sfvwrite_r+0x2e>
  40893e:	2000      	movs	r0, #0
  408940:	b003      	add	sp, #12
  408942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408946:	4621      	mov	r1, r4
  408948:	9800      	ldr	r0, [sp, #0]
  40894a:	f7ff fc51 	bl	4081f0 <__swsetup_r>
  40894e:	2800      	cmp	r0, #0
  408950:	f040 8133 	bne.w	408bba <__sfvwrite_r+0x2da>
  408954:	89a3      	ldrh	r3, [r4, #12]
  408956:	6835      	ldr	r5, [r6, #0]
  408958:	f013 0002 	ands.w	r0, r3, #2
  40895c:	d1d2      	bne.n	408904 <__sfvwrite_r+0x24>
  40895e:	f013 0901 	ands.w	r9, r3, #1
  408962:	d145      	bne.n	4089f0 <__sfvwrite_r+0x110>
  408964:	464f      	mov	r7, r9
  408966:	9601      	str	r6, [sp, #4]
  408968:	b337      	cbz	r7, 4089b8 <__sfvwrite_r+0xd8>
  40896a:	059a      	lsls	r2, r3, #22
  40896c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  408970:	f140 8083 	bpl.w	408a7a <__sfvwrite_r+0x19a>
  408974:	4547      	cmp	r7, r8
  408976:	46c3      	mov	fp, r8
  408978:	f0c0 80ab 	bcc.w	408ad2 <__sfvwrite_r+0x1f2>
  40897c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408980:	f040 80ac 	bne.w	408adc <__sfvwrite_r+0x1fc>
  408984:	6820      	ldr	r0, [r4, #0]
  408986:	46ba      	mov	sl, r7
  408988:	465a      	mov	r2, fp
  40898a:	4649      	mov	r1, r9
  40898c:	f000 fcf8 	bl	409380 <memmove>
  408990:	68a2      	ldr	r2, [r4, #8]
  408992:	6823      	ldr	r3, [r4, #0]
  408994:	eba2 0208 	sub.w	r2, r2, r8
  408998:	445b      	add	r3, fp
  40899a:	60a2      	str	r2, [r4, #8]
  40899c:	6023      	str	r3, [r4, #0]
  40899e:	9a01      	ldr	r2, [sp, #4]
  4089a0:	6893      	ldr	r3, [r2, #8]
  4089a2:	eba3 030a 	sub.w	r3, r3, sl
  4089a6:	44d1      	add	r9, sl
  4089a8:	eba7 070a 	sub.w	r7, r7, sl
  4089ac:	6093      	str	r3, [r2, #8]
  4089ae:	2b00      	cmp	r3, #0
  4089b0:	d0c5      	beq.n	40893e <__sfvwrite_r+0x5e>
  4089b2:	89a3      	ldrh	r3, [r4, #12]
  4089b4:	2f00      	cmp	r7, #0
  4089b6:	d1d8      	bne.n	40896a <__sfvwrite_r+0x8a>
  4089b8:	f8d5 9000 	ldr.w	r9, [r5]
  4089bc:	686f      	ldr	r7, [r5, #4]
  4089be:	3508      	adds	r5, #8
  4089c0:	e7d2      	b.n	408968 <__sfvwrite_r+0x88>
  4089c2:	f8d5 9000 	ldr.w	r9, [r5]
  4089c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4089ca:	3508      	adds	r5, #8
  4089cc:	e79f      	b.n	40890e <__sfvwrite_r+0x2e>
  4089ce:	2000      	movs	r0, #0
  4089d0:	4770      	bx	lr
  4089d2:	4621      	mov	r1, r4
  4089d4:	9800      	ldr	r0, [sp, #0]
  4089d6:	f7ff fd1f 	bl	408418 <_fflush_r>
  4089da:	b370      	cbz	r0, 408a3a <__sfvwrite_r+0x15a>
  4089dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4089e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4089e4:	f04f 30ff 	mov.w	r0, #4294967295
  4089e8:	81a3      	strh	r3, [r4, #12]
  4089ea:	b003      	add	sp, #12
  4089ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4089f0:	4681      	mov	r9, r0
  4089f2:	4633      	mov	r3, r6
  4089f4:	464e      	mov	r6, r9
  4089f6:	46a8      	mov	r8, r5
  4089f8:	469a      	mov	sl, r3
  4089fa:	464d      	mov	r5, r9
  4089fc:	b34e      	cbz	r6, 408a52 <__sfvwrite_r+0x172>
  4089fe:	b380      	cbz	r0, 408a62 <__sfvwrite_r+0x182>
  408a00:	6820      	ldr	r0, [r4, #0]
  408a02:	6923      	ldr	r3, [r4, #16]
  408a04:	6962      	ldr	r2, [r4, #20]
  408a06:	45b1      	cmp	r9, r6
  408a08:	46cb      	mov	fp, r9
  408a0a:	bf28      	it	cs
  408a0c:	46b3      	movcs	fp, r6
  408a0e:	4298      	cmp	r0, r3
  408a10:	465f      	mov	r7, fp
  408a12:	d904      	bls.n	408a1e <__sfvwrite_r+0x13e>
  408a14:	68a3      	ldr	r3, [r4, #8]
  408a16:	4413      	add	r3, r2
  408a18:	459b      	cmp	fp, r3
  408a1a:	f300 80a6 	bgt.w	408b6a <__sfvwrite_r+0x28a>
  408a1e:	4593      	cmp	fp, r2
  408a20:	db4b      	blt.n	408aba <__sfvwrite_r+0x1da>
  408a22:	4613      	mov	r3, r2
  408a24:	6a67      	ldr	r7, [r4, #36]	; 0x24
  408a26:	69e1      	ldr	r1, [r4, #28]
  408a28:	9800      	ldr	r0, [sp, #0]
  408a2a:	462a      	mov	r2, r5
  408a2c:	47b8      	blx	r7
  408a2e:	1e07      	subs	r7, r0, #0
  408a30:	ddd4      	ble.n	4089dc <__sfvwrite_r+0xfc>
  408a32:	ebb9 0907 	subs.w	r9, r9, r7
  408a36:	d0cc      	beq.n	4089d2 <__sfvwrite_r+0xf2>
  408a38:	2001      	movs	r0, #1
  408a3a:	f8da 3008 	ldr.w	r3, [sl, #8]
  408a3e:	1bdb      	subs	r3, r3, r7
  408a40:	443d      	add	r5, r7
  408a42:	1bf6      	subs	r6, r6, r7
  408a44:	f8ca 3008 	str.w	r3, [sl, #8]
  408a48:	2b00      	cmp	r3, #0
  408a4a:	f43f af78 	beq.w	40893e <__sfvwrite_r+0x5e>
  408a4e:	2e00      	cmp	r6, #0
  408a50:	d1d5      	bne.n	4089fe <__sfvwrite_r+0x11e>
  408a52:	f108 0308 	add.w	r3, r8, #8
  408a56:	e913 0060 	ldmdb	r3, {r5, r6}
  408a5a:	4698      	mov	r8, r3
  408a5c:	3308      	adds	r3, #8
  408a5e:	2e00      	cmp	r6, #0
  408a60:	d0f9      	beq.n	408a56 <__sfvwrite_r+0x176>
  408a62:	4632      	mov	r2, r6
  408a64:	210a      	movs	r1, #10
  408a66:	4628      	mov	r0, r5
  408a68:	f000 fc3a 	bl	4092e0 <memchr>
  408a6c:	2800      	cmp	r0, #0
  408a6e:	f000 80a1 	beq.w	408bb4 <__sfvwrite_r+0x2d4>
  408a72:	3001      	adds	r0, #1
  408a74:	eba0 0905 	sub.w	r9, r0, r5
  408a78:	e7c2      	b.n	408a00 <__sfvwrite_r+0x120>
  408a7a:	6820      	ldr	r0, [r4, #0]
  408a7c:	6923      	ldr	r3, [r4, #16]
  408a7e:	4298      	cmp	r0, r3
  408a80:	d802      	bhi.n	408a88 <__sfvwrite_r+0x1a8>
  408a82:	6963      	ldr	r3, [r4, #20]
  408a84:	429f      	cmp	r7, r3
  408a86:	d25d      	bcs.n	408b44 <__sfvwrite_r+0x264>
  408a88:	45b8      	cmp	r8, r7
  408a8a:	bf28      	it	cs
  408a8c:	46b8      	movcs	r8, r7
  408a8e:	4642      	mov	r2, r8
  408a90:	4649      	mov	r1, r9
  408a92:	f000 fc75 	bl	409380 <memmove>
  408a96:	68a3      	ldr	r3, [r4, #8]
  408a98:	6822      	ldr	r2, [r4, #0]
  408a9a:	eba3 0308 	sub.w	r3, r3, r8
  408a9e:	4442      	add	r2, r8
  408aa0:	60a3      	str	r3, [r4, #8]
  408aa2:	6022      	str	r2, [r4, #0]
  408aa4:	b10b      	cbz	r3, 408aaa <__sfvwrite_r+0x1ca>
  408aa6:	46c2      	mov	sl, r8
  408aa8:	e779      	b.n	40899e <__sfvwrite_r+0xbe>
  408aaa:	4621      	mov	r1, r4
  408aac:	9800      	ldr	r0, [sp, #0]
  408aae:	f7ff fcb3 	bl	408418 <_fflush_r>
  408ab2:	2800      	cmp	r0, #0
  408ab4:	d192      	bne.n	4089dc <__sfvwrite_r+0xfc>
  408ab6:	46c2      	mov	sl, r8
  408ab8:	e771      	b.n	40899e <__sfvwrite_r+0xbe>
  408aba:	465a      	mov	r2, fp
  408abc:	4629      	mov	r1, r5
  408abe:	f000 fc5f 	bl	409380 <memmove>
  408ac2:	68a2      	ldr	r2, [r4, #8]
  408ac4:	6823      	ldr	r3, [r4, #0]
  408ac6:	eba2 020b 	sub.w	r2, r2, fp
  408aca:	445b      	add	r3, fp
  408acc:	60a2      	str	r2, [r4, #8]
  408ace:	6023      	str	r3, [r4, #0]
  408ad0:	e7af      	b.n	408a32 <__sfvwrite_r+0x152>
  408ad2:	6820      	ldr	r0, [r4, #0]
  408ad4:	46b8      	mov	r8, r7
  408ad6:	46ba      	mov	sl, r7
  408ad8:	46bb      	mov	fp, r7
  408ada:	e755      	b.n	408988 <__sfvwrite_r+0xa8>
  408adc:	6962      	ldr	r2, [r4, #20]
  408ade:	6820      	ldr	r0, [r4, #0]
  408ae0:	6921      	ldr	r1, [r4, #16]
  408ae2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  408ae6:	eba0 0a01 	sub.w	sl, r0, r1
  408aea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  408aee:	f10a 0001 	add.w	r0, sl, #1
  408af2:	ea4f 0868 	mov.w	r8, r8, asr #1
  408af6:	4438      	add	r0, r7
  408af8:	4540      	cmp	r0, r8
  408afa:	4642      	mov	r2, r8
  408afc:	bf84      	itt	hi
  408afe:	4680      	movhi	r8, r0
  408b00:	4642      	movhi	r2, r8
  408b02:	055b      	lsls	r3, r3, #21
  408b04:	d544      	bpl.n	408b90 <__sfvwrite_r+0x2b0>
  408b06:	4611      	mov	r1, r2
  408b08:	9800      	ldr	r0, [sp, #0]
  408b0a:	f000 f921 	bl	408d50 <_malloc_r>
  408b0e:	4683      	mov	fp, r0
  408b10:	2800      	cmp	r0, #0
  408b12:	d055      	beq.n	408bc0 <__sfvwrite_r+0x2e0>
  408b14:	4652      	mov	r2, sl
  408b16:	6921      	ldr	r1, [r4, #16]
  408b18:	f7fe fa7a 	bl	407010 <memcpy>
  408b1c:	89a3      	ldrh	r3, [r4, #12]
  408b1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  408b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408b26:	81a3      	strh	r3, [r4, #12]
  408b28:	eb0b 000a 	add.w	r0, fp, sl
  408b2c:	eba8 030a 	sub.w	r3, r8, sl
  408b30:	f8c4 b010 	str.w	fp, [r4, #16]
  408b34:	f8c4 8014 	str.w	r8, [r4, #20]
  408b38:	6020      	str	r0, [r4, #0]
  408b3a:	60a3      	str	r3, [r4, #8]
  408b3c:	46b8      	mov	r8, r7
  408b3e:	46ba      	mov	sl, r7
  408b40:	46bb      	mov	fp, r7
  408b42:	e721      	b.n	408988 <__sfvwrite_r+0xa8>
  408b44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  408b48:	42b9      	cmp	r1, r7
  408b4a:	bf28      	it	cs
  408b4c:	4639      	movcs	r1, r7
  408b4e:	464a      	mov	r2, r9
  408b50:	fb91 f1f3 	sdiv	r1, r1, r3
  408b54:	9800      	ldr	r0, [sp, #0]
  408b56:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408b58:	fb03 f301 	mul.w	r3, r3, r1
  408b5c:	69e1      	ldr	r1, [r4, #28]
  408b5e:	47b0      	blx	r6
  408b60:	f1b0 0a00 	subs.w	sl, r0, #0
  408b64:	f73f af1b 	bgt.w	40899e <__sfvwrite_r+0xbe>
  408b68:	e738      	b.n	4089dc <__sfvwrite_r+0xfc>
  408b6a:	461a      	mov	r2, r3
  408b6c:	4629      	mov	r1, r5
  408b6e:	9301      	str	r3, [sp, #4]
  408b70:	f000 fc06 	bl	409380 <memmove>
  408b74:	6822      	ldr	r2, [r4, #0]
  408b76:	9b01      	ldr	r3, [sp, #4]
  408b78:	9800      	ldr	r0, [sp, #0]
  408b7a:	441a      	add	r2, r3
  408b7c:	6022      	str	r2, [r4, #0]
  408b7e:	4621      	mov	r1, r4
  408b80:	f7ff fc4a 	bl	408418 <_fflush_r>
  408b84:	9b01      	ldr	r3, [sp, #4]
  408b86:	2800      	cmp	r0, #0
  408b88:	f47f af28 	bne.w	4089dc <__sfvwrite_r+0xfc>
  408b8c:	461f      	mov	r7, r3
  408b8e:	e750      	b.n	408a32 <__sfvwrite_r+0x152>
  408b90:	9800      	ldr	r0, [sp, #0]
  408b92:	f000 fc65 	bl	409460 <_realloc_r>
  408b96:	4683      	mov	fp, r0
  408b98:	2800      	cmp	r0, #0
  408b9a:	d1c5      	bne.n	408b28 <__sfvwrite_r+0x248>
  408b9c:	9d00      	ldr	r5, [sp, #0]
  408b9e:	6921      	ldr	r1, [r4, #16]
  408ba0:	4628      	mov	r0, r5
  408ba2:	f7ff fdb7 	bl	408714 <_free_r>
  408ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408baa:	220c      	movs	r2, #12
  408bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408bb0:	602a      	str	r2, [r5, #0]
  408bb2:	e715      	b.n	4089e0 <__sfvwrite_r+0x100>
  408bb4:	f106 0901 	add.w	r9, r6, #1
  408bb8:	e722      	b.n	408a00 <__sfvwrite_r+0x120>
  408bba:	f04f 30ff 	mov.w	r0, #4294967295
  408bbe:	e6bf      	b.n	408940 <__sfvwrite_r+0x60>
  408bc0:	9a00      	ldr	r2, [sp, #0]
  408bc2:	230c      	movs	r3, #12
  408bc4:	6013      	str	r3, [r2, #0]
  408bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408bca:	e709      	b.n	4089e0 <__sfvwrite_r+0x100>
  408bcc:	7ffffc00 	.word	0x7ffffc00

00408bd0 <_fwalk_reent>:
  408bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408bd4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  408bd8:	d01f      	beq.n	408c1a <_fwalk_reent+0x4a>
  408bda:	4688      	mov	r8, r1
  408bdc:	4606      	mov	r6, r0
  408bde:	f04f 0900 	mov.w	r9, #0
  408be2:	687d      	ldr	r5, [r7, #4]
  408be4:	68bc      	ldr	r4, [r7, #8]
  408be6:	3d01      	subs	r5, #1
  408be8:	d411      	bmi.n	408c0e <_fwalk_reent+0x3e>
  408bea:	89a3      	ldrh	r3, [r4, #12]
  408bec:	2b01      	cmp	r3, #1
  408bee:	f105 35ff 	add.w	r5, r5, #4294967295
  408bf2:	d908      	bls.n	408c06 <_fwalk_reent+0x36>
  408bf4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  408bf8:	3301      	adds	r3, #1
  408bfa:	4621      	mov	r1, r4
  408bfc:	4630      	mov	r0, r6
  408bfe:	d002      	beq.n	408c06 <_fwalk_reent+0x36>
  408c00:	47c0      	blx	r8
  408c02:	ea49 0900 	orr.w	r9, r9, r0
  408c06:	1c6b      	adds	r3, r5, #1
  408c08:	f104 0468 	add.w	r4, r4, #104	; 0x68
  408c0c:	d1ed      	bne.n	408bea <_fwalk_reent+0x1a>
  408c0e:	683f      	ldr	r7, [r7, #0]
  408c10:	2f00      	cmp	r7, #0
  408c12:	d1e6      	bne.n	408be2 <_fwalk_reent+0x12>
  408c14:	4648      	mov	r0, r9
  408c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408c1a:	46b9      	mov	r9, r7
  408c1c:	4648      	mov	r0, r9
  408c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408c22:	bf00      	nop

00408c24 <__locale_mb_cur_max>:
  408c24:	4b04      	ldr	r3, [pc, #16]	; (408c38 <__locale_mb_cur_max+0x14>)
  408c26:	4a05      	ldr	r2, [pc, #20]	; (408c3c <__locale_mb_cur_max+0x18>)
  408c28:	681b      	ldr	r3, [r3, #0]
  408c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  408c2c:	2b00      	cmp	r3, #0
  408c2e:	bf08      	it	eq
  408c30:	4613      	moveq	r3, r2
  408c32:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  408c36:	4770      	bx	lr
  408c38:	20400028 	.word	0x20400028
  408c3c:	2040045c 	.word	0x2040045c

00408c40 <__retarget_lock_init_recursive>:
  408c40:	4770      	bx	lr
  408c42:	bf00      	nop

00408c44 <__retarget_lock_close_recursive>:
  408c44:	4770      	bx	lr
  408c46:	bf00      	nop

00408c48 <__retarget_lock_acquire_recursive>:
  408c48:	4770      	bx	lr
  408c4a:	bf00      	nop

00408c4c <__retarget_lock_release_recursive>:
  408c4c:	4770      	bx	lr
  408c4e:	bf00      	nop

00408c50 <__swhatbuf_r>:
  408c50:	b570      	push	{r4, r5, r6, lr}
  408c52:	460c      	mov	r4, r1
  408c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408c58:	2900      	cmp	r1, #0
  408c5a:	b090      	sub	sp, #64	; 0x40
  408c5c:	4615      	mov	r5, r2
  408c5e:	461e      	mov	r6, r3
  408c60:	db14      	blt.n	408c8c <__swhatbuf_r+0x3c>
  408c62:	aa01      	add	r2, sp, #4
  408c64:	f000 ff74 	bl	409b50 <_fstat_r>
  408c68:	2800      	cmp	r0, #0
  408c6a:	db0f      	blt.n	408c8c <__swhatbuf_r+0x3c>
  408c6c:	9a02      	ldr	r2, [sp, #8]
  408c6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  408c72:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  408c76:	fab2 f282 	clz	r2, r2
  408c7a:	0952      	lsrs	r2, r2, #5
  408c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408c80:	f44f 6000 	mov.w	r0, #2048	; 0x800
  408c84:	6032      	str	r2, [r6, #0]
  408c86:	602b      	str	r3, [r5, #0]
  408c88:	b010      	add	sp, #64	; 0x40
  408c8a:	bd70      	pop	{r4, r5, r6, pc}
  408c8c:	89a2      	ldrh	r2, [r4, #12]
  408c8e:	2300      	movs	r3, #0
  408c90:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  408c94:	6033      	str	r3, [r6, #0]
  408c96:	d004      	beq.n	408ca2 <__swhatbuf_r+0x52>
  408c98:	2240      	movs	r2, #64	; 0x40
  408c9a:	4618      	mov	r0, r3
  408c9c:	602a      	str	r2, [r5, #0]
  408c9e:	b010      	add	sp, #64	; 0x40
  408ca0:	bd70      	pop	{r4, r5, r6, pc}
  408ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408ca6:	602b      	str	r3, [r5, #0]
  408ca8:	b010      	add	sp, #64	; 0x40
  408caa:	bd70      	pop	{r4, r5, r6, pc}

00408cac <__smakebuf_r>:
  408cac:	898a      	ldrh	r2, [r1, #12]
  408cae:	0792      	lsls	r2, r2, #30
  408cb0:	460b      	mov	r3, r1
  408cb2:	d506      	bpl.n	408cc2 <__smakebuf_r+0x16>
  408cb4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  408cb8:	2101      	movs	r1, #1
  408cba:	601a      	str	r2, [r3, #0]
  408cbc:	611a      	str	r2, [r3, #16]
  408cbe:	6159      	str	r1, [r3, #20]
  408cc0:	4770      	bx	lr
  408cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
  408cc4:	b083      	sub	sp, #12
  408cc6:	ab01      	add	r3, sp, #4
  408cc8:	466a      	mov	r2, sp
  408cca:	460c      	mov	r4, r1
  408ccc:	4606      	mov	r6, r0
  408cce:	f7ff ffbf 	bl	408c50 <__swhatbuf_r>
  408cd2:	9900      	ldr	r1, [sp, #0]
  408cd4:	4605      	mov	r5, r0
  408cd6:	4630      	mov	r0, r6
  408cd8:	f000 f83a 	bl	408d50 <_malloc_r>
  408cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408ce0:	b1d8      	cbz	r0, 408d1a <__smakebuf_r+0x6e>
  408ce2:	9a01      	ldr	r2, [sp, #4]
  408ce4:	4f15      	ldr	r7, [pc, #84]	; (408d3c <__smakebuf_r+0x90>)
  408ce6:	9900      	ldr	r1, [sp, #0]
  408ce8:	63f7      	str	r7, [r6, #60]	; 0x3c
  408cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408cee:	81a3      	strh	r3, [r4, #12]
  408cf0:	6020      	str	r0, [r4, #0]
  408cf2:	6120      	str	r0, [r4, #16]
  408cf4:	6161      	str	r1, [r4, #20]
  408cf6:	b91a      	cbnz	r2, 408d00 <__smakebuf_r+0x54>
  408cf8:	432b      	orrs	r3, r5
  408cfa:	81a3      	strh	r3, [r4, #12]
  408cfc:	b003      	add	sp, #12
  408cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408d00:	4630      	mov	r0, r6
  408d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408d06:	f000 ff37 	bl	409b78 <_isatty_r>
  408d0a:	b1a0      	cbz	r0, 408d36 <__smakebuf_r+0x8a>
  408d0c:	89a3      	ldrh	r3, [r4, #12]
  408d0e:	f023 0303 	bic.w	r3, r3, #3
  408d12:	f043 0301 	orr.w	r3, r3, #1
  408d16:	b21b      	sxth	r3, r3
  408d18:	e7ee      	b.n	408cf8 <__smakebuf_r+0x4c>
  408d1a:	059a      	lsls	r2, r3, #22
  408d1c:	d4ee      	bmi.n	408cfc <__smakebuf_r+0x50>
  408d1e:	f023 0303 	bic.w	r3, r3, #3
  408d22:	f104 0243 	add.w	r2, r4, #67	; 0x43
  408d26:	f043 0302 	orr.w	r3, r3, #2
  408d2a:	2101      	movs	r1, #1
  408d2c:	81a3      	strh	r3, [r4, #12]
  408d2e:	6022      	str	r2, [r4, #0]
  408d30:	6122      	str	r2, [r4, #16]
  408d32:	6161      	str	r1, [r4, #20]
  408d34:	e7e2      	b.n	408cfc <__smakebuf_r+0x50>
  408d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408d3a:	e7dd      	b.n	408cf8 <__smakebuf_r+0x4c>
  408d3c:	0040846d 	.word	0x0040846d

00408d40 <malloc>:
  408d40:	4b02      	ldr	r3, [pc, #8]	; (408d4c <malloc+0xc>)
  408d42:	4601      	mov	r1, r0
  408d44:	6818      	ldr	r0, [r3, #0]
  408d46:	f000 b803 	b.w	408d50 <_malloc_r>
  408d4a:	bf00      	nop
  408d4c:	20400028 	.word	0x20400028

00408d50 <_malloc_r>:
  408d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408d54:	f101 060b 	add.w	r6, r1, #11
  408d58:	2e16      	cmp	r6, #22
  408d5a:	b083      	sub	sp, #12
  408d5c:	4605      	mov	r5, r0
  408d5e:	f240 809e 	bls.w	408e9e <_malloc_r+0x14e>
  408d62:	f036 0607 	bics.w	r6, r6, #7
  408d66:	f100 80bd 	bmi.w	408ee4 <_malloc_r+0x194>
  408d6a:	42b1      	cmp	r1, r6
  408d6c:	f200 80ba 	bhi.w	408ee4 <_malloc_r+0x194>
  408d70:	f000 fb6a 	bl	409448 <__malloc_lock>
  408d74:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  408d78:	f0c0 8293 	bcc.w	4092a2 <_malloc_r+0x552>
  408d7c:	0a73      	lsrs	r3, r6, #9
  408d7e:	f000 80b8 	beq.w	408ef2 <_malloc_r+0x1a2>
  408d82:	2b04      	cmp	r3, #4
  408d84:	f200 8179 	bhi.w	40907a <_malloc_r+0x32a>
  408d88:	09b3      	lsrs	r3, r6, #6
  408d8a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  408d8e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  408d92:	00c3      	lsls	r3, r0, #3
  408d94:	4fbf      	ldr	r7, [pc, #764]	; (409094 <_malloc_r+0x344>)
  408d96:	443b      	add	r3, r7
  408d98:	f1a3 0108 	sub.w	r1, r3, #8
  408d9c:	685c      	ldr	r4, [r3, #4]
  408d9e:	42a1      	cmp	r1, r4
  408da0:	d106      	bne.n	408db0 <_malloc_r+0x60>
  408da2:	e00c      	b.n	408dbe <_malloc_r+0x6e>
  408da4:	2a00      	cmp	r2, #0
  408da6:	f280 80aa 	bge.w	408efe <_malloc_r+0x1ae>
  408daa:	68e4      	ldr	r4, [r4, #12]
  408dac:	42a1      	cmp	r1, r4
  408dae:	d006      	beq.n	408dbe <_malloc_r+0x6e>
  408db0:	6863      	ldr	r3, [r4, #4]
  408db2:	f023 0303 	bic.w	r3, r3, #3
  408db6:	1b9a      	subs	r2, r3, r6
  408db8:	2a0f      	cmp	r2, #15
  408dba:	ddf3      	ble.n	408da4 <_malloc_r+0x54>
  408dbc:	4670      	mov	r0, lr
  408dbe:	693c      	ldr	r4, [r7, #16]
  408dc0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4090a8 <_malloc_r+0x358>
  408dc4:	4574      	cmp	r4, lr
  408dc6:	f000 81ab 	beq.w	409120 <_malloc_r+0x3d0>
  408dca:	6863      	ldr	r3, [r4, #4]
  408dcc:	f023 0303 	bic.w	r3, r3, #3
  408dd0:	1b9a      	subs	r2, r3, r6
  408dd2:	2a0f      	cmp	r2, #15
  408dd4:	f300 8190 	bgt.w	4090f8 <_malloc_r+0x3a8>
  408dd8:	2a00      	cmp	r2, #0
  408dda:	f8c7 e014 	str.w	lr, [r7, #20]
  408dde:	f8c7 e010 	str.w	lr, [r7, #16]
  408de2:	f280 809d 	bge.w	408f20 <_malloc_r+0x1d0>
  408de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408dea:	f080 8161 	bcs.w	4090b0 <_malloc_r+0x360>
  408dee:	08db      	lsrs	r3, r3, #3
  408df0:	f103 0c01 	add.w	ip, r3, #1
  408df4:	1099      	asrs	r1, r3, #2
  408df6:	687a      	ldr	r2, [r7, #4]
  408df8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  408dfc:	f8c4 8008 	str.w	r8, [r4, #8]
  408e00:	2301      	movs	r3, #1
  408e02:	408b      	lsls	r3, r1
  408e04:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  408e08:	4313      	orrs	r3, r2
  408e0a:	3908      	subs	r1, #8
  408e0c:	60e1      	str	r1, [r4, #12]
  408e0e:	607b      	str	r3, [r7, #4]
  408e10:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  408e14:	f8c8 400c 	str.w	r4, [r8, #12]
  408e18:	1082      	asrs	r2, r0, #2
  408e1a:	2401      	movs	r4, #1
  408e1c:	4094      	lsls	r4, r2
  408e1e:	429c      	cmp	r4, r3
  408e20:	f200 808b 	bhi.w	408f3a <_malloc_r+0x1ea>
  408e24:	421c      	tst	r4, r3
  408e26:	d106      	bne.n	408e36 <_malloc_r+0xe6>
  408e28:	f020 0003 	bic.w	r0, r0, #3
  408e2c:	0064      	lsls	r4, r4, #1
  408e2e:	421c      	tst	r4, r3
  408e30:	f100 0004 	add.w	r0, r0, #4
  408e34:	d0fa      	beq.n	408e2c <_malloc_r+0xdc>
  408e36:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  408e3a:	46cc      	mov	ip, r9
  408e3c:	4680      	mov	r8, r0
  408e3e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  408e42:	459c      	cmp	ip, r3
  408e44:	d107      	bne.n	408e56 <_malloc_r+0x106>
  408e46:	e16d      	b.n	409124 <_malloc_r+0x3d4>
  408e48:	2a00      	cmp	r2, #0
  408e4a:	f280 817b 	bge.w	409144 <_malloc_r+0x3f4>
  408e4e:	68db      	ldr	r3, [r3, #12]
  408e50:	459c      	cmp	ip, r3
  408e52:	f000 8167 	beq.w	409124 <_malloc_r+0x3d4>
  408e56:	6859      	ldr	r1, [r3, #4]
  408e58:	f021 0103 	bic.w	r1, r1, #3
  408e5c:	1b8a      	subs	r2, r1, r6
  408e5e:	2a0f      	cmp	r2, #15
  408e60:	ddf2      	ble.n	408e48 <_malloc_r+0xf8>
  408e62:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  408e66:	f8d3 8008 	ldr.w	r8, [r3, #8]
  408e6a:	9300      	str	r3, [sp, #0]
  408e6c:	199c      	adds	r4, r3, r6
  408e6e:	4628      	mov	r0, r5
  408e70:	f046 0601 	orr.w	r6, r6, #1
  408e74:	f042 0501 	orr.w	r5, r2, #1
  408e78:	605e      	str	r6, [r3, #4]
  408e7a:	f8c8 c00c 	str.w	ip, [r8, #12]
  408e7e:	f8cc 8008 	str.w	r8, [ip, #8]
  408e82:	617c      	str	r4, [r7, #20]
  408e84:	613c      	str	r4, [r7, #16]
  408e86:	f8c4 e00c 	str.w	lr, [r4, #12]
  408e8a:	f8c4 e008 	str.w	lr, [r4, #8]
  408e8e:	6065      	str	r5, [r4, #4]
  408e90:	505a      	str	r2, [r3, r1]
  408e92:	f000 fadf 	bl	409454 <__malloc_unlock>
  408e96:	9b00      	ldr	r3, [sp, #0]
  408e98:	f103 0408 	add.w	r4, r3, #8
  408e9c:	e01e      	b.n	408edc <_malloc_r+0x18c>
  408e9e:	2910      	cmp	r1, #16
  408ea0:	d820      	bhi.n	408ee4 <_malloc_r+0x194>
  408ea2:	f000 fad1 	bl	409448 <__malloc_lock>
  408ea6:	2610      	movs	r6, #16
  408ea8:	2318      	movs	r3, #24
  408eaa:	2002      	movs	r0, #2
  408eac:	4f79      	ldr	r7, [pc, #484]	; (409094 <_malloc_r+0x344>)
  408eae:	443b      	add	r3, r7
  408eb0:	f1a3 0208 	sub.w	r2, r3, #8
  408eb4:	685c      	ldr	r4, [r3, #4]
  408eb6:	4294      	cmp	r4, r2
  408eb8:	f000 813d 	beq.w	409136 <_malloc_r+0x3e6>
  408ebc:	6863      	ldr	r3, [r4, #4]
  408ebe:	68e1      	ldr	r1, [r4, #12]
  408ec0:	68a6      	ldr	r6, [r4, #8]
  408ec2:	f023 0303 	bic.w	r3, r3, #3
  408ec6:	4423      	add	r3, r4
  408ec8:	4628      	mov	r0, r5
  408eca:	685a      	ldr	r2, [r3, #4]
  408ecc:	60f1      	str	r1, [r6, #12]
  408ece:	f042 0201 	orr.w	r2, r2, #1
  408ed2:	608e      	str	r6, [r1, #8]
  408ed4:	605a      	str	r2, [r3, #4]
  408ed6:	f000 fabd 	bl	409454 <__malloc_unlock>
  408eda:	3408      	adds	r4, #8
  408edc:	4620      	mov	r0, r4
  408ede:	b003      	add	sp, #12
  408ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408ee4:	2400      	movs	r4, #0
  408ee6:	230c      	movs	r3, #12
  408ee8:	4620      	mov	r0, r4
  408eea:	602b      	str	r3, [r5, #0]
  408eec:	b003      	add	sp, #12
  408eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408ef2:	2040      	movs	r0, #64	; 0x40
  408ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
  408ef8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  408efc:	e74a      	b.n	408d94 <_malloc_r+0x44>
  408efe:	4423      	add	r3, r4
  408f00:	68e1      	ldr	r1, [r4, #12]
  408f02:	685a      	ldr	r2, [r3, #4]
  408f04:	68a6      	ldr	r6, [r4, #8]
  408f06:	f042 0201 	orr.w	r2, r2, #1
  408f0a:	60f1      	str	r1, [r6, #12]
  408f0c:	4628      	mov	r0, r5
  408f0e:	608e      	str	r6, [r1, #8]
  408f10:	605a      	str	r2, [r3, #4]
  408f12:	f000 fa9f 	bl	409454 <__malloc_unlock>
  408f16:	3408      	adds	r4, #8
  408f18:	4620      	mov	r0, r4
  408f1a:	b003      	add	sp, #12
  408f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f20:	4423      	add	r3, r4
  408f22:	4628      	mov	r0, r5
  408f24:	685a      	ldr	r2, [r3, #4]
  408f26:	f042 0201 	orr.w	r2, r2, #1
  408f2a:	605a      	str	r2, [r3, #4]
  408f2c:	f000 fa92 	bl	409454 <__malloc_unlock>
  408f30:	3408      	adds	r4, #8
  408f32:	4620      	mov	r0, r4
  408f34:	b003      	add	sp, #12
  408f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f3a:	68bc      	ldr	r4, [r7, #8]
  408f3c:	6863      	ldr	r3, [r4, #4]
  408f3e:	f023 0803 	bic.w	r8, r3, #3
  408f42:	45b0      	cmp	r8, r6
  408f44:	d304      	bcc.n	408f50 <_malloc_r+0x200>
  408f46:	eba8 0306 	sub.w	r3, r8, r6
  408f4a:	2b0f      	cmp	r3, #15
  408f4c:	f300 8085 	bgt.w	40905a <_malloc_r+0x30a>
  408f50:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4090ac <_malloc_r+0x35c>
  408f54:	4b50      	ldr	r3, [pc, #320]	; (409098 <_malloc_r+0x348>)
  408f56:	f8d9 2000 	ldr.w	r2, [r9]
  408f5a:	681b      	ldr	r3, [r3, #0]
  408f5c:	3201      	adds	r2, #1
  408f5e:	4433      	add	r3, r6
  408f60:	eb04 0a08 	add.w	sl, r4, r8
  408f64:	f000 8155 	beq.w	409212 <_malloc_r+0x4c2>
  408f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  408f6c:	330f      	adds	r3, #15
  408f6e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  408f72:	f02b 0b0f 	bic.w	fp, fp, #15
  408f76:	4659      	mov	r1, fp
  408f78:	4628      	mov	r0, r5
  408f7a:	f000 fc17 	bl	4097ac <_sbrk_r>
  408f7e:	1c41      	adds	r1, r0, #1
  408f80:	4602      	mov	r2, r0
  408f82:	f000 80fc 	beq.w	40917e <_malloc_r+0x42e>
  408f86:	4582      	cmp	sl, r0
  408f88:	f200 80f7 	bhi.w	40917a <_malloc_r+0x42a>
  408f8c:	4b43      	ldr	r3, [pc, #268]	; (40909c <_malloc_r+0x34c>)
  408f8e:	6819      	ldr	r1, [r3, #0]
  408f90:	4459      	add	r1, fp
  408f92:	6019      	str	r1, [r3, #0]
  408f94:	f000 814d 	beq.w	409232 <_malloc_r+0x4e2>
  408f98:	f8d9 0000 	ldr.w	r0, [r9]
  408f9c:	3001      	adds	r0, #1
  408f9e:	bf1b      	ittet	ne
  408fa0:	eba2 0a0a 	subne.w	sl, r2, sl
  408fa4:	4451      	addne	r1, sl
  408fa6:	f8c9 2000 	streq.w	r2, [r9]
  408faa:	6019      	strne	r1, [r3, #0]
  408fac:	f012 0107 	ands.w	r1, r2, #7
  408fb0:	f000 8115 	beq.w	4091de <_malloc_r+0x48e>
  408fb4:	f1c1 0008 	rsb	r0, r1, #8
  408fb8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  408fbc:	4402      	add	r2, r0
  408fbe:	3108      	adds	r1, #8
  408fc0:	eb02 090b 	add.w	r9, r2, fp
  408fc4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  408fc8:	eba1 0909 	sub.w	r9, r1, r9
  408fcc:	4649      	mov	r1, r9
  408fce:	4628      	mov	r0, r5
  408fd0:	9301      	str	r3, [sp, #4]
  408fd2:	9200      	str	r2, [sp, #0]
  408fd4:	f000 fbea 	bl	4097ac <_sbrk_r>
  408fd8:	1c43      	adds	r3, r0, #1
  408fda:	e89d 000c 	ldmia.w	sp, {r2, r3}
  408fde:	f000 8143 	beq.w	409268 <_malloc_r+0x518>
  408fe2:	1a80      	subs	r0, r0, r2
  408fe4:	4448      	add	r0, r9
  408fe6:	f040 0001 	orr.w	r0, r0, #1
  408fea:	6819      	ldr	r1, [r3, #0]
  408fec:	60ba      	str	r2, [r7, #8]
  408fee:	4449      	add	r1, r9
  408ff0:	42bc      	cmp	r4, r7
  408ff2:	6050      	str	r0, [r2, #4]
  408ff4:	6019      	str	r1, [r3, #0]
  408ff6:	d017      	beq.n	409028 <_malloc_r+0x2d8>
  408ff8:	f1b8 0f0f 	cmp.w	r8, #15
  408ffc:	f240 80fb 	bls.w	4091f6 <_malloc_r+0x4a6>
  409000:	6860      	ldr	r0, [r4, #4]
  409002:	f1a8 020c 	sub.w	r2, r8, #12
  409006:	f022 0207 	bic.w	r2, r2, #7
  40900a:	eb04 0e02 	add.w	lr, r4, r2
  40900e:	f000 0001 	and.w	r0, r0, #1
  409012:	f04f 0c05 	mov.w	ip, #5
  409016:	4310      	orrs	r0, r2
  409018:	2a0f      	cmp	r2, #15
  40901a:	6060      	str	r0, [r4, #4]
  40901c:	f8ce c004 	str.w	ip, [lr, #4]
  409020:	f8ce c008 	str.w	ip, [lr, #8]
  409024:	f200 8117 	bhi.w	409256 <_malloc_r+0x506>
  409028:	4b1d      	ldr	r3, [pc, #116]	; (4090a0 <_malloc_r+0x350>)
  40902a:	68bc      	ldr	r4, [r7, #8]
  40902c:	681a      	ldr	r2, [r3, #0]
  40902e:	4291      	cmp	r1, r2
  409030:	bf88      	it	hi
  409032:	6019      	strhi	r1, [r3, #0]
  409034:	4b1b      	ldr	r3, [pc, #108]	; (4090a4 <_malloc_r+0x354>)
  409036:	681a      	ldr	r2, [r3, #0]
  409038:	4291      	cmp	r1, r2
  40903a:	6862      	ldr	r2, [r4, #4]
  40903c:	bf88      	it	hi
  40903e:	6019      	strhi	r1, [r3, #0]
  409040:	f022 0203 	bic.w	r2, r2, #3
  409044:	4296      	cmp	r6, r2
  409046:	eba2 0306 	sub.w	r3, r2, r6
  40904a:	d801      	bhi.n	409050 <_malloc_r+0x300>
  40904c:	2b0f      	cmp	r3, #15
  40904e:	dc04      	bgt.n	40905a <_malloc_r+0x30a>
  409050:	4628      	mov	r0, r5
  409052:	f000 f9ff 	bl	409454 <__malloc_unlock>
  409056:	2400      	movs	r4, #0
  409058:	e740      	b.n	408edc <_malloc_r+0x18c>
  40905a:	19a2      	adds	r2, r4, r6
  40905c:	f043 0301 	orr.w	r3, r3, #1
  409060:	f046 0601 	orr.w	r6, r6, #1
  409064:	6066      	str	r6, [r4, #4]
  409066:	4628      	mov	r0, r5
  409068:	60ba      	str	r2, [r7, #8]
  40906a:	6053      	str	r3, [r2, #4]
  40906c:	f000 f9f2 	bl	409454 <__malloc_unlock>
  409070:	3408      	adds	r4, #8
  409072:	4620      	mov	r0, r4
  409074:	b003      	add	sp, #12
  409076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40907a:	2b14      	cmp	r3, #20
  40907c:	d971      	bls.n	409162 <_malloc_r+0x412>
  40907e:	2b54      	cmp	r3, #84	; 0x54
  409080:	f200 80a3 	bhi.w	4091ca <_malloc_r+0x47a>
  409084:	0b33      	lsrs	r3, r6, #12
  409086:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40908a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40908e:	00c3      	lsls	r3, r0, #3
  409090:	e680      	b.n	408d94 <_malloc_r+0x44>
  409092:	bf00      	nop
  409094:	204005c8 	.word	0x204005c8
  409098:	2040c5f0 	.word	0x2040c5f0
  40909c:	2040c5c0 	.word	0x2040c5c0
  4090a0:	2040c5e8 	.word	0x2040c5e8
  4090a4:	2040c5ec 	.word	0x2040c5ec
  4090a8:	204005d0 	.word	0x204005d0
  4090ac:	204009d0 	.word	0x204009d0
  4090b0:	0a5a      	lsrs	r2, r3, #9
  4090b2:	2a04      	cmp	r2, #4
  4090b4:	d95b      	bls.n	40916e <_malloc_r+0x41e>
  4090b6:	2a14      	cmp	r2, #20
  4090b8:	f200 80ae 	bhi.w	409218 <_malloc_r+0x4c8>
  4090bc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4090c0:	00c9      	lsls	r1, r1, #3
  4090c2:	325b      	adds	r2, #91	; 0x5b
  4090c4:	eb07 0c01 	add.w	ip, r7, r1
  4090c8:	5879      	ldr	r1, [r7, r1]
  4090ca:	f1ac 0c08 	sub.w	ip, ip, #8
  4090ce:	458c      	cmp	ip, r1
  4090d0:	f000 8088 	beq.w	4091e4 <_malloc_r+0x494>
  4090d4:	684a      	ldr	r2, [r1, #4]
  4090d6:	f022 0203 	bic.w	r2, r2, #3
  4090da:	4293      	cmp	r3, r2
  4090dc:	d273      	bcs.n	4091c6 <_malloc_r+0x476>
  4090de:	6889      	ldr	r1, [r1, #8]
  4090e0:	458c      	cmp	ip, r1
  4090e2:	d1f7      	bne.n	4090d4 <_malloc_r+0x384>
  4090e4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4090e8:	687b      	ldr	r3, [r7, #4]
  4090ea:	60e2      	str	r2, [r4, #12]
  4090ec:	f8c4 c008 	str.w	ip, [r4, #8]
  4090f0:	6094      	str	r4, [r2, #8]
  4090f2:	f8cc 400c 	str.w	r4, [ip, #12]
  4090f6:	e68f      	b.n	408e18 <_malloc_r+0xc8>
  4090f8:	19a1      	adds	r1, r4, r6
  4090fa:	f046 0c01 	orr.w	ip, r6, #1
  4090fe:	f042 0601 	orr.w	r6, r2, #1
  409102:	f8c4 c004 	str.w	ip, [r4, #4]
  409106:	4628      	mov	r0, r5
  409108:	6179      	str	r1, [r7, #20]
  40910a:	6139      	str	r1, [r7, #16]
  40910c:	f8c1 e00c 	str.w	lr, [r1, #12]
  409110:	f8c1 e008 	str.w	lr, [r1, #8]
  409114:	604e      	str	r6, [r1, #4]
  409116:	50e2      	str	r2, [r4, r3]
  409118:	f000 f99c 	bl	409454 <__malloc_unlock>
  40911c:	3408      	adds	r4, #8
  40911e:	e6dd      	b.n	408edc <_malloc_r+0x18c>
  409120:	687b      	ldr	r3, [r7, #4]
  409122:	e679      	b.n	408e18 <_malloc_r+0xc8>
  409124:	f108 0801 	add.w	r8, r8, #1
  409128:	f018 0f03 	tst.w	r8, #3
  40912c:	f10c 0c08 	add.w	ip, ip, #8
  409130:	f47f ae85 	bne.w	408e3e <_malloc_r+0xee>
  409134:	e02d      	b.n	409192 <_malloc_r+0x442>
  409136:	68dc      	ldr	r4, [r3, #12]
  409138:	42a3      	cmp	r3, r4
  40913a:	bf08      	it	eq
  40913c:	3002      	addeq	r0, #2
  40913e:	f43f ae3e 	beq.w	408dbe <_malloc_r+0x6e>
  409142:	e6bb      	b.n	408ebc <_malloc_r+0x16c>
  409144:	4419      	add	r1, r3
  409146:	461c      	mov	r4, r3
  409148:	684a      	ldr	r2, [r1, #4]
  40914a:	68db      	ldr	r3, [r3, #12]
  40914c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  409150:	f042 0201 	orr.w	r2, r2, #1
  409154:	604a      	str	r2, [r1, #4]
  409156:	4628      	mov	r0, r5
  409158:	60f3      	str	r3, [r6, #12]
  40915a:	609e      	str	r6, [r3, #8]
  40915c:	f000 f97a 	bl	409454 <__malloc_unlock>
  409160:	e6bc      	b.n	408edc <_malloc_r+0x18c>
  409162:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  409166:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40916a:	00c3      	lsls	r3, r0, #3
  40916c:	e612      	b.n	408d94 <_malloc_r+0x44>
  40916e:	099a      	lsrs	r2, r3, #6
  409170:	f102 0139 	add.w	r1, r2, #57	; 0x39
  409174:	00c9      	lsls	r1, r1, #3
  409176:	3238      	adds	r2, #56	; 0x38
  409178:	e7a4      	b.n	4090c4 <_malloc_r+0x374>
  40917a:	42bc      	cmp	r4, r7
  40917c:	d054      	beq.n	409228 <_malloc_r+0x4d8>
  40917e:	68bc      	ldr	r4, [r7, #8]
  409180:	6862      	ldr	r2, [r4, #4]
  409182:	f022 0203 	bic.w	r2, r2, #3
  409186:	e75d      	b.n	409044 <_malloc_r+0x2f4>
  409188:	f859 3908 	ldr.w	r3, [r9], #-8
  40918c:	4599      	cmp	r9, r3
  40918e:	f040 8086 	bne.w	40929e <_malloc_r+0x54e>
  409192:	f010 0f03 	tst.w	r0, #3
  409196:	f100 30ff 	add.w	r0, r0, #4294967295
  40919a:	d1f5      	bne.n	409188 <_malloc_r+0x438>
  40919c:	687b      	ldr	r3, [r7, #4]
  40919e:	ea23 0304 	bic.w	r3, r3, r4
  4091a2:	607b      	str	r3, [r7, #4]
  4091a4:	0064      	lsls	r4, r4, #1
  4091a6:	429c      	cmp	r4, r3
  4091a8:	f63f aec7 	bhi.w	408f3a <_malloc_r+0x1ea>
  4091ac:	2c00      	cmp	r4, #0
  4091ae:	f43f aec4 	beq.w	408f3a <_malloc_r+0x1ea>
  4091b2:	421c      	tst	r4, r3
  4091b4:	4640      	mov	r0, r8
  4091b6:	f47f ae3e 	bne.w	408e36 <_malloc_r+0xe6>
  4091ba:	0064      	lsls	r4, r4, #1
  4091bc:	421c      	tst	r4, r3
  4091be:	f100 0004 	add.w	r0, r0, #4
  4091c2:	d0fa      	beq.n	4091ba <_malloc_r+0x46a>
  4091c4:	e637      	b.n	408e36 <_malloc_r+0xe6>
  4091c6:	468c      	mov	ip, r1
  4091c8:	e78c      	b.n	4090e4 <_malloc_r+0x394>
  4091ca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4091ce:	d815      	bhi.n	4091fc <_malloc_r+0x4ac>
  4091d0:	0bf3      	lsrs	r3, r6, #15
  4091d2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4091d6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4091da:	00c3      	lsls	r3, r0, #3
  4091dc:	e5da      	b.n	408d94 <_malloc_r+0x44>
  4091de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4091e2:	e6ed      	b.n	408fc0 <_malloc_r+0x270>
  4091e4:	687b      	ldr	r3, [r7, #4]
  4091e6:	1092      	asrs	r2, r2, #2
  4091e8:	2101      	movs	r1, #1
  4091ea:	fa01 f202 	lsl.w	r2, r1, r2
  4091ee:	4313      	orrs	r3, r2
  4091f0:	607b      	str	r3, [r7, #4]
  4091f2:	4662      	mov	r2, ip
  4091f4:	e779      	b.n	4090ea <_malloc_r+0x39a>
  4091f6:	2301      	movs	r3, #1
  4091f8:	6053      	str	r3, [r2, #4]
  4091fa:	e729      	b.n	409050 <_malloc_r+0x300>
  4091fc:	f240 5254 	movw	r2, #1364	; 0x554
  409200:	4293      	cmp	r3, r2
  409202:	d822      	bhi.n	40924a <_malloc_r+0x4fa>
  409204:	0cb3      	lsrs	r3, r6, #18
  409206:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40920a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40920e:	00c3      	lsls	r3, r0, #3
  409210:	e5c0      	b.n	408d94 <_malloc_r+0x44>
  409212:	f103 0b10 	add.w	fp, r3, #16
  409216:	e6ae      	b.n	408f76 <_malloc_r+0x226>
  409218:	2a54      	cmp	r2, #84	; 0x54
  40921a:	d829      	bhi.n	409270 <_malloc_r+0x520>
  40921c:	0b1a      	lsrs	r2, r3, #12
  40921e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  409222:	00c9      	lsls	r1, r1, #3
  409224:	326e      	adds	r2, #110	; 0x6e
  409226:	e74d      	b.n	4090c4 <_malloc_r+0x374>
  409228:	4b20      	ldr	r3, [pc, #128]	; (4092ac <_malloc_r+0x55c>)
  40922a:	6819      	ldr	r1, [r3, #0]
  40922c:	4459      	add	r1, fp
  40922e:	6019      	str	r1, [r3, #0]
  409230:	e6b2      	b.n	408f98 <_malloc_r+0x248>
  409232:	f3ca 000b 	ubfx	r0, sl, #0, #12
  409236:	2800      	cmp	r0, #0
  409238:	f47f aeae 	bne.w	408f98 <_malloc_r+0x248>
  40923c:	eb08 030b 	add.w	r3, r8, fp
  409240:	68ba      	ldr	r2, [r7, #8]
  409242:	f043 0301 	orr.w	r3, r3, #1
  409246:	6053      	str	r3, [r2, #4]
  409248:	e6ee      	b.n	409028 <_malloc_r+0x2d8>
  40924a:	207f      	movs	r0, #127	; 0x7f
  40924c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  409250:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  409254:	e59e      	b.n	408d94 <_malloc_r+0x44>
  409256:	f104 0108 	add.w	r1, r4, #8
  40925a:	4628      	mov	r0, r5
  40925c:	9300      	str	r3, [sp, #0]
  40925e:	f7ff fa59 	bl	408714 <_free_r>
  409262:	9b00      	ldr	r3, [sp, #0]
  409264:	6819      	ldr	r1, [r3, #0]
  409266:	e6df      	b.n	409028 <_malloc_r+0x2d8>
  409268:	2001      	movs	r0, #1
  40926a:	f04f 0900 	mov.w	r9, #0
  40926e:	e6bc      	b.n	408fea <_malloc_r+0x29a>
  409270:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  409274:	d805      	bhi.n	409282 <_malloc_r+0x532>
  409276:	0bda      	lsrs	r2, r3, #15
  409278:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40927c:	00c9      	lsls	r1, r1, #3
  40927e:	3277      	adds	r2, #119	; 0x77
  409280:	e720      	b.n	4090c4 <_malloc_r+0x374>
  409282:	f240 5154 	movw	r1, #1364	; 0x554
  409286:	428a      	cmp	r2, r1
  409288:	d805      	bhi.n	409296 <_malloc_r+0x546>
  40928a:	0c9a      	lsrs	r2, r3, #18
  40928c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  409290:	00c9      	lsls	r1, r1, #3
  409292:	327c      	adds	r2, #124	; 0x7c
  409294:	e716      	b.n	4090c4 <_malloc_r+0x374>
  409296:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40929a:	227e      	movs	r2, #126	; 0x7e
  40929c:	e712      	b.n	4090c4 <_malloc_r+0x374>
  40929e:	687b      	ldr	r3, [r7, #4]
  4092a0:	e780      	b.n	4091a4 <_malloc_r+0x454>
  4092a2:	08f0      	lsrs	r0, r6, #3
  4092a4:	f106 0308 	add.w	r3, r6, #8
  4092a8:	e600      	b.n	408eac <_malloc_r+0x15c>
  4092aa:	bf00      	nop
  4092ac:	2040c5c0 	.word	0x2040c5c0

004092b0 <__ascii_mbtowc>:
  4092b0:	b082      	sub	sp, #8
  4092b2:	b149      	cbz	r1, 4092c8 <__ascii_mbtowc+0x18>
  4092b4:	b15a      	cbz	r2, 4092ce <__ascii_mbtowc+0x1e>
  4092b6:	b16b      	cbz	r3, 4092d4 <__ascii_mbtowc+0x24>
  4092b8:	7813      	ldrb	r3, [r2, #0]
  4092ba:	600b      	str	r3, [r1, #0]
  4092bc:	7812      	ldrb	r2, [r2, #0]
  4092be:	1c10      	adds	r0, r2, #0
  4092c0:	bf18      	it	ne
  4092c2:	2001      	movne	r0, #1
  4092c4:	b002      	add	sp, #8
  4092c6:	4770      	bx	lr
  4092c8:	a901      	add	r1, sp, #4
  4092ca:	2a00      	cmp	r2, #0
  4092cc:	d1f3      	bne.n	4092b6 <__ascii_mbtowc+0x6>
  4092ce:	4610      	mov	r0, r2
  4092d0:	b002      	add	sp, #8
  4092d2:	4770      	bx	lr
  4092d4:	f06f 0001 	mvn.w	r0, #1
  4092d8:	e7f4      	b.n	4092c4 <__ascii_mbtowc+0x14>
  4092da:	bf00      	nop
  4092dc:	0000      	movs	r0, r0
	...

004092e0 <memchr>:
  4092e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4092e4:	2a10      	cmp	r2, #16
  4092e6:	db2b      	blt.n	409340 <memchr+0x60>
  4092e8:	f010 0f07 	tst.w	r0, #7
  4092ec:	d008      	beq.n	409300 <memchr+0x20>
  4092ee:	f810 3b01 	ldrb.w	r3, [r0], #1
  4092f2:	3a01      	subs	r2, #1
  4092f4:	428b      	cmp	r3, r1
  4092f6:	d02d      	beq.n	409354 <memchr+0x74>
  4092f8:	f010 0f07 	tst.w	r0, #7
  4092fc:	b342      	cbz	r2, 409350 <memchr+0x70>
  4092fe:	d1f6      	bne.n	4092ee <memchr+0xe>
  409300:	b4f0      	push	{r4, r5, r6, r7}
  409302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  409306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40930a:	f022 0407 	bic.w	r4, r2, #7
  40930e:	f07f 0700 	mvns.w	r7, #0
  409312:	2300      	movs	r3, #0
  409314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  409318:	3c08      	subs	r4, #8
  40931a:	ea85 0501 	eor.w	r5, r5, r1
  40931e:	ea86 0601 	eor.w	r6, r6, r1
  409322:	fa85 f547 	uadd8	r5, r5, r7
  409326:	faa3 f587 	sel	r5, r3, r7
  40932a:	fa86 f647 	uadd8	r6, r6, r7
  40932e:	faa5 f687 	sel	r6, r5, r7
  409332:	b98e      	cbnz	r6, 409358 <memchr+0x78>
  409334:	d1ee      	bne.n	409314 <memchr+0x34>
  409336:	bcf0      	pop	{r4, r5, r6, r7}
  409338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40933c:	f002 0207 	and.w	r2, r2, #7
  409340:	b132      	cbz	r2, 409350 <memchr+0x70>
  409342:	f810 3b01 	ldrb.w	r3, [r0], #1
  409346:	3a01      	subs	r2, #1
  409348:	ea83 0301 	eor.w	r3, r3, r1
  40934c:	b113      	cbz	r3, 409354 <memchr+0x74>
  40934e:	d1f8      	bne.n	409342 <memchr+0x62>
  409350:	2000      	movs	r0, #0
  409352:	4770      	bx	lr
  409354:	3801      	subs	r0, #1
  409356:	4770      	bx	lr
  409358:	2d00      	cmp	r5, #0
  40935a:	bf06      	itte	eq
  40935c:	4635      	moveq	r5, r6
  40935e:	3803      	subeq	r0, #3
  409360:	3807      	subne	r0, #7
  409362:	f015 0f01 	tst.w	r5, #1
  409366:	d107      	bne.n	409378 <memchr+0x98>
  409368:	3001      	adds	r0, #1
  40936a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40936e:	bf02      	ittt	eq
  409370:	3001      	addeq	r0, #1
  409372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  409376:	3001      	addeq	r0, #1
  409378:	bcf0      	pop	{r4, r5, r6, r7}
  40937a:	3801      	subs	r0, #1
  40937c:	4770      	bx	lr
  40937e:	bf00      	nop

00409380 <memmove>:
  409380:	4288      	cmp	r0, r1
  409382:	b5f0      	push	{r4, r5, r6, r7, lr}
  409384:	d90d      	bls.n	4093a2 <memmove+0x22>
  409386:	188b      	adds	r3, r1, r2
  409388:	4298      	cmp	r0, r3
  40938a:	d20a      	bcs.n	4093a2 <memmove+0x22>
  40938c:	1884      	adds	r4, r0, r2
  40938e:	2a00      	cmp	r2, #0
  409390:	d051      	beq.n	409436 <memmove+0xb6>
  409392:	4622      	mov	r2, r4
  409394:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  409398:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40939c:	4299      	cmp	r1, r3
  40939e:	d1f9      	bne.n	409394 <memmove+0x14>
  4093a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4093a2:	2a0f      	cmp	r2, #15
  4093a4:	d948      	bls.n	409438 <memmove+0xb8>
  4093a6:	ea41 0300 	orr.w	r3, r1, r0
  4093aa:	079b      	lsls	r3, r3, #30
  4093ac:	d146      	bne.n	40943c <memmove+0xbc>
  4093ae:	f100 0410 	add.w	r4, r0, #16
  4093b2:	f101 0310 	add.w	r3, r1, #16
  4093b6:	4615      	mov	r5, r2
  4093b8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4093bc:	f844 6c10 	str.w	r6, [r4, #-16]
  4093c0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4093c4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4093c8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4093cc:	f844 6c08 	str.w	r6, [r4, #-8]
  4093d0:	3d10      	subs	r5, #16
  4093d2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4093d6:	f844 6c04 	str.w	r6, [r4, #-4]
  4093da:	2d0f      	cmp	r5, #15
  4093dc:	f103 0310 	add.w	r3, r3, #16
  4093e0:	f104 0410 	add.w	r4, r4, #16
  4093e4:	d8e8      	bhi.n	4093b8 <memmove+0x38>
  4093e6:	f1a2 0310 	sub.w	r3, r2, #16
  4093ea:	f023 030f 	bic.w	r3, r3, #15
  4093ee:	f002 0e0f 	and.w	lr, r2, #15
  4093f2:	3310      	adds	r3, #16
  4093f4:	f1be 0f03 	cmp.w	lr, #3
  4093f8:	4419      	add	r1, r3
  4093fa:	4403      	add	r3, r0
  4093fc:	d921      	bls.n	409442 <memmove+0xc2>
  4093fe:	1f1e      	subs	r6, r3, #4
  409400:	460d      	mov	r5, r1
  409402:	4674      	mov	r4, lr
  409404:	3c04      	subs	r4, #4
  409406:	f855 7b04 	ldr.w	r7, [r5], #4
  40940a:	f846 7f04 	str.w	r7, [r6, #4]!
  40940e:	2c03      	cmp	r4, #3
  409410:	d8f8      	bhi.n	409404 <memmove+0x84>
  409412:	f1ae 0404 	sub.w	r4, lr, #4
  409416:	f024 0403 	bic.w	r4, r4, #3
  40941a:	3404      	adds	r4, #4
  40941c:	4421      	add	r1, r4
  40941e:	4423      	add	r3, r4
  409420:	f002 0203 	and.w	r2, r2, #3
  409424:	b162      	cbz	r2, 409440 <memmove+0xc0>
  409426:	3b01      	subs	r3, #1
  409428:	440a      	add	r2, r1
  40942a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40942e:	f803 4f01 	strb.w	r4, [r3, #1]!
  409432:	428a      	cmp	r2, r1
  409434:	d1f9      	bne.n	40942a <memmove+0xaa>
  409436:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409438:	4603      	mov	r3, r0
  40943a:	e7f3      	b.n	409424 <memmove+0xa4>
  40943c:	4603      	mov	r3, r0
  40943e:	e7f2      	b.n	409426 <memmove+0xa6>
  409440:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409442:	4672      	mov	r2, lr
  409444:	e7ee      	b.n	409424 <memmove+0xa4>
  409446:	bf00      	nop

00409448 <__malloc_lock>:
  409448:	4801      	ldr	r0, [pc, #4]	; (409450 <__malloc_lock+0x8>)
  40944a:	f7ff bbfd 	b.w	408c48 <__retarget_lock_acquire_recursive>
  40944e:	bf00      	nop
  409450:	2040c658 	.word	0x2040c658

00409454 <__malloc_unlock>:
  409454:	4801      	ldr	r0, [pc, #4]	; (40945c <__malloc_unlock+0x8>)
  409456:	f7ff bbf9 	b.w	408c4c <__retarget_lock_release_recursive>
  40945a:	bf00      	nop
  40945c:	2040c658 	.word	0x2040c658

00409460 <_realloc_r>:
  409460:	2900      	cmp	r1, #0
  409462:	f000 8095 	beq.w	409590 <_realloc_r+0x130>
  409466:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40946a:	460d      	mov	r5, r1
  40946c:	4616      	mov	r6, r2
  40946e:	b083      	sub	sp, #12
  409470:	4680      	mov	r8, r0
  409472:	f106 070b 	add.w	r7, r6, #11
  409476:	f7ff ffe7 	bl	409448 <__malloc_lock>
  40947a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40947e:	2f16      	cmp	r7, #22
  409480:	f02e 0403 	bic.w	r4, lr, #3
  409484:	f1a5 0908 	sub.w	r9, r5, #8
  409488:	d83c      	bhi.n	409504 <_realloc_r+0xa4>
  40948a:	2210      	movs	r2, #16
  40948c:	4617      	mov	r7, r2
  40948e:	42be      	cmp	r6, r7
  409490:	d83d      	bhi.n	40950e <_realloc_r+0xae>
  409492:	4294      	cmp	r4, r2
  409494:	da43      	bge.n	40951e <_realloc_r+0xbe>
  409496:	4bc4      	ldr	r3, [pc, #784]	; (4097a8 <_realloc_r+0x348>)
  409498:	6899      	ldr	r1, [r3, #8]
  40949a:	eb09 0004 	add.w	r0, r9, r4
  40949e:	4288      	cmp	r0, r1
  4094a0:	f000 80b4 	beq.w	40960c <_realloc_r+0x1ac>
  4094a4:	6843      	ldr	r3, [r0, #4]
  4094a6:	f023 0101 	bic.w	r1, r3, #1
  4094aa:	4401      	add	r1, r0
  4094ac:	6849      	ldr	r1, [r1, #4]
  4094ae:	07c9      	lsls	r1, r1, #31
  4094b0:	d54c      	bpl.n	40954c <_realloc_r+0xec>
  4094b2:	f01e 0f01 	tst.w	lr, #1
  4094b6:	f000 809b 	beq.w	4095f0 <_realloc_r+0x190>
  4094ba:	4631      	mov	r1, r6
  4094bc:	4640      	mov	r0, r8
  4094be:	f7ff fc47 	bl	408d50 <_malloc_r>
  4094c2:	4606      	mov	r6, r0
  4094c4:	2800      	cmp	r0, #0
  4094c6:	d03a      	beq.n	40953e <_realloc_r+0xde>
  4094c8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4094cc:	f023 0301 	bic.w	r3, r3, #1
  4094d0:	444b      	add	r3, r9
  4094d2:	f1a0 0208 	sub.w	r2, r0, #8
  4094d6:	429a      	cmp	r2, r3
  4094d8:	f000 8121 	beq.w	40971e <_realloc_r+0x2be>
  4094dc:	1f22      	subs	r2, r4, #4
  4094de:	2a24      	cmp	r2, #36	; 0x24
  4094e0:	f200 8107 	bhi.w	4096f2 <_realloc_r+0x292>
  4094e4:	2a13      	cmp	r2, #19
  4094e6:	f200 80db 	bhi.w	4096a0 <_realloc_r+0x240>
  4094ea:	4603      	mov	r3, r0
  4094ec:	462a      	mov	r2, r5
  4094ee:	6811      	ldr	r1, [r2, #0]
  4094f0:	6019      	str	r1, [r3, #0]
  4094f2:	6851      	ldr	r1, [r2, #4]
  4094f4:	6059      	str	r1, [r3, #4]
  4094f6:	6892      	ldr	r2, [r2, #8]
  4094f8:	609a      	str	r2, [r3, #8]
  4094fa:	4629      	mov	r1, r5
  4094fc:	4640      	mov	r0, r8
  4094fe:	f7ff f909 	bl	408714 <_free_r>
  409502:	e01c      	b.n	40953e <_realloc_r+0xde>
  409504:	f027 0707 	bic.w	r7, r7, #7
  409508:	2f00      	cmp	r7, #0
  40950a:	463a      	mov	r2, r7
  40950c:	dabf      	bge.n	40948e <_realloc_r+0x2e>
  40950e:	2600      	movs	r6, #0
  409510:	230c      	movs	r3, #12
  409512:	4630      	mov	r0, r6
  409514:	f8c8 3000 	str.w	r3, [r8]
  409518:	b003      	add	sp, #12
  40951a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40951e:	462e      	mov	r6, r5
  409520:	1be3      	subs	r3, r4, r7
  409522:	2b0f      	cmp	r3, #15
  409524:	d81e      	bhi.n	409564 <_realloc_r+0x104>
  409526:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40952a:	f003 0301 	and.w	r3, r3, #1
  40952e:	4323      	orrs	r3, r4
  409530:	444c      	add	r4, r9
  409532:	f8c9 3004 	str.w	r3, [r9, #4]
  409536:	6863      	ldr	r3, [r4, #4]
  409538:	f043 0301 	orr.w	r3, r3, #1
  40953c:	6063      	str	r3, [r4, #4]
  40953e:	4640      	mov	r0, r8
  409540:	f7ff ff88 	bl	409454 <__malloc_unlock>
  409544:	4630      	mov	r0, r6
  409546:	b003      	add	sp, #12
  409548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40954c:	f023 0303 	bic.w	r3, r3, #3
  409550:	18e1      	adds	r1, r4, r3
  409552:	4291      	cmp	r1, r2
  409554:	db1f      	blt.n	409596 <_realloc_r+0x136>
  409556:	68c3      	ldr	r3, [r0, #12]
  409558:	6882      	ldr	r2, [r0, #8]
  40955a:	462e      	mov	r6, r5
  40955c:	60d3      	str	r3, [r2, #12]
  40955e:	460c      	mov	r4, r1
  409560:	609a      	str	r2, [r3, #8]
  409562:	e7dd      	b.n	409520 <_realloc_r+0xc0>
  409564:	f8d9 2004 	ldr.w	r2, [r9, #4]
  409568:	eb09 0107 	add.w	r1, r9, r7
  40956c:	f002 0201 	and.w	r2, r2, #1
  409570:	444c      	add	r4, r9
  409572:	f043 0301 	orr.w	r3, r3, #1
  409576:	4317      	orrs	r7, r2
  409578:	f8c9 7004 	str.w	r7, [r9, #4]
  40957c:	604b      	str	r3, [r1, #4]
  40957e:	6863      	ldr	r3, [r4, #4]
  409580:	f043 0301 	orr.w	r3, r3, #1
  409584:	3108      	adds	r1, #8
  409586:	6063      	str	r3, [r4, #4]
  409588:	4640      	mov	r0, r8
  40958a:	f7ff f8c3 	bl	408714 <_free_r>
  40958e:	e7d6      	b.n	40953e <_realloc_r+0xde>
  409590:	4611      	mov	r1, r2
  409592:	f7ff bbdd 	b.w	408d50 <_malloc_r>
  409596:	f01e 0f01 	tst.w	lr, #1
  40959a:	d18e      	bne.n	4094ba <_realloc_r+0x5a>
  40959c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4095a0:	eba9 0a01 	sub.w	sl, r9, r1
  4095a4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4095a8:	f021 0103 	bic.w	r1, r1, #3
  4095ac:	440b      	add	r3, r1
  4095ae:	4423      	add	r3, r4
  4095b0:	4293      	cmp	r3, r2
  4095b2:	db25      	blt.n	409600 <_realloc_r+0x1a0>
  4095b4:	68c2      	ldr	r2, [r0, #12]
  4095b6:	6881      	ldr	r1, [r0, #8]
  4095b8:	4656      	mov	r6, sl
  4095ba:	60ca      	str	r2, [r1, #12]
  4095bc:	6091      	str	r1, [r2, #8]
  4095be:	f8da 100c 	ldr.w	r1, [sl, #12]
  4095c2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4095c6:	1f22      	subs	r2, r4, #4
  4095c8:	2a24      	cmp	r2, #36	; 0x24
  4095ca:	60c1      	str	r1, [r0, #12]
  4095cc:	6088      	str	r0, [r1, #8]
  4095ce:	f200 8094 	bhi.w	4096fa <_realloc_r+0x29a>
  4095d2:	2a13      	cmp	r2, #19
  4095d4:	d96f      	bls.n	4096b6 <_realloc_r+0x256>
  4095d6:	6829      	ldr	r1, [r5, #0]
  4095d8:	f8ca 1008 	str.w	r1, [sl, #8]
  4095dc:	6869      	ldr	r1, [r5, #4]
  4095de:	f8ca 100c 	str.w	r1, [sl, #12]
  4095e2:	2a1b      	cmp	r2, #27
  4095e4:	f200 80a2 	bhi.w	40972c <_realloc_r+0x2cc>
  4095e8:	3508      	adds	r5, #8
  4095ea:	f10a 0210 	add.w	r2, sl, #16
  4095ee:	e063      	b.n	4096b8 <_realloc_r+0x258>
  4095f0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4095f4:	eba9 0a03 	sub.w	sl, r9, r3
  4095f8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4095fc:	f021 0103 	bic.w	r1, r1, #3
  409600:	1863      	adds	r3, r4, r1
  409602:	4293      	cmp	r3, r2
  409604:	f6ff af59 	blt.w	4094ba <_realloc_r+0x5a>
  409608:	4656      	mov	r6, sl
  40960a:	e7d8      	b.n	4095be <_realloc_r+0x15e>
  40960c:	6841      	ldr	r1, [r0, #4]
  40960e:	f021 0b03 	bic.w	fp, r1, #3
  409612:	44a3      	add	fp, r4
  409614:	f107 0010 	add.w	r0, r7, #16
  409618:	4583      	cmp	fp, r0
  40961a:	da56      	bge.n	4096ca <_realloc_r+0x26a>
  40961c:	f01e 0f01 	tst.w	lr, #1
  409620:	f47f af4b 	bne.w	4094ba <_realloc_r+0x5a>
  409624:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409628:	eba9 0a01 	sub.w	sl, r9, r1
  40962c:	f8da 1004 	ldr.w	r1, [sl, #4]
  409630:	f021 0103 	bic.w	r1, r1, #3
  409634:	448b      	add	fp, r1
  409636:	4558      	cmp	r0, fp
  409638:	dce2      	bgt.n	409600 <_realloc_r+0x1a0>
  40963a:	4656      	mov	r6, sl
  40963c:	f8da 100c 	ldr.w	r1, [sl, #12]
  409640:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409644:	1f22      	subs	r2, r4, #4
  409646:	2a24      	cmp	r2, #36	; 0x24
  409648:	60c1      	str	r1, [r0, #12]
  40964a:	6088      	str	r0, [r1, #8]
  40964c:	f200 808f 	bhi.w	40976e <_realloc_r+0x30e>
  409650:	2a13      	cmp	r2, #19
  409652:	f240 808a 	bls.w	40976a <_realloc_r+0x30a>
  409656:	6829      	ldr	r1, [r5, #0]
  409658:	f8ca 1008 	str.w	r1, [sl, #8]
  40965c:	6869      	ldr	r1, [r5, #4]
  40965e:	f8ca 100c 	str.w	r1, [sl, #12]
  409662:	2a1b      	cmp	r2, #27
  409664:	f200 808a 	bhi.w	40977c <_realloc_r+0x31c>
  409668:	3508      	adds	r5, #8
  40966a:	f10a 0210 	add.w	r2, sl, #16
  40966e:	6829      	ldr	r1, [r5, #0]
  409670:	6011      	str	r1, [r2, #0]
  409672:	6869      	ldr	r1, [r5, #4]
  409674:	6051      	str	r1, [r2, #4]
  409676:	68a9      	ldr	r1, [r5, #8]
  409678:	6091      	str	r1, [r2, #8]
  40967a:	eb0a 0107 	add.w	r1, sl, r7
  40967e:	ebab 0207 	sub.w	r2, fp, r7
  409682:	f042 0201 	orr.w	r2, r2, #1
  409686:	6099      	str	r1, [r3, #8]
  409688:	604a      	str	r2, [r1, #4]
  40968a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40968e:	f003 0301 	and.w	r3, r3, #1
  409692:	431f      	orrs	r7, r3
  409694:	4640      	mov	r0, r8
  409696:	f8ca 7004 	str.w	r7, [sl, #4]
  40969a:	f7ff fedb 	bl	409454 <__malloc_unlock>
  40969e:	e751      	b.n	409544 <_realloc_r+0xe4>
  4096a0:	682b      	ldr	r3, [r5, #0]
  4096a2:	6003      	str	r3, [r0, #0]
  4096a4:	686b      	ldr	r3, [r5, #4]
  4096a6:	6043      	str	r3, [r0, #4]
  4096a8:	2a1b      	cmp	r2, #27
  4096aa:	d82d      	bhi.n	409708 <_realloc_r+0x2a8>
  4096ac:	f100 0308 	add.w	r3, r0, #8
  4096b0:	f105 0208 	add.w	r2, r5, #8
  4096b4:	e71b      	b.n	4094ee <_realloc_r+0x8e>
  4096b6:	4632      	mov	r2, r6
  4096b8:	6829      	ldr	r1, [r5, #0]
  4096ba:	6011      	str	r1, [r2, #0]
  4096bc:	6869      	ldr	r1, [r5, #4]
  4096be:	6051      	str	r1, [r2, #4]
  4096c0:	68a9      	ldr	r1, [r5, #8]
  4096c2:	6091      	str	r1, [r2, #8]
  4096c4:	461c      	mov	r4, r3
  4096c6:	46d1      	mov	r9, sl
  4096c8:	e72a      	b.n	409520 <_realloc_r+0xc0>
  4096ca:	eb09 0107 	add.w	r1, r9, r7
  4096ce:	ebab 0b07 	sub.w	fp, fp, r7
  4096d2:	f04b 0201 	orr.w	r2, fp, #1
  4096d6:	6099      	str	r1, [r3, #8]
  4096d8:	604a      	str	r2, [r1, #4]
  4096da:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4096de:	f003 0301 	and.w	r3, r3, #1
  4096e2:	431f      	orrs	r7, r3
  4096e4:	4640      	mov	r0, r8
  4096e6:	f845 7c04 	str.w	r7, [r5, #-4]
  4096ea:	f7ff feb3 	bl	409454 <__malloc_unlock>
  4096ee:	462e      	mov	r6, r5
  4096f0:	e728      	b.n	409544 <_realloc_r+0xe4>
  4096f2:	4629      	mov	r1, r5
  4096f4:	f7ff fe44 	bl	409380 <memmove>
  4096f8:	e6ff      	b.n	4094fa <_realloc_r+0x9a>
  4096fa:	4629      	mov	r1, r5
  4096fc:	4630      	mov	r0, r6
  4096fe:	461c      	mov	r4, r3
  409700:	46d1      	mov	r9, sl
  409702:	f7ff fe3d 	bl	409380 <memmove>
  409706:	e70b      	b.n	409520 <_realloc_r+0xc0>
  409708:	68ab      	ldr	r3, [r5, #8]
  40970a:	6083      	str	r3, [r0, #8]
  40970c:	68eb      	ldr	r3, [r5, #12]
  40970e:	60c3      	str	r3, [r0, #12]
  409710:	2a24      	cmp	r2, #36	; 0x24
  409712:	d017      	beq.n	409744 <_realloc_r+0x2e4>
  409714:	f100 0310 	add.w	r3, r0, #16
  409718:	f105 0210 	add.w	r2, r5, #16
  40971c:	e6e7      	b.n	4094ee <_realloc_r+0x8e>
  40971e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  409722:	f023 0303 	bic.w	r3, r3, #3
  409726:	441c      	add	r4, r3
  409728:	462e      	mov	r6, r5
  40972a:	e6f9      	b.n	409520 <_realloc_r+0xc0>
  40972c:	68a9      	ldr	r1, [r5, #8]
  40972e:	f8ca 1010 	str.w	r1, [sl, #16]
  409732:	68e9      	ldr	r1, [r5, #12]
  409734:	f8ca 1014 	str.w	r1, [sl, #20]
  409738:	2a24      	cmp	r2, #36	; 0x24
  40973a:	d00c      	beq.n	409756 <_realloc_r+0x2f6>
  40973c:	3510      	adds	r5, #16
  40973e:	f10a 0218 	add.w	r2, sl, #24
  409742:	e7b9      	b.n	4096b8 <_realloc_r+0x258>
  409744:	692b      	ldr	r3, [r5, #16]
  409746:	6103      	str	r3, [r0, #16]
  409748:	696b      	ldr	r3, [r5, #20]
  40974a:	6143      	str	r3, [r0, #20]
  40974c:	f105 0218 	add.w	r2, r5, #24
  409750:	f100 0318 	add.w	r3, r0, #24
  409754:	e6cb      	b.n	4094ee <_realloc_r+0x8e>
  409756:	692a      	ldr	r2, [r5, #16]
  409758:	f8ca 2018 	str.w	r2, [sl, #24]
  40975c:	696a      	ldr	r2, [r5, #20]
  40975e:	f8ca 201c 	str.w	r2, [sl, #28]
  409762:	3518      	adds	r5, #24
  409764:	f10a 0220 	add.w	r2, sl, #32
  409768:	e7a6      	b.n	4096b8 <_realloc_r+0x258>
  40976a:	4632      	mov	r2, r6
  40976c:	e77f      	b.n	40966e <_realloc_r+0x20e>
  40976e:	4629      	mov	r1, r5
  409770:	4630      	mov	r0, r6
  409772:	9301      	str	r3, [sp, #4]
  409774:	f7ff fe04 	bl	409380 <memmove>
  409778:	9b01      	ldr	r3, [sp, #4]
  40977a:	e77e      	b.n	40967a <_realloc_r+0x21a>
  40977c:	68a9      	ldr	r1, [r5, #8]
  40977e:	f8ca 1010 	str.w	r1, [sl, #16]
  409782:	68e9      	ldr	r1, [r5, #12]
  409784:	f8ca 1014 	str.w	r1, [sl, #20]
  409788:	2a24      	cmp	r2, #36	; 0x24
  40978a:	d003      	beq.n	409794 <_realloc_r+0x334>
  40978c:	3510      	adds	r5, #16
  40978e:	f10a 0218 	add.w	r2, sl, #24
  409792:	e76c      	b.n	40966e <_realloc_r+0x20e>
  409794:	692a      	ldr	r2, [r5, #16]
  409796:	f8ca 2018 	str.w	r2, [sl, #24]
  40979a:	696a      	ldr	r2, [r5, #20]
  40979c:	f8ca 201c 	str.w	r2, [sl, #28]
  4097a0:	3518      	adds	r5, #24
  4097a2:	f10a 0220 	add.w	r2, sl, #32
  4097a6:	e762      	b.n	40966e <_realloc_r+0x20e>
  4097a8:	204005c8 	.word	0x204005c8

004097ac <_sbrk_r>:
  4097ac:	b538      	push	{r3, r4, r5, lr}
  4097ae:	4c07      	ldr	r4, [pc, #28]	; (4097cc <_sbrk_r+0x20>)
  4097b0:	2300      	movs	r3, #0
  4097b2:	4605      	mov	r5, r0
  4097b4:	4608      	mov	r0, r1
  4097b6:	6023      	str	r3, [r4, #0]
  4097b8:	f7fa f9e4 	bl	403b84 <_sbrk>
  4097bc:	1c43      	adds	r3, r0, #1
  4097be:	d000      	beq.n	4097c2 <_sbrk_r+0x16>
  4097c0:	bd38      	pop	{r3, r4, r5, pc}
  4097c2:	6823      	ldr	r3, [r4, #0]
  4097c4:	2b00      	cmp	r3, #0
  4097c6:	d0fb      	beq.n	4097c0 <_sbrk_r+0x14>
  4097c8:	602b      	str	r3, [r5, #0]
  4097ca:	bd38      	pop	{r3, r4, r5, pc}
  4097cc:	2040c66c 	.word	0x2040c66c

004097d0 <__sread>:
  4097d0:	b510      	push	{r4, lr}
  4097d2:	460c      	mov	r4, r1
  4097d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4097d8:	f000 f9f6 	bl	409bc8 <_read_r>
  4097dc:	2800      	cmp	r0, #0
  4097de:	db03      	blt.n	4097e8 <__sread+0x18>
  4097e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4097e2:	4403      	add	r3, r0
  4097e4:	6523      	str	r3, [r4, #80]	; 0x50
  4097e6:	bd10      	pop	{r4, pc}
  4097e8:	89a3      	ldrh	r3, [r4, #12]
  4097ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4097ee:	81a3      	strh	r3, [r4, #12]
  4097f0:	bd10      	pop	{r4, pc}
  4097f2:	bf00      	nop

004097f4 <__swrite>:
  4097f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4097f8:	4616      	mov	r6, r2
  4097fa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4097fe:	461f      	mov	r7, r3
  409800:	05d3      	lsls	r3, r2, #23
  409802:	460c      	mov	r4, r1
  409804:	4605      	mov	r5, r0
  409806:	d507      	bpl.n	409818 <__swrite+0x24>
  409808:	2200      	movs	r2, #0
  40980a:	2302      	movs	r3, #2
  40980c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409810:	f000 f9c4 	bl	409b9c <_lseek_r>
  409814:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40981c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  409820:	81a2      	strh	r2, [r4, #12]
  409822:	463b      	mov	r3, r7
  409824:	4632      	mov	r2, r6
  409826:	4628      	mov	r0, r5
  409828:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40982c:	f000 b8a4 	b.w	409978 <_write_r>

00409830 <__sseek>:
  409830:	b510      	push	{r4, lr}
  409832:	460c      	mov	r4, r1
  409834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409838:	f000 f9b0 	bl	409b9c <_lseek_r>
  40983c:	89a3      	ldrh	r3, [r4, #12]
  40983e:	1c42      	adds	r2, r0, #1
  409840:	bf0e      	itee	eq
  409842:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  409846:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40984a:	6520      	strne	r0, [r4, #80]	; 0x50
  40984c:	81a3      	strh	r3, [r4, #12]
  40984e:	bd10      	pop	{r4, pc}

00409850 <__sclose>:
  409850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409854:	f000 b908 	b.w	409a68 <_close_r>

00409858 <__swbuf_r>:
  409858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40985a:	460d      	mov	r5, r1
  40985c:	4614      	mov	r4, r2
  40985e:	4606      	mov	r6, r0
  409860:	b110      	cbz	r0, 409868 <__swbuf_r+0x10>
  409862:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409864:	2b00      	cmp	r3, #0
  409866:	d04b      	beq.n	409900 <__swbuf_r+0xa8>
  409868:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40986c:	69a3      	ldr	r3, [r4, #24]
  40986e:	60a3      	str	r3, [r4, #8]
  409870:	b291      	uxth	r1, r2
  409872:	0708      	lsls	r0, r1, #28
  409874:	d539      	bpl.n	4098ea <__swbuf_r+0x92>
  409876:	6923      	ldr	r3, [r4, #16]
  409878:	2b00      	cmp	r3, #0
  40987a:	d036      	beq.n	4098ea <__swbuf_r+0x92>
  40987c:	b2ed      	uxtb	r5, r5
  40987e:	0489      	lsls	r1, r1, #18
  409880:	462f      	mov	r7, r5
  409882:	d515      	bpl.n	4098b0 <__swbuf_r+0x58>
  409884:	6822      	ldr	r2, [r4, #0]
  409886:	6961      	ldr	r1, [r4, #20]
  409888:	1ad3      	subs	r3, r2, r3
  40988a:	428b      	cmp	r3, r1
  40988c:	da1c      	bge.n	4098c8 <__swbuf_r+0x70>
  40988e:	3301      	adds	r3, #1
  409890:	68a1      	ldr	r1, [r4, #8]
  409892:	1c50      	adds	r0, r2, #1
  409894:	3901      	subs	r1, #1
  409896:	60a1      	str	r1, [r4, #8]
  409898:	6020      	str	r0, [r4, #0]
  40989a:	7015      	strb	r5, [r2, #0]
  40989c:	6962      	ldr	r2, [r4, #20]
  40989e:	429a      	cmp	r2, r3
  4098a0:	d01a      	beq.n	4098d8 <__swbuf_r+0x80>
  4098a2:	89a3      	ldrh	r3, [r4, #12]
  4098a4:	07db      	lsls	r3, r3, #31
  4098a6:	d501      	bpl.n	4098ac <__swbuf_r+0x54>
  4098a8:	2d0a      	cmp	r5, #10
  4098aa:	d015      	beq.n	4098d8 <__swbuf_r+0x80>
  4098ac:	4638      	mov	r0, r7
  4098ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4098b0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4098b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4098b6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4098ba:	81a2      	strh	r2, [r4, #12]
  4098bc:	6822      	ldr	r2, [r4, #0]
  4098be:	6661      	str	r1, [r4, #100]	; 0x64
  4098c0:	6961      	ldr	r1, [r4, #20]
  4098c2:	1ad3      	subs	r3, r2, r3
  4098c4:	428b      	cmp	r3, r1
  4098c6:	dbe2      	blt.n	40988e <__swbuf_r+0x36>
  4098c8:	4621      	mov	r1, r4
  4098ca:	4630      	mov	r0, r6
  4098cc:	f7fe fda4 	bl	408418 <_fflush_r>
  4098d0:	b940      	cbnz	r0, 4098e4 <__swbuf_r+0x8c>
  4098d2:	6822      	ldr	r2, [r4, #0]
  4098d4:	2301      	movs	r3, #1
  4098d6:	e7db      	b.n	409890 <__swbuf_r+0x38>
  4098d8:	4621      	mov	r1, r4
  4098da:	4630      	mov	r0, r6
  4098dc:	f7fe fd9c 	bl	408418 <_fflush_r>
  4098e0:	2800      	cmp	r0, #0
  4098e2:	d0e3      	beq.n	4098ac <__swbuf_r+0x54>
  4098e4:	f04f 37ff 	mov.w	r7, #4294967295
  4098e8:	e7e0      	b.n	4098ac <__swbuf_r+0x54>
  4098ea:	4621      	mov	r1, r4
  4098ec:	4630      	mov	r0, r6
  4098ee:	f7fe fc7f 	bl	4081f0 <__swsetup_r>
  4098f2:	2800      	cmp	r0, #0
  4098f4:	d1f6      	bne.n	4098e4 <__swbuf_r+0x8c>
  4098f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4098fa:	6923      	ldr	r3, [r4, #16]
  4098fc:	b291      	uxth	r1, r2
  4098fe:	e7bd      	b.n	40987c <__swbuf_r+0x24>
  409900:	f7fe fde2 	bl	4084c8 <__sinit>
  409904:	e7b0      	b.n	409868 <__swbuf_r+0x10>
  409906:	bf00      	nop

00409908 <_wcrtomb_r>:
  409908:	b5f0      	push	{r4, r5, r6, r7, lr}
  40990a:	4606      	mov	r6, r0
  40990c:	b085      	sub	sp, #20
  40990e:	461f      	mov	r7, r3
  409910:	b189      	cbz	r1, 409936 <_wcrtomb_r+0x2e>
  409912:	4c10      	ldr	r4, [pc, #64]	; (409954 <_wcrtomb_r+0x4c>)
  409914:	4d10      	ldr	r5, [pc, #64]	; (409958 <_wcrtomb_r+0x50>)
  409916:	6824      	ldr	r4, [r4, #0]
  409918:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40991a:	2c00      	cmp	r4, #0
  40991c:	bf08      	it	eq
  40991e:	462c      	moveq	r4, r5
  409920:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  409924:	47a0      	blx	r4
  409926:	1c43      	adds	r3, r0, #1
  409928:	d103      	bne.n	409932 <_wcrtomb_r+0x2a>
  40992a:	2200      	movs	r2, #0
  40992c:	238a      	movs	r3, #138	; 0x8a
  40992e:	603a      	str	r2, [r7, #0]
  409930:	6033      	str	r3, [r6, #0]
  409932:	b005      	add	sp, #20
  409934:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409936:	460c      	mov	r4, r1
  409938:	4906      	ldr	r1, [pc, #24]	; (409954 <_wcrtomb_r+0x4c>)
  40993a:	4a07      	ldr	r2, [pc, #28]	; (409958 <_wcrtomb_r+0x50>)
  40993c:	6809      	ldr	r1, [r1, #0]
  40993e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  409940:	2900      	cmp	r1, #0
  409942:	bf08      	it	eq
  409944:	4611      	moveq	r1, r2
  409946:	4622      	mov	r2, r4
  409948:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40994c:	a901      	add	r1, sp, #4
  40994e:	47a0      	blx	r4
  409950:	e7e9      	b.n	409926 <_wcrtomb_r+0x1e>
  409952:	bf00      	nop
  409954:	20400028 	.word	0x20400028
  409958:	2040045c 	.word	0x2040045c

0040995c <__ascii_wctomb>:
  40995c:	b121      	cbz	r1, 409968 <__ascii_wctomb+0xc>
  40995e:	2aff      	cmp	r2, #255	; 0xff
  409960:	d804      	bhi.n	40996c <__ascii_wctomb+0x10>
  409962:	700a      	strb	r2, [r1, #0]
  409964:	2001      	movs	r0, #1
  409966:	4770      	bx	lr
  409968:	4608      	mov	r0, r1
  40996a:	4770      	bx	lr
  40996c:	238a      	movs	r3, #138	; 0x8a
  40996e:	6003      	str	r3, [r0, #0]
  409970:	f04f 30ff 	mov.w	r0, #4294967295
  409974:	4770      	bx	lr
  409976:	bf00      	nop

00409978 <_write_r>:
  409978:	b570      	push	{r4, r5, r6, lr}
  40997a:	460d      	mov	r5, r1
  40997c:	4c08      	ldr	r4, [pc, #32]	; (4099a0 <_write_r+0x28>)
  40997e:	4611      	mov	r1, r2
  409980:	4606      	mov	r6, r0
  409982:	461a      	mov	r2, r3
  409984:	4628      	mov	r0, r5
  409986:	2300      	movs	r3, #0
  409988:	6023      	str	r3, [r4, #0]
  40998a:	f7f9 fc5f 	bl	40324c <_write>
  40998e:	1c43      	adds	r3, r0, #1
  409990:	d000      	beq.n	409994 <_write_r+0x1c>
  409992:	bd70      	pop	{r4, r5, r6, pc}
  409994:	6823      	ldr	r3, [r4, #0]
  409996:	2b00      	cmp	r3, #0
  409998:	d0fb      	beq.n	409992 <_write_r+0x1a>
  40999a:	6033      	str	r3, [r6, #0]
  40999c:	bd70      	pop	{r4, r5, r6, pc}
  40999e:	bf00      	nop
  4099a0:	2040c66c 	.word	0x2040c66c

004099a4 <__register_exitproc>:
  4099a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4099a8:	4d2c      	ldr	r5, [pc, #176]	; (409a5c <__register_exitproc+0xb8>)
  4099aa:	4606      	mov	r6, r0
  4099ac:	6828      	ldr	r0, [r5, #0]
  4099ae:	4698      	mov	r8, r3
  4099b0:	460f      	mov	r7, r1
  4099b2:	4691      	mov	r9, r2
  4099b4:	f7ff f948 	bl	408c48 <__retarget_lock_acquire_recursive>
  4099b8:	4b29      	ldr	r3, [pc, #164]	; (409a60 <__register_exitproc+0xbc>)
  4099ba:	681c      	ldr	r4, [r3, #0]
  4099bc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4099c0:	2b00      	cmp	r3, #0
  4099c2:	d03e      	beq.n	409a42 <__register_exitproc+0x9e>
  4099c4:	685a      	ldr	r2, [r3, #4]
  4099c6:	2a1f      	cmp	r2, #31
  4099c8:	dc1c      	bgt.n	409a04 <__register_exitproc+0x60>
  4099ca:	f102 0e01 	add.w	lr, r2, #1
  4099ce:	b176      	cbz	r6, 4099ee <__register_exitproc+0x4a>
  4099d0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4099d4:	2401      	movs	r4, #1
  4099d6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4099da:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4099de:	4094      	lsls	r4, r2
  4099e0:	4320      	orrs	r0, r4
  4099e2:	2e02      	cmp	r6, #2
  4099e4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4099e8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4099ec:	d023      	beq.n	409a36 <__register_exitproc+0x92>
  4099ee:	3202      	adds	r2, #2
  4099f0:	f8c3 e004 	str.w	lr, [r3, #4]
  4099f4:	6828      	ldr	r0, [r5, #0]
  4099f6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4099fa:	f7ff f927 	bl	408c4c <__retarget_lock_release_recursive>
  4099fe:	2000      	movs	r0, #0
  409a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409a04:	4b17      	ldr	r3, [pc, #92]	; (409a64 <__register_exitproc+0xc0>)
  409a06:	b30b      	cbz	r3, 409a4c <__register_exitproc+0xa8>
  409a08:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409a0c:	f7ff f998 	bl	408d40 <malloc>
  409a10:	4603      	mov	r3, r0
  409a12:	b1d8      	cbz	r0, 409a4c <__register_exitproc+0xa8>
  409a14:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  409a18:	6002      	str	r2, [r0, #0]
  409a1a:	2100      	movs	r1, #0
  409a1c:	6041      	str	r1, [r0, #4]
  409a1e:	460a      	mov	r2, r1
  409a20:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  409a24:	f04f 0e01 	mov.w	lr, #1
  409a28:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  409a2c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  409a30:	2e00      	cmp	r6, #0
  409a32:	d0dc      	beq.n	4099ee <__register_exitproc+0x4a>
  409a34:	e7cc      	b.n	4099d0 <__register_exitproc+0x2c>
  409a36:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  409a3a:	430c      	orrs	r4, r1
  409a3c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  409a40:	e7d5      	b.n	4099ee <__register_exitproc+0x4a>
  409a42:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  409a46:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  409a4a:	e7bb      	b.n	4099c4 <__register_exitproc+0x20>
  409a4c:	6828      	ldr	r0, [r5, #0]
  409a4e:	f7ff f8fd 	bl	408c4c <__retarget_lock_release_recursive>
  409a52:	f04f 30ff 	mov.w	r0, #4294967295
  409a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409a5a:	bf00      	nop
  409a5c:	20400458 	.word	0x20400458
  409a60:	0040a700 	.word	0x0040a700
  409a64:	00408d41 	.word	0x00408d41

00409a68 <_close_r>:
  409a68:	b538      	push	{r3, r4, r5, lr}
  409a6a:	4c07      	ldr	r4, [pc, #28]	; (409a88 <_close_r+0x20>)
  409a6c:	2300      	movs	r3, #0
  409a6e:	4605      	mov	r5, r0
  409a70:	4608      	mov	r0, r1
  409a72:	6023      	str	r3, [r4, #0]
  409a74:	f7fa f8a2 	bl	403bbc <_close>
  409a78:	1c43      	adds	r3, r0, #1
  409a7a:	d000      	beq.n	409a7e <_close_r+0x16>
  409a7c:	bd38      	pop	{r3, r4, r5, pc}
  409a7e:	6823      	ldr	r3, [r4, #0]
  409a80:	2b00      	cmp	r3, #0
  409a82:	d0fb      	beq.n	409a7c <_close_r+0x14>
  409a84:	602b      	str	r3, [r5, #0]
  409a86:	bd38      	pop	{r3, r4, r5, pc}
  409a88:	2040c66c 	.word	0x2040c66c

00409a8c <_fclose_r>:
  409a8c:	b570      	push	{r4, r5, r6, lr}
  409a8e:	b159      	cbz	r1, 409aa8 <_fclose_r+0x1c>
  409a90:	4605      	mov	r5, r0
  409a92:	460c      	mov	r4, r1
  409a94:	b110      	cbz	r0, 409a9c <_fclose_r+0x10>
  409a96:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409a98:	2b00      	cmp	r3, #0
  409a9a:	d03c      	beq.n	409b16 <_fclose_r+0x8a>
  409a9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409a9e:	07d8      	lsls	r0, r3, #31
  409aa0:	d505      	bpl.n	409aae <_fclose_r+0x22>
  409aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409aa6:	b92b      	cbnz	r3, 409ab4 <_fclose_r+0x28>
  409aa8:	2600      	movs	r6, #0
  409aaa:	4630      	mov	r0, r6
  409aac:	bd70      	pop	{r4, r5, r6, pc}
  409aae:	89a3      	ldrh	r3, [r4, #12]
  409ab0:	0599      	lsls	r1, r3, #22
  409ab2:	d53c      	bpl.n	409b2e <_fclose_r+0xa2>
  409ab4:	4621      	mov	r1, r4
  409ab6:	4628      	mov	r0, r5
  409ab8:	f7fe fc0e 	bl	4082d8 <__sflush_r>
  409abc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  409abe:	4606      	mov	r6, r0
  409ac0:	b133      	cbz	r3, 409ad0 <_fclose_r+0x44>
  409ac2:	69e1      	ldr	r1, [r4, #28]
  409ac4:	4628      	mov	r0, r5
  409ac6:	4798      	blx	r3
  409ac8:	2800      	cmp	r0, #0
  409aca:	bfb8      	it	lt
  409acc:	f04f 36ff 	movlt.w	r6, #4294967295
  409ad0:	89a3      	ldrh	r3, [r4, #12]
  409ad2:	061a      	lsls	r2, r3, #24
  409ad4:	d422      	bmi.n	409b1c <_fclose_r+0x90>
  409ad6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  409ad8:	b141      	cbz	r1, 409aec <_fclose_r+0x60>
  409ada:	f104 0340 	add.w	r3, r4, #64	; 0x40
  409ade:	4299      	cmp	r1, r3
  409ae0:	d002      	beq.n	409ae8 <_fclose_r+0x5c>
  409ae2:	4628      	mov	r0, r5
  409ae4:	f7fe fe16 	bl	408714 <_free_r>
  409ae8:	2300      	movs	r3, #0
  409aea:	6323      	str	r3, [r4, #48]	; 0x30
  409aec:	6c61      	ldr	r1, [r4, #68]	; 0x44
  409aee:	b121      	cbz	r1, 409afa <_fclose_r+0x6e>
  409af0:	4628      	mov	r0, r5
  409af2:	f7fe fe0f 	bl	408714 <_free_r>
  409af6:	2300      	movs	r3, #0
  409af8:	6463      	str	r3, [r4, #68]	; 0x44
  409afa:	f7fe fd11 	bl	408520 <__sfp_lock_acquire>
  409afe:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409b00:	2200      	movs	r2, #0
  409b02:	07db      	lsls	r3, r3, #31
  409b04:	81a2      	strh	r2, [r4, #12]
  409b06:	d50e      	bpl.n	409b26 <_fclose_r+0x9a>
  409b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409b0a:	f7ff f89b 	bl	408c44 <__retarget_lock_close_recursive>
  409b0e:	f7fe fd0d 	bl	40852c <__sfp_lock_release>
  409b12:	4630      	mov	r0, r6
  409b14:	bd70      	pop	{r4, r5, r6, pc}
  409b16:	f7fe fcd7 	bl	4084c8 <__sinit>
  409b1a:	e7bf      	b.n	409a9c <_fclose_r+0x10>
  409b1c:	6921      	ldr	r1, [r4, #16]
  409b1e:	4628      	mov	r0, r5
  409b20:	f7fe fdf8 	bl	408714 <_free_r>
  409b24:	e7d7      	b.n	409ad6 <_fclose_r+0x4a>
  409b26:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409b28:	f7ff f890 	bl	408c4c <__retarget_lock_release_recursive>
  409b2c:	e7ec      	b.n	409b08 <_fclose_r+0x7c>
  409b2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409b30:	f7ff f88a 	bl	408c48 <__retarget_lock_acquire_recursive>
  409b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409b38:	2b00      	cmp	r3, #0
  409b3a:	d1bb      	bne.n	409ab4 <_fclose_r+0x28>
  409b3c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  409b3e:	f016 0601 	ands.w	r6, r6, #1
  409b42:	d1b1      	bne.n	409aa8 <_fclose_r+0x1c>
  409b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409b46:	f7ff f881 	bl	408c4c <__retarget_lock_release_recursive>
  409b4a:	4630      	mov	r0, r6
  409b4c:	bd70      	pop	{r4, r5, r6, pc}
  409b4e:	bf00      	nop

00409b50 <_fstat_r>:
  409b50:	b538      	push	{r3, r4, r5, lr}
  409b52:	460b      	mov	r3, r1
  409b54:	4c07      	ldr	r4, [pc, #28]	; (409b74 <_fstat_r+0x24>)
  409b56:	4605      	mov	r5, r0
  409b58:	4611      	mov	r1, r2
  409b5a:	4618      	mov	r0, r3
  409b5c:	2300      	movs	r3, #0
  409b5e:	6023      	str	r3, [r4, #0]
  409b60:	f7fa f82f 	bl	403bc2 <_fstat>
  409b64:	1c43      	adds	r3, r0, #1
  409b66:	d000      	beq.n	409b6a <_fstat_r+0x1a>
  409b68:	bd38      	pop	{r3, r4, r5, pc}
  409b6a:	6823      	ldr	r3, [r4, #0]
  409b6c:	2b00      	cmp	r3, #0
  409b6e:	d0fb      	beq.n	409b68 <_fstat_r+0x18>
  409b70:	602b      	str	r3, [r5, #0]
  409b72:	bd38      	pop	{r3, r4, r5, pc}
  409b74:	2040c66c 	.word	0x2040c66c

00409b78 <_isatty_r>:
  409b78:	b538      	push	{r3, r4, r5, lr}
  409b7a:	4c07      	ldr	r4, [pc, #28]	; (409b98 <_isatty_r+0x20>)
  409b7c:	2300      	movs	r3, #0
  409b7e:	4605      	mov	r5, r0
  409b80:	4608      	mov	r0, r1
  409b82:	6023      	str	r3, [r4, #0]
  409b84:	f7fa f822 	bl	403bcc <_isatty>
  409b88:	1c43      	adds	r3, r0, #1
  409b8a:	d000      	beq.n	409b8e <_isatty_r+0x16>
  409b8c:	bd38      	pop	{r3, r4, r5, pc}
  409b8e:	6823      	ldr	r3, [r4, #0]
  409b90:	2b00      	cmp	r3, #0
  409b92:	d0fb      	beq.n	409b8c <_isatty_r+0x14>
  409b94:	602b      	str	r3, [r5, #0]
  409b96:	bd38      	pop	{r3, r4, r5, pc}
  409b98:	2040c66c 	.word	0x2040c66c

00409b9c <_lseek_r>:
  409b9c:	b570      	push	{r4, r5, r6, lr}
  409b9e:	460d      	mov	r5, r1
  409ba0:	4c08      	ldr	r4, [pc, #32]	; (409bc4 <_lseek_r+0x28>)
  409ba2:	4611      	mov	r1, r2
  409ba4:	4606      	mov	r6, r0
  409ba6:	461a      	mov	r2, r3
  409ba8:	4628      	mov	r0, r5
  409baa:	2300      	movs	r3, #0
  409bac:	6023      	str	r3, [r4, #0]
  409bae:	f7fa f80f 	bl	403bd0 <_lseek>
  409bb2:	1c43      	adds	r3, r0, #1
  409bb4:	d000      	beq.n	409bb8 <_lseek_r+0x1c>
  409bb6:	bd70      	pop	{r4, r5, r6, pc}
  409bb8:	6823      	ldr	r3, [r4, #0]
  409bba:	2b00      	cmp	r3, #0
  409bbc:	d0fb      	beq.n	409bb6 <_lseek_r+0x1a>
  409bbe:	6033      	str	r3, [r6, #0]
  409bc0:	bd70      	pop	{r4, r5, r6, pc}
  409bc2:	bf00      	nop
  409bc4:	2040c66c 	.word	0x2040c66c

00409bc8 <_read_r>:
  409bc8:	b570      	push	{r4, r5, r6, lr}
  409bca:	460d      	mov	r5, r1
  409bcc:	4c08      	ldr	r4, [pc, #32]	; (409bf0 <_read_r+0x28>)
  409bce:	4611      	mov	r1, r2
  409bd0:	4606      	mov	r6, r0
  409bd2:	461a      	mov	r2, r3
  409bd4:	4628      	mov	r0, r5
  409bd6:	2300      	movs	r3, #0
  409bd8:	6023      	str	r3, [r4, #0]
  409bda:	f7f9 fb19 	bl	403210 <_read>
  409bde:	1c43      	adds	r3, r0, #1
  409be0:	d000      	beq.n	409be4 <_read_r+0x1c>
  409be2:	bd70      	pop	{r4, r5, r6, pc}
  409be4:	6823      	ldr	r3, [r4, #0]
  409be6:	2b00      	cmp	r3, #0
  409be8:	d0fb      	beq.n	409be2 <_read_r+0x1a>
  409bea:	6033      	str	r3, [r6, #0]
  409bec:	bd70      	pop	{r4, r5, r6, pc}
  409bee:	bf00      	nop
  409bf0:	2040c66c 	.word	0x2040c66c

00409bf4 <__aeabi_uldivmod>:
  409bf4:	b953      	cbnz	r3, 409c0c <__aeabi_uldivmod+0x18>
  409bf6:	b94a      	cbnz	r2, 409c0c <__aeabi_uldivmod+0x18>
  409bf8:	2900      	cmp	r1, #0
  409bfa:	bf08      	it	eq
  409bfc:	2800      	cmpeq	r0, #0
  409bfe:	bf1c      	itt	ne
  409c00:	f04f 31ff 	movne.w	r1, #4294967295
  409c04:	f04f 30ff 	movne.w	r0, #4294967295
  409c08:	f000 b97a 	b.w	409f00 <__aeabi_idiv0>
  409c0c:	f1ad 0c08 	sub.w	ip, sp, #8
  409c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  409c14:	f000 f806 	bl	409c24 <__udivmoddi4>
  409c18:	f8dd e004 	ldr.w	lr, [sp, #4]
  409c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409c20:	b004      	add	sp, #16
  409c22:	4770      	bx	lr

00409c24 <__udivmoddi4>:
  409c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409c28:	468c      	mov	ip, r1
  409c2a:	460d      	mov	r5, r1
  409c2c:	4604      	mov	r4, r0
  409c2e:	9e08      	ldr	r6, [sp, #32]
  409c30:	2b00      	cmp	r3, #0
  409c32:	d151      	bne.n	409cd8 <__udivmoddi4+0xb4>
  409c34:	428a      	cmp	r2, r1
  409c36:	4617      	mov	r7, r2
  409c38:	d96d      	bls.n	409d16 <__udivmoddi4+0xf2>
  409c3a:	fab2 fe82 	clz	lr, r2
  409c3e:	f1be 0f00 	cmp.w	lr, #0
  409c42:	d00b      	beq.n	409c5c <__udivmoddi4+0x38>
  409c44:	f1ce 0c20 	rsb	ip, lr, #32
  409c48:	fa01 f50e 	lsl.w	r5, r1, lr
  409c4c:	fa20 fc0c 	lsr.w	ip, r0, ip
  409c50:	fa02 f70e 	lsl.w	r7, r2, lr
  409c54:	ea4c 0c05 	orr.w	ip, ip, r5
  409c58:	fa00 f40e 	lsl.w	r4, r0, lr
  409c5c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  409c60:	0c25      	lsrs	r5, r4, #16
  409c62:	fbbc f8fa 	udiv	r8, ip, sl
  409c66:	fa1f f987 	uxth.w	r9, r7
  409c6a:	fb0a cc18 	mls	ip, sl, r8, ip
  409c6e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  409c72:	fb08 f309 	mul.w	r3, r8, r9
  409c76:	42ab      	cmp	r3, r5
  409c78:	d90a      	bls.n	409c90 <__udivmoddi4+0x6c>
  409c7a:	19ed      	adds	r5, r5, r7
  409c7c:	f108 32ff 	add.w	r2, r8, #4294967295
  409c80:	f080 8123 	bcs.w	409eca <__udivmoddi4+0x2a6>
  409c84:	42ab      	cmp	r3, r5
  409c86:	f240 8120 	bls.w	409eca <__udivmoddi4+0x2a6>
  409c8a:	f1a8 0802 	sub.w	r8, r8, #2
  409c8e:	443d      	add	r5, r7
  409c90:	1aed      	subs	r5, r5, r3
  409c92:	b2a4      	uxth	r4, r4
  409c94:	fbb5 f0fa 	udiv	r0, r5, sl
  409c98:	fb0a 5510 	mls	r5, sl, r0, r5
  409c9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  409ca0:	fb00 f909 	mul.w	r9, r0, r9
  409ca4:	45a1      	cmp	r9, r4
  409ca6:	d909      	bls.n	409cbc <__udivmoddi4+0x98>
  409ca8:	19e4      	adds	r4, r4, r7
  409caa:	f100 33ff 	add.w	r3, r0, #4294967295
  409cae:	f080 810a 	bcs.w	409ec6 <__udivmoddi4+0x2a2>
  409cb2:	45a1      	cmp	r9, r4
  409cb4:	f240 8107 	bls.w	409ec6 <__udivmoddi4+0x2a2>
  409cb8:	3802      	subs	r0, #2
  409cba:	443c      	add	r4, r7
  409cbc:	eba4 0409 	sub.w	r4, r4, r9
  409cc0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409cc4:	2100      	movs	r1, #0
  409cc6:	2e00      	cmp	r6, #0
  409cc8:	d061      	beq.n	409d8e <__udivmoddi4+0x16a>
  409cca:	fa24 f40e 	lsr.w	r4, r4, lr
  409cce:	2300      	movs	r3, #0
  409cd0:	6034      	str	r4, [r6, #0]
  409cd2:	6073      	str	r3, [r6, #4]
  409cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409cd8:	428b      	cmp	r3, r1
  409cda:	d907      	bls.n	409cec <__udivmoddi4+0xc8>
  409cdc:	2e00      	cmp	r6, #0
  409cde:	d054      	beq.n	409d8a <__udivmoddi4+0x166>
  409ce0:	2100      	movs	r1, #0
  409ce2:	e886 0021 	stmia.w	r6, {r0, r5}
  409ce6:	4608      	mov	r0, r1
  409ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409cec:	fab3 f183 	clz	r1, r3
  409cf0:	2900      	cmp	r1, #0
  409cf2:	f040 808e 	bne.w	409e12 <__udivmoddi4+0x1ee>
  409cf6:	42ab      	cmp	r3, r5
  409cf8:	d302      	bcc.n	409d00 <__udivmoddi4+0xdc>
  409cfa:	4282      	cmp	r2, r0
  409cfc:	f200 80fa 	bhi.w	409ef4 <__udivmoddi4+0x2d0>
  409d00:	1a84      	subs	r4, r0, r2
  409d02:	eb65 0503 	sbc.w	r5, r5, r3
  409d06:	2001      	movs	r0, #1
  409d08:	46ac      	mov	ip, r5
  409d0a:	2e00      	cmp	r6, #0
  409d0c:	d03f      	beq.n	409d8e <__udivmoddi4+0x16a>
  409d0e:	e886 1010 	stmia.w	r6, {r4, ip}
  409d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409d16:	b912      	cbnz	r2, 409d1e <__udivmoddi4+0xfa>
  409d18:	2701      	movs	r7, #1
  409d1a:	fbb7 f7f2 	udiv	r7, r7, r2
  409d1e:	fab7 fe87 	clz	lr, r7
  409d22:	f1be 0f00 	cmp.w	lr, #0
  409d26:	d134      	bne.n	409d92 <__udivmoddi4+0x16e>
  409d28:	1beb      	subs	r3, r5, r7
  409d2a:	0c3a      	lsrs	r2, r7, #16
  409d2c:	fa1f fc87 	uxth.w	ip, r7
  409d30:	2101      	movs	r1, #1
  409d32:	fbb3 f8f2 	udiv	r8, r3, r2
  409d36:	0c25      	lsrs	r5, r4, #16
  409d38:	fb02 3318 	mls	r3, r2, r8, r3
  409d3c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409d40:	fb0c f308 	mul.w	r3, ip, r8
  409d44:	42ab      	cmp	r3, r5
  409d46:	d907      	bls.n	409d58 <__udivmoddi4+0x134>
  409d48:	19ed      	adds	r5, r5, r7
  409d4a:	f108 30ff 	add.w	r0, r8, #4294967295
  409d4e:	d202      	bcs.n	409d56 <__udivmoddi4+0x132>
  409d50:	42ab      	cmp	r3, r5
  409d52:	f200 80d1 	bhi.w	409ef8 <__udivmoddi4+0x2d4>
  409d56:	4680      	mov	r8, r0
  409d58:	1aed      	subs	r5, r5, r3
  409d5a:	b2a3      	uxth	r3, r4
  409d5c:	fbb5 f0f2 	udiv	r0, r5, r2
  409d60:	fb02 5510 	mls	r5, r2, r0, r5
  409d64:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  409d68:	fb0c fc00 	mul.w	ip, ip, r0
  409d6c:	45a4      	cmp	ip, r4
  409d6e:	d907      	bls.n	409d80 <__udivmoddi4+0x15c>
  409d70:	19e4      	adds	r4, r4, r7
  409d72:	f100 33ff 	add.w	r3, r0, #4294967295
  409d76:	d202      	bcs.n	409d7e <__udivmoddi4+0x15a>
  409d78:	45a4      	cmp	ip, r4
  409d7a:	f200 80b8 	bhi.w	409eee <__udivmoddi4+0x2ca>
  409d7e:	4618      	mov	r0, r3
  409d80:	eba4 040c 	sub.w	r4, r4, ip
  409d84:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409d88:	e79d      	b.n	409cc6 <__udivmoddi4+0xa2>
  409d8a:	4631      	mov	r1, r6
  409d8c:	4630      	mov	r0, r6
  409d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409d92:	f1ce 0420 	rsb	r4, lr, #32
  409d96:	fa05 f30e 	lsl.w	r3, r5, lr
  409d9a:	fa07 f70e 	lsl.w	r7, r7, lr
  409d9e:	fa20 f804 	lsr.w	r8, r0, r4
  409da2:	0c3a      	lsrs	r2, r7, #16
  409da4:	fa25 f404 	lsr.w	r4, r5, r4
  409da8:	ea48 0803 	orr.w	r8, r8, r3
  409dac:	fbb4 f1f2 	udiv	r1, r4, r2
  409db0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  409db4:	fb02 4411 	mls	r4, r2, r1, r4
  409db8:	fa1f fc87 	uxth.w	ip, r7
  409dbc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  409dc0:	fb01 f30c 	mul.w	r3, r1, ip
  409dc4:	42ab      	cmp	r3, r5
  409dc6:	fa00 f40e 	lsl.w	r4, r0, lr
  409dca:	d909      	bls.n	409de0 <__udivmoddi4+0x1bc>
  409dcc:	19ed      	adds	r5, r5, r7
  409dce:	f101 30ff 	add.w	r0, r1, #4294967295
  409dd2:	f080 808a 	bcs.w	409eea <__udivmoddi4+0x2c6>
  409dd6:	42ab      	cmp	r3, r5
  409dd8:	f240 8087 	bls.w	409eea <__udivmoddi4+0x2c6>
  409ddc:	3902      	subs	r1, #2
  409dde:	443d      	add	r5, r7
  409de0:	1aeb      	subs	r3, r5, r3
  409de2:	fa1f f588 	uxth.w	r5, r8
  409de6:	fbb3 f0f2 	udiv	r0, r3, r2
  409dea:	fb02 3310 	mls	r3, r2, r0, r3
  409dee:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409df2:	fb00 f30c 	mul.w	r3, r0, ip
  409df6:	42ab      	cmp	r3, r5
  409df8:	d907      	bls.n	409e0a <__udivmoddi4+0x1e6>
  409dfa:	19ed      	adds	r5, r5, r7
  409dfc:	f100 38ff 	add.w	r8, r0, #4294967295
  409e00:	d26f      	bcs.n	409ee2 <__udivmoddi4+0x2be>
  409e02:	42ab      	cmp	r3, r5
  409e04:	d96d      	bls.n	409ee2 <__udivmoddi4+0x2be>
  409e06:	3802      	subs	r0, #2
  409e08:	443d      	add	r5, r7
  409e0a:	1aeb      	subs	r3, r5, r3
  409e0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  409e10:	e78f      	b.n	409d32 <__udivmoddi4+0x10e>
  409e12:	f1c1 0720 	rsb	r7, r1, #32
  409e16:	fa22 f807 	lsr.w	r8, r2, r7
  409e1a:	408b      	lsls	r3, r1
  409e1c:	fa05 f401 	lsl.w	r4, r5, r1
  409e20:	ea48 0303 	orr.w	r3, r8, r3
  409e24:	fa20 fe07 	lsr.w	lr, r0, r7
  409e28:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  409e2c:	40fd      	lsrs	r5, r7
  409e2e:	ea4e 0e04 	orr.w	lr, lr, r4
  409e32:	fbb5 f9fc 	udiv	r9, r5, ip
  409e36:	ea4f 441e 	mov.w	r4, lr, lsr #16
  409e3a:	fb0c 5519 	mls	r5, ip, r9, r5
  409e3e:	fa1f f883 	uxth.w	r8, r3
  409e42:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  409e46:	fb09 f408 	mul.w	r4, r9, r8
  409e4a:	42ac      	cmp	r4, r5
  409e4c:	fa02 f201 	lsl.w	r2, r2, r1
  409e50:	fa00 fa01 	lsl.w	sl, r0, r1
  409e54:	d908      	bls.n	409e68 <__udivmoddi4+0x244>
  409e56:	18ed      	adds	r5, r5, r3
  409e58:	f109 30ff 	add.w	r0, r9, #4294967295
  409e5c:	d243      	bcs.n	409ee6 <__udivmoddi4+0x2c2>
  409e5e:	42ac      	cmp	r4, r5
  409e60:	d941      	bls.n	409ee6 <__udivmoddi4+0x2c2>
  409e62:	f1a9 0902 	sub.w	r9, r9, #2
  409e66:	441d      	add	r5, r3
  409e68:	1b2d      	subs	r5, r5, r4
  409e6a:	fa1f fe8e 	uxth.w	lr, lr
  409e6e:	fbb5 f0fc 	udiv	r0, r5, ip
  409e72:	fb0c 5510 	mls	r5, ip, r0, r5
  409e76:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  409e7a:	fb00 f808 	mul.w	r8, r0, r8
  409e7e:	45a0      	cmp	r8, r4
  409e80:	d907      	bls.n	409e92 <__udivmoddi4+0x26e>
  409e82:	18e4      	adds	r4, r4, r3
  409e84:	f100 35ff 	add.w	r5, r0, #4294967295
  409e88:	d229      	bcs.n	409ede <__udivmoddi4+0x2ba>
  409e8a:	45a0      	cmp	r8, r4
  409e8c:	d927      	bls.n	409ede <__udivmoddi4+0x2ba>
  409e8e:	3802      	subs	r0, #2
  409e90:	441c      	add	r4, r3
  409e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  409e96:	eba4 0408 	sub.w	r4, r4, r8
  409e9a:	fba0 8902 	umull	r8, r9, r0, r2
  409e9e:	454c      	cmp	r4, r9
  409ea0:	46c6      	mov	lr, r8
  409ea2:	464d      	mov	r5, r9
  409ea4:	d315      	bcc.n	409ed2 <__udivmoddi4+0x2ae>
  409ea6:	d012      	beq.n	409ece <__udivmoddi4+0x2aa>
  409ea8:	b156      	cbz	r6, 409ec0 <__udivmoddi4+0x29c>
  409eaa:	ebba 030e 	subs.w	r3, sl, lr
  409eae:	eb64 0405 	sbc.w	r4, r4, r5
  409eb2:	fa04 f707 	lsl.w	r7, r4, r7
  409eb6:	40cb      	lsrs	r3, r1
  409eb8:	431f      	orrs	r7, r3
  409eba:	40cc      	lsrs	r4, r1
  409ebc:	6037      	str	r7, [r6, #0]
  409ebe:	6074      	str	r4, [r6, #4]
  409ec0:	2100      	movs	r1, #0
  409ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409ec6:	4618      	mov	r0, r3
  409ec8:	e6f8      	b.n	409cbc <__udivmoddi4+0x98>
  409eca:	4690      	mov	r8, r2
  409ecc:	e6e0      	b.n	409c90 <__udivmoddi4+0x6c>
  409ece:	45c2      	cmp	sl, r8
  409ed0:	d2ea      	bcs.n	409ea8 <__udivmoddi4+0x284>
  409ed2:	ebb8 0e02 	subs.w	lr, r8, r2
  409ed6:	eb69 0503 	sbc.w	r5, r9, r3
  409eda:	3801      	subs	r0, #1
  409edc:	e7e4      	b.n	409ea8 <__udivmoddi4+0x284>
  409ede:	4628      	mov	r0, r5
  409ee0:	e7d7      	b.n	409e92 <__udivmoddi4+0x26e>
  409ee2:	4640      	mov	r0, r8
  409ee4:	e791      	b.n	409e0a <__udivmoddi4+0x1e6>
  409ee6:	4681      	mov	r9, r0
  409ee8:	e7be      	b.n	409e68 <__udivmoddi4+0x244>
  409eea:	4601      	mov	r1, r0
  409eec:	e778      	b.n	409de0 <__udivmoddi4+0x1bc>
  409eee:	3802      	subs	r0, #2
  409ef0:	443c      	add	r4, r7
  409ef2:	e745      	b.n	409d80 <__udivmoddi4+0x15c>
  409ef4:	4608      	mov	r0, r1
  409ef6:	e708      	b.n	409d0a <__udivmoddi4+0xe6>
  409ef8:	f1a8 0802 	sub.w	r8, r8, #2
  409efc:	443d      	add	r5, r7
  409efe:	e72b      	b.n	409d58 <__udivmoddi4+0x134>

00409f00 <__aeabi_idiv0>:
  409f00:	4770      	bx	lr
  409f02:	bf00      	nop
  409f04:	454c4449 	.word	0x454c4449
  409f08:	00000000 	.word	0x00000000
  409f0c:	51726d54 	.word	0x51726d54
  409f10:	00000000 	.word	0x00000000
  409f14:	20726d54 	.word	0x20726d54
  409f18:	00637653 	.word	0x00637653
  409f1c:	3f000000 	.word	0x3f000000
  409f20:	42b40000 	.word	0x42b40000
  409f24:	42b40000 	.word	0x42b40000
  409f28:	00000000 	.word	0x00000000

00409f2c <sysfont_glyphs>:
  409f2c:	00000000 20000000 20202020 50502000     .......     . PP
  409f3c:	00000050 f8505000 5050f850 70a07820     P....PP.P.PP x.p
  409f4c:	c020f028 402010c8 90601898 90a840a0     (. ... @..`..@..
  409f5c:	40206068 00000000 40402010 40102040     h` @..... @@@ .@
  409f6c:	10101020 50004020 5020f820 20200000      ... @.P . P..  
  409f7c:	002020f8 00000000 00402060 00f80000     .  .....` @.....
  409f8c:	00000000 60000000 10080060 00804020     .......``... @..
  409f9c:	a8988870 207088c8 20202060 88707020     p.....p `    pp.
  409fac:	40201008 2010f8f8 70880810 90503010     .. @... ...p.0P.
  409fbc:	f81010f8 0808f080 40307088 8888f080     .........p0@....
  409fcc:	1008f870 40404020 70888870 70708888     p... @@@p..p..pp
  409fdc:	08788888 60006010 60600060 60600000     ..x..`.``.``..``
  409fec:	40206000 40201008 00081020 f800f800     .` @.. @ .......
  409ffc:	40800000 40201020 08887080 20002010     ...@ . @.p... . 
  40a00c:	68088870 7070a8a8 f8888888 88f08888     p..h..pp........
  40a01c:	8888f088 808870f0 70888080 888890e0     .....p.....p....
  40a02c:	f8e09088 80f08080 80f8f880 8080e080     ................
  40a03c:	80887080 70889880 f8888888 70888888     .p.....p.......p
  40a04c:	20202020 10387020 90101010 a0908860          p8.....`...
  40a05c:	8890a0c0 80808080 88f88080 8888a8d8     ................
  40a06c:	88888888 8898a8c8 88887088 70888888     .........p.....p
  40a07c:	f08888f0 70808080 a8888888 88f06890     .......p.....h..
  40a08c:	90a0f088 80807888 f0080870 202020f8     .....x..p....   
  40a09c:	88202020 88888888 88887088 50888888        ......p.....P
  40a0ac:	88888820 88d8a8a8 20508888 88888850      .........P P...
  40a0bc:	20205088 08f82020 80402010 202038f8     .P    ... @..8  
  40a0cc:	38202020 20408000 e0000810 20202020        8..@ ....    
  40a0dc:	5020e020 00000088 00000000 f8000000      . P............
  40a0ec:	00102040 00000000 78087000 80807888     @ .......p.x.x..
  40a0fc:	8888c8b0 700000f0 70888080 98680808     .......p...p..h.
  40a10c:	00788888 f8887000 48307080 4040e040     ..x..p...p0H@.@@
  40a11c:	78000040 30087888 c8b08080 20888888     @..x.x.0....... 
  40a12c:	20206000 00107020 90101030 48404060     .`   p..0...`@@H
  40a13c:	48506050 20202060 00702020 a8a8d000     P`PH`     p.....
  40a14c:	00008888 8888c8b0 70000088 70888888     ...........p...p
  40a15c:	88f00000 008080f0 78986800 00000808     .........h.x....
  40a16c:	8080c8b0 70000080 f0087080 40e04040     .......p.p..@@.@
  40a17c:	00304840 88888800 00006898 50888888     @H0......h.....P
  40a18c:	88000020 50a8a888 50880000 00885020      ......P...P P..
  40a19c:	78888800 00007008 402010f8 202010f8     ...x.p.... @..  
  40a1ac:	10202040 20202020 40202020 20102020     @  .       @  . 
  40a1bc:	00004020 00756d69 6c696146 74206465      @..imu.Failed t
  40a1cc:	7263206f 65746165 656c6f20 6d692064     o create oled im
  40a1dc:	000a0d75 73756f68 6f645f65 00006e77     u...house_down..
  40a1ec:	6c696146 74206465 7263206f 65746165     Failed to create
  40a1fc:	4f486020 20455355 4e574f44 00000a0d      `HOUSE DOWN....
  40a20c:	6569726f 6361746e 00006f61 6c696146     orientacao..Fail
  40a21c:	74206465 7263206f 65746165 49524f20     ed to create ORI
  40a22c:	41544e45 4e4f4954 00000a0d 686c6166     ENTATION....falh
  40a23c:	6d652061 69726320 6f207261 6d657320     a em criar o sem
  40a24c:	726f6661 000a206f 5252455b 5b205d4f     aforo ..[ERRO] [
  40a25c:	5d633269 65725b20 205d6461 0000000a     i2c] [read] ....
  40a26c:	4441445b 5b205d4f 5d633269 3a782520     [DADO] [i2c] %x:
  40a27c:	00007825 65637573 006f7373 5252455b     %x..sucesso.[ERR
  40a28c:	5b205d4f 5d633269 72775b20 5d657469     O] [i2c] [write]
  40a29c:	00000a20 51206d45 00000021 6c6c6f52      ...Em Q!...Roll
  40a2ac:	2e302520 202c6631 63746950 30252068      %0.1f, Pitch %0
  40a2bc:	2c66312e 77615920 2e302520 000a6631     .1f, Yaw %0.1f..
  40a2cc:	75717365 61647265 00000000 6e657266     esquerda....fren
  40a2dc:	00006574 65726964 00617469 63617473     te..direita.stac
  40a2ec:	766f206b 6c667265 2520776f 73252078     k overflow %x %s
  40a2fc:	00000a0d 74727173 00000000 6e697361     ....sqrt....asin
  40a30c:	00000066                                f...

0040a310 <npio2_hw>:
  40a310:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
  40a320:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
  40a330:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
  40a340:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
  40a350:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
  40a360:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
  40a370:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
  40a380:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

0040a390 <two_over_pi>:
  40a390:	000000a2 000000f9 00000083 0000006e     ............n...
  40a3a0:	0000004e 00000044 00000015 00000029     N...D.......)...
  40a3b0:	000000fc 00000027 00000057 000000d1     ....'...W.......
  40a3c0:	000000f5 00000034 000000dd 000000c0     ....4...........
  40a3d0:	000000db 00000062 00000095 00000099     ....b...........
  40a3e0:	0000003c 00000043 00000090 00000041     <...C.......A...
  40a3f0:	000000fe 00000051 00000063 000000ab     ....Q...c.......
  40a400:	000000de 000000bb 000000c5 00000061     ............a...
  40a410:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
  40a420:	00000042 0000004d 000000d2 000000e0     B...M...........
  40a430:	00000006 00000049 0000002e 000000ea     ....I...........
  40a440:	00000009 000000d1 00000092 0000001c     ................
  40a450:	000000fe 0000001d 000000eb 0000001c     ................
  40a460:	000000b1 00000029 000000a7 0000003e     ....).......>...
  40a470:	000000e8 00000082 00000035 000000f5     ........5.......
  40a480:	0000002e 000000bb 00000044 00000084     ........D.......
  40a490:	000000e9 0000009c 00000070 00000026     ........p...&...
  40a4a0:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
  40a4b0:	00000039 00000091 000000d6 00000039     9...........9...
  40a4c0:	00000083 00000053 00000039 000000f4     ....S...9.......
  40a4d0:	0000009c 00000084 0000005f 0000008b     ........_.......
  40a4e0:	000000bd 000000f9 00000028 0000003b     ........(...;...
  40a4f0:	0000001f 000000f8 00000097 000000ff     ................
  40a500:	000000de 00000005 00000098 0000000f     ................
  40a510:	000000ef 0000002f 00000011 0000008b     ..../...........
  40a520:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
  40a530:	0000006d 00000036 0000007e 000000cf     m...6...~.......
  40a540:	00000027 000000cb 00000009 000000b7     '...............
  40a550:	0000004f 00000046 0000003f 00000066     O...F...?...f...
  40a560:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
  40a570:	00000075 00000027 000000ba 000000c7     u...'...........
  40a580:	000000eb 000000e5 000000f1 0000007b     ............{...
  40a590:	0000003d 00000007 00000039 000000f7     =.......9.......
  40a5a0:	0000008a 00000052 00000092 000000ea     ....R...........
  40a5b0:	0000006b 000000fb 0000005f 000000b1     k......._.......
  40a5c0:	0000001f 0000008d 0000005d 00000008     ........].......
  40a5d0:	00000056 00000003 00000030 00000046     V.......0...F...
  40a5e0:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
  40a5f0:	000000f0 000000cf 000000bc 00000020     ............ ...
  40a600:	0000009a 000000f4 00000036 0000001d     ........6.......
  40a610:	000000a9 000000e3 00000091 00000061     ............a...
  40a620:	0000005e 000000e6 0000001b 00000008     ^...............
  40a630:	00000065 00000099 00000085 0000005f     e..........._...
  40a640:	00000014 000000a0 00000068 00000040     ........h...@...
  40a650:	0000008d 000000ff 000000d8 00000080     ................
  40a660:	0000004d 00000073 00000027 00000031     M...s...'...1...
  40a670:	00000006 00000006 00000015 00000056     ............V...
  40a680:	000000ca 00000073 000000a8 000000c9     ....s...........
  40a690:	00000060 000000e2 0000007b 000000c0     `.......{.......
  40a6a0:	0000008c 0000006b                       ....k...

0040a6a8 <PIo2>:
  40a6a8:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
  40a6b8:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
  40a6c8:	1fc40000 1bc60000 17440000              ..........D.

0040a6d4 <init_jk>:
  40a6d4:	00000004 00000007 00000009              ............

0040a6e0 <atanhi>:
  40a6e0:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?

0040a6f0 <atanlo>:
  40a6f0:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

0040a700 <_global_impure_ptr>:
  40a700:	20400030 33323130 37363534 42413938     0.@ 0123456789AB
  40a710:	46454443 00000000 33323130 37363534     CDEF....01234567
  40a720:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40a730:	0000296c                                l)..

0040a734 <blanks.7217>:
  40a734:	20202020 20202020 20202020 20202020                     

0040a744 <zeroes.7218>:
  40a744:	30303030 30303030 30303030 30303030     0000000000000000
  40a754:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0040a764 <_ctype_>:
  40a764:	20202000 20202020 28282020 20282828     .         ((((( 
  40a774:	20202020 20202020 20202020 20202020                     
  40a784:	10108820 10101010 10101010 10101010      ...............
  40a794:	04040410 04040404 10040404 10101010     ................
  40a7a4:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40a7b4:	01010101 01010101 01010101 10101010     ................
  40a7c4:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40a7d4:	02020202 02020202 02020202 10101010     ................
  40a7e4:	00000020 00000000 00000000 00000000      ...............
	...

0040a868 <_init>:
  40a868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a86a:	bf00      	nop
  40a86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a86e:	bc08      	pop	{r3}
  40a870:	469e      	mov	lr, r3
  40a872:	4770      	bx	lr

0040a874 <__init_array_start>:
  40a874:	004082b9 	.word	0x004082b9

0040a878 <__frame_dummy_init_array_entry>:
  40a878:	00400165                                e.@.

0040a87c <_fini>:
  40a87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a87e:	bf00      	nop
  40a880:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a882:	bc08      	pop	{r3}
  40a884:	469e      	mov	lr, r3
  40a886:	4770      	bx	lr

0040a888 <__fini_array_start>:
  40a888:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <sysfont>:
20400010:	0000 0000 9f2c 0040 0706 7d20               ....,.@... }

2040001c <g_interrupt_enabled>:
2040001c:	0001 0000                                   ....

20400020 <SystemCoreClock>:
20400020:	0900 003d                                   ..=.

20400024 <__fdlib_version>:
20400024:	0001 0000                                   ....

20400028 <_impure_ptr>:
20400028:	0030 2040 0000 0000                         0.@ ....

20400030 <impure_data>:
20400030:	0000 0000 031c 2040 0384 2040 03ec 2040     ......@ ..@ ..@ 
	...
204000d8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400458 <__atexit_recursive_mutex>:
20400458:	c648 2040                                   H.@ 

2040045c <__global_locale>:
2040045c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040047c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040049c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040051c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040053c:	995d 0040 92b1 0040 0000 0000 a764 0040     ].@...@.....d.@.
2040054c:	a760 0040 9f08 0040 9f08 0040 9f08 0040     `.@...@...@...@.
2040055c:	9f08 0040 9f08 0040 9f08 0040 9f08 0040     ..@...@...@...@.
2040056c:	9f08 0040 9f08 0040 ffff ffff ffff ffff     ..@...@.........
2040057c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204005a4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005c8 <__malloc_av_>:
	...
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 
20400920:	0918 2040 0918 2040 0920 2040 0920 2040     ..@ ..@  .@  .@ 
20400930:	0928 2040 0928 2040 0930 2040 0930 2040     (.@ (.@ 0.@ 0.@ 
20400940:	0938 2040 0938 2040 0940 2040 0940 2040     8.@ 8.@ @.@ @.@ 
20400950:	0948 2040 0948 2040 0950 2040 0950 2040     H.@ H.@ P.@ P.@ 
20400960:	0958 2040 0958 2040 0960 2040 0960 2040     X.@ X.@ `.@ `.@ 
20400970:	0968 2040 0968 2040 0970 2040 0970 2040     h.@ h.@ p.@ p.@ 
20400980:	0978 2040 0978 2040 0980 2040 0980 2040     x.@ x.@ ..@ ..@ 
20400990:	0988 2040 0988 2040 0990 2040 0990 2040     ..@ ..@ ..@ ..@ 
204009a0:	0998 2040 0998 2040 09a0 2040 09a0 2040     ..@ ..@ ..@ ..@ 
204009b0:	09a8 2040 09a8 2040 09b0 2040 09b0 2040     ..@ ..@ ..@ ..@ 
204009c0:	09b8 2040 09b8 2040 09c0 2040 09c0 2040     ..@ ..@ ..@ ..@ 

204009d0 <__malloc_sbrk_base>:
204009d0:	ffff ffff                                   ....

204009d4 <__malloc_trim_threshold>:
204009d4:	0000 0002                                   ....
